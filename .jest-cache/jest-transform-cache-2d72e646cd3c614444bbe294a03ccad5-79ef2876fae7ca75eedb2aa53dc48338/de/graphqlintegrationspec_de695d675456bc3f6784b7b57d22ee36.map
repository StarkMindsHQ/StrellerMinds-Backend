{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\integration\\graphql.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\integration\\graphql.integration.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport type { INestApplication } from \"@nestjs/common\"\r\nimport request from \"supertest\"\r\n\r\nimport { GraphQLApiModule } from \"../../graphql.module\"\r\n\r\ndescribe(\"GraphQL Integration\", () => {\r\n  let app: INestApplication\r\n\r\n  beforeAll(async () => {\r\n    const moduleFixture: TestingModule = await Test.createTestingModule({\r\n      imports: [GraphQLApiModule],\r\n    }).compile()\r\n\r\n    app = moduleFixture.createNestApplication()\r\n    await app.init()\r\n  })\r\n\r\n  afterAll(async () => {\r\n    await app.close()\r\n  })\r\n\r\n  describe(\"Users Query\", () => {\r\n    it(\"should fetch users\", async () => {\r\n      const query = `\r\n        query GetUsers($limit: Int) {\r\n          users(limit: $limit) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            fullName\r\n            isActive\r\n            createdAt\r\n          }\r\n        }\r\n      `\r\n\r\n      const response = await request(app.getHttpServer())\r\n        .post(\"/graphql\")\r\n        .send({\r\n          query,\r\n          variables: { limit: 5 },\r\n        })\r\n        .expect(200)\r\n\r\n      expect(response.body.data).toBeDefined()\r\n      expect(response.body.data.users).toBeInstanceOf(Array)\r\n    })\r\n\r\n    it(\"should fetch user by id\", async () => {\r\n      const query = `\r\n        query GetUser($id: String!) {\r\n          user(id: $id) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            posts {\r\n              id\r\n              title\r\n              status\r\n            }\r\n          }\r\n        }\r\n      `\r\n\r\n      const response = await request(app.getHttpServer())\r\n        .post(\"/graphql\")\r\n        .send({\r\n          query,\r\n          variables: { id: \"test-user-id\" },\r\n        })\r\n        .expect(200)\r\n\r\n      expect(response.body.data).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe(\"Posts Query\", () => {\r\n    it(\"should fetch posts with author\", async () => {\r\n      const query = `\r\n        query GetPosts($limit: Int) {\r\n          posts(limit: $limit) {\r\n            id\r\n            title\r\n            content\r\n            status\r\n            author {\r\n              id\r\n              fullName\r\n              email\r\n            }\r\n            createdAt\r\n          }\r\n        }\r\n      `\r\n\r\n      const response = await request(app.getHttpServer())\r\n        .post(\"/graphql\")\r\n        .send({\r\n          query,\r\n          variables: { limit: 5 },\r\n        })\r\n        .expect(200)\r\n\r\n      expect(response.body.data).toBeDefined()\r\n      expect(response.body.data.posts).toBeInstanceOf(Array)\r\n    })\r\n  })\r\n\r\n  describe(\"Mutations\", () => {\r\n    it(\"should create a user\", async () => {\r\n      const mutation = `\r\n        mutation CreateUser($input: CreateUserInput!) {\r\n          createUser(input: $input) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            fullName\r\n            isActive\r\n          }\r\n        }\r\n      `\r\n\r\n      const response = await request(app.getHttpServer())\r\n        .post(\"/graphql\")\r\n        .send({\r\n          query: mutation,\r\n          variables: {\r\n            input: {\r\n              email: \"newuser@example.com\",\r\n              firstName: \"New\",\r\n              lastName: \"User\",\r\n            },\r\n          },\r\n        })\r\n        .expect(200)\r\n\r\n      expect(response.body.data).toBeDefined()\r\n      expect(response.body.data.createUser).toBeDefined()\r\n      expect(response.body.data.createUser.email).toBe(\"newuser@example.com\")\r\n    })\r\n  })\r\n\r\n  describe(\"Subscriptions\", () => {\r\n    it(\"should handle subscription connection\", async () => {\r\n      // This would require WebSocket testing setup\r\n      // For now, just test that the endpoint exists\r\n      const response = await request(app.getHttpServer()).get(\"/graphql\").expect(400)\r\n\r\n      // GraphQL endpoint should reject GET requests without query\r\n      expect(response.status).toBe(400)\r\n    })\r\n  })\r\n})\r\n"],"version":3}