{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\real-time-analytics.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\real-time-analytics.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { RealTimeAnalyticsService } from \"../services/real-time-analytics.service\"\r\nimport { AnalyticsGateway } from \"../gateways/analytics.gateway\"\r\nimport { EventType } from \"../entities/analytics-event.entity\"\r\n\r\ndescribe(\"RealTimeAnalyticsService\", () => {\r\n  let service: RealTimeAnalyticsService\r\n  let analyticsGateway: jest.Mocked<AnalyticsGateway>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        RealTimeAnalyticsService,\r\n        {\r\n          provide: AnalyticsGateway,\r\n          useValue: {\r\n            emitRealTimeEvent: jest.fn(),\r\n            emitRealTimeMetrics: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<RealTimeAnalyticsService>(RealTimeAnalyticsService)\r\n    analyticsGateway = module.get(AnalyticsGateway)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"processRealTimeEvent\", () => {\r\n    it(\"should process real-time event successfully\", async () => {\r\n      const eventData = {\r\n        eventType: EventType.USER_ACTION,\r\n        eventName: \"button_click\",\r\n        userId: \"user123\",\r\n        properties: { button: \"submit\" },\r\n        source: \"web\",\r\n        channel: \"organic\",\r\n      }\r\n\r\n      await service.processRealTimeEvent(eventData)\r\n\r\n      expect(analyticsGateway.emitRealTimeEvent).toHaveBeenCalledWith({\r\n        type: \"event\",\r\n        data: eventData,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"getCurrentMetrics\", () => {\r\n    it(\"should return current metrics\", async () => {\r\n      const metrics = await service.getCurrentMetrics()\r\n      expect(Array.isArray(metrics)).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe(\"getActiveUsers\", () => {\r\n    it(\"should return active users count\", async () => {\r\n      const count = await service.getActiveUsers()\r\n      expect(typeof count).toBe(\"number\")\r\n      expect(count).toBeGreaterThanOrEqual(0)\r\n    })\r\n  })\r\n\r\n  describe(\"getEventsPerSecond\", () => {\r\n    it(\"should return events per second\", async () => {\r\n      const eps = await service.getEventsPerSecond()\r\n      expect(typeof eps).toBe(\"number\")\r\n      expect(eps).toBeGreaterThanOrEqual(0)\r\n    })\r\n  })\r\n})\r\n"],"version":3}