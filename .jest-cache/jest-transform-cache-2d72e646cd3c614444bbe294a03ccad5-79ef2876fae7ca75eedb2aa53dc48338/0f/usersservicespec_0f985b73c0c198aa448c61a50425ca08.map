{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { UsersService } from './users.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { User } from '../entities/user.entity';\r\nimport { Repository } from 'typeorm';\r\nimport {\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { UserRole } from '../enums/userRole.enum';\r\nimport { AccountStatus } from '../enums/accountStatus.enum';\r\nimport { SharedUtilityService } from '../../common/services/shared-utility.service';\r\nimport { BaseService } from '../../common/services/base.service';\r\n\r\nconst mockUser: Partial<User> = {\r\n  id: '1',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  profileImageUrl: 'image.jpg',\r\n  password: 'hashedPassword123',\r\n  isInstructor: false,\r\n  bio: 'Test bio',\r\n  role: UserRole.STUDENT,\r\n  status: AccountStatus.ACTIVE,\r\n  username: 'testuser',\r\n  isEmailVerified: false,\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nconst mockCreateUserDto = {\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  password: 'Password123!',\r\n  profileImageUrl: 'image.jpg',\r\n  bio: 'Test bio',\r\n};\r\n\r\ndescribe('UsersService', () => {\r\n  let service: UsersService;\r\n  let repo: jest.Mocked<Repository<User>>;\r\n  let sharedUtilityService: jest.Mocked<SharedUtilityService>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UsersService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            findAndCount: jest.fn(),\r\n            update: jest.fn(),\r\n            softDelete: jest.fn(),\r\n            count: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: SharedUtilityService,\r\n          useValue: {\r\n            isValidEmail: jest.fn(),\r\n            validatePasswordStrength: jest.fn(),\r\n            sanitizeInput: jest.fn(),\r\n            removeEmptyValues: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<UsersService>(UsersService);\r\n    repo = module.get(getRepositoryToken(User));\r\n    sharedUtilityService = module.get(SharedUtilityService);\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create and return a new user if email does not exist', async () => {\r\n      // Mock shared utility service\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      sharedUtilityService.validatePasswordStrength.mockReturnValue({\r\n        isValid: true,\r\n        errors: [],\r\n      });\r\n      sharedUtilityService.sanitizeInput.mockImplementation((input) => input);\r\n\r\n      // Mock repository\r\n      repo.findOne.mockResolvedValue(null);\r\n      repo.create.mockReturnValue(mockUser as User);\r\n      repo.save.mockResolvedValue(mockUser as User);\r\n\r\n      const result = await service.create(mockCreateUserDto);\r\n\r\n      expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');\r\n      expect(sharedUtilityService.validatePasswordStrength).toHaveBeenCalledWith('Password123!');\r\n      expect(sharedUtilityService.sanitizeInput).toHaveBeenCalledTimes(3); // firstName, lastName, bio\r\n      expect(repo.findOne).toHaveBeenCalledWith({\r\n        where: { email: 'test@example.com' },\r\n        select: ['id', 'email'],\r\n      });\r\n      expect(repo.create).toHaveBeenCalled();\r\n      expect(repo.save).toHaveBeenCalled();\r\n      expect(result).toEqual(mockUser);\r\n    });\r\n\r\n    it('should throw ConflictException if user with email exists', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      sharedUtilityService.validatePasswordStrength.mockReturnValue({\r\n        isValid: true,\r\n        errors: [],\r\n      });\r\n\r\n      repo.findOne.mockResolvedValue(mockUser as User);\r\n\r\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(ConflictException);\r\n    });\r\n\r\n    it('should throw ConflictException if email format is invalid', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(false);\r\n\r\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(ConflictException);\r\n      expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');\r\n    });\r\n\r\n    it('should throw ConflictException if password validation fails', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      sharedUtilityService.validatePasswordStrength.mockReturnValue({\r\n        isValid: false,\r\n        errors: ['Password must be at least 8 characters long'],\r\n      });\r\n\r\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(ConflictException);\r\n      expect(sharedUtilityService.validatePasswordStrength).toHaveBeenCalledWith('Password123!');\r\n    });\r\n\r\n    it('should throw InternalServerErrorException on other errors', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      sharedUtilityService.validatePasswordStrength.mockReturnValue({\r\n        isValid: true,\r\n        errors: [],\r\n      });\r\n\r\n      repo.findOne.mockRejectedValue(new Error('DB error'));\r\n\r\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(InternalServerErrorException);\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return paginated users', async () => {\r\n      const mockUsers = [mockUser as User];\r\n      const mockResult = {\r\n        data: mockUsers,\r\n        total: 1,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 1,\r\n      };\r\n\r\n      // Mock the base service method\r\n      jest.spyOn(service as any, 'findEntitiesWithPagination').mockResolvedValue(mockResult);\r\n\r\n      const result = await service.findAll({ page: 1, limit: 10 });\r\n\r\n      expect(result).toEqual(mockResult);\r\n      expect((service as any).findEntitiesWithPagination).toHaveBeenCalledWith({\r\n        page: 1,\r\n        limit: 10,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n        order: { createdAt: 'DESC' },\r\n      });\r\n    });\r\n\r\n    it('should handle errors gracefully', async () => {\r\n      jest.spyOn(service as any, 'findEntitiesWithPagination').mockRejectedValue(new Error('DB error'));\r\n\r\n      await expect(service.findAll()).rejects.toThrow(InternalServerErrorException);\r\n    });\r\n  });\r\n\r\n  describe('findOne', () => {\r\n    it('should return user by ID', async () => {\r\n      jest.spyOn(service as any, 'findEntityById').mockResolvedValue(mockUser as User);\r\n\r\n      const result = await service.findOne('1');\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect((service as any).findEntityById).toHaveBeenCalledWith('1', []);\r\n    });\r\n\r\n    it('should return user with relations', async () => {\r\n      jest.spyOn(service as any, 'findEntityById').mockResolvedValue(mockUser as User);\r\n\r\n      const result = await service.findOne('1', ['profile', 'settings']);\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect((service as any).findEntityById).toHaveBeenCalledWith('1', ['profile', 'settings']);\r\n    });\r\n\r\n    it('should handle NotFoundException', async () => {\r\n      jest.spyOn(service as any, 'findEntityById').mockRejectedValue(new NotFoundException('User not found'));\r\n\r\n      await expect(service.findOne('1')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update user successfully', async () => {\r\n      const updateDto = { firstName: 'Updated', lastName: 'Name' };\r\n      const updatedUser = { ...mockUser, ...updateDto };\r\n\r\n      sharedUtilityService.removeEmptyValues.mockReturnValue(updateDto);\r\n      sharedUtilityService.sanitizeInput.mockImplementation((input) => input);\r\n      jest.spyOn(service as any, 'updateEntity').mockResolvedValue(updatedUser as User);\r\n\r\n      const result = await service.update('1', updateDto);\r\n\r\n      expect(result).toEqual(updatedUser);\r\n      expect(sharedUtilityService.removeEmptyValues).toHaveBeenCalledWith(updateDto);\r\n      expect((service as any).updateEntity).toHaveBeenCalledWith('1', updateDto);\r\n    });\r\n\r\n    it('should handle NotFoundException', async () => {\r\n      const updateDto = { firstName: 'Updated' };\r\n\r\n      jest.spyOn(service as any, 'updateEntity').mockRejectedValue(new NotFoundException('User not found'));\r\n\r\n      await expect(service.update('1', updateDto)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('delete', () => {\r\n    it('should delete user successfully', async () => {\r\n      jest.spyOn(service as any, 'deleteEntity').mockResolvedValue(undefined);\r\n\r\n      await service.delete('1');\r\n\r\n      expect((service as any).deleteEntity).toHaveBeenCalledWith('1');\r\n    });\r\n\r\n    it('should handle NotFoundException', async () => {\r\n      jest.spyOn(service as any, 'deleteEntity').mockRejectedValue(new NotFoundException('User not found'));\r\n\r\n      await expect(service.delete('1')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('findByEmail', () => {\r\n    it('should return user if found', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      repo.findOne.mockResolvedValue(mockUser as User);\r\n\r\n      const result = await service.findByEmail('test@example.com');\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');\r\n      expect(repo.findOne).toHaveBeenCalledWith({\r\n        where: { email: 'test@example.com' },\r\n        select: ['id', 'email', 'password', 'role', 'status'],\r\n      });\r\n    });\r\n\r\n    it('should return undefined if email is invalid', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(false);\r\n\r\n      const result = await service.findByEmail('invalid-email');\r\n\r\n      expect(result).toBeUndefined();\r\n      expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('invalid-email');\r\n    });\r\n\r\n    it('should return undefined on error', async () => {\r\n      sharedUtilityService.isValidEmail.mockReturnValue(true);\r\n      repo.findOne.mockRejectedValue(new Error('DB error'));\r\n\r\n      const result = await service.findByEmail('test@example.com');\r\n\r\n      expect(result).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('validateCredentials', () => {\r\n    it('should return true for valid credentials', async () => {\r\n      const user = { ...mockUser, password: 'hashedPassword123' };\r\n      jest.spyOn(service, 'findByEmail').mockResolvedValue(user as User);\r\n\r\n      // Mock bcrypt.compare (you might need to mock the bcrypt module)\r\n      const bcrypt = require('bcrypt');\r\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true);\r\n\r\n      const result = await service.validateCredentials('test@example.com', 'password123');\r\n\r\n      expect(result).toBe(true);\r\n      expect(service.findByEmail).toHaveBeenCalledWith('test@example.com');\r\n    });\r\n\r\n    it('should return false if user not found', async () => {\r\n      jest.spyOn(service, 'findByEmail').mockResolvedValue(undefined);\r\n\r\n      const result = await service.validateCredentials('test@example.com', 'password123');\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should return false if user has no password', async () => {\r\n      const user = { ...mockUser, password: undefined };\r\n      jest.spyOn(service, 'findByEmail').mockResolvedValue(user as User);\r\n\r\n      const result = await service.validateCredentials('test@example.com', 'password123');\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('findByCriteria', () => {\r\n    it('should return users matching criteria', async () => {\r\n      const criteria = { role: UserRole.STUDENT, status: AccountStatus.ACTIVE };\r\n      const mockUsers = [mockUser as User];\r\n\r\n      sharedUtilityService.sanitizeInput.mockImplementation((input) => input);\r\n      repo.find.mockResolvedValue(mockUsers);\r\n\r\n      const result = await service.findByCriteria(criteria);\r\n\r\n      expect(result).toEqual(mockUsers);\r\n      expect(sharedUtilityService.sanitizeInput).toHaveBeenCalledTimes(2); // role and status\r\n      expect(repo.find).toHaveBeenCalledWith({\r\n        where: criteria,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n      });\r\n    });\r\n\r\n    it('should return empty array on error', async () => {\r\n      const criteria = { role: UserRole.STUDENT };\r\n\r\n      sharedUtilityService.sanitizeInput.mockImplementation((input) => input);\r\n      repo.find.mockRejectedValue(new Error('DB error'));\r\n\r\n      const result = await service.findByCriteria(criteria);\r\n\r\n      expect(result).toEqual([]);\r\n    });\r\n  });\r\n});\r\n"],"version":3}