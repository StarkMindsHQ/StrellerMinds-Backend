826b1a82856f17befa384d5fc59992e3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const real_time_analytics_service_1 = require("../services/real-time-analytics.service");
const analytics_gateway_1 = require("../gateways/analytics.gateway");
const analytics_event_entity_1 = require("../entities/analytics-event.entity");
describe("RealTimeAnalyticsService", () => {
    let service;
    let analyticsGateway;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                real_time_analytics_service_1.RealTimeAnalyticsService,
                {
                    provide: analytics_gateway_1.AnalyticsGateway,
                    useValue: {
                        emitRealTimeEvent: globals_1.jest.fn(),
                        emitRealTimeMetrics: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(real_time_analytics_service_1.RealTimeAnalyticsService);
        analyticsGateway = module.get(analytics_gateway_1.AnalyticsGateway);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("processRealTimeEvent", () => {
        it("should process real-time event successfully", async () => {
            const eventData = {
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
                eventName: "button_click",
                userId: "user123",
                properties: { button: "submit" },
                source: "web",
                channel: "organic",
            };
            await service.processRealTimeEvent(eventData);
            expect(analyticsGateway.emitRealTimeEvent).toHaveBeenCalledWith({
                type: "event",
                data: eventData,
                timestamp: expect.any(Date),
            });
        });
    });
    describe("getCurrentMetrics", () => {
        it("should return current metrics", async () => {
            const metrics = await service.getCurrentMetrics();
            expect(Array.isArray(metrics)).toBe(true);
        });
    });
    describe("getActiveUsers", () => {
        it("should return active users count", async () => {
            const count = await service.getActiveUsers();
            expect(typeof count).toBe("number");
            expect(count).toBeGreaterThanOrEqual(0);
        });
    });
    describe("getEventsPerSecond", () => {
        it("should return events per second", async () => {
            const eps = await service.getEventsPerSecond();
            expect(typeof eps).toBe("number");
            expect(eps).toBeGreaterThanOrEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhbmFseXRpY1xcX190ZXN0c19fXFxyZWFsLXRpbWUtYW5hbHl0aWNzLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUNBLDJDQUFvQztBQURwQyw2Q0FBMEQ7QUFHMUQseUZBQWtGO0FBQ2xGLHFFQUFnRTtBQUNoRSwrRUFBOEQ7QUFFOUQsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUN4QyxJQUFJLE9BQWlDLENBQUE7SUFDckMsSUFBSSxnQkFBK0MsQ0FBQTtJQUVuRCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFNBQVMsRUFBRTtnQkFDVCxzREFBd0I7Z0JBQ3hCO29CQUNFLE9BQU8sRUFBRSxvQ0FBZ0I7b0JBQ3pCLFFBQVEsRUFBRTt3QkFDUixpQkFBaUIsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO3dCQUM1QixtQkFBbUIsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO3FCQUMvQjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBRVosT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQTJCLHNEQUF3QixDQUFDLENBQUE7UUFDeEUsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQ0FBZ0IsQ0FBQyxDQUFBO0lBQ2pELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ3BDLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLFNBQVMsR0FBRztnQkFDaEIsU0FBUyxFQUFFLGtDQUFTLENBQUMsV0FBVztnQkFDaEMsU0FBUyxFQUFFLGNBQWM7Z0JBQ3pCLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO2dCQUNoQyxNQUFNLEVBQUUsS0FBSztnQkFDYixPQUFPLEVBQUUsU0FBUzthQUNuQixDQUFBO1lBRUQsTUFBTSxPQUFPLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUE7WUFFN0MsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQUM7Z0JBQzlELElBQUksRUFBRSxPQUFPO2dCQUNiLElBQUksRUFBRSxTQUFTO2dCQUNmLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzthQUM1QixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUNqQyxFQUFFLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDN0MsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtZQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixFQUFFLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDNUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ25DLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN6QyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDL0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQTtZQUM5QyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGFuYWx5dGljXFxfX3Rlc3RzX19cXHJlYWwtdGltZS1hbmFseXRpY3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIHR5cGUgVGVzdGluZ01vZHVsZSB9IGZyb20gXCJAbmVzdGpzL3Rlc3RpbmdcIlxyXG5pbXBvcnQgeyBqZXN0IH0gZnJvbSBcIkBqZXN0L2dsb2JhbHNcIlxyXG5cclxuaW1wb3J0IHsgUmVhbFRpbWVBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3JlYWwtdGltZS1hbmFseXRpY3Muc2VydmljZVwiXHJcbmltcG9ydCB7IEFuYWx5dGljc0dhdGV3YXkgfSBmcm9tIFwiLi4vZ2F0ZXdheXMvYW5hbHl0aWNzLmdhdGV3YXlcIlxyXG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tIFwiLi4vZW50aXRpZXMvYW5hbHl0aWNzLWV2ZW50LmVudGl0eVwiXHJcblxyXG5kZXNjcmliZShcIlJlYWxUaW1lQW5hbHl0aWNzU2VydmljZVwiLCAoKSA9PiB7XHJcbiAgbGV0IHNlcnZpY2U6IFJlYWxUaW1lQW5hbHl0aWNzU2VydmljZVxyXG4gIGxldCBhbmFseXRpY3NHYXRld2F5OiBqZXN0Lk1vY2tlZDxBbmFseXRpY3NHYXRld2F5PlxyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIFJlYWxUaW1lQW5hbHl0aWNzU2VydmljZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBBbmFseXRpY3NHYXRld2F5LFxyXG4gICAgICAgICAgdXNlVmFsdWU6IHtcclxuICAgICAgICAgICAgZW1pdFJlYWxUaW1lRXZlbnQ6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgZW1pdFJlYWxUaW1lTWV0cmljczogamVzdC5mbigpLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZSgpXHJcblxyXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8UmVhbFRpbWVBbmFseXRpY3NTZXJ2aWNlPihSZWFsVGltZUFuYWx5dGljc1NlcnZpY2UpXHJcbiAgICBhbmFseXRpY3NHYXRld2F5ID0gbW9kdWxlLmdldChBbmFseXRpY3NHYXRld2F5KVxyXG4gIH0pXHJcblxyXG4gIGl0KFwic2hvdWxkIGJlIGRlZmluZWRcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHNlcnZpY2UpLnRvQmVEZWZpbmVkKClcclxuICB9KVxyXG5cclxuICBkZXNjcmliZShcInByb2Nlc3NSZWFsVGltZUV2ZW50XCIsICgpID0+IHtcclxuICAgIGl0KFwic2hvdWxkIHByb2Nlc3MgcmVhbC10aW1lIGV2ZW50IHN1Y2Nlc3NmdWxseVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IHtcclxuICAgICAgICBldmVudFR5cGU6IEV2ZW50VHlwZS5VU0VSX0FDVElPTixcclxuICAgICAgICBldmVudE5hbWU6IFwiYnV0dG9uX2NsaWNrXCIsXHJcbiAgICAgICAgdXNlcklkOiBcInVzZXIxMjNcIixcclxuICAgICAgICBwcm9wZXJ0aWVzOiB7IGJ1dHRvbjogXCJzdWJtaXRcIiB9LFxyXG4gICAgICAgIHNvdXJjZTogXCJ3ZWJcIixcclxuICAgICAgICBjaGFubmVsOiBcIm9yZ2FuaWNcIixcclxuICAgICAgfVxyXG5cclxuICAgICAgYXdhaXQgc2VydmljZS5wcm9jZXNzUmVhbFRpbWVFdmVudChldmVudERhdGEpXHJcblxyXG4gICAgICBleHBlY3QoYW5hbHl0aWNzR2F0ZXdheS5lbWl0UmVhbFRpbWVFdmVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIixcclxuICAgICAgICBkYXRhOiBldmVudERhdGEsXHJcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KERhdGUpLFxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICBkZXNjcmliZShcImdldEN1cnJlbnRNZXRyaWNzXCIsICgpID0+IHtcclxuICAgIGl0KFwic2hvdWxkIHJldHVybiBjdXJyZW50IG1ldHJpY3NcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtZXRyaWNzID0gYXdhaXQgc2VydmljZS5nZXRDdXJyZW50TWV0cmljcygpXHJcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1ldHJpY3MpKS50b0JlKHRydWUpXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIGRlc2NyaWJlKFwiZ2V0QWN0aXZlVXNlcnNcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIGFjdGl2ZSB1c2VycyBjb3VudFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgc2VydmljZS5nZXRBY3RpdmVVc2VycygpXHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY291bnQpLnRvQmUoXCJudW1iZXJcIilcclxuICAgICAgZXhwZWN0KGNvdW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIGRlc2NyaWJlKFwiZ2V0RXZlbnRzUGVyU2Vjb25kXCIsICgpID0+IHtcclxuICAgIGl0KFwic2hvdWxkIHJldHVybiBldmVudHMgcGVyIHNlY29uZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVwcyA9IGF3YWl0IHNlcnZpY2UuZ2V0RXZlbnRzUGVyU2Vjb25kKClcclxuICAgICAgZXhwZWN0KHR5cGVvZiBlcHMpLnRvQmUoXCJudW1iZXJcIilcclxuICAgICAgZXhwZWN0KGVwcykudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxyXG4gICAgfSlcclxuICB9KVxyXG59KVxyXG4iXSwidmVyc2lvbiI6M30=