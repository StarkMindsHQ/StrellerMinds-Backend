2ab43a4dc2341eb9d4232b8957af7013
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const users_service_1 = require("./users.service");
const typeorm_1 = require("@nestjs/typeorm");
const user_entity_1 = require("./entities/user.entity");
const common_1 = require("@nestjs/common");
const userRole_enum_1 = require("./enums/userRole.enum");
const accountStatus_enum_1 = require("./enums/accountStatus.enum");
const mockUser = {
    id: '1',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    profileImageUrl: 'image.jpg',
    password: 'hashedPassword123',
    isInstructor: false,
    bio: 'Test bio',
    role: userRole_enum_1.UserRole.STUDENT,
    status: accountStatus_enum_1.AccountStatus.ACTIVE,
    username: 'testuser',
    isEmailVerified: false,
    createdAt: new Date(),
    updatedAt: new Date(),
};
describe('UsersService', () => {
    let service;
    let repo;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                users_service_1.UsersService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: {
                        findOne: jest.fn(),
                        create: jest.fn(),
                        save: jest.fn(),
                        findAndCount: jest.fn(),
                        update: jest.fn(),
                        softDelete: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(users_service_1.UsersService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
    });
    describe('create', () => {
        it('should create and return a new user if email does not exist', async () => {
            repo.findOne.mockResolvedValue(null);
            repo.create.mockReturnValue(mockUser);
            repo.save.mockResolvedValue(mockUser);
            const result = await service.create({
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                password: 'password123',
                profileImageUrl: 'image.jpg',
            });
            expect(repo.findOne).toHaveBeenCalledWith({
                where: { email: 'test@example.com' },
                select: ['id', 'email'],
            });
            expect(repo.create).toHaveBeenCalled();
            expect(repo.save).toHaveBeenCalled();
            expect(result).toEqual(mockUser);
        });
        it('should throw ConflictException if user with email exists', async () => {
            repo.findOne.mockResolvedValue(mockUser);
            await expect(service.create({
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                password: 'password123',
            })).rejects.toThrow(common_1.ConflictException);
        });
        it('should throw InternalServerErrorException on other errors', async () => {
            repo.findOne.mockRejectedValue(new Error('DB error'));
            await expect(service.create({
                email: 'fail@example.com',
                firstName: 'Fail',
                lastName: 'User',
                password: 'password123',
            })).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('findAll', () => {
        it('should return paginated users', async () => {
            const mockUsers = [mockUser];
            repo.findAndCount.mockResolvedValue([mockUsers, 1]);
            const result = await service.findAll(1, 10);
            expect(repo.findAndCount).toHaveBeenCalledWith({
                skip: 0,
                take: 10,
                select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],
                order: { createdAt: 'DESC' },
            });
            expect(result).toEqual({ users: mockUsers, total: 1 });
        });
    });
    describe('Performance Tests', () => {
        it('should perform findAll with pagination efficiently', async () => {
            const startTime = Date.now();
            repo.findAndCount.mockResolvedValue([[], 0]);
            await service.findAll(1, 10);
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            expect(executionTime).toBeLessThan(100);
        });
        it('should perform findOne with relations efficiently', async () => {
            const startTime = Date.now();
            repo.findOne.mockResolvedValue(mockUser);
            await service.findOne('test-id', ['profile', 'settings']);
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            expect(executionTime).toBeLessThan(100);
        });
        it('should handle concurrent requests efficiently', async () => {
            const startTime = Date.now();
            repo.findOne.mockResolvedValue(mockUser);
            const promises = Array(10).fill(null).map(() => service.findOne('test-id'));
            await Promise.all(promises);
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            expect(executionTime).toBeLessThan(500);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,