{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,mDAA+C;AAC/C,6CAAqD;AACrD,wDAA8C;AAE9C,2CAIwB;AACxB,yDAAiD;AACjD,mEAA2D;AAE3D,MAAM,QAAQ,GAAkB;IAC9B,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,kBAAkB;IACzB,SAAS,EAAE,MAAM;IACjB,QAAQ,EAAE,MAAM;IAChB,eAAe,EAAE,WAAW;IAC5B,QAAQ,EAAE,mBAAmB;IAC7B,YAAY,EAAE,KAAK;IACnB,GAAG,EAAE,UAAU;IACf,IAAI,EAAE,wBAAQ,CAAC,OAAO;IACtB,MAAM,EAAE,kCAAa,CAAC,MAAM;IAC5B,QAAQ,EAAE,UAAU;IACpB,eAAe,EAAE,KAAK;IACtB,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,SAAS,EAAE,IAAI,IAAI,EAAE;CACtB,CAAC;AAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAqB,CAAC;IAC1B,IAAI,IAAmC,CAAC;IAExC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,4BAAY;gBACZ;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,kBAAI,CAAC;oBACjC,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;wBAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;wBACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;wBACf,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;wBACvB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;wBACjB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;qBACtB;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAC;QACjD,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,kBAAI,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAgB,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAgB,CAAC,CAAC;YAE9C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC;gBAClC,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,aAAa;gBACvB,eAAe,EAAE,WAAW;aAC7B,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBACxC,KAAK,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE;gBACpC,MAAM,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;aACxB,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAgB,CAAC,CAAC;YAEjD,MAAM,MAAM,CACV,OAAO,CAAC,MAAM,CAAC;gBACb,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,aAAa;aACxB,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YAEtD,MAAM,MAAM,CACV,OAAO,CAAC,MAAM,CAAC;gBACb,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,aAAa;aACxB,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,CAAC,qCAA4B,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,SAAS,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,SAAmB,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE5C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,EAAE;gBACR,MAAM,EAAE,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC;gBAC/E,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;aAC7B,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YAE7C,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE7B,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAC;YAE1C,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAgB,CAAC,CAAC;YAEjD,MAAM,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;YAE1D,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAC;YAE1C,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAgB,CAAC,CAAC;YAEjD,MAAM,QAAQ,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAC7C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAC3B,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAC;YAE1C,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { UsersService } from './users.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { User } from './entities/user.entity';\r\nimport { Repository } from 'typeorm';\r\nimport {\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { UserRole } from './enums/userRole.enum';\r\nimport { AccountStatus } from './enums/accountStatus.enum';\r\n\r\nconst mockUser: Partial<User> = {\r\n  id: '1',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  profileImageUrl: 'image.jpg',\r\n  password: 'hashedPassword123',\r\n  isInstructor: false,\r\n  bio: 'Test bio',\r\n  role: UserRole.STUDENT,\r\n  status: AccountStatus.ACTIVE,\r\n  username: 'testuser',\r\n  isEmailVerified: false,\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\ndescribe('UsersService', () => {\r\n  let service: UsersService;\r\n  let repo: jest.Mocked<Repository<User>>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UsersService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            findAndCount: jest.fn(),\r\n            update: jest.fn(),\r\n            softDelete: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<UsersService>(UsersService);\r\n    repo = module.get(getRepositoryToken(User));\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create and return a new user if email does not exist', async () => {\r\n      repo.findOne.mockResolvedValue(null);\r\n      repo.create.mockReturnValue(mockUser as User);\r\n      repo.save.mockResolvedValue(mockUser as User);\r\n\r\n      const result = await service.create({\r\n        email: 'test@example.com',\r\n        firstName: 'Test',\r\n        lastName: 'User',\r\n        password: 'password123',\r\n        profileImageUrl: 'image.jpg',\r\n      });\r\n\r\n      expect(repo.findOne).toHaveBeenCalledWith({\r\n        where: { email: 'test@example.com' },\r\n        select: ['id', 'email'],\r\n      });\r\n      expect(repo.create).toHaveBeenCalled();\r\n      expect(repo.save).toHaveBeenCalled();\r\n      expect(result).toEqual(mockUser);\r\n    });\r\n\r\n    it('should throw ConflictException if user with email exists', async () => {\r\n      repo.findOne.mockResolvedValue(mockUser as User);\r\n\r\n      await expect(\r\n        service.create({\r\n          email: 'test@example.com',\r\n          firstName: 'Test',\r\n          lastName: 'User',\r\n          password: 'password123',\r\n        }),\r\n      ).rejects.toThrow(ConflictException);\r\n    });\r\n\r\n    it('should throw InternalServerErrorException on other errors', async () => {\r\n      repo.findOne.mockRejectedValue(new Error('DB error'));\r\n\r\n      await expect(\r\n        service.create({\r\n          email: 'fail@example.com',\r\n          firstName: 'Fail',\r\n          lastName: 'User',\r\n          password: 'password123',\r\n        }),\r\n      ).rejects.toThrow(InternalServerErrorException);\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return paginated users', async () => {\r\n      const mockUsers = [mockUser];\r\n      repo.findAndCount.mockResolvedValue([mockUsers as User[], 1]);\r\n\r\n      const result = await service.findAll(1, 10);\r\n\r\n      expect(repo.findAndCount).toHaveBeenCalledWith({\r\n        skip: 0,\r\n        take: 10,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n        order: { createdAt: 'DESC' },\r\n      });\r\n      expect(result).toEqual({ users: mockUsers, total: 1 });\r\n    });\r\n  });\r\n\r\n  describe('Performance Tests', () => {\r\n    it('should perform findAll with pagination efficiently', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      repo.findAndCount.mockResolvedValue([[], 0]);\r\n      \r\n      await service.findAll(1, 10);\r\n      \r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n      \r\n      expect(executionTime).toBeLessThan(100);\r\n    });\r\n\r\n    it('should perform findOne with relations efficiently', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      repo.findOne.mockResolvedValue(mockUser as User);\r\n      \r\n      await service.findOne('test-id', ['profile', 'settings']);\r\n      \r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n      \r\n      expect(executionTime).toBeLessThan(100);\r\n    });\r\n\r\n    it('should handle concurrent requests efficiently', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      repo.findOne.mockResolvedValue(mockUser as User);\r\n      \r\n      const promises = Array(10).fill(null).map(() => \r\n        service.findOne('test-id')\r\n      );\r\n      \r\n      await Promise.all(promises);\r\n      \r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n      \r\n      expect(executionTime).toBeLessThan(500);\r\n    });\r\n  });\r\n});\r\n"],"version":3}