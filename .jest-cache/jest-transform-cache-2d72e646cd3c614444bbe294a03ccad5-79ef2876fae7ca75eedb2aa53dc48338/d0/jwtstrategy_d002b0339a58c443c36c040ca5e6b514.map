{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\strategies\\jwt.strategy.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAA8C;AAC9C,2CAA4C;AAC5C,kDAAoC;AAG7B,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,QAAQ,CAAC,CAAC;YACtE,OAAO;gBACL,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,OAAO;aACjB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;CACF,CAAA;AAZY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;GACA,WAAW,CAYvB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\strategies\\jwt.strategy.ts"],"sourcesContent":["// src/verification/strategies/jwt.strategy.ts\r\nimport { Injectable } from '@nestjs/common';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\n@Injectable()\r\nexport class JwtStrategy {\r\n  async verify(token: string): Promise<any> {\r\n    try {\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');\r\n      return {\r\n        verified: true,\r\n        payload: decoded,\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Invalid JWT token');\r\n    }\r\n  }\r\n}"],"version":3}