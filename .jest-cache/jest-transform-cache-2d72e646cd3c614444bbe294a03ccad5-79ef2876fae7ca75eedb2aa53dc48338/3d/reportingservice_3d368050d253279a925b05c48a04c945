0cf60590056919ac169b8e1741b2bd8d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ReportingService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportingService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
const report_entity_1 = require("../entities/report.entity");
let ReportingService = ReportingService_1 = class ReportingService {
    constructor(reportRepository, businessIntelligenceService) {
        this.reportRepository = reportRepository;
        this.businessIntelligenceService = businessIntelligenceService;
        this.logger = new common_1.Logger(ReportingService_1.name);
    }
    async createReport(reportData) {
        const report = this.reportRepository.create(reportData);
        return this.reportRepository.save(report);
    }
    async executeReport(reportId) {
        try {
            const report = await this.reportRepository.findOne({
                where: { id: reportId },
            });
            if (!report) {
                throw new Error(`Report ${reportId} not found`);
            }
            const query = {
                metrics: report.configuration.metrics,
                timeRange: {
                    start: new Date(report.configuration.timeRange.start),
                    end: new Date(report.configuration.timeRange.end),
                },
                dimensions: report.configuration.groupBy,
                filters: report.configuration.filters,
            };
            const result = await this.businessIntelligenceService.executeQuery(query);
            // Update report with last execution
            await this.reportRepository.update(reportId, {
                lastExecuted: new Date(),
                lastResult: result,
            });
            return this.formatReportResult(result, report.format);
        }
        catch (error) {
            this.logger.error(`Failed to execute report ${reportId}: ${error.message}`, error.stack);
            throw error;
        }
    }
    formatReportResult(result, format) {
        switch (format) {
            case report_entity_1.ReportFormat.JSON:
                return result;
            case report_entity_1.ReportFormat.CSV:
                return this.convertToCSV(result);
            case report_entity_1.ReportFormat.PDF:
                return this.convertToPDF(result);
            case report_entity_1.ReportFormat.EXCEL:
                return this.convertToExcel(result);
            default:
                return result;
        }
    }
    convertToCSV(result) {
        if (!result.data || result.data.length === 0) {
            return "";
        }
        const headers = ["timestamp", ...Object.keys(result.data[0].metrics)];
        const rows = result.data.map((row) => [row.timestamp.toISOString(), ...Object.values(row.metrics)]);
        return [headers, ...rows].map((row) => row.join(",")).join("\n");
    }
    convertToPDF(result) {
        // Implementation would use a PDF library like puppeteer or pdfkit
        // For now, return a placeholder
        return Buffer.from(JSON.stringify(result));
    }
    convertToExcel(result) {
        // Implementation would use a library like exceljs
        // For now, return a placeholder
        return Buffer.from(JSON.stringify(result));
    }
    async executeScheduledReports() {
        this.logger.log("Checking for scheduled reports");
        const scheduledReports = await this.reportRepository.find({
            where: { type: report_entity_1.ReportType.SCHEDULED, isActive: true },
        });
        for (const report of scheduledReports) {
            if (this.shouldExecuteReport(report)) {
                try {
                    await this.executeReport(report.id);
                    this.logger.log(`Executed scheduled report: ${report.name}`);
                }
                catch (error) {
                    this.logger.error(`Failed to execute scheduled report ${report.name}: ${error.message}`, error.stack);
                }
            }
        }
    }
    shouldExecuteReport(report) {
        if (!report.schedule?.cron) {
            return false;
        }
        // Simple cron check - in production, use a proper cron parser
        const now = new Date();
        const lastExecuted = report.lastExecuted;
        if (!lastExecuted) {
            return true;
        }
        // Check if enough time has passed based on cron schedule
        const timeDiff = now.getTime() - lastExecuted.getTime();
        const fifteenMinutes = 15 * 60 * 1000;
        return timeDiff >= fifteenMinutes;
    }
    async getReports(filters) {
        const query = this.reportRepository.createQueryBuilder("report");
        if (filters?.type) {
            query.andWhere("report.type = :type", { type: filters.type });
        }
        if (filters?.createdBy) {
            query.andWhere("report.createdBy = :createdBy", {
                createdBy: filters.createdBy,
            });
        }
        if (filters?.isActive !== undefined) {
            query.andWhere("report.isActive = :isActive", {
                isActive: filters.isActive,
            });
        }
        return query.orderBy("report.createdAt", "DESC").getMany();
    }
};
exports.ReportingService = ReportingService;
__decorate([
    (0, schedule_1.Cron)("0 */15 * * * *") // Every 15 minutes
    ,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ReportingService.prototype, "executeScheduledReports", null);
exports.ReportingService = ReportingService = ReportingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], ReportingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,