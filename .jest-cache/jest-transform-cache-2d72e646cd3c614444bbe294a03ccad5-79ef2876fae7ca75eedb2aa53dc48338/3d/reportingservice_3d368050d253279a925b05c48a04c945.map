{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\reporting.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\reporting.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { Cron } from \"@nestjs/schedule\"\r\n\r\nimport { type Report, ReportType, ReportFormat } from \"../entities/report.entity\"\r\nimport type { BusinessIntelligenceService } from \"./business-intelligence.service\"\r\n\r\n@Injectable()\r\nexport class ReportingService {\r\n  private readonly logger = new Logger(ReportingService.name)\r\n\r\n  constructor(\r\n    private readonly reportRepository: Repository<Report>,\r\n    private readonly businessIntelligenceService: BusinessIntelligenceService,\r\n  ) {}\r\n\r\n  async createReport(reportData: Partial<Report>): Promise<Report> {\r\n    const report = this.reportRepository.create(reportData)\r\n    return this.reportRepository.save(report)\r\n  }\r\n\r\n  async executeReport(reportId: string): Promise<any> {\r\n    try {\r\n      const report = await this.reportRepository.findOne({\r\n        where: { id: reportId },\r\n      })\r\n\r\n      if (!report) {\r\n        throw new Error(`Report ${reportId} not found`)\r\n      }\r\n\r\n      const query = {\r\n        metrics: report.configuration.metrics,\r\n        timeRange: {\r\n          start: new Date(report.configuration.timeRange.start),\r\n          end: new Date(report.configuration.timeRange.end),\r\n        },\r\n        dimensions: report.configuration.groupBy,\r\n        filters: report.configuration.filters,\r\n      }\r\n\r\n      const result = await this.businessIntelligenceService.executeQuery(query)\r\n\r\n      // Update report with last execution\r\n      await this.reportRepository.update(reportId, {\r\n        lastExecuted: new Date(),\r\n        lastResult: result,\r\n      })\r\n\r\n      return this.formatReportResult(result, report.format)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to execute report ${reportId}: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private formatReportResult(result: any, format: ReportFormat): any {\r\n    switch (format) {\r\n      case ReportFormat.JSON:\r\n        return result\r\n      case ReportFormat.CSV:\r\n        return this.convertToCSV(result)\r\n      case ReportFormat.PDF:\r\n        return this.convertToPDF(result)\r\n      case ReportFormat.EXCEL:\r\n        return this.convertToExcel(result)\r\n      default:\r\n        return result\r\n    }\r\n  }\r\n\r\n  private convertToCSV(result: any): string {\r\n    if (!result.data || result.data.length === 0) {\r\n      return \"\"\r\n    }\r\n\r\n    const headers = [\"timestamp\", ...Object.keys(result.data[0].metrics)]\r\n    const rows = result.data.map((row: any) => [row.timestamp.toISOString(), ...Object.values(row.metrics)])\r\n\r\n    return [headers, ...rows].map((row) => row.join(\",\")).join(\"\\n\")\r\n  }\r\n\r\n  private convertToPDF(result: any): Buffer {\r\n    // Implementation would use a PDF library like puppeteer or pdfkit\r\n    // For now, return a placeholder\r\n    return Buffer.from(JSON.stringify(result))\r\n  }\r\n\r\n  private convertToExcel(result: any): Buffer {\r\n    // Implementation would use a library like exceljs\r\n    // For now, return a placeholder\r\n    return Buffer.from(JSON.stringify(result))\r\n  }\r\n\r\n  @Cron(\"0 */15 * * * *\") // Every 15 minutes\r\n  async executeScheduledReports(): Promise<void> {\r\n    this.logger.log(\"Checking for scheduled reports\")\r\n\r\n    const scheduledReports = await this.reportRepository.find({\r\n      where: { type: ReportType.SCHEDULED, isActive: true },\r\n    })\r\n\r\n    for (const report of scheduledReports) {\r\n      if (this.shouldExecuteReport(report)) {\r\n        try {\r\n          await this.executeReport(report.id)\r\n          this.logger.log(`Executed scheduled report: ${report.name}`)\r\n        } catch (error) {\r\n          this.logger.error(`Failed to execute scheduled report ${report.name}: ${error.message}`, error.stack)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private shouldExecuteReport(report: Report): boolean {\r\n    if (!report.schedule?.cron) {\r\n      return false\r\n    }\r\n\r\n    // Simple cron check - in production, use a proper cron parser\r\n    const now = new Date()\r\n    const lastExecuted = report.lastExecuted\r\n\r\n    if (!lastExecuted) {\r\n      return true\r\n    }\r\n\r\n    // Check if enough time has passed based on cron schedule\r\n    const timeDiff = now.getTime() - lastExecuted.getTime()\r\n    const fifteenMinutes = 15 * 60 * 1000\r\n\r\n    return timeDiff >= fifteenMinutes\r\n  }\r\n\r\n  async getReports(filters?: {\r\n    type?: ReportType\r\n    createdBy?: string\r\n    isActive?: boolean\r\n  }): Promise<Report[]> {\r\n    const query = this.reportRepository.createQueryBuilder(\"report\")\r\n\r\n    if (filters?.type) {\r\n      query.andWhere(\"report.type = :type\", { type: filters.type })\r\n    }\r\n\r\n    if (filters?.createdBy) {\r\n      query.andWhere(\"report.createdBy = :createdBy\", {\r\n        createdBy: filters.createdBy,\r\n      })\r\n    }\r\n\r\n    if (filters?.isActive !== undefined) {\r\n      query.andWhere(\"report.isActive = :isActive\", {\r\n        isActive: filters.isActive,\r\n      })\r\n    }\r\n\r\n    return query.orderBy(\"report.createdAt\", \"DESC\").getMany()\r\n  }\r\n}\r\n"],"version":3}