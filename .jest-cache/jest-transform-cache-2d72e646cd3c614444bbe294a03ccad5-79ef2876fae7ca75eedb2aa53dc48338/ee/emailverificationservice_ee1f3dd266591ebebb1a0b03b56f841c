addbf018fb882d16126944d6fb127cd3
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var EmailVerificationService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailVerificationService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const email_service_1 = require("../email/email.service");
const crypto = __importStar(require("crypto"));
const user_entity_1 = require("./entities/user.entity");
/**
 * EmailVerificationService provides logic for sending, verifying, and resending email verification.
 */
let EmailVerificationService = EmailVerificationService_1 = class EmailVerificationService {
    constructor(userRepository, emailService) {
        this.userRepository = userRepository;
        this.emailService = emailService;
        this.logger = new common_1.Logger(EmailVerificationService_1.name);
        this.TOKEN_EXPIRY_HOURS = 24;
    }
    /**
     * Generate a secure verification token.
     * @returns A random token string
     */
    generateVerificationToken() {
        return crypto.randomBytes(32).toString('hex');
    }
    /**
     * Calculate token expiry date.
     * @returns Date object for token expiry
     */
    getTokenExpiry() {
        const expiry = new Date();
        expiry.setHours(expiry.getHours() + this.TOKEN_EXPIRY_HOURS);
        return expiry;
    }
    /**
     * Send verification email to user.
     * @param email - User email address
     * @returns Success message
     */
    async sendVerificationEmail(email) {
        try {
            const user = await this.userRepository.findOne({ where: { email } });
            if (!user) {
                throw new common_1.NotFoundException('User not found');
            }
            if (user.isEmailVerified) {
                throw new common_1.BadRequestException('Email is already verified');
            }
            // Generate new token and expiry
            const verificationToken = this.generateVerificationToken();
            const tokenExpiry = this.getTokenExpiry();
            // Update user with new token
            await this.userRepository.update(user.id, {
                emailVerificationToken: verificationToken,
                emailVerificationTokenExpiry: tokenExpiry,
            });
            // Send verification email
            await this.emailService.sendVerificationEmail(email, verificationToken, user.id);
            this.logger.log(`Verification email sent to ${email}`);
            return {
                message: 'Verification email sent successfully',
            };
        }
        catch (error) {
            this.logger.error(`Failed to send verification email to ${email}`, error.stack);
            throw error;
        }
    }
    /**
     * Verify email using a verification token.
     * @param token - Verification token
     * @returns Success message
     */
    async verifyEmail(token) {
        try {
            const user = await this.userRepository.findOne({
                where: { emailVerificationToken: token },
            });
            if (!user) {
                throw new common_1.BadRequestException('Invalid or expired verification token');
            }
            if (user.isEmailVerified) {
                throw new common_1.BadRequestException('Email is already verified');
            }
            // Check if token is expired
            if (new Date() > user.emailVerificationTokenExpiry) {
                throw new common_1.BadRequestException('Verification token has expired');
            }
            // Verify the email
            await this.userRepository.update(user.id, {
                isEmailVerified: true,
                emailVerificationToken: null,
                emailVerificationTokenExpiry: null,
            });
            this.logger.log(`Email verified for user ${user.email}`);
            return {
                message: 'Email verified successfully',
                user: {
                    id: user.id,
                    email: user.email,
                    isEmailVerified: true,
                },
            };
        }
        catch (error) {
            this.logger.error(`Failed to verify email with token ${token}`, error.stack);
            throw error;
        }
    }
    /**
     * Resend verification email to user.
     * @param email - User email address
     * @returns Success message
     */
    async resendVerificationEmail(email) {
        try {
            const user = await this.userRepository.findOne({ where: { email } });
            if (!user) {
                throw new common_1.NotFoundException('User not found');
            }
            if (user.isEmailVerified) {
                throw new common_1.BadRequestException('Email is already verified');
            }
            // Check if we can resend (rate limiting)
            if (user.emailVerificationTokenExpiry &&
                new Date() < new Date(user.emailVerificationTokenExpiry.getTime() - (23 * 60 * 60 * 1000))) {
                throw new common_1.BadRequestException('Please wait before requesting another verification email');
            }
            return await this.sendVerificationEmail(email);
        }
        catch (error) {
            this.logger.error(`Failed to resend verification email to ${email}`, error.stack);
            throw error;
        }
    }
    /**
     * Check if user email is verified
     */
    async isEmailVerified(userId) {
        const user = await this.userRepository.findOne({
            where: { id: userId },
            select: ['isEmailVerified']
        });
        return user?.isEmailVerified || false;
    }
    /**
     * Clean up expired tokens (can be called by a cron job)
     */
    async cleanupExpiredTokens() {
        try {
            const result = await this.userRepository.update({
                emailVerificationTokenExpiry: new Date(),
                isEmailVerified: false,
            }, {
                emailVerificationToken: null,
                emailVerificationTokenExpiry: null,
            });
            this.logger.log(`Cleaned up ${result.affected} expired verification tokens`);
        }
        catch (error) {
            this.logger.error('Failed to cleanup expired tokens', error.stack);
        }
    }
};
exports.EmailVerificationService = EmailVerificationService;
exports.EmailVerificationService = EmailVerificationService = EmailVerificationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _b : Object])
], EmailVerificationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,