0c6177d46605202aef0ec7660cf20cf5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const locale_service_1 = require("../services/locale.service");
const user_locale_entity_1 = require("../entities/user-locale.entity");
const locale_metadata_entity_1 = require("../entities/locale-metadata.entity");
describe("LocaleService", () => {
    let service;
    let userLocaleRepository;
    let localeMetadataRepository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                locale_service_1.LocaleService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_locale_entity_1.UserLocale),
                    useValue: {
                        findOne: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(locale_metadata_entity_1.LocaleMetadata),
                    useValue: {
                        findOne: globals_1.jest.fn(),
                        find: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(locale_service_1.LocaleService);
        userLocaleRepository = module.get((0, typeorm_1.getRepositoryToken)(user_locale_entity_1.UserLocale));
        localeMetadataRepository = module.get((0, typeorm_1.getRepositoryToken)(locale_metadata_entity_1.LocaleMetadata));
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("getUserLocale", () => {
        it("should return user locale if exists", async () => {
            const mockUserLocale = {
                id: "1",
                userId: "user1",
                locale: "fr",
                isActive: true,
            };
            userLocaleRepository.findOne.mockResolvedValue(mockUserLocale);
            const result = await service.getUserLocale("user1");
            expect(result).toBe("fr");
            expect(userLocaleRepository.update).toHaveBeenCalledWith("1", {
                lastUsedAt: expect.any(Date),
            });
        });
        it("should return default locale if user locale not found", async () => {
            userLocaleRepository.findOne.mockResolvedValue(null);
            const result = await service.getUserLocale("user1");
            expect(result).toBe("en");
        });
    });
    describe("setUserLocale", () => {
        it("should create new user locale", async () => {
            const mockLocaleMetadata = {
                code: "fr",
                status: locale_metadata_entity_1.LocaleStatus.ACTIVE,
                fallbackLocales: ["en"],
            };
            userLocaleRepository.findOne.mockResolvedValue(null);
            localeMetadataRepository.findOne.mockResolvedValue(mockLocaleMetadata);
            userLocaleRepository.create.mockReturnValue({});
            userLocaleRepository.save.mockResolvedValue({
                id: "1",
                userId: "user1",
                locale: "fr",
            });
            const result = await service.setUserLocale("user1", "fr");
            expect(result.locale).toBe("fr");
            expect(userLocaleRepository.create).toHaveBeenCalledWith({
                userId: "user1",
                locale: "fr",
                source: user_locale_entity_1.LocaleSource.USER_PREFERENCE,
                fallbackLocales: ["en"],
                lastUsedAt: expect.any(Date),
            });
        });
        it("should throw error for unsupported locale", async () => {
            localeMetadataRepository.findOne.mockResolvedValue(null);
            await expect(service.setUserLocale("user1", "invalid")).rejects.toThrow("Locale invalid is not supported or active");
        });
    });
    describe("detectLocaleFromGeoLocation", () => {
        it("should return locale for known country", async () => {
            const mockLocaleMetadata = {
                code: "fr-FR",
                status: locale_metadata_entity_1.LocaleStatus.ACTIVE,
            };
            localeMetadataRepository.findOne.mockResolvedValue(mockLocaleMetadata);
            const result = await service.detectLocaleFromGeoLocation("FR");
            expect(result).toBe("fr-FR");
        });
        it("should return default locale for unknown country", async () => {
            const result = await service.detectLocaleFromGeoLocation("XX");
            expect(result).toBe("en");
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,