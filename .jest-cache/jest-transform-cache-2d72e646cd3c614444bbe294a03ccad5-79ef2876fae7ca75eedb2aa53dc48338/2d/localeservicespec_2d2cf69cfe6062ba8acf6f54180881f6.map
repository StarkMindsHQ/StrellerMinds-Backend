{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\locale.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\locale.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { LocaleService } from \"../services/locale.service\"\r\nimport { UserLocale, LocaleSource } from \"../entities/user-locale.entity\"\r\nimport { LocaleMetadata, LocaleStatus } from \"../entities/locale-metadata.entity\"\r\n\r\ndescribe(\"LocaleService\", () => {\r\n  let service: LocaleService\r\n  let userLocaleRepository: jest.Mocked<Repository<UserLocale>>\r\n  let localeMetadataRepository: jest.Mocked<Repository<LocaleMetadata>>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        LocaleService,\r\n        {\r\n          provide: getRepositoryToken(UserLocale),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            save: jest.fn(),\r\n            create: jest.fn(),\r\n            update: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(LocaleMetadata),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            find: jest.fn(),\r\n            save: jest.fn(),\r\n            create: jest.fn(),\r\n            update: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<LocaleService>(LocaleService)\r\n    userLocaleRepository = module.get(getRepositoryToken(UserLocale))\r\n    localeMetadataRepository = module.get(getRepositoryToken(LocaleMetadata))\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"getUserLocale\", () => {\r\n    it(\"should return user locale if exists\", async () => {\r\n      const mockUserLocale = {\r\n        id: \"1\",\r\n        userId: \"user1\",\r\n        locale: \"fr\",\r\n        isActive: true,\r\n      } as UserLocale\r\n\r\n      userLocaleRepository.findOne.mockResolvedValue(mockUserLocale)\r\n\r\n      const result = await service.getUserLocale(\"user1\")\r\n\r\n      expect(result).toBe(\"fr\")\r\n      expect(userLocaleRepository.update).toHaveBeenCalledWith(\"1\", {\r\n        lastUsedAt: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should return default locale if user locale not found\", async () => {\r\n      userLocaleRepository.findOne.mockResolvedValue(null)\r\n\r\n      const result = await service.getUserLocale(\"user1\")\r\n\r\n      expect(result).toBe(\"en\")\r\n    })\r\n  })\r\n\r\n  describe(\"setUserLocale\", () => {\r\n    it(\"should create new user locale\", async () => {\r\n      const mockLocaleMetadata = {\r\n        code: \"fr\",\r\n        status: LocaleStatus.ACTIVE,\r\n        fallbackLocales: [\"en\"],\r\n      } as LocaleMetadata\r\n\r\n      userLocaleRepository.findOne.mockResolvedValue(null)\r\n      localeMetadataRepository.findOne.mockResolvedValue(mockLocaleMetadata)\r\n      userLocaleRepository.create.mockReturnValue({} as any)\r\n      userLocaleRepository.save.mockResolvedValue({\r\n        id: \"1\",\r\n        userId: \"user1\",\r\n        locale: \"fr\",\r\n      } as any)\r\n\r\n      const result = await service.setUserLocale(\"user1\", \"fr\")\r\n\r\n      expect(result.locale).toBe(\"fr\")\r\n      expect(userLocaleRepository.create).toHaveBeenCalledWith({\r\n        userId: \"user1\",\r\n        locale: \"fr\",\r\n        source: LocaleSource.USER_PREFERENCE,\r\n        fallbackLocales: [\"en\"],\r\n        lastUsedAt: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should throw error for unsupported locale\", async () => {\r\n      localeMetadataRepository.findOne.mockResolvedValue(null)\r\n\r\n      await expect(service.setUserLocale(\"user1\", \"invalid\")).rejects.toThrow(\r\n        \"Locale invalid is not supported or active\",\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"detectLocaleFromGeoLocation\", () => {\r\n    it(\"should return locale for known country\", async () => {\r\n      const mockLocaleMetadata = {\r\n        code: \"fr-FR\",\r\n        status: LocaleStatus.ACTIVE,\r\n      } as LocaleMetadata\r\n\r\n      localeMetadataRepository.findOne.mockResolvedValue(mockLocaleMetadata)\r\n\r\n      const result = await service.detectLocaleFromGeoLocation(\"FR\")\r\n\r\n      expect(result).toBe(\"fr-FR\")\r\n    })\r\n\r\n    it(\"should return default locale for unknown country\", async () => {\r\n      const result = await service.detectLocaleFromGeoLocation(\"XX\")\r\n\r\n      expect(result).toBe(\"en\")\r\n    })\r\n  })\r\n})\r\n"],"version":3}