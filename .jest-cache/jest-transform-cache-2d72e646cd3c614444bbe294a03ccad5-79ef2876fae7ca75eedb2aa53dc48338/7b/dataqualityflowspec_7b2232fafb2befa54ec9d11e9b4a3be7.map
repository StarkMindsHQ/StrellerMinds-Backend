{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\integration\\data-quality-flow.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\integration\\data-quality-flow.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport { EventEmitter2 } from \"@nestjs/event-emitter\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { DataQualityService } from \"../../services/data-quality.service\"\r\nimport { DataValidationService } from \"../../services/data-validation.service\"\r\nimport { DataCleansingService } from \"../../services/data-cleansing.service\"\r\nimport { DataGovernanceService } from \"../../services/data-governance.service\"\r\nimport { DataQualityMonitoringService } from \"../../services/data-quality-monitoring.service\"\r\nimport { DataQualityReportingService } from \"../../services/data-quality-reporting.service\"\r\n\r\nimport { DataQualityRule, RuleType, RuleSeverity, RuleStatus } from \"../../entities/data-quality-rule.entity\"\r\nimport { DataQualityMetric } from \"../../entities/data-quality-metric.entity\"\r\nimport { DataQualityIssue } from \"../../entities/data-quality-issue.entity\"\r\nimport { DataGovernancePolicy } from \"../../entities/data-governance-policy.entity\"\r\nimport { DataLineage } from \"../../entities/data-lineage.entity\"\r\nimport { DataQualityReport } from \"../../entities/data-quality-report.entity\"\r\n\r\ndescribe(\"Data Quality Management Integration\", () => {\r\n  let dataQualityService: DataQualityService\r\n  let validationService: DataValidationService\r\n  let cleansingService: DataCleansingService\r\n  let governanceService: DataGovernanceService\r\n  let monitoringService: DataQualityMonitoringService\r\n  let reportingService: DataQualityReportingService\r\n\r\n  let ruleRepository: Repository<DataQualityRule>\r\n  let metricRepository: Repository<DataQualityMetric>\r\n  let issueRepository: Repository<DataQualityIssue>\r\n  let policyRepository: Repository<DataGovernancePolicy>\r\n  let lineageRepository: Repository<DataLineage>\r\n  let reportRepository: Repository<DataQualityReport>\r\n\r\n  let dataQualityQueue: Queue\r\n  let cleansingQueue: Queue\r\n  let monitoringQueue: Queue\r\n  let eventEmitter: EventEmitter2\r\n\r\n  const mockQueryBuilder = {\r\n    select: jest.fn().mockReturnThis(),\r\n    addSelect: jest.fn().mockReturnThis(),\r\n    where: jest.fn().mockReturnThis(),\r\n    andWhere: jest.fn().mockReturnThis(),\r\n    groupBy: jest.fn().mockReturnThis(),\r\n    orderBy: jest.fn().mockReturnThis(),\r\n    getRawOne: jest.fn(),\r\n    getRawMany: jest.fn(),\r\n    getMany: jest.fn(),\r\n    getOne: jest.fn(),\r\n    getCount: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataQualityService,\r\n        DataValidationService,\r\n        DataCleansingService,\r\n        DataGovernanceService,\r\n        DataQualityMonitoringService,\r\n        DataQualityReportingService,\r\n        {\r\n          provide: getRepositoryToken(DataQualityRule),\r\n          useValue: {\r\n            find: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            update: jest.fn(),\r\n            findOne: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityMetric),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityIssue),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            count: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataGovernancePolicy),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            findOne: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataLineage),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityReport),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-quality\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-cleansing\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-quality-monitoring\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: EventEmitter2,\r\n          useValue: {\r\n            emit: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    dataQualityService = module.get<DataQualityService>(DataQualityService)\r\n    validationService = module.get<DataValidationService>(DataValidationService)\r\n    cleansingService = module.get<DataCleansingService>(DataCleansingService)\r\n    governanceService = module.get<DataGovernanceService>(DataGovernanceService)\r\n    monitoringService = module.get<DataQualityMonitoringService>(DataQualityMonitoringService)\r\n    reportingService = module.get<DataQualityReportingService>(DataQualityReportingService)\r\n\r\n    ruleRepository = module.get<Repository<DataQualityRule>>(getRepositoryToken(DataQualityRule))\r\n    metricRepository = module.get<Repository<DataQualityMetric>>(getRepositoryToken(DataQualityMetric))\r\n    issueRepository = module.get<Repository<DataQualityIssue>>(getRepositoryToken(DataQualityIssue))\r\n    policyRepository = module.get<Repository<DataGovernancePolicy>>(getRepositoryToken(DataGovernancePolicy))\r\n    lineageRepository = module.get<Repository<DataLineage>>(getRepositoryToken(DataLineage))\r\n    reportRepository = module.get<Repository<DataQualityReport>>(getRepositoryToken(DataQualityReport))\r\n\r\n    dataQualityQueue = module.get<Queue>(getQueueToken(\"data-quality\"))\r\n    cleansingQueue = module.get<Queue>(getQueueToken(\"data-cleansing\"))\r\n    monitoringQueue = module.get<Queue>(getQueueToken(\"data-quality-monitoring\"))\r\n    eventEmitter = module.get<EventEmitter2>(EventEmitter2)\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"Complete Data Quality Flow\", () => {\r\n    it(\"should execute complete data quality check flow\", async () => {\r\n      // Setup test data\r\n      const testData = [\r\n        { id: 1, name: \"John Doe\", email: \"john@example.com\", age: 30 },\r\n        { id: 2, name: \"\", email: \"invalid-email\", age: -5 },\r\n        { id: 3, name: \"Jane Smith\", email: \"jane@example.com\", age: 25 },\r\n      ]\r\n\r\n      // Setup rules\r\n      const mockRules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Name Completeness\",\r\n          ruleType: RuleType.COMPLETENESS,\r\n          severity: RuleSeverity.HIGH,\r\n          threshold: 90,\r\n          entityType: \"user\",\r\n          conditions: { field: \"name\" },\r\n          status: RuleStatus.ACTIVE,\r\n        },\r\n        {\r\n          id: \"rule2\",\r\n          name: \"Email Validity\",\r\n          ruleType: RuleType.VALIDITY,\r\n          severity: RuleSeverity.HIGH,\r\n          threshold: 95,\r\n          entityType: \"user\",\r\n          conditions: { field: \"email\", dataType: \"email\" },\r\n          status: RuleStatus.ACTIVE,\r\n        },\r\n        {\r\n          id: \"rule3\",\r\n          name: \"Age Range\",\r\n          ruleType: RuleType.VALIDITY,\r\n          severity: RuleSeverity.MEDIUM,\r\n          threshold: 100,\r\n          entityType: \"user\",\r\n          conditions: { field: \"age\", range: { min: 0, max: 120 } },\r\n          status: RuleStatus.ACTIVE,\r\n        },\r\n      ]\r\n\r\n      // Mock repository responses\r\n      jest.spyOn(ruleRepository, \"find\").mockResolvedValue(mockRules as any)\r\n      jest.spyOn(metricRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(metricRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(issueRepository, \"findOne\").mockResolvedValue(null)\r\n      jest.spyOn(issueRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(issueRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(dataQualityQueue, \"add\").mockResolvedValue({} as any)\r\n\r\n      // Execute data quality check\r\n      const result = await dataQualityService.checkDataQuality(\"user\", testData)\r\n\r\n      // Verify results\r\n      expect(result.passed).toBe(false)\r\n      expect(result.issues.length).toBeGreaterThan(0)\r\n      expect(result.metrics.length).toBe(3) // One for each rule\r\n\r\n      // Verify that metrics were recorded\r\n      expect(metricRepository.save).toHaveBeenCalledTimes(3)\r\n\r\n      // Verify that issues were created\r\n      expect(issueRepository.save).toHaveBeenCalled()\r\n\r\n      // Verify that background processing was queued\r\n      expect(dataQualityQueue.add).toHaveBeenCalledWith(\"process-quality-check\", {\r\n        entityType: \"user\",\r\n        result,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should integrate with governance policies\", async () => {\r\n      // Setup governance policy\r\n      const mockPolicy = {\r\n        id: \"policy1\",\r\n        name: \"User Data Policy\",\r\n        category: \"privacy\",\r\n        rules: { requireEmailValidation: true, minAge: 18 },\r\n        entityTypes: [\"user\"],\r\n        status: \"active\",\r\n      }\r\n\r\n      jest.spyOn(policyRepository, \"find\").mockResolvedValue([mockPolicy] as any)\r\n\r\n      const testData = [\r\n        { id: 1, name: \"John Doe\", email: \"john@example.com\", age: 25 },\r\n        { id: 2, name: \"Jane Smith\", email: \"jane@example.com\", age: 16 },\r\n      ]\r\n\r\n      // Execute compliance validation\r\n      const complianceResult = await governanceService.validateCompliance(\"user\", testData)\r\n\r\n      expect(complianceResult).toHaveProperty(\"compliant\")\r\n      expect(complianceResult).toHaveProperty(\"violations\")\r\n      expect(complianceResult).toHaveProperty(\"score\")\r\n\r\n      // Should have violations for underage user\r\n      if (!complianceResult.compliant) {\r\n        expect(complianceResult.violations.length).toBeGreaterThan(0)\r\n      }\r\n    })\r\n\r\n    it(\"should perform data cleansing after quality check\", async () => {\r\n      const dirtyData = [\r\n        { id: 1, name: \"  John Doe  \", email: \"JOHN@EXAMPLE.COM\", phone: \"123-456-7890\" },\r\n        { id: 2, name: \"jane smith\", email: \"jane@example.com\", phone: \"(555) 123-4567\" },\r\n      ]\r\n\r\n      const cleansingRules = [\r\n        { field: \"name\", operations: [\"trim\", \"title_case\"] },\r\n        { field: \"email\", operations: [\"lowercase\", \"trim\"] },\r\n        { field: \"phone\", operations: [\"normalize_phone\"] },\r\n      ]\r\n\r\n      jest.spyOn(cleansingQueue, \"add\").mockResolvedValue({} as any)\r\n\r\n      // Execute cleansing\r\n      const cleanedData = await cleansingService.cleanseData(dirtyData, cleansingRules)\r\n\r\n      expect(cleanedData).toHaveLength(2)\r\n      expect(cleanedData[0].name).toBe(\"John Doe\")\r\n      expect(cleanedData[0].email).toBe(\"john@example.com\")\r\n      expect(cleanedData[1].name).toBe(\"Jane Smith\")\r\n    })\r\n\r\n    it(\"should generate comprehensive quality report\", async () => {\r\n      // Setup mock data for reporting\r\n      const mockMetrics = [\r\n        {\r\n          id: \"metric1\",\r\n          entityType: \"user\",\r\n          metricCategory: \"completeness\",\r\n          value: 85,\r\n          passed: true,\r\n          timestamp: new Date(),\r\n        },\r\n        {\r\n          id: \"metric2\",\r\n          entityType: \"user\",\r\n          metricCategory: \"accuracy\",\r\n          value: 92,\r\n          passed: true,\r\n          timestamp: new Date(),\r\n        },\r\n      ]\r\n\r\n      const mockIssues = [\r\n        {\r\n          id: \"issue1\",\r\n          entityType: \"user\",\r\n          title: \"Email Validation Failed\",\r\n          priority: \"high\",\r\n          status: \"open\",\r\n          createdAt: new Date(),\r\n        },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValue(mockMetrics)\r\n      jest.spyOn(issueRepository, \"find\").mockResolvedValue(mockIssues as any)\r\n      jest.spyOn(reportRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(reportRepository, \"save\").mockResolvedValue({} as any)\r\n\r\n      // Generate report\r\n      const report = await reportingService.generateQualityReport({\r\n        entityType: \"user\",\r\n        startDate: new Date(\"2024-01-01\"),\r\n        endDate: new Date(\"2024-01-31\"),\r\n        includeRecommendations: true,\r\n      })\r\n\r\n      expect(report).toHaveProperty(\"reportId\")\r\n      expect(report).toHaveProperty(\"entityType\", \"user\")\r\n      expect(report).toHaveProperty(\"overallScore\")\r\n      expect(report).toHaveProperty(\"categoryScores\")\r\n      expect(report).toHaveProperty(\"issues\")\r\n      expect(report).toHaveProperty(\"recommendations\")\r\n      expect(report).toHaveProperty(\"generatedAt\")\r\n\r\n      // Verify report was saved\r\n      expect(reportRepository.save).toHaveBeenCalled()\r\n    })\r\n\r\n    it(\"should handle real-time monitoring and alerting\", async () => {\r\n      // Setup monitoring scenario\r\n      const mockMetrics = {\r\n        currentScore: 45, // Low score to trigger alert\r\n        trend: \"declining\" as const,\r\n        activeChecks: 10,\r\n        failureRate: 65, // High failure rate\r\n        lastCheckTime: new Date(),\r\n      }\r\n\r\n      // Mock unique entity types\r\n      mockQueryBuilder.getRawMany.mockResolvedValue([{ entityType: \"user\" }])\r\n\r\n      // Mock real-time metrics\r\n      jest.spyOn(monitoringService, \"getRealTimeMetrics\").mockResolvedValue(mockMetrics)\r\n\r\n      // Execute real-time monitoring\r\n      await monitoringService.performRealTimeMonitoring()\r\n\r\n      // Verify alerts were emitted\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"metrics.realtime\", {\r\n        entityType: \"user\",\r\n        metrics: mockMetrics,\r\n        timestamp: expect.any(Date),\r\n      })\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"alert.critical\", {\r\n        type: \"high_failure_rate\",\r\n        entityType: \"user\",\r\n        failureRate: 65,\r\n        timestamp: expect.any(Date),\r\n      })\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"alert.critical\", {\r\n        type: \"low_quality_score\",\r\n        entityType: \"user\",\r\n        score: 45,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should track data lineage through transformations\", async () => {\r\n      // Setup lineage tracking\r\n      const lineageData = {\r\n        sourceEntity: \"raw_users\",\r\n        targetEntity: \"processed_users\",\r\n        transformationType: \"cleansing\" as any,\r\n        transformationRules: {\r\n          operations: [\"trim\", \"normalize\", \"validate\"],\r\n          qualityRules: [\"completeness\", \"validity\"],\r\n        },\r\n        dataFlow: \"User Data Processing Pipeline\",\r\n      }\r\n\r\n      jest.spyOn(lineageRepository, \"create\").mockReturnValue(lineageData as any)\r\n      jest.spyOn(lineageRepository, \"save\").mockResolvedValue(lineageData as any)\r\n\r\n      // Create lineage record\r\n      const lineage = await governanceService.createLineage(lineageData)\r\n\r\n      expect(lineage).toEqual(lineageData)\r\n      expect(lineageRepository.create).toHaveBeenCalledWith(lineageData)\r\n      expect(lineageRepository.save).toHaveBeenCalledWith(lineageData)\r\n\r\n      // Verify lineage can be retrieved\r\n      mockQueryBuilder.getMany.mockResolvedValue([lineageData])\r\n      const retrievedLineage = await governanceService.getLineage(\"processed_users\")\r\n\r\n      expect(retrievedLineage).toContain(lineageData)\r\n    })\r\n\r\n    it(\"should handle end-to-end quality improvement workflow\", async () => {\r\n      // 1. Initial quality check reveals issues\r\n      const initialData = [\r\n        { id: 1, name: \"\", email: \"invalid\", age: -1 },\r\n        { id: 2, name: \"John\", email: \"john@example.com\", age: 30 },\r\n      ]\r\n\r\n      const mockRules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Completeness Check\",\r\n          ruleType: RuleType.COMPLETENESS,\r\n          severity: RuleSeverity.HIGH,\r\n          threshold: 100,\r\n          entityType: \"user\",\r\n          conditions: { field: \"name\" },\r\n          status: RuleStatus.ACTIVE,\r\n          autoFix: true,\r\n          fixActions: { defaultValue: \"Unknown\" },\r\n        },\r\n      ]\r\n\r\n      jest.spyOn(ruleRepository, \"find\").mockResolvedValue(mockRules as any)\r\n      jest.spyOn(metricRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(metricRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(issueRepository, \"findOne\").mockResolvedValue(null)\r\n      jest.spyOn(issueRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(issueRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(dataQualityQueue, \"add\").mockResolvedValue({} as any)\r\n\r\n      // 2. Execute quality check\r\n      const qualityResult = await dataQualityService.checkDataQuality(\"user\", initialData)\r\n      expect(qualityResult.passed).toBe(false)\r\n\r\n      // 3. Apply cleansing rules\r\n      const cleansingRules = [\r\n        { field: \"name\", operations: [\"fill_empty\"], defaultValue: \"Unknown\" },\r\n        { field: \"email\", operations: [\"validate_email\"] },\r\n        { field: \"age\", operations: [\"clamp\"], min: 0, max: 120 },\r\n      ]\r\n\r\n      const cleanedData = await cleansingService.cleanseData(initialData, cleansingRules)\r\n      expect(cleanedData[0].name).toBe(\"Unknown\")\r\n      expect(cleanedData[0].age).toBe(0)\r\n\r\n      // 4. Re-run quality check on cleaned data\r\n      const improvedResult = await dataQualityService.checkDataQuality(\"user\", cleanedData)\r\n      \r\n      // Quality should be improved after cleansing\r\n      expect(improvedResult.score).toBeGreaterThan(qualityResult.score)\r\n\r\n      // 5. Generate improvement report\r\n      const improvementReport = {\r\n        originalScore: qualityResult.score,\r\n        improvedScore: improvedResult.score,\r\n        improvement: improvedResult.score - qualityResult.score,\r\n        issuesResolved: qualityResult.issues.length - improvedResult.issues.length,\r\n      }\r\n\r\n      expect(improvementReport.improvement).toBeGreaterThan(0)\r\n      expect(improvementReport.issuesResolved).toBeGreaterThanOrEqual(0)\r\n    })\r\n  })\r\n\r\n  describe(\"Error Handling and Edge Cases\", () => {\r\n    it(\"should handle empty datasets gracefully\", async () => {\r\n      const emptyData: any[] = []\r\n      jest.spyOn(ruleRepository, \"find\").mockResolvedValue([])\r\n\r\n      const result = await dataQualityService.checkDataQuality(\"user\", emptyData)\r\n\r\n      expect(result.passed).toBe(true)\r\n      expect(result.score).toBe(100)\r\n      expect(result.issues).toHaveLength(0)\r\n      expect(result.metrics).toHaveLength(0)\r\n    })\r\n\r\n    it(\"should handle missing rules gracefully\", async () => {\r\n      const testData = [{ id: 1, name: \"John\" }]\r\n      jest.spyOn(ruleRepository, \"find\").mockResolvedValue([])\r\n\r\n      const result = await dataQualityService.checkDataQuality(\"unknown_entity\", testData)\r\n\r\n      expect(result.passed).toBe(true)\r\n      expect(result.score).toBe(100)\r\n      expect(result.issues).toHaveLength(0)\r\n    })\r\n\r\n    it(\"should handle service errors gracefully\", async () => {\r\n      const testData = [{ id: 1, name: \"John\" }]\r\n      jest.spyOn(ruleRepository, \"find\").mockRejectedValue(new Error(\"Database error\"))\r\n\r\n      await expect(dataQualityService.checkDataQuality(\"user\", testData)).rejects.toThrow(\"Database error\")\r\n    })\r\n\r\n    it(\"should handle malformed data gracefully\", async () => {\r\n      const malformedData = [\r\n        null,\r\n        undefined,\r\n        { id: 1 },\r\n        { name: \"John\" },\r\n        \"invalid data\",\r\n      ]\r\n\r\n      const cleansingRules = [\r\n        { field: \"name\", operations: [\"trim\"] },\r\n      ]\r\n\r\n      // Should not throw error, but handle gracefully\r\n      const result = await cleansingService.cleanseData(malformedData as any, cleansingRules)\r\n      expect(Array.isArray(result)).toBe(true)\r\n    })\r\n  })\r\n})\r\n"],"version":3}