{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality-monitoring.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality-monitoring.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport { EventEmitter2 } from \"@nestjs/event-emitter\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { DataQualityMonitoringService } from \"../services/data-quality-monitoring.service\"\r\nimport { DataQualityMetric } from \"../entities/data-quality-metric.entity\"\r\nimport { DataQualityIssue } from \"../entities/data-quality-issue.entity\"\r\n\r\ndescribe(\"DataQualityMonitoringService\", () => {\r\n  let service: DataQualityMonitoringService\r\n  let metricRepository: Repository<DataQualityMetric>\r\n  let issueRepository: Repository<DataQualityIssue>\r\n  let eventEmitter: EventEmitter2\r\n  let monitoringQueue: Queue\r\n\r\n  const mockQueryBuilder = {\r\n    select: jest.fn().mockReturnThis(),\r\n    addSelect: jest.fn().mockReturnThis(),\r\n    where: jest.fn().mockReturnThis(),\r\n    andWhere: jest.fn().mockReturnThis(),\r\n    groupBy: jest.fn().mockReturnThis(),\r\n    orderBy: jest.fn().mockReturnThis(),\r\n    getRawOne: jest.fn(),\r\n    getRawMany: jest.fn(),\r\n    getMany: jest.fn(),\r\n    getCount: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataQualityMonitoringService,\r\n        {\r\n          provide: getRepositoryToken(DataQualityMetric),\r\n          useValue: {\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n            count: jest.fn(),\r\n            find: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityIssue),\r\n          useValue: {\r\n            count: jest.fn(),\r\n            find: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: EventEmitter2,\r\n          useValue: {\r\n            emit: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-quality-monitoring\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<DataQualityMonitoringService>(DataQualityMonitoringService)\r\n    metricRepository = module.get<Repository<DataQualityMetric>>(getRepositoryToken(DataQualityMetric))\r\n    issueRepository = module.get<Repository<DataQualityIssue>>(getRepositoryToken(DataQualityIssue))\r\n    eventEmitter = module.get<EventEmitter2>(EventEmitter2)\r\n    monitoringQueue = module.get<Queue>(getQueueToken(\"data-quality-monitoring\"))\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"getDashboard\", () => {\r\n    it(\"should return dashboard data\", async () => {\r\n      // Mock overall score calculation\r\n      mockQueryBuilder.getRawOne.mockResolvedValueOnce({ avgScore: \"85.5\" })\r\n\r\n      // Mock category scores\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([\r\n        { category: \"completeness\", avgScore: \"90.0\" },\r\n        { category: \"accuracy\", avgScore: \"80.0\" },\r\n      ])\r\n\r\n      // Mock trend data\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([\r\n        { date: \"2024-01-01\", category: \"completeness\", score: \"88.0\" },\r\n        { date: \"2024-01-02\", category: \"completeness\", score: \"92.0\" },\r\n      ])\r\n\r\n      // Mock issue counts\r\n      jest.spyOn(issueRepository, \"count\")\r\n        .mockResolvedValueOnce(5) // active issues\r\n        .mockResolvedValueOnce(2) // critical issues\r\n\r\n      // Mock recent issues\r\n      jest.spyOn(issueRepository, \"find\").mockResolvedValueOnce([\r\n        {\r\n          id: \"issue1\",\r\n          title: \"Test Issue\",\r\n          description: \"Test description\",\r\n          priority: \"high\",\r\n          status: \"open\",\r\n          createdAt: new Date(),\r\n        } as any,\r\n      ])\r\n\r\n      // Mock entity counts\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([\r\n        { entityType: \"user\", count: \"100\" },\r\n        { entityType: \"course\", count: \"50\" },\r\n      ])\r\n\r\n      // Mock performance metrics\r\n      mockQueryBuilder.getCount.mockResolvedValueOnce(25)\r\n      mockQueryBuilder.getRawOne.mockResolvedValueOnce({ successRate: \"0.95\" })\r\n\r\n      const result = await service.getDashboard(\"user\")\r\n\r\n      expect(result).toHaveProperty(\"overallScore\", 85.5)\r\n      expect(result).toHaveProperty(\"categoryScores\")\r\n      expect(result.categoryScores).toHaveProperty(\"completeness\", 90)\r\n      expect(result.categoryScores).toHaveProperty(\"accuracy\", 80)\r\n      expect(result).toHaveProperty(\"trendData\")\r\n      expect(result.trendData).toHaveLength(2)\r\n      expect(result).toHaveProperty(\"activeIssues\", 5)\r\n      expect(result).toHaveProperty(\"criticalIssues\", 2)\r\n      expect(result).toHaveProperty(\"recentIssues\")\r\n      expect(result.recentIssues).toHaveLength(1)\r\n      expect(result).toHaveProperty(\"healthStatus\")\r\n      expect(result).toHaveProperty(\"lastUpdated\")\r\n      expect(result).toHaveProperty(\"entityCounts\")\r\n      expect(result).toHaveProperty(\"performanceMetrics\")\r\n    })\r\n\r\n    it(\"should calculate health status correctly\", async () => {\r\n      // Mock for critical health status\r\n      mockQueryBuilder.getRawOne.mockResolvedValueOnce({ avgScore: \"50.0\" })\r\n      mockQueryBuilder.getRawMany\r\n        .mockResolvedValueOnce([]) // category scores\r\n        .mockResolvedValueOnce([]) // trend data\r\n        .mockResolvedValueOnce([]) // entity counts\r\n\r\n      jest.spyOn(issueRepository, \"count\")\r\n        .mockResolvedValueOnce(0) // active issues\r\n        .mockResolvedValueOnce(1) // critical issues\r\n\r\n      jest.spyOn(issueRepository, \"find\").mockResolvedValueOnce([])\r\n\r\n      mockQueryBuilder.getCount.mockResolvedValueOnce(0)\r\n      mockQueryBuilder.getRawOne.mockResolvedValueOnce({ successRate: \"0.5\" })\r\n\r\n      const result = await service.getDashboard()\r\n\r\n      expect(result.healthStatus).toBe(\"critical\")\r\n    })\r\n  })\r\n\r\n  describe(\"getRealTimeMetrics\", () => {\r\n    it(\"should return real-time metrics\", async () => {\r\n      // Mock current score\r\n      mockQueryBuilder.getRawOne\r\n        .mockResolvedValueOnce({ avgScore: \"85.0\" }) // current score\r\n        .mockResolvedValueOnce({ avgScore: \"80.0\" }) // previous score\r\n        .mockResolvedValueOnce({ failureRate: \"0.1\" }) // failure rate\r\n        .mockResolvedValueOnce({ lastCheck: new Date() }) // last check\r\n\r\n      // Mock active checks count\r\n      jest.spyOn(metricRepository, \"count\").mockResolvedValueOnce(5)\r\n\r\n      const result = await service.getRealTimeMetrics(\"user\")\r\n\r\n      expect(result).toHaveProperty(\"currentScore\", 85)\r\n      expect(result).toHaveProperty(\"trend\", \"improving\")\r\n      expect(result).toHaveProperty(\"activeChecks\", 5)\r\n      expect(result).toHaveProperty(\"failureRate\", 10)\r\n      expect(result).toHaveProperty(\"lastCheckTime\")\r\n    })\r\n\r\n    it(\"should calculate trend correctly\", async () => {\r\n      // Test declining trend\r\n      mockQueryBuilder.getRawOne\r\n        .mockResolvedValueOnce({ avgScore: \"70.0\" }) // current score\r\n        .mockResolvedValueOnce({ avgScore: \"85.0\" }) // previous score (higher)\r\n        .mockResolvedValueOnce({ failureRate: \"0.2\" })\r\n        .mockResolvedValueOnce({ lastCheck: new Date() })\r\n\r\n      jest.spyOn(metricRepository, \"count\").mockResolvedValueOnce(3)\r\n\r\n      const result = await service.getRealTimeMetrics(\"user\")\r\n\r\n      expect(result.trend).toBe(\"declining\")\r\n    })\r\n\r\n    it(\"should calculate stable trend for small differences\", async () => {\r\n      // Test stable trend\r\n      mockQueryBuilder.getRawOne\r\n        .mockResolvedValueOnce({ avgScore: \"82.0\" }) // current score\r\n        .mockResolvedValueOnce({ avgScore: \"80.0\" }) // previous score (small diff)\r\n        .mockResolvedValueOnce({ failureRate: \"0.05\" })\r\n        .mockResolvedValueOnce({ lastCheck: new Date() })\r\n\r\n      jest.spyOn(metricRepository, \"count\").mockResolvedValueOnce(2)\r\n\r\n      const result = await service.getRealTimeMetrics(\"user\")\r\n\r\n      expect(result.trend).toBe(\"stable\")\r\n    })\r\n  })\r\n\r\n  describe(\"getQualityAlerts\", () => {\r\n    it(\"should return quality alerts\", async () => {\r\n      const mockIssues = [\r\n        {\r\n          id: \"issue1\",\r\n          priority: \"critical\",\r\n          description: \"Critical data quality issue\",\r\n          createdAt: new Date(),\r\n          entityType: \"user\",\r\n        },\r\n      ]\r\n\r\n      const mockMetrics = [\r\n        {\r\n          id: \"metric1\",\r\n          metricName: \"completeness_check\",\r\n          value: 60,\r\n          threshold: 80,\r\n          timestamp: new Date(),\r\n          entityType: \"user\",\r\n        },\r\n      ]\r\n\r\n      jest.spyOn(issueRepository, \"find\").mockResolvedValueOnce(mockIssues as any)\r\n      jest.spyOn(metricRepository, \"find\").mockResolvedValueOnce(mockMetrics as any)\r\n\r\n      const result = await service.getQualityAlerts(\"user\")\r\n\r\n      expect(result).toHaveLength(2)\r\n      expect(result[0]).toHaveProperty(\"type\", \"quality_issue\")\r\n      expect(result[1]).toHaveProperty(\"type\", \"threshold_breach\")\r\n    })\r\n  })\r\n\r\n  describe(\"getMetricHistory\", () => {\r\n    it(\"should return metric history\", async () => {\r\n      const mockMetrics = [\r\n        {\r\n          timestamp: new Date(\"2024-01-01\"),\r\n          value: 85,\r\n          passed: true,\r\n        },\r\n        {\r\n          timestamp: new Date(\"2024-01-02\"),\r\n          value: 90,\r\n          passed: true,\r\n        },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValueOnce(mockMetrics)\r\n\r\n      const result = await service.getMetricHistory(\"completeness_check\", \"user\", 7)\r\n\r\n      expect(result).toHaveLength(2)\r\n      expect(result[0]).toHaveProperty(\"timestamp\")\r\n      expect(result[0]).toHaveProperty(\"value\", 85)\r\n      expect(result[0]).toHaveProperty(\"passed\", true)\r\n    })\r\n  })\r\n\r\n  describe(\"acknowledgeAlert\", () => {\r\n    it(\"should emit acknowledgment event\", async () => {\r\n      const alertId = \"alert123\"\r\n      const acknowledgedBy = \"user123\"\r\n\r\n      await service.acknowledgeAlert(alertId, acknowledgedBy)\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"alert.acknowledged\", {\r\n        alertId,\r\n        acknowledgedBy,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"scheduleQualityCheck\", () => {\r\n    it(\"should schedule quality check job\", async () => {\r\n      const entityType = \"user\"\r\n      const delay = 5000\r\n\r\n      await service.scheduleQualityCheck(entityType, delay)\r\n\r\n      expect(monitoringQueue.add).toHaveBeenCalledWith(\r\n        \"quality-check\",\r\n        { entityType },\r\n        { delay }\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"performRealTimeMonitoring\", () => {\r\n    it(\"should perform real-time monitoring and emit events\", async () => {\r\n      // Mock unique entity types\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([\r\n        { entityType: \"user\" },\r\n        { entityType: \"course\" },\r\n      ])\r\n\r\n      // Mock real-time metrics for each entity type\r\n      const mockMetrics = {\r\n        currentScore: 85,\r\n        trend: \"improving\" as const,\r\n        activeChecks: 5,\r\n        failureRate: 10,\r\n        lastCheckTime: new Date(),\r\n      }\r\n\r\n      // Mock the getRealTimeMetrics calls\r\n      jest.spyOn(service, \"getRealTimeMetrics\")\r\n        .mockResolvedValueOnce(mockMetrics)\r\n        .mockResolvedValueOnce(mockMetrics)\r\n\r\n      await service.performRealTimeMonitoring()\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"metrics.realtime\", {\r\n        entityType: \"user\",\r\n        metrics: mockMetrics,\r\n        timestamp: expect.any(Date),\r\n      })\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"metrics.realtime\", {\r\n        entityType: \"course\",\r\n        metrics: mockMetrics,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should emit critical alerts for high failure rate\", async () => {\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([{ entityType: \"user\" }])\r\n\r\n      const mockMetrics = {\r\n        currentScore: 85,\r\n        trend: \"stable\" as const,\r\n        activeChecks: 5,\r\n        failureRate: 60, // High failure rate\r\n        lastCheckTime: new Date(),\r\n      }\r\n\r\n      jest.spyOn(service, \"getRealTimeMetrics\").mockResolvedValueOnce(mockMetrics)\r\n\r\n      await service.performRealTimeMonitoring()\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"alert.critical\", {\r\n        type: \"high_failure_rate\",\r\n        entityType: \"user\",\r\n        failureRate: 60,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n\r\n    it(\"should emit critical alerts for low quality score\", async () => {\r\n      mockQueryBuilder.getRawMany.mockResolvedValueOnce([{ entityType: \"user\" }])\r\n\r\n      const mockMetrics = {\r\n        currentScore: 50, // Low score\r\n        trend: \"declining\" as const,\r\n        activeChecks: 5,\r\n        failureRate: 20,\r\n        lastCheckTime: new Date(),\r\n      }\r\n\r\n      jest.spyOn(service, \"getRealTimeMetrics\").mockResolvedValueOnce(mockMetrics)\r\n\r\n      await service.performRealTimeMonitoring()\r\n\r\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\"alert.critical\", {\r\n        type: \"low_quality_score\",\r\n        entityType: \"user\",\r\n        score: 50,\r\n        timestamp: expect.any(Date),\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"monitorQualityThresholds\", () => {\r\n    it(\"should log warnings for threshold breaches\", async () => {\r\n      const mockMetrics = [\r\n        {\r\n          metricName: \"completeness_check\",\r\n          value: 60,\r\n          threshold: 80,\r\n        },\r\n        {\r\n          metricName: \"accuracy_check\",\r\n          value: 90,\r\n          threshold: 85,\r\n        },\r\n      ]\r\n\r\n      jest.spyOn(metricRepository, \"find\").mockResolvedValueOnce(mockMetrics as any)\r\n      const loggerSpy = jest.spyOn(service[\"logger\"], \"warn\")\r\n\r\n      await service.monitorQualityThresholds()\r\n\r\n      expect(loggerSpy).toHaveBeenCalledWith(\r\n        \"Quality threshold breach: completeness_check = 60 (threshold: 80)\"\r\n      )\r\n      expect(loggerSpy).not.toHaveBeenCalledWith(\r\n        expect.stringContaining(\"accuracy_check\")\r\n      )\r\n    })\r\n  })\r\n})\r\n"],"version":3}