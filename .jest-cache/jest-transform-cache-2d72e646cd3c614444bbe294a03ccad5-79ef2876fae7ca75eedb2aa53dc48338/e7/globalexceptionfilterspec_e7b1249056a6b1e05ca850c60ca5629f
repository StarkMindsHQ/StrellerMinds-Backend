c9afb473cee4582d5e011d34b7bd4362
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const global_exception_filter_1 = require("./global-exception.filter");
const nestjs_i18n_1 = require("nestjs-i18n");
const error_codes_enum_1 = require("../errors/error-codes.enum");
const custom_exception_1 = require("../errors/custom.exception");
describe('GlobalExceptionsFilter', () => {
    let filter;
    let mockI18nService;
    beforeEach(async () => {
        mockI18nService = {
            translate: jest.fn().mockImplementation((key) => Promise.resolve(`translated-${key}`)),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                global_exception_filter_1.GlobalExceptionsFilter,
                {
                    provide: nestjs_i18n_1.I18nService,
                    useValue: mockI18nService,
                },
            ],
        }).compile();
        filter = module.get(global_exception_filter_1.GlobalExceptionsFilter);
    });
    const mockArgumentsHost = {
        switchToHttp: () => ({
            getResponse: () => ({
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            }),
            getRequest: () => ({
                url: '/test',
                acceptsLanguages: () => 'en',
            }),
        }),
    };
    it('should handle CustomException', async () => {
        const exception = new custom_exception_1.CustomException(error_codes_enum_1.ErrorCode.NOT_FOUND, 'Resource not found', common_1.HttpStatus.NOT_FOUND);
        await filter.catch(exception, mockArgumentsHost);
        const response = mockArgumentsHost.switchToHttp().getResponse();
        expect(response.status).toHaveBeenCalledWith(common_1.HttpStatus.NOT_FOUND);
        expect(response.json).toHaveBeenCalledWith(expect.objectContaining({
            errorCode: error_codes_enum_1.ErrorCode.NOT_FOUND,
            statusCode: common_1.HttpStatus.NOT_FOUND,
            message: expect.any(String),
            timestamp: expect.any(String),
            path: '/test',
        }));
    });
    it('should handle HttpException', async () => {
        const exception = new common_1.HttpException('Test error', common_1.HttpStatus.BAD_REQUEST);
        await filter.catch(exception, mockArgumentsHost);
        const response = mockArgumentsHost.switchToHttp().getResponse();
        expect(response.status).toHaveBeenCalledWith(common_1.HttpStatus.BAD_REQUEST);
        expect(response.json).toHaveBeenCalledWith(expect.objectContaining({
            errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
            statusCode: common_1.HttpStatus.BAD_REQUEST,
            message: expect.any(String),
            timestamp: expect.any(String),
            path: '/test',
        }));
    });
    it('should handle unknown errors', async () => {
        const exception = new Error('Unknown error');
        await filter.catch(exception, mockArgumentsHost);
        const response = mockArgumentsHost.switchToHttp().getResponse();
        expect(response.status).toHaveBeenCalledWith(common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        expect(response.json).toHaveBeenCalledWith(expect.objectContaining({
            errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
            statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
            message: expect.any(String),
            timestamp: expect.any(String),
            path: '/test',
        }));
    });
    it('should include stack trace in development environment', async () => {
        process.env.NODE_ENV = 'development';
        const exception = new Error('Test error');
        exception.stack = 'Test stack trace';
        await filter.catch(exception, mockArgumentsHost);
        const response = mockArgumentsHost.switchToHttp().getResponse();
        expect(response.json).toHaveBeenCalledWith(expect.objectContaining({
            stack: 'Test stack trace',
        }));
    });
    it('should not include stack trace in production environment', async () => {
        process.env.NODE_ENV = 'production';
        const exception = new Error('Test error');
        exception.stack = 'Test stack trace';
        await filter.catch(exception, mockArgumentsHost);
        const response = mockArgumentsHost.switchToHttp().getResponse();
        expect(response.json).toHaveBeenCalledWith(expect.not.objectContaining({
            stack: expect.any(String),
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,