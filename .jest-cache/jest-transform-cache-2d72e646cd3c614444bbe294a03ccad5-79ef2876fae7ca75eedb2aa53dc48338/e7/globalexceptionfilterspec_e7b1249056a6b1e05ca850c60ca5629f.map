{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\filters\\global-exception.filter.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\filters\\global-exception.filter.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { GlobalExceptionsFilter } from './global-exception.filter';\r\nimport { I18nService } from 'nestjs-i18n';\r\nimport { ErrorCode } from '../errors/error-codes.enum';\r\nimport { CustomException } from '../errors/custom.exception';\r\n\r\ndescribe('GlobalExceptionsFilter', () => {\r\n  let filter: GlobalExceptionsFilter;\r\n  let mockI18nService: Partial<I18nService>;\r\n\r\n  beforeEach(async () => {\r\n    mockI18nService = {\r\n      translate: jest.fn().mockImplementation((key: string) => \r\n        Promise.resolve(`translated-${key}`)\r\n      ),\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        GlobalExceptionsFilter,\r\n        {\r\n          provide: I18nService,\r\n          useValue: mockI18nService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    filter = module.get<GlobalExceptionsFilter>(GlobalExceptionsFilter);\r\n  });\r\n\r\n  const mockArgumentsHost = {\r\n    switchToHttp: () => ({\r\n      getResponse: () => ({\r\n        status: jest.fn().mockReturnThis(),\r\n        json: jest.fn(),\r\n      }),\r\n      getRequest: () => ({\r\n        url: '/test',\r\n        acceptsLanguages: () => 'en',\r\n      }),\r\n    }),\r\n  } as ArgumentsHost;\r\n\r\n  it('should handle CustomException', async () => {\r\n    const exception = new CustomException(\r\n      ErrorCode.NOT_FOUND,\r\n      'Resource not found',\r\n      HttpStatus.NOT_FOUND\r\n    );\r\n\r\n    await filter.catch(exception, mockArgumentsHost);\r\n\r\n    const response = mockArgumentsHost.switchToHttp().getResponse();\r\n    expect(response.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);\r\n    expect(response.json).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        errorCode: ErrorCode.NOT_FOUND,\r\n        statusCode: HttpStatus.NOT_FOUND,\r\n        message: expect.any(String),\r\n        timestamp: expect.any(String),\r\n        path: '/test',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should handle HttpException', async () => {\r\n    const exception = new HttpException('Test error', HttpStatus.BAD_REQUEST);\r\n\r\n    await filter.catch(exception, mockArgumentsHost);\r\n\r\n    const response = mockArgumentsHost.switchToHttp().getResponse();\r\n    expect(response.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);\r\n    expect(response.json).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        errorCode: ErrorCode.INTERNAL_ERROR,\r\n        statusCode: HttpStatus.BAD_REQUEST,\r\n        message: expect.any(String),\r\n        timestamp: expect.any(String),\r\n        path: '/test',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should handle unknown errors', async () => {\r\n    const exception = new Error('Unknown error');\r\n\r\n    await filter.catch(exception, mockArgumentsHost);\r\n\r\n    const response = mockArgumentsHost.switchToHttp().getResponse();\r\n    expect(response.status).toHaveBeenCalledWith(HttpStatus.INTERNAL_SERVER_ERROR);\r\n    expect(response.json).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        errorCode: ErrorCode.INTERNAL_ERROR,\r\n        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        message: expect.any(String),\r\n        timestamp: expect.any(String),\r\n        path: '/test',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should include stack trace in development environment', async () => {\r\n    process.env.NODE_ENV = 'development';\r\n    const exception = new Error('Test error');\r\n    exception.stack = 'Test stack trace';\r\n\r\n    await filter.catch(exception, mockArgumentsHost);\r\n\r\n    const response = mockArgumentsHost.switchToHttp().getResponse();\r\n    expect(response.json).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        stack: 'Test stack trace',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should not include stack trace in production environment', async () => {\r\n    process.env.NODE_ENV = 'production';\r\n    const exception = new Error('Test error');\r\n    exception.stack = 'Test stack trace';\r\n\r\n    await filter.catch(exception, mockArgumentsHost);\r\n\r\n    const response = mockArgumentsHost.switchToHttp().getResponse();\r\n    expect(response.json).toHaveBeenCalledWith(\r\n      expect.not.objectContaining({\r\n        stack: expect.any(String),\r\n      })\r\n    );\r\n  });\r\n});"],"version":3}