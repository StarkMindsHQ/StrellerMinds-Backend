{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\recommendation-analytics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\recommendation-analytics.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { RecommendationAnalytics, AnalyticsEventType } from '../entities/recommendation-analytics.entity';\r\nimport { RecommendationMetrics } from '../entities/recommendation-analytics.entity';\r\nimport { Recommendation } from '../entities/recommendation.entity';\r\n\r\ninterface RecommendationGenerationEvent {\r\n  userId: string;\r\n  recommendationIds: string[];\r\n  algorithmVersion: string;\r\n  generationTimeMs: number;\r\n  context?: any;\r\n}\r\n\r\ninterface RecommendationInteractionEvent {\r\n  recommendationId: string;\r\n  userId: string;\r\n  interactionType: string;\r\n  metadata?: any;\r\n}\r\n\r\ninterface RecommendationFeedbackEvent {\r\n  recommendationId: string;\r\n  userId: string;\r\n  score: number;\r\n  feedbackType: string;\r\n  comment?: string;\r\n}\r\n\r\ninterface AnalyticsQuery {\r\n  startDate?: Date;\r\n  endDate?: Date;\r\n  userId?: string;\r\n  algorithmVersion?: string;\r\n  eventType?: AnalyticsEventType;\r\n  limit?: number;\r\n  offset?: number;\r\n}\r\n\r\ninterface RecommendationMetricsReport {\r\n  totalRecommendations: number;\r\n  totalInteractions: number;\r\n  clickThroughRate: number;\r\n  conversionRate: number;\r\n  averageRating: number;\r\n  algorithmPerformance: Record<string, {\r\n    count: number;\r\n    ctr: number;\r\n    avgRating: number;\r\n    avgGenerationTime: number;\r\n  }>;\r\n  topPerformingReasons: Array<{\r\n    reason: string;\r\n    count: number;\r\n    ctr: number;\r\n    avgRating: number;\r\n  }>;\r\n  userEngagement: {\r\n    activeUsers: number;\r\n    avgRecommendationsPerUser: number;\r\n    avgInteractionsPerUser: number;\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class RecommendationAnalyticsService {\r\n  private readonly logger = new Logger(RecommendationAnalyticsService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(RecommendationAnalytics)\r\n    private analyticsRepository: Repository<RecommendationAnalytics>,\r\n    @InjectRepository(RecommendationMetrics)\r\n    private metricsRepository: Repository<RecommendationMetrics>,\r\n    @InjectRepository(Recommendation)\r\n    private recommendationRepository: Repository<Recommendation>,\r\n  ) {}\r\n\r\n  /**\r\n   * Track recommendation generation event\r\n   */\r\n  async trackRecommendationGeneration(event: RecommendationGenerationEvent): Promise<void> {\r\n    try {\r\n      const analytics = new RecommendationAnalytics();\r\n      analytics.userId = event.userId;\r\n      analytics.eventType = AnalyticsEventType.RECOMMENDATION_GENERATED;\r\n      analytics.metadata = {\r\n        recommendationIds: event.recommendationIds,\r\n        algorithmVersion: event.algorithmVersion,\r\n        generationTimeMs: event.generationTimeMs,\r\n        context: event.context,\r\n        count: event.recommendationIds.length,\r\n      };\r\n\r\n      await this.analyticsRepository.save(analytics);\r\n\r\n      // Update metrics\r\n      await this.updateGenerationMetrics(event);\r\n\r\n      this.logger.log(`Tracked recommendation generation for user ${event.userId}: ${event.recommendationIds.length} recommendations`);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error tracking recommendation generation:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track recommendation interaction event\r\n   */\r\n  async trackRecommendationInteraction(event: RecommendationInteractionEvent): Promise<void> {\r\n    try {\r\n      const analytics = new RecommendationAnalytics();\r\n      analytics.userId = event.userId;\r\n      analytics.recommendationId = event.recommendationId;\r\n      analytics.eventType = this.mapInteractionTypeToEventType(event.interactionType);\r\n      analytics.metadata = {\r\n        interactionType: event.interactionType,\r\n        ...event.metadata,\r\n      };\r\n\r\n      await this.analyticsRepository.save(analytics);\r\n\r\n      // Update metrics\r\n      await this.updateInteractionMetrics(event);\r\n\r\n      this.logger.log(`Tracked recommendation interaction: ${event.interactionType} for recommendation ${event.recommendationId}`);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error tracking recommendation interaction:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track recommendation feedback event\r\n   */\r\n  async trackRecommendationFeedback(event: RecommendationFeedbackEvent): Promise<void> {\r\n    try {\r\n      const analytics = new RecommendationAnalytics();\r\n      analytics.userId = event.userId;\r\n      analytics.recommendationId = event.recommendationId;\r\n      analytics.eventType = AnalyticsEventType.FEEDBACK_PROVIDED;\r\n      analytics.metadata = {\r\n        score: event.score,\r\n        feedbackType: event.feedbackType,\r\n        comment: event.comment,\r\n      };\r\n\r\n      await this.analyticsRepository.save(analytics);\r\n\r\n      // Update metrics\r\n      await this.updateFeedbackMetrics(event);\r\n\r\n      this.logger.log(`Tracked recommendation feedback: score ${event.score} for recommendation ${event.recommendationId}`);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error tracking recommendation feedback:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get analytics data based on query parameters\r\n   */\r\n  async getAnalytics(query: AnalyticsQuery): Promise<RecommendationAnalytics[]> {\r\n    const queryBuilder = this.analyticsRepository.createQueryBuilder('analytics');\r\n\r\n    if (query.startDate) {\r\n      queryBuilder.andWhere('analytics.createdAt >= :startDate', { startDate: query.startDate });\r\n    }\r\n\r\n    if (query.endDate) {\r\n      queryBuilder.andWhere('analytics.createdAt <= :endDate', { endDate: query.endDate });\r\n    }\r\n\r\n    if (query.userId) {\r\n      queryBuilder.andWhere('analytics.userId = :userId', { userId: query.userId });\r\n    }\r\n\r\n    if (query.eventType) {\r\n      queryBuilder.andWhere('analytics.eventType = :eventType', { eventType: query.eventType });\r\n    }\r\n\r\n    if (query.algorithmVersion) {\r\n      queryBuilder.andWhere('analytics.metadata ->> \\'algorithmVersion\\' = :algorithmVersion', {\r\n        algorithmVersion: query.algorithmVersion,\r\n      });\r\n    }\r\n\r\n    queryBuilder.orderBy('analytics.createdAt', 'DESC');\r\n\r\n    if (query.limit) {\r\n      queryBuilder.take(query.limit);\r\n    }\r\n\r\n    if (query.offset) {\r\n      queryBuilder.skip(query.offset);\r\n    }\r\n\r\n    return await queryBuilder.getMany();\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive metrics report\r\n   */\r\n  async generateMetricsReport(startDate: Date, endDate: Date): Promise<RecommendationMetricsReport> {\r\n    try {\r\n      // Get basic counts\r\n      const totalRecommendations = await this.analyticsRepository.count({\r\n        where: {\r\n          eventType: AnalyticsEventType.RECOMMENDATION_GENERATED,\r\n          createdAt: { $gte: startDate, $lte: endDate } as any,\r\n        },\r\n      });\r\n\r\n      const totalInteractions = await this.analyticsRepository.count({\r\n        where: {\r\n          eventType: AnalyticsEventType.RECOMMENDATION_CLICKED,\r\n          createdAt: { $gte: startDate, $lte: endDate } as any,\r\n        },\r\n      });\r\n\r\n      // Calculate click-through rate\r\n      const clickThroughRate = totalRecommendations > 0 ? totalInteractions / totalRecommendations : 0;\r\n\r\n      // Get conversion data (enrollments from recommendations)\r\n      const conversions = await this.analyticsRepository.count({\r\n        where: {\r\n          eventType: AnalyticsEventType.RECOMMENDATION_CONVERTED,\r\n          createdAt: { $gte: startDate, $lte: endDate } as any,\r\n        },\r\n      });\r\n\r\n      const conversionRate = totalInteractions > 0 ? conversions / totalInteractions : 0;\r\n\r\n      // Calculate average rating from feedback\r\n      const feedbackData = await this.analyticsRepository\r\n        .createQueryBuilder('analytics')\r\n        .select('AVG(CAST(analytics.metadata ->> \\'score\\' AS FLOAT))', 'avgRating')\r\n        .where('analytics.eventType = :eventType', { eventType: AnalyticsEventType.FEEDBACK_PROVIDED })\r\n        .andWhere('analytics.createdAt >= :startDate', { startDate })\r\n        .andWhere('analytics.createdAt <= :endDate', { endDate })\r\n        .getRawOne();\r\n\r\n      const averageRating = parseFloat(feedbackData?.avgRating || '0');\r\n\r\n      // Algorithm performance analysis\r\n      const algorithmPerformance = await this.getAlgorithmPerformance(startDate, endDate);\r\n\r\n      // Top performing reasons\r\n      const topPerformingReasons = await this.getTopPerformingReasons(startDate, endDate);\r\n\r\n      // User engagement metrics\r\n      const userEngagement = await this.getUserEngagementMetrics(startDate, endDate);\r\n\r\n      return {\r\n        totalRecommendations,\r\n        totalInteractions,\r\n        clickThroughRate,\r\n        conversionRate,\r\n        averageRating,\r\n        algorithmPerformance,\r\n        topPerformingReasons,\r\n        userEngagement,\r\n      };\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error generating metrics report:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get real-time metrics for dashboard\r\n   */\r\n  async getRealTimeMetrics(): Promise<{\r\n    last24Hours: Partial<RecommendationMetricsReport>;\r\n    last7Days: Partial<RecommendationMetricsReport>;\r\n    last30Days: Partial<RecommendationMetricsReport>;\r\n  }> {\r\n    const now = new Date();\r\n    const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);\r\n    const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n    const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n\r\n    const [metrics24h, metrics7d, metrics30d] = await Promise.all([\r\n      this.generateMetricsReport(last24Hours, now),\r\n      this.generateMetricsReport(last7Days, now),\r\n      this.generateMetricsReport(last30Days, now),\r\n    ]);\r\n\r\n    return {\r\n      last24Hours: metrics24h,\r\n      last7Days: metrics7d,\r\n      last30Days: metrics30d,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get user-specific analytics\r\n   */\r\n  async getUserAnalytics(userId: string, days: number = 30): Promise<{\r\n    totalRecommendationsReceived: number;\r\n    totalInteractions: number;\r\n    averageFeedbackScore: number;\r\n    topRecommendationReasons: string[];\r\n    engagementTrend: Array<{ date: string; interactions: number }>;\r\n  }> {\r\n    const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\r\n    const endDate = new Date();\r\n\r\n    // Get user-specific analytics\r\n    const userAnalytics = await this.getAnalytics({\r\n      userId,\r\n      startDate,\r\n      endDate,\r\n    });\r\n\r\n    const totalRecommendationsReceived = userAnalytics.filter(\r\n      a => a.eventType === AnalyticsEventType.RECOMMENDATION_GENERATED\r\n    ).length;\r\n\r\n    const totalInteractions = userAnalytics.filter(\r\n      a => a.eventType === AnalyticsEventType.RECOMMENDATION_CLICKED\r\n    ).length;\r\n\r\n    // Calculate average feedback score\r\n    const feedbackEvents = userAnalytics.filter(\r\n      a => a.eventType === AnalyticsEventType.FEEDBACK_PROVIDED\r\n    );\r\n    \r\n    const averageFeedbackScore = feedbackEvents.length > 0\r\n      ? feedbackEvents.reduce((sum, event) => sum + (event.metadata?.score || 0), 0) / feedbackEvents.length\r\n      : 0;\r\n\r\n    // Get top recommendation reasons from user's recommendations\r\n    const recommendations = await this.recommendationRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 100,\r\n    });\r\n\r\n    const reasonCounts = new Map<string, number>();\r\n    recommendations.forEach(rec => {\r\n      const reason = rec.reason;\r\n      reasonCounts.set(reason, (reasonCounts.get(reason) || 0) + 1);\r\n    });\r\n\r\n    const topRecommendationReasons = Array.from(reasonCounts.entries())\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 5)\r\n      .map(([reason]) => reason);\r\n\r\n    // Generate engagement trend (daily interactions over the period)\r\n    const engagementTrend = await this.generateEngagementTrend(userId, startDate, endDate);\r\n\r\n    return {\r\n      totalRecommendationsReceived,\r\n      totalInteractions,\r\n      averageFeedbackScore,\r\n      topRecommendationReasons,\r\n      engagementTrend,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update generation metrics\r\n   */\r\n  private async updateGenerationMetrics(event: RecommendationGenerationEvent): Promise<void> {\r\n    const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\r\n    \r\n    let metrics = await this.metricsRepository.findOne({\r\n      where: { date, algorithmVersion: event.algorithmVersion },\r\n    });\r\n\r\n    if (!metrics) {\r\n      metrics = new RecommendationMetrics();\r\n      metrics.date = date;\r\n      metrics.algorithmVersion = event.algorithmVersion;\r\n      metrics.totalRecommendations = 0;\r\n      metrics.totalClicks = 0;\r\n      metrics.totalConversions = 0;\r\n      metrics.totalFeedback = 0;\r\n      metrics.averageRating = 0;\r\n      metrics.averageGenerationTime = 0;\r\n    }\r\n\r\n    metrics.totalRecommendations += event.recommendationIds.length;\r\n    \r\n    // Update average generation time\r\n    const currentAvg = metrics.averageGenerationTime || 0;\r\n    const currentCount = metrics.totalRecommendations - event.recommendationIds.length;\r\n    const newAvg = currentCount > 0 \r\n      ? (currentAvg * currentCount + event.generationTimeMs) / metrics.totalRecommendations\r\n      : event.generationTimeMs;\r\n    \r\n    metrics.averageGenerationTime = newAvg;\r\n\r\n    await this.metricsRepository.save(metrics);\r\n  }\r\n\r\n  /**\r\n   * Update interaction metrics\r\n   */\r\n  private async updateInteractionMetrics(event: RecommendationInteractionEvent): Promise<void> {\r\n    // Get recommendation to find algorithm version\r\n    const recommendation = await this.recommendationRepository.findOne({\r\n      where: { id: event.recommendationId },\r\n    });\r\n\r\n    if (!recommendation) return;\r\n\r\n    const algorithmVersion = recommendation.metadata?.algorithmUsed || 'unknown';\r\n    const date = new Date().toISOString().split('T')[0];\r\n    \r\n    let metrics = await this.metricsRepository.findOne({\r\n      where: { date, algorithmVersion },\r\n    });\r\n\r\n    if (!metrics) {\r\n      metrics = new RecommendationMetrics();\r\n      metrics.date = date;\r\n      metrics.algorithmVersion = algorithmVersion;\r\n      metrics.totalRecommendations = 0;\r\n      metrics.totalClicks = 0;\r\n      metrics.totalConversions = 0;\r\n      metrics.totalFeedback = 0;\r\n      metrics.averageRating = 0;\r\n      metrics.averageGenerationTime = 0;\r\n    }\r\n\r\n    if (event.interactionType === 'click') {\r\n      metrics.totalClicks += 1;\r\n    } else if (event.interactionType === 'enroll' || event.interactionType === 'start') {\r\n      metrics.totalConversions += 1;\r\n    }\r\n\r\n    await this.metricsRepository.save(metrics);\r\n  }\r\n\r\n  /**\r\n   * Update feedback metrics\r\n   */\r\n  private async updateFeedbackMetrics(event: RecommendationFeedbackEvent): Promise<void> {\r\n    // Get recommendation to find algorithm version\r\n    const recommendation = await this.recommendationRepository.findOne({\r\n      where: { id: event.recommendationId },\r\n    });\r\n\r\n    if (!recommendation) return;\r\n\r\n    const algorithmVersion = recommendation.metadata?.algorithmUsed || 'unknown';\r\n    const date = new Date().toISOString().split('T')[0];\r\n    \r\n    let metrics = await this.metricsRepository.findOne({\r\n      where: { date, algorithmVersion },\r\n    });\r\n\r\n    if (!metrics) {\r\n      metrics = new RecommendationMetrics();\r\n      metrics.date = date;\r\n      metrics.algorithmVersion = algorithmVersion;\r\n      metrics.totalRecommendations = 0;\r\n      metrics.totalClicks = 0;\r\n      metrics.totalConversions = 0;\r\n      metrics.totalFeedback = 0;\r\n      metrics.averageRating = 0;\r\n      metrics.averageGenerationTime = 0;\r\n    }\r\n\r\n    // Update average rating\r\n    const currentAvg = metrics.averageRating || 0;\r\n    const currentCount = metrics.totalFeedback;\r\n    const newAvg = currentCount > 0 \r\n      ? (currentAvg * currentCount + event.score) / (currentCount + 1)\r\n      : event.score;\r\n    \r\n    metrics.averageRating = newAvg;\r\n    metrics.totalFeedback += 1;\r\n\r\n    await this.metricsRepository.save(metrics);\r\n  }\r\n\r\n  /**\r\n   * Map interaction type to analytics event type\r\n   */\r\n  private mapInteractionTypeToEventType(interactionType: string): AnalyticsEventType {\r\n    const mapping = {\r\n      'view': AnalyticsEventType.RECOMMENDATION_VIEWED,\r\n      'click': AnalyticsEventType.RECOMMENDATION_CLICKED,\r\n      'dismiss': AnalyticsEventType.RECOMMENDATION_DISMISSED,\r\n      'enroll': AnalyticsEventType.RECOMMENDATION_CONVERTED,\r\n      'start': AnalyticsEventType.RECOMMENDATION_CONVERTED,\r\n    };\r\n\r\n    return mapping[interactionType as keyof typeof mapping] || AnalyticsEventType.RECOMMENDATION_VIEWED;\r\n  }\r\n\r\n  /**\r\n   * Get algorithm performance metrics\r\n   */\r\n  private async getAlgorithmPerformance(startDate: Date, endDate: Date): Promise<Record<string, any>> {\r\n    const metrics = await this.metricsRepository\r\n      .createQueryBuilder('metrics')\r\n      .where('metrics.date >= :startDate', { startDate: startDate.toISOString().split('T')[0] })\r\n      .andWhere('metrics.date <= :endDate', { endDate: endDate.toISOString().split('T')[0] })\r\n      .getMany();\r\n\r\n    const performance: Record<string, any> = {};\r\n\r\n    metrics.forEach(metric => {\r\n      const algorithm = metric.algorithmVersion;\r\n      \r\n      if (!performance[algorithm]) {\r\n        performance[algorithm] = {\r\n          count: 0,\r\n          ctr: 0,\r\n          avgRating: 0,\r\n          avgGenerationTime: 0,\r\n        };\r\n      }\r\n\r\n      performance[algorithm].count += metric.totalRecommendations;\r\n      performance[algorithm].ctr = metric.totalRecommendations > 0 \r\n        ? metric.totalClicks / metric.totalRecommendations \r\n        : 0;\r\n      performance[algorithm].avgRating = metric.averageRating;\r\n      performance[algorithm].avgGenerationTime = metric.averageGenerationTime;\r\n    });\r\n\r\n    return performance;\r\n  }\r\n\r\n  /**\r\n   * Get top performing recommendation reasons\r\n   */\r\n  private async getTopPerformingReasons(startDate: Date, endDate: Date): Promise<Array<any>> {\r\n    // This would require analyzing recommendations and their performance\r\n    // For now, return a placeholder implementation\r\n    return [\r\n      { reason: 'SKILL_GAP', count: 150, ctr: 0.25, avgRating: 4.2 },\r\n      { reason: 'SIMILAR_CONTENT', count: 120, ctr: 0.22, avgRating: 4.0 },\r\n      { reason: 'TRENDING', count: 100, ctr: 0.18, avgRating: 3.8 },\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get user engagement metrics\r\n   */\r\n  private async getUserEngagementMetrics(startDate: Date, endDate: Date): Promise<any> {\r\n    const activeUsers = await this.analyticsRepository\r\n      .createQueryBuilder('analytics')\r\n      .select('COUNT(DISTINCT analytics.userId)', 'count')\r\n      .where('analytics.createdAt >= :startDate', { startDate })\r\n      .andWhere('analytics.createdAt <= :endDate', { endDate })\r\n      .getRawOne();\r\n\r\n    const avgRecommendations = await this.analyticsRepository\r\n      .createQueryBuilder('analytics')\r\n      .select('AVG(CAST(analytics.metadata ->> \\'count\\' AS INTEGER))', 'avg')\r\n      .where('analytics.eventType = :eventType', { eventType: AnalyticsEventType.RECOMMENDATION_GENERATED })\r\n      .andWhere('analytics.createdAt >= :startDate', { startDate })\r\n      .andWhere('analytics.createdAt <= :endDate', { endDate })\r\n      .getRawOne();\r\n\r\n    const totalInteractions = await this.analyticsRepository.count({\r\n      where: {\r\n        eventType: AnalyticsEventType.RECOMMENDATION_CLICKED,\r\n        createdAt: { $gte: startDate, $lte: endDate } as any,\r\n      },\r\n    });\r\n\r\n    return {\r\n      activeUsers: parseInt(activeUsers?.count || '0'),\r\n      avgRecommendationsPerUser: parseFloat(avgRecommendations?.avg || '0'),\r\n      avgInteractionsPerUser: parseInt(activeUsers?.count || '0') > 0 \r\n        ? totalInteractions / parseInt(activeUsers.count)\r\n        : 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate engagement trend for a user\r\n   */\r\n  private async generateEngagementTrend(userId: string, startDate: Date, endDate: Date): Promise<Array<any>> {\r\n    const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n    const trend = [];\r\n\r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\r\n      const nextDate = new Date(date.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n      const interactions = await this.analyticsRepository.count({\r\n        where: {\r\n          userId,\r\n          eventType: AnalyticsEventType.RECOMMENDATION_CLICKED,\r\n          createdAt: { $gte: date, $lt: nextDate } as any,\r\n        },\r\n      });\r\n\r\n      trend.push({\r\n        date: date.toISOString().split('T')[0],\r\n        interactions,\r\n      });\r\n    }\r\n\r\n    return trend;\r\n  }\r\n}\r\n"],"version":3}