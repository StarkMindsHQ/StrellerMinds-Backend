47ebd9b93fa15fc41258dd1abadfa99c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RecommendationAnalyticsService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationAnalyticsService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const recommendation_analytics_entity_1 = require("../entities/recommendation-analytics.entity");
const recommendation_analytics_entity_2 = require("../entities/recommendation-analytics.entity");
const recommendation_entity_1 = require("../entities/recommendation.entity");
let RecommendationAnalyticsService = RecommendationAnalyticsService_1 = class RecommendationAnalyticsService {
    constructor(analyticsRepository, metricsRepository, recommendationRepository) {
        this.analyticsRepository = analyticsRepository;
        this.metricsRepository = metricsRepository;
        this.recommendationRepository = recommendationRepository;
        this.logger = new common_1.Logger(RecommendationAnalyticsService_1.name);
    }
    /**
     * Track recommendation generation event
     */
    async trackRecommendationGeneration(event) {
        try {
            const analytics = new recommendation_analytics_entity_1.RecommendationAnalytics();
            analytics.userId = event.userId;
            analytics.eventType = recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_GENERATED;
            analytics.metadata = {
                recommendationIds: event.recommendationIds,
                algorithmVersion: event.algorithmVersion,
                generationTimeMs: event.generationTimeMs,
                context: event.context,
                count: event.recommendationIds.length,
            };
            await this.analyticsRepository.save(analytics);
            // Update metrics
            await this.updateGenerationMetrics(event);
            this.logger.log(`Tracked recommendation generation for user ${event.userId}: ${event.recommendationIds.length} recommendations`);
        }
        catch (error) {
            this.logger.error('Error tracking recommendation generation:', error);
        }
    }
    /**
     * Track recommendation interaction event
     */
    async trackRecommendationInteraction(event) {
        try {
            const analytics = new recommendation_analytics_entity_1.RecommendationAnalytics();
            analytics.userId = event.userId;
            analytics.recommendationId = event.recommendationId;
            analytics.eventType = this.mapInteractionTypeToEventType(event.interactionType);
            analytics.metadata = {
                interactionType: event.interactionType,
                ...event.metadata,
            };
            await this.analyticsRepository.save(analytics);
            // Update metrics
            await this.updateInteractionMetrics(event);
            this.logger.log(`Tracked recommendation interaction: ${event.interactionType} for recommendation ${event.recommendationId}`);
        }
        catch (error) {
            this.logger.error('Error tracking recommendation interaction:', error);
        }
    }
    /**
     * Track recommendation feedback event
     */
    async trackRecommendationFeedback(event) {
        try {
            const analytics = new recommendation_analytics_entity_1.RecommendationAnalytics();
            analytics.userId = event.userId;
            analytics.recommendationId = event.recommendationId;
            analytics.eventType = recommendation_analytics_entity_1.AnalyticsEventType.FEEDBACK_PROVIDED;
            analytics.metadata = {
                score: event.score,
                feedbackType: event.feedbackType,
                comment: event.comment,
            };
            await this.analyticsRepository.save(analytics);
            // Update metrics
            await this.updateFeedbackMetrics(event);
            this.logger.log(`Tracked recommendation feedback: score ${event.score} for recommendation ${event.recommendationId}`);
        }
        catch (error) {
            this.logger.error('Error tracking recommendation feedback:', error);
        }
    }
    /**
     * Get analytics data based on query parameters
     */
    async getAnalytics(query) {
        const queryBuilder = this.analyticsRepository.createQueryBuilder('analytics');
        if (query.startDate) {
            queryBuilder.andWhere('analytics.createdAt >= :startDate', { startDate: query.startDate });
        }
        if (query.endDate) {
            queryBuilder.andWhere('analytics.createdAt <= :endDate', { endDate: query.endDate });
        }
        if (query.userId) {
            queryBuilder.andWhere('analytics.userId = :userId', { userId: query.userId });
        }
        if (query.eventType) {
            queryBuilder.andWhere('analytics.eventType = :eventType', { eventType: query.eventType });
        }
        if (query.algorithmVersion) {
            queryBuilder.andWhere('analytics.metadata ->> \'algorithmVersion\' = :algorithmVersion', {
                algorithmVersion: query.algorithmVersion,
            });
        }
        queryBuilder.orderBy('analytics.createdAt', 'DESC');
        if (query.limit) {
            queryBuilder.take(query.limit);
        }
        if (query.offset) {
            queryBuilder.skip(query.offset);
        }
        return await queryBuilder.getMany();
    }
    /**
     * Generate comprehensive metrics report
     */
    async generateMetricsReport(startDate, endDate) {
        try {
            // Get basic counts
            const totalRecommendations = await this.analyticsRepository.count({
                where: {
                    eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_GENERATED,
                    createdAt: { $gte: startDate, $lte: endDate },
                },
            });
            const totalInteractions = await this.analyticsRepository.count({
                where: {
                    eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CLICKED,
                    createdAt: { $gte: startDate, $lte: endDate },
                },
            });
            // Calculate click-through rate
            const clickThroughRate = totalRecommendations > 0 ? totalInteractions / totalRecommendations : 0;
            // Get conversion data (enrollments from recommendations)
            const conversions = await this.analyticsRepository.count({
                where: {
                    eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CONVERTED,
                    createdAt: { $gte: startDate, $lte: endDate },
                },
            });
            const conversionRate = totalInteractions > 0 ? conversions / totalInteractions : 0;
            // Calculate average rating from feedback
            const feedbackData = await this.analyticsRepository
                .createQueryBuilder('analytics')
                .select('AVG(CAST(analytics.metadata ->> \'score\' AS FLOAT))', 'avgRating')
                .where('analytics.eventType = :eventType', { eventType: recommendation_analytics_entity_1.AnalyticsEventType.FEEDBACK_PROVIDED })
                .andWhere('analytics.createdAt >= :startDate', { startDate })
                .andWhere('analytics.createdAt <= :endDate', { endDate })
                .getRawOne();
            const averageRating = parseFloat(feedbackData?.avgRating || '0');
            // Algorithm performance analysis
            const algorithmPerformance = await this.getAlgorithmPerformance(startDate, endDate);
            // Top performing reasons
            const topPerformingReasons = await this.getTopPerformingReasons(startDate, endDate);
            // User engagement metrics
            const userEngagement = await this.getUserEngagementMetrics(startDate, endDate);
            return {
                totalRecommendations,
                totalInteractions,
                clickThroughRate,
                conversionRate,
                averageRating,
                algorithmPerformance,
                topPerformingReasons,
                userEngagement,
            };
        }
        catch (error) {
            this.logger.error('Error generating metrics report:', error);
            throw error;
        }
    }
    /**
     * Get real-time metrics for dashboard
     */
    async getRealTimeMetrics() {
        const now = new Date();
        const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        const [metrics24h, metrics7d, metrics30d] = await Promise.all([
            this.generateMetricsReport(last24Hours, now),
            this.generateMetricsReport(last7Days, now),
            this.generateMetricsReport(last30Days, now),
        ]);
        return {
            last24Hours: metrics24h,
            last7Days: metrics7d,
            last30Days: metrics30d,
        };
    }
    /**
     * Get user-specific analytics
     */
    async getUserAnalytics(userId, days = 30) {
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
        const endDate = new Date();
        // Get user-specific analytics
        const userAnalytics = await this.getAnalytics({
            userId,
            startDate,
            endDate,
        });
        const totalRecommendationsReceived = userAnalytics.filter(a => a.eventType === recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_GENERATED).length;
        const totalInteractions = userAnalytics.filter(a => a.eventType === recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CLICKED).length;
        // Calculate average feedback score
        const feedbackEvents = userAnalytics.filter(a => a.eventType === recommendation_analytics_entity_1.AnalyticsEventType.FEEDBACK_PROVIDED);
        const averageFeedbackScore = feedbackEvents.length > 0
            ? feedbackEvents.reduce((sum, event) => sum + (event.metadata?.score || 0), 0) / feedbackEvents.length
            : 0;
        // Get top recommendation reasons from user's recommendations
        const recommendations = await this.recommendationRepository.find({
            where: { userId },
            order: { createdAt: 'DESC' },
            take: 100,
        });
        const reasonCounts = new Map();
        recommendations.forEach(rec => {
            const reason = rec.reason;
            reasonCounts.set(reason, (reasonCounts.get(reason) || 0) + 1);
        });
        const topRecommendationReasons = Array.from(reasonCounts.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5)
            .map(([reason]) => reason);
        // Generate engagement trend (daily interactions over the period)
        const engagementTrend = await this.generateEngagementTrend(userId, startDate, endDate);
        return {
            totalRecommendationsReceived,
            totalInteractions,
            averageFeedbackScore,
            topRecommendationReasons,
            engagementTrend,
        };
    }
    /**
     * Update generation metrics
     */
    async updateGenerationMetrics(event) {
        const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
        let metrics = await this.metricsRepository.findOne({
            where: { date, algorithmVersion: event.algorithmVersion },
        });
        if (!metrics) {
            metrics = new recommendation_analytics_entity_2.RecommendationMetrics();
            metrics.date = date;
            metrics.algorithmVersion = event.algorithmVersion;
            metrics.totalRecommendations = 0;
            metrics.totalClicks = 0;
            metrics.totalConversions = 0;
            metrics.totalFeedback = 0;
            metrics.averageRating = 0;
            metrics.averageGenerationTime = 0;
        }
        metrics.totalRecommendations += event.recommendationIds.length;
        // Update average generation time
        const currentAvg = metrics.averageGenerationTime || 0;
        const currentCount = metrics.totalRecommendations - event.recommendationIds.length;
        const newAvg = currentCount > 0
            ? (currentAvg * currentCount + event.generationTimeMs) / metrics.totalRecommendations
            : event.generationTimeMs;
        metrics.averageGenerationTime = newAvg;
        await this.metricsRepository.save(metrics);
    }
    /**
     * Update interaction metrics
     */
    async updateInteractionMetrics(event) {
        // Get recommendation to find algorithm version
        const recommendation = await this.recommendationRepository.findOne({
            where: { id: event.recommendationId },
        });
        if (!recommendation)
            return;
        const algorithmVersion = recommendation.metadata?.algorithmUsed || 'unknown';
        const date = new Date().toISOString().split('T')[0];
        let metrics = await this.metricsRepository.findOne({
            where: { date, algorithmVersion },
        });
        if (!metrics) {
            metrics = new recommendation_analytics_entity_2.RecommendationMetrics();
            metrics.date = date;
            metrics.algorithmVersion = algorithmVersion;
            metrics.totalRecommendations = 0;
            metrics.totalClicks = 0;
            metrics.totalConversions = 0;
            metrics.totalFeedback = 0;
            metrics.averageRating = 0;
            metrics.averageGenerationTime = 0;
        }
        if (event.interactionType === 'click') {
            metrics.totalClicks += 1;
        }
        else if (event.interactionType === 'enroll' || event.interactionType === 'start') {
            metrics.totalConversions += 1;
        }
        await this.metricsRepository.save(metrics);
    }
    /**
     * Update feedback metrics
     */
    async updateFeedbackMetrics(event) {
        // Get recommendation to find algorithm version
        const recommendation = await this.recommendationRepository.findOne({
            where: { id: event.recommendationId },
        });
        if (!recommendation)
            return;
        const algorithmVersion = recommendation.metadata?.algorithmUsed || 'unknown';
        const date = new Date().toISOString().split('T')[0];
        let metrics = await this.metricsRepository.findOne({
            where: { date, algorithmVersion },
        });
        if (!metrics) {
            metrics = new recommendation_analytics_entity_2.RecommendationMetrics();
            metrics.date = date;
            metrics.algorithmVersion = algorithmVersion;
            metrics.totalRecommendations = 0;
            metrics.totalClicks = 0;
            metrics.totalConversions = 0;
            metrics.totalFeedback = 0;
            metrics.averageRating = 0;
            metrics.averageGenerationTime = 0;
        }
        // Update average rating
        const currentAvg = metrics.averageRating || 0;
        const currentCount = metrics.totalFeedback;
        const newAvg = currentCount > 0
            ? (currentAvg * currentCount + event.score) / (currentCount + 1)
            : event.score;
        metrics.averageRating = newAvg;
        metrics.totalFeedback += 1;
        await this.metricsRepository.save(metrics);
    }
    /**
     * Map interaction type to analytics event type
     */
    mapInteractionTypeToEventType(interactionType) {
        const mapping = {
            'view': recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_VIEWED,
            'click': recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CLICKED,
            'dismiss': recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_DISMISSED,
            'enroll': recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CONVERTED,
            'start': recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CONVERTED,
        };
        return mapping[interactionType] || recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_VIEWED;
    }
    /**
     * Get algorithm performance metrics
     */
    async getAlgorithmPerformance(startDate, endDate) {
        const metrics = await this.metricsRepository
            .createQueryBuilder('metrics')
            .where('metrics.date >= :startDate', { startDate: startDate.toISOString().split('T')[0] })
            .andWhere('metrics.date <= :endDate', { endDate: endDate.toISOString().split('T')[0] })
            .getMany();
        const performance = {};
        metrics.forEach(metric => {
            const algorithm = metric.algorithmVersion;
            if (!performance[algorithm]) {
                performance[algorithm] = {
                    count: 0,
                    ctr: 0,
                    avgRating: 0,
                    avgGenerationTime: 0,
                };
            }
            performance[algorithm].count += metric.totalRecommendations;
            performance[algorithm].ctr = metric.totalRecommendations > 0
                ? metric.totalClicks / metric.totalRecommendations
                : 0;
            performance[algorithm].avgRating = metric.averageRating;
            performance[algorithm].avgGenerationTime = metric.averageGenerationTime;
        });
        return performance;
    }
    /**
     * Get top performing recommendation reasons
     */
    async getTopPerformingReasons(startDate, endDate) {
        // This would require analyzing recommendations and their performance
        // For now, return a placeholder implementation
        return [
            { reason: 'SKILL_GAP', count: 150, ctr: 0.25, avgRating: 4.2 },
            { reason: 'SIMILAR_CONTENT', count: 120, ctr: 0.22, avgRating: 4.0 },
            { reason: 'TRENDING', count: 100, ctr: 0.18, avgRating: 3.8 },
        ];
    }
    /**
     * Get user engagement metrics
     */
    async getUserEngagementMetrics(startDate, endDate) {
        const activeUsers = await this.analyticsRepository
            .createQueryBuilder('analytics')
            .select('COUNT(DISTINCT analytics.userId)', 'count')
            .where('analytics.createdAt >= :startDate', { startDate })
            .andWhere('analytics.createdAt <= :endDate', { endDate })
            .getRawOne();
        const avgRecommendations = await this.analyticsRepository
            .createQueryBuilder('analytics')
            .select('AVG(CAST(analytics.metadata ->> \'count\' AS INTEGER))', 'avg')
            .where('analytics.eventType = :eventType', { eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_GENERATED })
            .andWhere('analytics.createdAt >= :startDate', { startDate })
            .andWhere('analytics.createdAt <= :endDate', { endDate })
            .getRawOne();
        const totalInteractions = await this.analyticsRepository.count({
            where: {
                eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CLICKED,
                createdAt: { $gte: startDate, $lte: endDate },
            },
        });
        return {
            activeUsers: parseInt(activeUsers?.count || '0'),
            avgRecommendationsPerUser: parseFloat(avgRecommendations?.avg || '0'),
            avgInteractionsPerUser: parseInt(activeUsers?.count || '0') > 0
                ? totalInteractions / parseInt(activeUsers.count)
                : 0,
        };
    }
    /**
     * Generate engagement trend for a user
     */
    async generateEngagementTrend(userId, startDate, endDate) {
        const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const trend = [];
        for (let i = 0; i < days; i++) {
            const date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);
            const nextDate = new Date(date.getTime() + 24 * 60 * 60 * 1000);
            const interactions = await this.analyticsRepository.count({
                where: {
                    userId,
                    eventType: recommendation_analytics_entity_1.AnalyticsEventType.RECOMMENDATION_CLICKED,
                    createdAt: { $gte: date, $lt: nextDate },
                },
            });
            trend.push({
                date: date.toISOString().split('T')[0],
                interactions,
            });
        }
        return trend;
    }
};
exports.RecommendationAnalyticsService = RecommendationAnalyticsService;
exports.RecommendationAnalyticsService = RecommendationAnalyticsService = RecommendationAnalyticsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(recommendation_analytics_entity_1.RecommendationAnalytics)),
    __param(1, (0, typeorm_1.InjectRepository)(recommendation_analytics_entity_2.RecommendationMetrics)),
    __param(2, (0, typeorm_1.InjectRepository)(recommendation_entity_1.Recommendation)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], RecommendationAnalyticsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,