18a46d9d9d5ce207090bd2b73e7295e4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AwsCloudFrontService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsCloudFrontService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_cloudfront_1 = require("@aws-sdk/client-cloudfront");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const crypto = __importStar(require("crypto"));
let AwsCloudFrontService = AwsCloudFrontService_1 = class AwsCloudFrontService {
    constructor(configService) {
        this.configService = configService;
        this.logger = new common_1.Logger(AwsCloudFrontService_1.name);
        this.config = {
            distributionId: this.configService.get('AWS_CLOUDFRONT_DISTRIBUTION_ID'),
            distributionDomain: this.configService.get('AWS_CLOUDFRONT_DOMAIN'),
            s3Bucket: this.configService.get('AWS_S3_BUCKET'),
            s3Region: this.configService.get('AWS_S3_REGION', 'us-east-1'),
            accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),
            secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),
            signedUrlExpiry: this.configService.get('AWS_SIGNED_URL_EXPIRY', 3600),
            privateKeyId: this.configService.get('AWS_CLOUDFRONT_PRIVATE_KEY_ID'),
            privateKey: this.configService.get('AWS_CLOUDFRONT_PRIVATE_KEY'),
        };
        this.s3Client = new client_s3_1.S3Client({
            region: this.config.s3Region,
            credentials: {
                accessKeyId: this.config.accessKeyId,
                secretAccessKey: this.config.secretAccessKey,
            },
        });
        this.cloudFrontClient = new client_cloudfront_1.CloudFrontClient({
            region: this.config.s3Region,
            credentials: {
                accessKeyId: this.config.accessKeyId,
                secretAccessKey: this.config.secretAccessKey,
            },
        });
    }
    async uploadVideo(buffer, key, contentType = 'video/mp4', metadata) {
        try {
            this.logger.debug(`Uploading video to S3: ${key}`);
            const command = new client_s3_1.PutObjectCommand({
                Bucket: this.config.s3Bucket,
                Key: key,
                Body: buffer,
                ContentType: contentType,
                Metadata: metadata,
                ServerSideEncryption: 'AES256',
                CacheControl: 'max-age=31536000', // 1 year
            });
            const result = await this.s3Client.send(command);
            const s3Url = `https://${this.config.s3Bucket}.s3.${this.config.s3Region}.amazonaws.com/${key}`;
            const cdnUrl = `https://${this.config.distributionDomain}/${key}`;
            this.logger.debug(`Video uploaded successfully: ${key}`);
            return {
                key,
                url: s3Url,
                cdnUrl,
                etag: result.ETag?.replace(/"/g, '') || '',
                size: buffer.length,
            };
        }
        catch (error) {
            this.logger.error(`Failed to upload video: ${key}`, error.stack);
            throw error;
        }
    }
    async uploadVideoStream(stream, key, contentType = 'video/mp4', contentLength, metadata) {
        try {
            this.logger.debug(`Uploading video stream to S3: ${key}`);
            const command = new client_s3_1.PutObjectCommand({
                Bucket: this.config.s3Bucket,
                Key: key,
                Body: stream,
                ContentType: contentType,
                ContentLength: contentLength,
                Metadata: metadata,
                ServerSideEncryption: 'AES256',
                CacheControl: 'max-age=31536000',
            });
            const result = await this.s3Client.send(command);
            const s3Url = `https://${this.config.s3Bucket}.s3.${this.config.s3Region}.amazonaws.com/${key}`;
            const cdnUrl = `https://${this.config.distributionDomain}/${key}`;
            this.logger.debug(`Video stream uploaded successfully: ${key}`);
            return {
                key,
                url: s3Url,
                cdnUrl,
                etag: result.ETag?.replace(/"/g, '') || '',
                size: contentLength || 0,
            };
        }
        catch (error) {
            this.logger.error(`Failed to upload video stream: ${key}`, error.stack);
            throw error;
        }
    }
    async deleteVideo(key) {
        try {
            this.logger.debug(`Deleting video from S3: ${key}`);
            const command = new client_s3_1.DeleteObjectCommand({
                Bucket: this.config.s3Bucket,
                Key: key,
            });
            await this.s3Client.send(command);
            // Invalidate CloudFront cache
            await this.invalidateCache([key]);
            this.logger.debug(`Video deleted successfully: ${key}`);
        }
        catch (error) {
            this.logger.error(`Failed to delete video: ${key}`, error.stack);
            throw error;
        }
    }
    async getVideoMetadata(key) {
        try {
            const command = new client_s3_1.HeadObjectCommand({
                Bucket: this.config.s3Bucket,
                Key: key,
            });
            const result = await this.s3Client.send(command);
            return {
                contentLength: result.ContentLength || 0,
                contentType: result.ContentType || '',
                lastModified: result.LastModified || new Date(),
                etag: result.ETag?.replace(/"/g, '') || '',
                metadata: result.Metadata || {},
            };
        }
        catch (error) {
            this.logger.error(`Failed to get video metadata: ${key}`, error.stack);
            throw error;
        }
    }
    async generateSignedUrl(key, options = {}) {
        try {
            const expiresIn = options.expiresIn || this.config.signedUrlExpiry;
            if (this.config.privateKey && this.config.privateKeyId) {
                // Use CloudFront signed URLs for better security
                return this.generateCloudFrontSignedUrl(key, expiresIn, options);
            }
            else {
                // Fallback to S3 signed URLs
                return this.generateS3SignedUrl(key, expiresIn);
            }
        }
        catch (error) {
            this.logger.error(`Failed to generate signed URL: ${key}`, error.stack);
            throw error;
        }
    }
    async generateS3SignedUrl(key, expiresIn) {
        const command = new client_s3_1.GetObjectCommand({
            Bucket: this.config.s3Bucket,
            Key: key,
        });
        return (0, s3_request_presigner_1.getSignedUrl)(this.s3Client, command, { expiresIn });
    }
    generateCloudFrontSignedUrl(key, expiresIn, options) {
        const url = `https://${this.config.distributionDomain}/${key}`;
        const expiration = Math.floor(Date.now() / 1000) + expiresIn;
        // Create policy
        const policy = options.policy || {
            Statement: [
                {
                    Resource: url,
                    Condition: {
                        DateLessThan: {
                            'AWS:EpochTime': expiration,
                        },
                        ...(options.ipAddress && {
                            IpAddress: {
                                'AWS:SourceIp': options.ipAddress,
                            },
                        }),
                    },
                },
            ],
        };
        const policyString = JSON.stringify(policy);
        const policyBase64 = Buffer.from(policyString).toString('base64');
        // Create signature
        const signature = crypto
            .createSign('RSA-SHA1')
            .update(policyString)
            .sign(this.config.privateKey, 'base64');
        // URL-safe base64 encoding
        const urlSafePolicy = policyBase64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        const urlSafeSignature = signature.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        return `${url}?Policy=${urlSafePolicy}&Signature=${urlSafeSignature}&Key-Pair-Id=${this.config.privateKeyId}`;
    }
    async invalidateCache(paths) {
        try {
            if (!this.config.distributionId) {
                this.logger.warn('CloudFront distribution ID not configured, skipping cache invalidation');
                return;
            }
            this.logger.debug(`Invalidating CloudFront cache for paths: ${paths.join(', ')}`);
            const command = new client_cloudfront_1.CreateInvalidationCommand({
                DistributionId: this.config.distributionId,
                InvalidationBatch: {
                    Paths: {
                        Quantity: paths.length,
                        Items: paths.map(path => `/${path}`),
                    },
                    CallerReference: `invalidation-${Date.now()}`,
                },
            });
            const result = await this.cloudFrontClient.send(command);
            this.logger.debug(`Cache invalidation created: ${result.Invalidation?.Id}`);
        }
        catch (error) {
            this.logger.error('Failed to invalidate CloudFront cache', error.stack);
            throw error;
        }
    }
    async getDistributionInfo() {
        try {
            if (!this.config.distributionId) {
                throw new Error('CloudFront distribution ID not configured');
            }
            const command = new client_cloudfront_1.GetDistributionCommand({
                Id: this.config.distributionId,
            });
            const result = await this.cloudFrontClient.send(command);
            return result.Distribution;
        }
        catch (error) {
            this.logger.error('Failed to get distribution info', error.stack);
            throw error;
        }
    }
    generateVideoKey(videoId, quality, format = 'mp4') {
        const timestamp = Date.now();
        const qualityPrefix = quality ? `${quality}/` : '';
        return `videos/${videoId}/${qualityPrefix}${timestamp}.${format}`;
    }
    generateThumbnailKey(videoId, index = 0) {
        return `videos/${videoId}/thumbnails/thumb_${index.toString().padStart(3, '0')}.jpg`;
    }
    generateManifestKey(videoId, type) {
        const extension = type === 'hls' ? 'm3u8' : 'mpd';
        return `videos/${videoId}/manifests/playlist.${extension}`;
    }
    isConfigured() {
        return !!(this.config.distributionDomain &&
            this.config.s3Bucket &&
            this.config.accessKeyId &&
            this.config.secretAccessKey);
    }
};
exports.AwsCloudFrontService = AwsCloudFrontService;
exports.AwsCloudFrontService = AwsCloudFrontService = AwsCloudFrontService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], AwsCloudFrontService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,