b7a714aaf0123bc58333626817e19b41
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RecommendationEngineService_1;
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationEngineService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const recommendation_entity_1 = require("../entities/recommendation.entity");
const user_interaction_entity_1 = require("../entities/user-interaction.entity");
const user_entity_1 = require("../../users/entities/user.entity");
const course_entity_1 = require("../../courses/entities/course.entity");
const recommendation_analytics_service_1 = require("./recommendation-analytics.service");
const ml_personalization_service_1 = require("./ml-personalization.service");
const content_similarity_service_1 = require("./content-similarity.service");
const collaborative_filtering_service_1 = require("./collaborative-filtering.service");
let RecommendationEngineService = RecommendationEngineService_1 = class RecommendationEngineService {
    constructor(recommendationRepository, interactionRepository, userRepository, courseRepository, analyticsService, mlService, similarityService, collaborativeService) {
        this.recommendationRepository = recommendationRepository;
        this.interactionRepository = interactionRepository;
        this.userRepository = userRepository;
        this.courseRepository = courseRepository;
        this.analyticsService = analyticsService;
        this.mlService = mlService;
        this.similarityService = similarityService;
        this.collaborativeService = collaborativeService;
        this.logger = new common_1.Logger(RecommendationEngineService_1.name);
    }
    /**
     * Generate personalized recommendations for a user
     */
    async generateRecommendations(request) {
        const startTime = Date.now();
        this.logger.log(`Generating recommendations for user ${request.userId}`);
        try {
            // Get user profile and interaction history
            const user = await this.userRepository.findOne({ where: { id: request.userId } });
            if (!user) {
                throw new Error(`User ${request.userId} not found`);
            }
            const context = await this.buildRecommendationContext(request);
            // Generate recommendations using multiple algorithms
            const recommendations = await this.generateMultiAlgorithmRecommendations(context, request);
            // Rank and filter recommendations
            const rankedRecommendations = await this.rankRecommendations(recommendations, context);
            // Apply business rules and filters
            const filteredRecommendations = await this.applyBusinessRules(rankedRecommendations, request);
            // Save recommendations to database
            const savedRecommendations = await this.saveRecommendations(filteredRecommendations);
            // Track analytics
            await this.analyticsService.trackRecommendationGeneration({
                userId: request.userId,
                recommendationIds: savedRecommendations.map(r => r.id),
                algorithmVersion: 'v2.1',
                generationTimeMs: Date.now() - startTime,
                context: request.context,
            });
            this.logger.log(`Generated ${savedRecommendations.length} recommendations for user ${request.userId} in ${Date.now() - startTime}ms`);
            return savedRecommendations;
        }
        catch (error) {
            this.logger.error(`Error generating recommendations for user ${request.userId}:`, error);
            throw error;
        }
    }
    /**
     * Get existing recommendations for a user
     */
    async getRecommendations(userId, query) {
        const queryBuilder = this.recommendationRepository
            .createQueryBuilder('recommendation')
            .leftJoinAndSelect('recommendation.course', 'course')
            .where('recommendation.userId = :userId', { userId });
        // Apply filters
        if (query.type) {
            queryBuilder.andWhere('recommendation.recommendationType = :type', { type: query.type });
        }
        if (query.status) {
            queryBuilder.andWhere('recommendation.status = :status', { status: query.status });
        }
        else {
            // Default to active recommendations
            queryBuilder.andWhere('recommendation.status = :status', { status: recommendation_entity_1.RecommendationStatus.ACTIVE });
        }
        if (query.minConfidence) {
            queryBuilder.andWhere('recommendation.confidenceScore >= :minConfidence', { minConfidence: query.minConfidence });
        }
        if (!query.includeExpired) {
            queryBuilder.andWhere('(recommendation.expiresAt IS NULL OR recommendation.expiresAt > :now)', { now: new Date() });
        }
        // Apply sorting
        const sortField = `recommendation.${query.sortBy}`;
        queryBuilder.orderBy(sortField, query.sortOrder);
        // Get total count
        const total = await queryBuilder.getCount();
        // Apply pagination
        queryBuilder.skip(query.offset).take(query.limit);
        const recommendations = await queryBuilder.getMany();
        return { recommendations, total };
    }
    /**
     * Record user interaction with a recommendation
     */
    async recordInteraction(recommendationId, interactionType, metadata) {
        const recommendation = await this.recommendationRepository.findOne({ where: { id: recommendationId } });
        if (!recommendation) {
            throw new Error(`Recommendation ${recommendationId} not found`);
        }
        // Update recommendation based on interaction
        switch (interactionType) {
            case 'view':
                recommendation.viewedAt = new Date();
                break;
            case 'click':
                recommendation.clickedAt = new Date();
                break;
            case 'dismiss':
                recommendation.status = recommendation_entity_1.RecommendationStatus.DISMISSED;
                recommendation.dismissedAt = new Date();
                break;
        }
        await this.recommendationRepository.save(recommendation);
        // Track analytics
        await this.analyticsService.trackRecommendationInteraction({
            recommendationId,
            userId: recommendation.userId,
            interactionType,
            metadata,
        });
        // Create user interaction record
        await this.interactionRepository.save({
            userId: recommendation.userId,
            courseId: recommendation.courseId,
            recommendationId,
            interactionType: interactionType,
            context: 'recommendation',
            metadata,
        });
    }
    /**
     * Provide feedback on recommendation quality
     */
    async provideFeedback(recommendationId, score, feedbackType = 'explicit', comment) {
        const recommendation = await this.recommendationRepository.findOne({ where: { id: recommendationId } });
        if (!recommendation) {
            throw new Error(`Recommendation ${recommendationId} not found`);
        }
        // Update recommendation metadata with feedback
        recommendation.metadata = {
            ...recommendation.metadata,
            feedback: {
                score,
                feedbackType,
                comment,
                timestamp: new Date(),
            },
        };
        await this.recommendationRepository.save(recommendation);
        // Track feedback for ML model improvement
        await this.analyticsService.trackRecommendationFeedback({
            recommendationId,
            userId: recommendation.userId,
            score,
            feedbackType,
            comment,
        });
        // Update ML model with feedback
        await this.mlService.updateModelWithFeedback(recommendation.userId, recommendationId, score);
    }
    /**
     * Build recommendation context from user data
     */
    async buildRecommendationContext(request) {
        const { userId } = request;
        // Get recent user interactions
        const recentInteractions = await this.interactionRepository.find({
            where: { userId },
            order: { createdAt: 'DESC' },
            take: 100,
            relations: ['course'],
        });
        // Get user profile
        const user = await this.userRepository.findOne({
            where: { id: userId },
            relations: ['enrollments', 'enrollments.course'],
        });
        return {
            userId,
            recentInteractions,
            userProfile: user,
            ...request.context,
        };
    }
    /**
     * Generate recommendations using multiple algorithms
     */
    async generateMultiAlgorithmRecommendations(context, request) {
        const recommendations = [];
        // 1. Collaborative Filtering
        const collaborativeRecs = await this.collaborativeService.generateRecommendations(context, {
            limit: Math.ceil((request.limit || 10) * 0.4),
            minConfidence: request.minConfidence || 0.1,
        });
        recommendations.push(...collaborativeRecs);
        // 2. Content-Based Filtering
        const contentRecs = await this.similarityService.generateContentBasedRecommendations(context, {
            limit: Math.ceil((request.limit || 10) * 0.3),
            minConfidence: request.minConfidence || 0.1,
        });
        recommendations.push(...contentRecs);
        // 3. ML Personalization
        const mlRecs = await this.mlService.generatePersonalizedRecommendations(context, {
            limit: Math.ceil((request.limit || 10) * 0.3),
            minConfidence: request.minConfidence || 0.1,
        });
        recommendations.push(...mlRecs);
        // 4. Trending and Popular Content
        const trendingRecs = await this.generateTrendingRecommendations(context, {
            limit: Math.ceil((request.limit || 10) * 0.2),
        });
        recommendations.push(...trendingRecs);
        // 5. Skill Gap Analysis
        const skillGapRecs = await this.generateSkillGapRecommendations(context, {
            limit: Math.ceil((request.limit || 10) * 0.2),
        });
        recommendations.push(...skillGapRecs);
        return recommendations;
    }
    /**
     * Rank recommendations using ensemble method
     */
    async rankRecommendations(recommendations, context) {
        // Remove duplicates
        const uniqueRecs = this.removeDuplicateRecommendations(recommendations);
        // Calculate ensemble scores
        for (const rec of uniqueRecs) {
            rec.relevanceScore = await this.calculateEnsembleScore(rec, context);
            rec.priority = this.calculatePriority(rec, context);
        }
        // Sort by relevance score and priority
        return uniqueRecs.sort((a, b) => {
            if (a.priority !== b.priority) {
                return (b.priority || 0) - (a.priority || 0);
            }
            return (b.relevanceScore || 0) - (a.relevanceScore || 0);
        });
    }
    /**
     * Apply business rules and filters
     */
    async applyBusinessRules(recommendations, request) {
        let filtered = recommendations;
        // Exclude specific courses
        if (request.excludeCourseIds?.length) {
            filtered = filtered.filter(rec => !request.excludeCourseIds.includes(rec.courseId));
        }
        // Filter by recommendation reasons
        if (request.includeReasons?.length) {
            filtered = filtered.filter(rec => request.includeReasons.includes(rec.reason));
        }
        // Apply confidence threshold
        if (request.minConfidence) {
            filtered = filtered.filter(rec => (rec.confidenceScore || 0) >= request.minConfidence);
        }
        // Limit results
        if (request.limit) {
            filtered = filtered.slice(0, request.limit);
        }
        // Ensure diversity in recommendations
        filtered = this.ensureRecommendationDiversity(filtered);
        return filtered;
    }
    /**
     * Save recommendations to database
     */
    async saveRecommendations(recommendations) {
        const entities = recommendations.map(rec => {
            const recommendation = new recommendation_entity_1.Recommendation();
            Object.assign(recommendation, rec);
            recommendation.status = recommendation_entity_1.RecommendationStatus.ACTIVE;
            recommendation.expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days
            return recommendation;
        });
        return await this.recommendationRepository.save(entities);
    }
    /**
     * Generate trending recommendations
     */
    async generateTrendingRecommendations(context, options) {
        // Get trending courses based on recent interactions
        const trendingCourses = await this.courseRepository
            .createQueryBuilder('course')
            .leftJoin('course.interactions', 'interaction')
            .where('interaction.createdAt > :date', { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) })
            .groupBy('course.id')
            .orderBy('COUNT(interaction.id)', 'DESC')
            .take(options.limit)
            .getMany();
        return trendingCourses.map(course => ({
            userId: context.userId,
            courseId: course.id,
            recommendationType: recommendation_entity_1.RecommendationType.COURSE,
            reason: recommendation_entity_1.RecommendationReason.TRENDING,
            confidenceScore: 0.7,
            relevanceScore: 0.6,
            priority: 3,
            explanation: `${course.title} is trending among learners`,
            metadata: {
                algorithmUsed: 'trending',
                trendingScore: Math.random() * 0.3 + 0.7,
            },
        }));
    }
    /**
     * Generate skill gap recommendations
     */
    async generateSkillGapRecommendations(context, options) {
        // Analyze user's current skills vs. desired skills
        const userSkills = context.userProfile?.skills || [];
        const desiredSkills = context.userProfile?.desiredSkills || [];
        const skillGaps = desiredSkills.filter((skill) => !userSkills.includes(skill));
        if (skillGaps.length === 0) {
            return [];
        }
        // Find courses that teach missing skills
        const gapFillingCourses = await this.courseRepository
            .createQueryBuilder('course')
            .where('course.skills && :skillGaps', { skillGaps })
            .take(options.limit)
            .getMany();
        return gapFillingCourses.map(course => ({
            userId: context.userId,
            courseId: course.id,
            recommendationType: recommendation_entity_1.RecommendationType.SKILL_BASED,
            reason: recommendation_entity_1.RecommendationReason.SKILL_GAP,
            confidenceScore: 0.8,
            relevanceScore: 0.9,
            priority: 5,
            explanation: `This course helps fill gaps in your skill profile`,
            metadata: {
                algorithmUsed: 'skill_gap',
                skillGaps: skillGaps.slice(0, 3),
            },
        }));
    }
    /**
     * Remove duplicate recommendations
     */
    removeDuplicateRecommendations(recommendations) {
        const seen = new Set();
        return recommendations.filter(rec => {
            const key = `${rec.courseId}-${rec.recommendationType}`;
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }
    /**
     * Calculate ensemble score combining multiple algorithms
     */
    async calculateEnsembleScore(recommendation, context) {
        const weights = {
            collaborative: 0.3,
            content: 0.25,
            ml: 0.3,
            trending: 0.1,
            skillGap: 0.05,
        };
        const algorithmUsed = recommendation.metadata?.algorithmUsed || 'unknown';
        const baseScore = recommendation.confidenceScore || 0.5;
        const weight = weights[algorithmUsed] || 0.1;
        // Apply contextual adjustments
        let adjustedScore = baseScore * weight;
        // Boost recent interactions
        if (context.recentInteractions?.some(i => i.courseId === recommendation.courseId)) {
            adjustedScore *= 1.2;
        }
        // Boost based on user preferences
        if (recommendation.metadata?.tags?.some((tag) => context.userProfile?.preferences?.favoriteTopics?.includes(tag))) {
            adjustedScore *= 1.15;
        }
        return Math.min(adjustedScore, 1.0);
    }
    /**
     * Calculate recommendation priority
     */
    calculatePriority(recommendation, context) {
        let priority = 1;
        // High priority for skill gaps
        if (recommendation.reason === recommendation_entity_1.RecommendationReason.SKILL_GAP) {
            priority += 3;
        }
        // Medium priority for continuation
        if (recommendation.reason === recommendation_entity_1.RecommendationReason.CONTINUATION) {
            priority += 2;
        }
        // Boost for high confidence
        if ((recommendation.confidenceScore || 0) > 0.8) {
            priority += 1;
        }
        return priority;
    }
    /**
     * Ensure diversity in recommendation types and topics
     */
    ensureRecommendationDiversity(recommendations) {
        const diversified = [];
        const typeCount = new Map();
        const topicCount = new Map();
        for (const rec of recommendations) {
            const type = rec.recommendationType;
            const topics = rec.metadata?.tags || [];
            // Limit recommendations per type
            const currentTypeCount = typeCount.get(type) || 0;
            if (currentTypeCount >= 3)
                continue;
            // Limit recommendations per topic
            const hasOverrepresentedTopic = topics.some((topic) => (topicCount.get(topic) || 0) >= 2);
            if (hasOverrepresentedTopic)
                continue;
            diversified.push(rec);
            typeCount.set(type, currentTypeCount + 1);
            topics.forEach((topic) => topicCount.set(topic, (topicCount.get(topic) || 0) + 1));
        }
        return diversified;
    }
};
exports.RecommendationEngineService = RecommendationEngineService;
exports.RecommendationEngineService = RecommendationEngineService = RecommendationEngineService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(recommendation_entity_1.Recommendation)),
    __param(1, (0, typeorm_1.InjectRepository)(user_interaction_entity_1.UserInteraction)),
    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __param(3, (0, typeorm_1.InjectRepository)(course_entity_1.Course)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof recommendation_analytics_service_1.RecommendationAnalyticsService !== "undefined" && recommendation_analytics_service_1.RecommendationAnalyticsService) === "function" ? _e : Object, typeof (_f = typeof ml_personalization_service_1.MLPersonalizationService !== "undefined" && ml_personalization_service_1.MLPersonalizationService) === "function" ? _f : Object, typeof (_g = typeof content_similarity_service_1.ContentSimilarityService !== "undefined" && content_similarity_service_1.ContentSimilarityService) === "function" ? _g : Object, typeof (_h = typeof collaborative_filtering_service_1.CollaborativeFilteringService !== "undefined" && collaborative_filtering_service_1.CollaborativeFilteringService) === "function" ? _h : Object])
], RecommendationEngineService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,