40db538f91d39221e2e435d4ed16f861
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesController = void 0;
/**
 * FilesController handles endpoints for file management (upload, download, etc.).
 *
 * @module Files
 */
const swagger_1 = require("@nestjs/swagger");
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const files_service_1 = require("./files.service");
const upload_chunk_dto_1 = require("./dto/upload-chunk.dto");
const complete_upload_dto_1 = require("./dto/complete-upload.dto");
let FilesController = class FilesController {
    constructor(filesService) {
        this.filesService = filesService;
    }
    // Endpoint to receive a file chunk
    async uploadChunk(file, body) {
        const { uploadId, chunkIndex, totalChunks } = body;
        if (!file || !uploadId || chunkIndex === undefined || !totalChunks) {
            throw new common_1.HttpException('Missing required fields', common_1.HttpStatus.BAD_REQUEST);
        }
        await this.filesService.saveChunk(uploadId, chunkIndex, file);
        return { message: 'Chunk uploaded' };
    }
    // Endpoint to assemble chunks into the final file
    async completeUpload(body) {
        const { uploadId, fileName, totalChunks } = body;
        if (!uploadId || !fileName || !totalChunks) {
            throw new common_1.HttpException('Missing required fields', common_1.HttpStatus.BAD_REQUEST);
        }
        const cdnUrl = await this.filesService.assembleChunks(uploadId, fileName, totalChunks);
        return { message: 'File uploaded and available on CDN', url: cdnUrl };
    }
    // Endpoint to get upload progress
    async getUploadProgress(uploadId, totalChunks) {
        if (!uploadId) {
            throw new common_1.HttpException('Missing uploadId', common_1.HttpStatus.BAD_REQUEST);
        }
        const progress = await this.filesService.getUploadProgress(uploadId, totalChunks);
        return progress;
    }
};
exports.FilesController = FilesController;
__decorate([
    (0, common_1.Post)('upload/chunk'),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('chunk')),
    __param(0, (0, common_1.UploadedFile)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof Express !== "undefined" && (_b = Express.Multer) !== void 0 && _b.File) === "function" ? _c : Object, typeof (_d = typeof upload_chunk_dto_1.UploadChunkDto !== "undefined" && upload_chunk_dto_1.UploadChunkDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], FilesController.prototype, "uploadChunk", null);
__decorate([
    (0, common_1.Post)('upload/complete'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof complete_upload_dto_1.CompleteUploadDto !== "undefined" && complete_upload_dto_1.CompleteUploadDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], FilesController.prototype, "completeUpload", null);
__decorate([
    (0, common_1.Post)('upload/progress'),
    __param(0, (0, common_1.Body)('uploadId')),
    __param(1, (0, common_1.Body)('totalChunks')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], FilesController.prototype, "getUploadProgress", null);
exports.FilesController = FilesController = __decorate([
    (0, swagger_1.ApiTags)('Files'),
    (0, common_1.Controller)('files'),
    __metadata("design:paramtypes", [typeof (_a = typeof files_service_1.FilesService !== "undefined" && files_service_1.FilesService) === "function" ? _a : Object])
], FilesController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxmaWxlc1xcZmlsZXMuY29udHJvbGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7Ozs7R0FJRztBQUNILDZDQUEwQztBQUMxQywyQ0FTd0I7QUFDeEIsK0RBQTJEO0FBQzNELG1EQUErQztBQUMvQyw2REFBd0Q7QUFDeEQsbUVBQThEO0FBS3ZELElBQU0sZUFBZSxHQUFyQixNQUFNLGVBQWU7SUFDMUIsWUFBNkIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDO0lBRTNELG1DQUFtQztJQUc3QixBQUFOLEtBQUssQ0FBQyxXQUFXLENBQ0MsSUFBeUIsRUFDakMsSUFBb0I7UUFFNUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25FLE1BQU0sSUFBSSxzQkFBYSxDQUNyQix5QkFBeUIsRUFDekIsbUJBQVUsQ0FBQyxXQUFXLENBQ3ZCLENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsa0RBQWtEO0lBRTVDLEFBQU4sS0FBSyxDQUFDLGNBQWMsQ0FBUyxJQUF1QjtRQUNsRCxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNDLE1BQU0sSUFBSSxzQkFBYSxDQUNyQix5QkFBeUIsRUFDekIsbUJBQVUsQ0FBQyxXQUFXLENBQ3ZCLENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FDbkQsUUFBUSxFQUNSLFFBQVEsRUFDUixXQUFXLENBQ1osQ0FBQztRQUNGLE9BQU8sRUFBRSxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxrQ0FBa0M7SUFFNUIsQUFBTixLQUFLLENBQUMsaUJBQWlCLENBQ0gsUUFBZ0IsRUFDYixXQUFvQjtRQUV6QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZCxNQUFNLElBQUksc0JBQWEsQ0FBQyxrQkFBa0IsRUFBRSxtQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQ3hELFFBQVEsRUFDUixXQUFXLENBQ1osQ0FBQztRQUNGLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRixDQUFBO0FBdERZLDBDQUFlO0FBTXBCO0lBRkwsSUFBQSxhQUFJLEVBQUMsY0FBYyxDQUFDO0lBQ3BCLElBQUEsd0JBQWUsRUFBQyxJQUFBLGtDQUFlLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkMsV0FBQSxJQUFBLHFCQUFZLEdBQUUsQ0FBQTtJQUNkLFdBQUEsSUFBQSxhQUFJLEdBQUUsQ0FBQTs7eURBRGUsT0FBTywwQkFBUCxPQUFPLENBQUMsTUFBTSxtQkFBQyxJQUFJLG9EQUMzQixpQ0FBYyxvQkFBZCxpQ0FBYzs7a0RBVzdCO0FBSUs7SUFETCxJQUFBLGFBQUksRUFBQyxpQkFBaUIsQ0FBQztJQUNGLFdBQUEsSUFBQSxhQUFJLEdBQUUsQ0FBQTs7eURBQU8sdUNBQWlCLG9CQUFqQix1Q0FBaUI7O3FEQWNuRDtBQUlLO0lBREwsSUFBQSxhQUFJLEVBQUMsaUJBQWlCLENBQUM7SUFFckIsV0FBQSxJQUFBLGFBQUksRUFBQyxVQUFVLENBQUMsQ0FBQTtJQUNoQixXQUFBLElBQUEsYUFBSSxFQUFDLGFBQWEsQ0FBQyxDQUFBOzs7d0RBQ25CLE9BQU8sb0JBQVAsT0FBTzt3REFTVDswQkFyRFUsZUFBZTtJQUYzQixJQUFBLGlCQUFPLEVBQUMsT0FBTyxDQUFDO0lBQ2hCLElBQUEsbUJBQVUsRUFBQyxPQUFPLENBQUM7eURBRXlCLDRCQUFZLG9CQUFaLDRCQUFZO0dBRDVDLGVBQWUsQ0FzRDNCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcZmlsZXNcXGZpbGVzLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBGaWxlc0NvbnRyb2xsZXIgaGFuZGxlcyBlbmRwb2ludHMgZm9yIGZpbGUgbWFuYWdlbWVudCAodXBsb2FkLCBkb3dubG9hZCwgZXRjLikuXHJcbiAqXHJcbiAqIEBtb2R1bGUgRmlsZXNcclxuICovXHJcbmltcG9ydCB7IEFwaVRhZ3MgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xyXG5pbXBvcnQge1xyXG4gIENvbnRyb2xsZXIsXHJcbiAgUG9zdCxcclxuICBVcGxvYWRlZEZpbGUsXHJcbiAgQm9keSxcclxuICBVc2VJbnRlcmNlcHRvcnMsXHJcbiAgUmVxLFxyXG4gIEh0dHBFeGNlcHRpb24sXHJcbiAgSHR0cFN0YXR1cyxcclxufSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEZpbGVJbnRlcmNlcHRvciB9IGZyb20gJ0BuZXN0anMvcGxhdGZvcm0tZXhwcmVzcyc7XHJcbmltcG9ydCB7IEZpbGVzU2VydmljZSB9IGZyb20gJy4vZmlsZXMuc2VydmljZSc7XHJcbmltcG9ydCB7IFVwbG9hZENodW5rRHRvIH0gZnJvbSAnLi9kdG8vdXBsb2FkLWNodW5rLmR0byc7XHJcbmltcG9ydCB7IENvbXBsZXRlVXBsb2FkRHRvIH0gZnJvbSAnLi9kdG8vY29tcGxldGUtdXBsb2FkLmR0byc7XHJcbmltcG9ydCB7IFVwbG9hZFByb2dyZXNzRHRvIH0gZnJvbSAnLi9kdG8vdXBsb2FkLXByb2dyZXNzLmR0byc7XHJcblxyXG5AQXBpVGFncygnRmlsZXMnKVxyXG5AQ29udHJvbGxlcignZmlsZXMnKVxyXG5leHBvcnQgY2xhc3MgRmlsZXNDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbGVzU2VydmljZTogRmlsZXNTZXJ2aWNlKSB7fVxyXG5cclxuICAvLyBFbmRwb2ludCB0byByZWNlaXZlIGEgZmlsZSBjaHVua1xyXG4gIEBQb3N0KCd1cGxvYWQvY2h1bmsnKVxyXG4gIEBVc2VJbnRlcmNlcHRvcnMoRmlsZUludGVyY2VwdG9yKCdjaHVuaycpKVxyXG4gIGFzeW5jIHVwbG9hZENodW5rKFxyXG4gICAgQFVwbG9hZGVkRmlsZSgpIGZpbGU6IEV4cHJlc3MuTXVsdGVyLkZpbGUsXHJcbiAgICBAQm9keSgpIGJvZHk6IFVwbG9hZENodW5rRHRvLFxyXG4gICkge1xyXG4gICAgY29uc3QgeyB1cGxvYWRJZCwgY2h1bmtJbmRleCwgdG90YWxDaHVua3MgfSA9IGJvZHk7XHJcbiAgICBpZiAoIWZpbGUgfHwgIXVwbG9hZElkIHx8IGNodW5rSW5kZXggPT09IHVuZGVmaW5lZCB8fCAhdG90YWxDaHVua3MpIHtcclxuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oXHJcbiAgICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgZmllbGRzJyxcclxuICAgICAgICBIdHRwU3RhdHVzLkJBRF9SRVFVRVNULFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgdGhpcy5maWxlc1NlcnZpY2Uuc2F2ZUNodW5rKHVwbG9hZElkLCBjaHVua0luZGV4LCBmaWxlKTtcclxuICAgIHJldHVybiB7IG1lc3NhZ2U6ICdDaHVuayB1cGxvYWRlZCcgfTtcclxuICB9XHJcblxyXG4gIC8vIEVuZHBvaW50IHRvIGFzc2VtYmxlIGNodW5rcyBpbnRvIHRoZSBmaW5hbCBmaWxlXHJcbiAgQFBvc3QoJ3VwbG9hZC9jb21wbGV0ZScpXHJcbiAgYXN5bmMgY29tcGxldGVVcGxvYWQoQEJvZHkoKSBib2R5OiBDb21wbGV0ZVVwbG9hZER0bykge1xyXG4gICAgY29uc3QgeyB1cGxvYWRJZCwgZmlsZU5hbWUsIHRvdGFsQ2h1bmtzIH0gPSBib2R5O1xyXG4gICAgaWYgKCF1cGxvYWRJZCB8fCAhZmlsZU5hbWUgfHwgIXRvdGFsQ2h1bmtzKSB7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxyXG4gICAgICAgICdNaXNzaW5nIHJlcXVpcmVkIGZpZWxkcycsXHJcbiAgICAgICAgSHR0cFN0YXR1cy5CQURfUkVRVUVTVCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNkblVybCA9IGF3YWl0IHRoaXMuZmlsZXNTZXJ2aWNlLmFzc2VtYmxlQ2h1bmtzKFxyXG4gICAgICB1cGxvYWRJZCxcclxuICAgICAgZmlsZU5hbWUsXHJcbiAgICAgIHRvdGFsQ2h1bmtzLFxyXG4gICAgKTtcclxuICAgIHJldHVybiB7IG1lc3NhZ2U6ICdGaWxlIHVwbG9hZGVkIGFuZCBhdmFpbGFibGUgb24gQ0ROJywgdXJsOiBjZG5VcmwgfTtcclxuICB9XHJcblxyXG4gIC8vIEVuZHBvaW50IHRvIGdldCB1cGxvYWQgcHJvZ3Jlc3NcclxuICBAUG9zdCgndXBsb2FkL3Byb2dyZXNzJylcclxuICBhc3luYyBnZXRVcGxvYWRQcm9ncmVzcyhcclxuICAgIEBCb2R5KCd1cGxvYWRJZCcpIHVwbG9hZElkOiBzdHJpbmcsXHJcbiAgICBAQm9keSgndG90YWxDaHVua3MnKSB0b3RhbENodW5rcz86IG51bWJlcixcclxuICApOiBQcm9taXNlPFVwbG9hZFByb2dyZXNzRHRvPiB7XHJcbiAgICBpZiAoIXVwbG9hZElkKSB7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKCdNaXNzaW5nIHVwbG9hZElkJywgSHR0cFN0YXR1cy5CQURfUkVRVUVTVCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9ncmVzcyA9IGF3YWl0IHRoaXMuZmlsZXNTZXJ2aWNlLmdldFVwbG9hZFByb2dyZXNzKFxyXG4gICAgICB1cGxvYWRJZCxcclxuICAgICAgdG90YWxDaHVua3MsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHByb2dyZXNzO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=