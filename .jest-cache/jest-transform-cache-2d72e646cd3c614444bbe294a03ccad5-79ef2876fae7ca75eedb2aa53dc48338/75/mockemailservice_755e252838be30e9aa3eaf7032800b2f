bb2190a2e23f4f964a713bc4d62a98cd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MockEmailService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockEmailService = void 0;
const common_1 = require("@nestjs/common");
let MockEmailService = MockEmailService_1 = class MockEmailService {
    constructor() {
        this.logger = new common_1.Logger(MockEmailService_1.name);
    }
    async sendEmail(options) {
        this.logger.log(`[MOCK] Would send email to: ${options.to}, subject: ${options.subject}`);
        return true;
    }
    async sendImmediate(options) {
        this.logger.log(`[MOCK] Would immediately send email to: ${options.to}, subject: ${options.subject}`);
        return true;
    }
};
exports.MockEmailService = MockEmailService;
exports.MockEmailService = MockEmailService = MockEmailService_1 = __decorate([
    (0, common_1.Injectable)()
], MockEmailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbWFpbFxcbW9jay1lbWFpbC5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwyQ0FBb0Q7QUFJN0MsSUFBTSxnQkFBZ0Isd0JBQXRCLE1BQU0sZ0JBQWdCO0lBQXRCO1FBQ1ksV0FBTSxHQUFHLElBQUksZUFBTSxDQUFDLGtCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBVzlELENBQUM7SUFUQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQXFCO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLCtCQUErQixPQUFPLENBQUMsRUFBRSxjQUFjLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBcUI7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMkNBQTJDLE9BQU8sQ0FBQyxFQUFFLGNBQWMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDdEcsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTtBQVpZLDRDQUFnQjsyQkFBaEIsZ0JBQWdCO0lBRDVCLElBQUEsbUJBQVUsR0FBRTtHQUNBLGdCQUFnQixDQVk1QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGVtYWlsXFxtb2NrLWVtYWlsLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTG9nZ2VyIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBFbWFpbE9wdGlvbnMgfSBmcm9tICcuL2VtYWlsLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTW9ja0VtYWlsU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKE1vY2tFbWFpbFNlcnZpY2UubmFtZSk7XHJcblxyXG4gIGFzeW5jIHNlbmRFbWFpbChvcHRpb25zOiBFbWFpbE9wdGlvbnMpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHRoaXMubG9nZ2VyLmxvZyhgW01PQ0tdIFdvdWxkIHNlbmQgZW1haWwgdG86ICR7b3B0aW9ucy50b30sIHN1YmplY3Q6ICR7b3B0aW9ucy5zdWJqZWN0fWApO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzZW5kSW1tZWRpYXRlKG9wdGlvbnM6IEVtYWlsT3B0aW9ucyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgdGhpcy5sb2dnZXIubG9nKGBbTU9DS10gV291bGQgaW1tZWRpYXRlbHkgc2VuZCBlbWFpbCB0bzogJHtvcHRpb25zLnRvfSwgc3ViamVjdDogJHtvcHRpb25zLnN1YmplY3R9YCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbn0gIl0sInZlcnNpb24iOjN9