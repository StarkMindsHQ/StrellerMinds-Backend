{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, FindOptionsWhere } from 'typeorm';\r\nimport { User } from './entities/user.entity';\r\nimport { CreateUsersDto } from './dtos/create.users.dto';\r\nimport { updateUsersDto } from './dtos/update.users.dto';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n  ) {}\r\n\r\n  public async create(createUsersDto: CreateUsersDto): Promise<User> {\r\n    try {\r\n      const existingUser = await this.userRepository.findOne({\r\n        where: { email: createUsersDto.email },\r\n        select: ['id', 'email'],\r\n      });\r\n\r\n      if (existingUser) {\r\n        throw new ConflictException('Email already exists');\r\n      }\r\n\r\n      const user = this.userRepository.create(createUsersDto);\r\n      return await this.userRepository.save(user);\r\n    } catch (error) {\r\n      if (error instanceof ConflictException) throw error;\r\n      throw new InternalServerErrorException('Error creating user');\r\n    }\r\n  }\r\n\r\n  public async findAll(\r\n    page: number = 1,\r\n    limit: number = 10,\r\n    where?: FindOptionsWhere<User>,\r\n  ): Promise<{ users: User[]; total: number }> {\r\n    try {\r\n      const [users, total] = await this.userRepository.findAndCount({\r\n        where,\r\n        skip: (page - 1) * limit,\r\n        take: limit,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n        order: { createdAt: 'DESC' },\r\n      });\r\n      return { users, total };\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error fetching users');\r\n    }\r\n  }\r\n\r\n  public async findOne(id: string, relations: string[] = []): Promise<User> {\r\n    try {\r\n      const user = await this.userRepository.findOne({\r\n        where: { id },\r\n        relations,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n      });\r\n      \r\n      if (!user) {\r\n        throw new NotFoundException(`User with ID ${id} not found`);\r\n      }\r\n      return user;\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      throw new InternalServerErrorException('Error fetching user');\r\n    }\r\n  }\r\n\r\n  public async update(\r\n    id: string,\r\n    updateUserDto: updateUsersDto,\r\n  ): Promise<User> {\r\n    try {\r\n      await this.findOne(id);\r\n      await this.userRepository.update(id, updateUserDto);\r\n      return await this.findOne(id);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      throw new InternalServerErrorException('Error updating user');\r\n    }\r\n  }\r\n\r\n  public async delete(id: string): Promise<void> {\r\n    try {\r\n      const result = await this.userRepository.softDelete(id);\r\n      if (result.affected === 0) {\r\n        throw new NotFoundException(`User with ID ${id} not found`);\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      throw new InternalServerErrorException('Error deleting user');\r\n    }\r\n  }\r\n\r\n  async updateRefreshToken(userId: string, refreshToken: string | null): Promise<void> {\r\n    try {\r\n      await this.userRepository.update(userId, { refreshToken });\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error updating refresh token');\r\n    }\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<User | undefined> {\r\n    try {\r\n      return this.userRepository.findOne({\r\n        where: { email },\r\n        select: ['id', 'email', 'password', 'role', 'status'],\r\n      });\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error finding user by email');\r\n    }\r\n  }\r\n\r\n  async findById(id: string): Promise<User | undefined> {\r\n    try {\r\n      return this.userRepository.findOne({\r\n        where: { id },\r\n        select: ['id', 'email', 'role', 'status'],\r\n      });\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error finding user by ID');\r\n    }\r\n  }\r\n \r\n  async updatePassword(userId: string, hashedPassword: string): Promise<void> {\r\n    try {\r\n      await this.userRepository.update(userId, { password: hashedPassword });\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error updating password');\r\n    }\r\n  }\r\n}\r\n"],"version":3}