8f90322d312e2d576a91c2750689385b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_entity_1 = require("./entities/user.entity");
let UsersService = class UsersService {
    constructor(userRepository) {
        this.userRepository = userRepository;
    }
    async create(createUsersDto) {
        try {
            const existingUser = await this.userRepository.findOne({
                where: { email: createUsersDto.email },
                select: ['id', 'email'],
            });
            if (existingUser) {
                throw new common_1.ConflictException('Email already exists');
            }
            const user = this.userRepository.create(createUsersDto);
            return await this.userRepository.save(user);
        }
        catch (error) {
            if (error instanceof common_1.ConflictException)
                throw error;
            throw new common_1.InternalServerErrorException('Error creating user');
        }
    }
    async findAll(page = 1, limit = 10, where) {
        try {
            const [users, total] = await this.userRepository.findAndCount({
                where,
                skip: (page - 1) * limit,
                take: limit,
                select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],
                order: { createdAt: 'DESC' },
            });
            return { users, total };
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error fetching users');
        }
    }
    async findOne(id, relations = []) {
        try {
            const user = await this.userRepository.findOne({
                where: { id },
                relations,
                select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],
            });
            if (!user) {
                throw new common_1.NotFoundException(`User with ID ${id} not found`);
            }
            return user;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            throw new common_1.InternalServerErrorException('Error fetching user');
        }
    }
    async update(id, updateUserDto) {
        try {
            await this.findOne(id);
            await this.userRepository.update(id, updateUserDto);
            return await this.findOne(id);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            throw new common_1.InternalServerErrorException('Error updating user');
        }
    }
    async delete(id) {
        try {
            const result = await this.userRepository.softDelete(id);
            if (result.affected === 0) {
                throw new common_1.NotFoundException(`User with ID ${id} not found`);
            }
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            throw new common_1.InternalServerErrorException('Error deleting user');
        }
    }
    async updateRefreshToken(userId, refreshToken) {
        try {
            await this.userRepository.update(userId, { refreshToken });
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error updating refresh token');
        }
    }
    async findByEmail(email) {
        try {
            return this.userRepository.findOne({
                where: { email },
                select: ['id', 'email', 'password', 'role', 'status'],
            });
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error finding user by email');
        }
    }
    async findById(id) {
        try {
            return this.userRepository.findOne({
                where: { id },
                select: ['id', 'email', 'role', 'status'],
            });
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error finding user by ID');
        }
    }
    async updatePassword(userId, hashedPassword) {
        try {
            await this.userRepository.update(userId, { password: hashedPassword });
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error updating password');
        }
    }
};
exports.UsersService = UsersService;
exports.UsersService = UsersService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], UsersService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,