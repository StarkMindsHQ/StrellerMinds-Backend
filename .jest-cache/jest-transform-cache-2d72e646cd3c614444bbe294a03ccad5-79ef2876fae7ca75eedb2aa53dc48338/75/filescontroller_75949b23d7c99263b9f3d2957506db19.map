{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\files\\files.controller.ts","mappings":";;;;;;;;;;;;;;;;AACA;;;;GAIG;AACH,6CAA0C;AAC1C,2CASwB;AACxB,+DAA2D;AAC3D,mDAA+C;AAC/C,6DAAwD;AACxD,mEAA8D;AAKvD,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAE3D,mCAAmC;IAG7B,AAAN,KAAK,CAAC,WAAW,CACC,IAAyB,EACjC,IAAoB;QAE5B,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QACnD,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,UAAU,KAAK,SAAS,IAAI,CAAC,WAAW,EAAE,CAAC;YACnE,MAAM,IAAI,sBAAa,CACrB,yBAAyB,EACzB,mBAAU,CAAC,WAAW,CACvB,CAAC;QACJ,CAAC;QACD,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9D,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;IACvC,CAAC;IAED,kDAAkD;IAE5C,AAAN,KAAK,CAAC,cAAc,CAAS,IAAuB;QAClD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QACjD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,IAAI,sBAAa,CACrB,yBAAyB,EACzB,mBAAU,CAAC,WAAW,CACvB,CAAC;QACJ,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CACnD,QAAQ,EACR,QAAQ,EACR,WAAW,CACZ,CAAC;QACF,OAAO,EAAE,OAAO,EAAE,oCAAoC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;IACxE,CAAC;IAED,kCAAkC;IAE5B,AAAN,KAAK,CAAC,iBAAiB,CACH,QAAgB,EACb,WAAoB;QAEzC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,sBAAa,CAAC,kBAAkB,EAAE,mBAAU,CAAC,WAAW,CAAC,CAAC;QACtE,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,CACxD,QAAQ,EACR,WAAW,CACZ,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF,CAAA;AAtDY,0CAAe;AAMpB;IAFL,IAAA,aAAI,EAAC,cAAc,CAAC;IACpB,IAAA,wBAAe,EAAC,IAAA,kCAAe,EAAC,OAAO,CAAC,CAAC;IAEvC,WAAA,IAAA,qBAAY,GAAE,CAAA;IACd,WAAA,IAAA,aAAI,GAAE,CAAA;;yDADe,OAAO,0BAAP,OAAO,CAAC,MAAM,mBAAC,IAAI,oDAC3B,iCAAc,oBAAd,iCAAc;;kDAW7B;AAIK;IADL,IAAA,aAAI,EAAC,iBAAiB,CAAC;IACF,WAAA,IAAA,aAAI,GAAE,CAAA;;yDAAO,uCAAiB,oBAAjB,uCAAiB;;qDAcnD;AAIK;IADL,IAAA,aAAI,EAAC,iBAAiB,CAAC;IAErB,WAAA,IAAA,aAAI,EAAC,UAAU,CAAC,CAAA;IAChB,WAAA,IAAA,aAAI,EAAC,aAAa,CAAC,CAAA;;;wDACnB,OAAO,oBAAP,OAAO;wDAST;0BArDU,eAAe;IAF3B,IAAA,iBAAO,EAAC,OAAO,CAAC;IAChB,IAAA,mBAAU,EAAC,OAAO,CAAC;yDAEyB,4BAAY,oBAAZ,4BAAY;GAD5C,eAAe,CAsD3B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\files\\files.controller.ts"],"sourcesContent":["\r\n/**\r\n * FilesController handles endpoints for file management (upload, download, etc.).\r\n *\r\n * @module Files\r\n */\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport {\r\n  Controller,\r\n  Post,\r\n  UploadedFile,\r\n  Body,\r\n  UseInterceptors,\r\n  Req,\r\n  HttpException,\r\n  HttpStatus,\r\n} from '@nestjs/common';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { FilesService } from './files.service';\r\nimport { UploadChunkDto } from './dto/upload-chunk.dto';\r\nimport { CompleteUploadDto } from './dto/complete-upload.dto';\r\nimport { UploadProgressDto } from './dto/upload-progress.dto';\r\n\r\n@ApiTags('Files')\r\n@Controller('files')\r\nexport class FilesController {\r\n  constructor(private readonly filesService: FilesService) {}\r\n\r\n  // Endpoint to receive a file chunk\r\n  @Post('upload/chunk')\r\n  @UseInterceptors(FileInterceptor('chunk'))\r\n  async uploadChunk(\r\n    @UploadedFile() file: Express.Multer.File,\r\n    @Body() body: UploadChunkDto,\r\n  ) {\r\n    const { uploadId, chunkIndex, totalChunks } = body;\r\n    if (!file || !uploadId || chunkIndex === undefined || !totalChunks) {\r\n      throw new HttpException(\r\n        'Missing required fields',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    }\r\n    await this.filesService.saveChunk(uploadId, chunkIndex, file);\r\n    return { message: 'Chunk uploaded' };\r\n  }\r\n\r\n  // Endpoint to assemble chunks into the final file\r\n  @Post('upload/complete')\r\n  async completeUpload(@Body() body: CompleteUploadDto) {\r\n    const { uploadId, fileName, totalChunks } = body;\r\n    if (!uploadId || !fileName || !totalChunks) {\r\n      throw new HttpException(\r\n        'Missing required fields',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    }\r\n    const cdnUrl = await this.filesService.assembleChunks(\r\n      uploadId,\r\n      fileName,\r\n      totalChunks,\r\n    );\r\n    return { message: 'File uploaded and available on CDN', url: cdnUrl };\r\n  }\r\n\r\n  // Endpoint to get upload progress\r\n  @Post('upload/progress')\r\n  async getUploadProgress(\r\n    @Body('uploadId') uploadId: string,\r\n    @Body('totalChunks') totalChunks?: number,\r\n  ): Promise<UploadProgressDto> {\r\n    if (!uploadId) {\r\n      throw new HttpException('Missing uploadId', HttpStatus.BAD_REQUEST);\r\n    }\r\n    const progress = await this.filesService.getUploadProgress(\r\n      uploadId,\r\n      totalChunks,\r\n    );\r\n    return progress;\r\n  }\r\n}\r\n"],"version":3}