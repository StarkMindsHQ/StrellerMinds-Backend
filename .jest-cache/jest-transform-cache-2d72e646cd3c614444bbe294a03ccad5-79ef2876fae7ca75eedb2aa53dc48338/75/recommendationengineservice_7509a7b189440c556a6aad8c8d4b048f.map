{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\recommendation-engine.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,6CAAmD;AACnD,qCAA6D;AAC7D,6EAAmI;AACnI,iFAAuF;AAEvF,kEAAwD;AACxD,wEAA8D;AAE9D,yFAAoF;AACpF,6EAAwE;AACxE,6EAAwE;AACxE,uFAAkF;AAwB3E,IAAM,2BAA2B,mCAAjC,MAAM,2BAA2B;IAGtC,YAEE,wBAA4D,EAE5D,qBAA0D,EAE1D,cAAwC,EAExC,gBAA4C,EACpC,gBAAgD,EAChD,SAAmC,EACnC,iBAA2C,EAC3C,oBAAmD;QAVnD,6BAAwB,GAAxB,wBAAwB,CAA4B;QAEpD,0BAAqB,GAArB,qBAAqB,CAA6B;QAElD,mBAAc,GAAd,cAAc,CAAkB;QAEhC,qBAAgB,GAAhB,gBAAgB,CAAoB;QACpC,qBAAgB,GAAhB,gBAAgB,CAAgC;QAChD,cAAS,GAAT,SAAS,CAA0B;QACnC,sBAAiB,GAAjB,iBAAiB,CAA0B;QAC3C,yBAAoB,GAApB,oBAAoB,CAA+B;QAd5C,WAAM,GAAG,IAAI,eAAM,CAAC,6BAA2B,CAAC,IAAI,CAAC,CAAC;IAepE,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,uBAAuB,CAAC,OAA8B;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,uCAAuC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAEzE,IAAI,CAAC;YACH,2CAA2C;YAC3C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAClF,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,QAAQ,OAAO,CAAC,MAAM,YAAY,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YAE/D,qDAAqD;YACrD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qCAAqC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE3F,kCAAkC;YAClC,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAEvF,mCAAmC;YACnC,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;YAE9F,mCAAmC;YACnC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,CAAC;YAErF,kBAAkB;YAClB,MAAM,IAAI,CAAC,gBAAgB,CAAC,6BAA6B,CAAC;gBACxD,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtD,gBAAgB,EAAE,MAAM;gBACxB,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;gBACxC,OAAO,EAAE,OAAO,CAAC,OAAO;aACzB,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,oBAAoB,CAAC,MAAM,6BAA6B,OAAO,CAAC,MAAM,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,IAAI,CAAC,CAAC;YACtI,OAAO,oBAAoB,CAAC;QAE9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,OAAO,CAAC,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;YACzF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,KAAiC;QAIxE,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB;aAC/C,kBAAkB,CAAC,gBAAgB,CAAC;aACpC,iBAAiB,CAAC,uBAAuB,EAAE,QAAQ,CAAC;aACpD,KAAK,CAAC,iCAAiC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAExD,gBAAgB;QAChB,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;YACf,YAAY,CAAC,QAAQ,CAAC,2CAA2C,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3F,CAAC;QAED,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YACjB,YAAY,CAAC,QAAQ,CAAC,iCAAiC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACrF,CAAC;aAAM,CAAC;YACN,oCAAoC;YACpC,YAAY,CAAC,QAAQ,CAAC,iCAAiC,EAAE,EAAE,MAAM,EAAE,4CAAoB,CAAC,MAAM,EAAE,CAAC,CAAC;QACpG,CAAC;QAED,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC;YACxB,YAAY,CAAC,QAAQ,CAAC,kDAAkD,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;QACpH,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;YAC1B,YAAY,CAAC,QAAQ,CAAC,uEAAuE,EAAE,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC;QACtH,CAAC;QAED,gBAAgB;QAChB,MAAM,SAAS,GAAG,kBAAkB,KAAK,CAAC,MAAM,EAAE,CAAC;QACnD,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjD,kBAAkB;QAClB,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,QAAQ,EAAE,CAAC;QAE5C,mBAAmB;QACnB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAElD,MAAM,eAAe,GAAG,MAAM,YAAY,CAAC,OAAO,EAAE,CAAC;QAErD,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,gBAAwB,EAAE,eAA6C,EAAE,QAAc;QAC7G,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACxG,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,kBAAkB,gBAAgB,YAAY,CAAC,CAAC;QAClE,CAAC;QAED,6CAA6C;QAC7C,QAAQ,eAAe,EAAE,CAAC;YACxB,KAAK,MAAM;gBACT,cAAc,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;gBACrC,MAAM;YACR,KAAK,OAAO;gBACV,cAAc,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;gBACtC,MAAM;YACR,KAAK,SAAS;gBACZ,cAAc,CAAC,MAAM,GAAG,4CAAoB,CAAC,SAAS,CAAC;gBACvD,cAAc,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;gBACxC,MAAM;QACV,CAAC;QAED,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEzD,kBAAkB;QAClB,MAAM,IAAI,CAAC,gBAAgB,CAAC,8BAA8B,CAAC;YACzD,gBAAgB;YAChB,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,eAAe;YACf,QAAQ;SACT,CAAC,CAAC;QAEH,iCAAiC;QACjC,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,gBAAgB;YAChB,eAAe,EAAE,eAAsB;YACvC,OAAO,EAAE,gBAAuB;YAChC,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,gBAAwB,EAAE,KAAa,EAAE,eAAwC,UAAU,EAAE,OAAgB;QACjI,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACxG,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,kBAAkB,gBAAgB,YAAY,CAAC,CAAC;QAClE,CAAC;QAED,+CAA+C;QAC/C,cAAc,CAAC,QAAQ,GAAG;YACxB,GAAG,cAAc,CAAC,QAAQ;YAC1B,QAAQ,EAAE;gBACR,KAAK;gBACL,YAAY;gBACZ,OAAO;gBACP,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC;QAEF,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEzD,0CAA0C;QAC1C,MAAM,IAAI,CAAC,gBAAgB,CAAC,2BAA2B,CAAC;YACtD,gBAAgB;YAChB,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,KAAK;YACL,YAAY;YACZ,OAAO;SACR,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,cAAc,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAC/F,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,0BAA0B,CAAC,OAA8B;QACrE,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAE3B,+BAA+B;QAC/B,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;YAC/D,KAAK,EAAE,EAAE,MAAM,EAAE;YACjB,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;YAC5B,IAAI,EAAE,GAAG;YACT,SAAS,EAAE,CAAC,QAAQ,CAAC;SACtB,CAAC,CAAC;QAEH,mBAAmB;QACnB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YAC7C,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;YACrB,SAAS,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC;SACjD,CAAC,CAAC;QAEH,OAAO;YACL,MAAM;YACN,kBAAkB;YAClB,WAAW,EAAE,IAAI;YACjB,GAAG,OAAO,CAAC,OAAO;SACnB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qCAAqC,CACjD,OAA8B,EAC9B,OAA8B;QAE9B,MAAM,eAAe,GAA8B,EAAE,CAAC;QAEtD,6BAA6B;QAC7B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,OAAO,EAAE;YACzF,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;YAC7C,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,GAAG;SAC5C,CAAC,CAAC;QACH,eAAe,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAC;QAE3C,6BAA6B;QAC7B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,OAAO,EAAE;YAC5F,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;YAC7C,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,GAAG;SAC5C,CAAC,CAAC;QACH,eAAe,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;QAErC,wBAAwB;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,mCAAmC,CAAC,OAAO,EAAE;YAC/E,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;YAC7C,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,GAAG;SAC5C,CAAC,CAAC;QACH,eAAe,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;QAEhC,kCAAkC;QAClC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,OAAO,EAAE;YACvE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;SAC9C,CAAC,CAAC;QACH,eAAe,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;QAEtC,wBAAwB;QACxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,OAAO,EAAE;YACvE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;SAC9C,CAAC,CAAC;QACH,eAAe,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;QAEtC,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB,CAC/B,eAA0C,EAC1C,OAA8B;QAE9B,oBAAoB;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,eAAe,CAAC,CAAC;QAExE,4BAA4B;QAC5B,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAC7B,GAAG,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACrE,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;QAED,uCAAuC;QACvC,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9B,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC9B,OAAO,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;YAC/C,CAAC;YACD,OAAO,CAAC,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAC9B,eAA0C,EAC1C,OAA8B;QAE9B,IAAI,QAAQ,GAAG,eAAe,CAAC;QAE/B,2BAA2B;QAC3B,IAAI,OAAO,CAAC,gBAAgB,EAAE,MAAM,EAAE,CAAC;YACrC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAS,CAAC,CAAC,CAAC;QACxF,CAAC;QAED,mCAAmC;QACnC,IAAI,OAAO,CAAC,cAAc,EAAE,MAAM,EAAE,CAAC;YACnC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,cAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAO,CAAC,CAAC,CAAC;QACnF,CAAC;QAED,6BAA6B;QAC7B,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;YAC1B,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC,IAAI,OAAO,CAAC,aAAc,CAAC,CAAC;QAC1F,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAClB,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED,sCAAsC;QACtC,QAAQ,GAAG,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC;QAExD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB,CAAC,eAA0C;QAC1E,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACzC,MAAM,cAAc,GAAG,IAAI,sCAAc,EAAE,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YACnC,cAAc,CAAC,MAAM,GAAG,4CAAoB,CAAC,MAAM,CAAC;YACpD,cAAc,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS;YACpF,OAAO,cAAc,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,+BAA+B,CAC3C,OAA8B,EAC9B,OAA0B;QAE1B,oDAAoD;QACpD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB;aAChD,kBAAkB,CAAC,QAAQ,CAAC;aAC5B,QAAQ,CAAC,qBAAqB,EAAE,aAAa,CAAC;aAC9C,KAAK,CAAC,+BAA+B,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;aAChG,OAAO,CAAC,WAAW,CAAC;aACpB,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aACnB,OAAO,EAAE,CAAC;QAEb,OAAO,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,kBAAkB,EAAE,0CAAkB,CAAC,MAAM;YAC7C,MAAM,EAAE,4CAAoB,CAAC,QAAQ;YACrC,eAAe,EAAE,GAAG;YACpB,cAAc,EAAE,GAAG;YACnB,QAAQ,EAAE,CAAC;YACX,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,6BAA6B;YACzD,QAAQ,EAAE;gBACR,aAAa,EAAE,UAAU;gBACzB,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG;aACzC;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,+BAA+B,CAC3C,OAA8B,EAC9B,OAA0B;QAE1B,mDAAmD;QACnD,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,EAAE,CAAC;QACrD,MAAM,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,aAAa,IAAI,EAAE,CAAC;QAC/D,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,yCAAyC;QACzC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB;aAClD,kBAAkB,CAAC,QAAQ,CAAC;aAC5B,KAAK,CAAC,6BAA6B,EAAE,EAAE,SAAS,EAAE,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aACnB,OAAO,EAAE,CAAC;QAEb,OAAO,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,kBAAkB,EAAE,0CAAkB,CAAC,WAAW;YAClD,MAAM,EAAE,4CAAoB,CAAC,SAAS;YACtC,eAAe,EAAE,GAAG;YACpB,cAAc,EAAE,GAAG;YACnB,QAAQ,EAAE,CAAC;YACX,WAAW,EAAE,mDAAmD;YAChE,QAAQ,EAAE;gBACR,aAAa,EAAE,WAAW;gBAC1B,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;aACjC;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;OAEG;IACK,8BAA8B,CAAC,eAA0C;QAC/E,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;QAC/B,OAAO,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAClC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,kBAAkB,EAAE,CAAC;YACxD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClB,OAAO,KAAK,CAAC;YACf,CAAC;YACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACd,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAClC,cAAuC,EACvC,OAA8B;QAE9B,MAAM,OAAO,GAAG;YACd,aAAa,EAAE,GAAG;YAClB,OAAO,EAAE,IAAI;YACb,EAAE,EAAE,GAAG;YACP,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,IAAI;SACf,CAAC;QAEF,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,EAAE,aAAa,IAAI,SAAS,CAAC;QAC1E,MAAM,SAAS,GAAG,cAAc,CAAC,eAAe,IAAI,GAAG,CAAC;QACxD,MAAM,MAAM,GAAG,OAAO,CAAC,aAAqC,CAAC,IAAI,GAAG,CAAC;QAErE,+BAA+B;QAC/B,IAAI,aAAa,GAAG,SAAS,GAAG,MAAM,CAAC;QAEvC,4BAA4B;QAC5B,IAAI,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC;YAClF,aAAa,IAAI,GAAG,CAAC;QACvB,CAAC;QAED,kCAAkC;QAClC,IAAI,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,GAAW,EAAE,EAAE,CACtD,OAAO,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YACnE,aAAa,IAAI,IAAI,CAAC;QACxB,CAAC;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,cAAuC,EAAE,OAA8B;QAC/F,IAAI,QAAQ,GAAG,CAAC,CAAC;QAEjB,+BAA+B;QAC/B,IAAI,cAAc,CAAC,MAAM,KAAK,4CAAoB,CAAC,SAAS,EAAE,CAAC;YAC7D,QAAQ,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,mCAAmC;QACnC,IAAI,cAAc,CAAC,MAAM,KAAK,4CAAoB,CAAC,YAAY,EAAE,CAAC;YAChE,QAAQ,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,4BAA4B;QAC5B,IAAI,CAAC,cAAc,CAAC,eAAe,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;YAChD,QAAQ,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,6BAA6B,CAAC,eAA0C;QAC9E,MAAM,WAAW,GAA8B,EAAE,CAAC;QAClD,MAAM,SAAS,GAAG,IAAI,GAAG,EAA8B,CAAC;QACxD,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7C,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;YAClC,MAAM,IAAI,GAAG,GAAG,CAAC,kBAAmB,CAAC;YACrC,MAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC;YAExC,iCAAiC;YACjC,MAAM,gBAAgB,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,gBAAgB,IAAI,CAAC;gBAAE,SAAS;YAEpC,kCAAkC;YAClC,MAAM,uBAAuB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAClG,IAAI,uBAAuB;gBAAE,SAAS;YAEtC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtB,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,GAAG,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7F,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;CACF,CAAA;AAhgBY,kEAA2B;sCAA3B,2BAA2B;IADvC,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,0BAAgB,EAAC,sCAAc,CAAC,CAAA;IAEhC,WAAA,IAAA,0BAAgB,EAAC,yCAAe,CAAC,CAAA;IAEjC,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;IAEtB,WAAA,IAAA,0BAAgB,EAAC,sBAAM,CAAC,CAAA;yDALS,oBAAU,oBAAV,oBAAU,oDAEb,oBAAU,oBAAV,oBAAU,oDAEjB,oBAAU,oBAAV,oBAAU,oDAER,oBAAU,oBAAV,oBAAU,oDACV,iEAA8B,oBAA9B,iEAA8B,oDACrC,qDAAwB,oBAAxB,qDAAwB,oDAChB,qDAAwB,oBAAxB,qDAAwB,oDACrB,+DAA6B,oBAA7B,+DAA6B;GAflD,2BAA2B,CAggBvC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\recommendation-engine.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, In, MoreThan, LessThan } from 'typeorm';\r\nimport { Recommendation, RecommendationType, RecommendationReason, RecommendationStatus } from '../entities/recommendation.entity';\r\nimport { UserInteraction, InteractionType } from '../entities/user-interaction.entity';\r\nimport { LearningPath } from '../entities/learning-path.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { CreateRecommendationDto, GetRecommendationsQueryDto } from '../dto/recommendation.dto';\r\nimport { RecommendationAnalyticsService } from './recommendation-analytics.service';\r\nimport { MLPersonalizationService } from './ml-personalization.service';\r\nimport { ContentSimilarityService } from './content-similarity.service';\r\nimport { CollaborativeFilteringService } from './collaborative-filtering.service';\r\n\r\nexport interface RecommendationContext {\r\n  userId: string;\r\n  sessionId?: string;\r\n  deviceType?: string;\r\n  context?: string;\r\n  currentCourse?: string;\r\n  recentInteractions?: UserInteraction[];\r\n  userProfile?: any;\r\n  preferences?: Record<string, any>;\r\n}\r\n\r\nexport interface RecommendationRequest {\r\n  userId: string;\r\n  type?: RecommendationType;\r\n  limit?: number;\r\n  minConfidence?: number;\r\n  context?: RecommendationContext;\r\n  excludeCourseIds?: string[];\r\n  includeReasons?: RecommendationReason[];\r\n}\r\n\r\n@Injectable()\r\nexport class RecommendationEngineService {\r\n  private readonly logger = new Logger(RecommendationEngineService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Recommendation)\r\n    private recommendationRepository: Repository<Recommendation>,\r\n    @InjectRepository(UserInteraction)\r\n    private interactionRepository: Repository<UserInteraction>,\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n    @InjectRepository(Course)\r\n    private courseRepository: Repository<Course>,\r\n    private analyticsService: RecommendationAnalyticsService,\r\n    private mlService: MLPersonalizationService,\r\n    private similarityService: ContentSimilarityService,\r\n    private collaborativeService: CollaborativeFilteringService,\r\n  ) {}\r\n\r\n  /**\r\n   * Generate personalized recommendations for a user\r\n   */\r\n  async generateRecommendations(request: RecommendationRequest): Promise<Recommendation[]> {\r\n    const startTime = Date.now();\r\n    this.logger.log(`Generating recommendations for user ${request.userId}`);\r\n\r\n    try {\r\n      // Get user profile and interaction history\r\n      const user = await this.userRepository.findOne({ where: { id: request.userId } });\r\n      if (!user) {\r\n        throw new Error(`User ${request.userId} not found`);\r\n      }\r\n\r\n      const context = await this.buildRecommendationContext(request);\r\n      \r\n      // Generate recommendations using multiple algorithms\r\n      const recommendations = await this.generateMultiAlgorithmRecommendations(context, request);\r\n      \r\n      // Rank and filter recommendations\r\n      const rankedRecommendations = await this.rankRecommendations(recommendations, context);\r\n      \r\n      // Apply business rules and filters\r\n      const filteredRecommendations = await this.applyBusinessRules(rankedRecommendations, request);\r\n      \r\n      // Save recommendations to database\r\n      const savedRecommendations = await this.saveRecommendations(filteredRecommendations);\r\n      \r\n      // Track analytics\r\n      await this.analyticsService.trackRecommendationGeneration({\r\n        userId: request.userId,\r\n        recommendationIds: savedRecommendations.map(r => r.id),\r\n        algorithmVersion: 'v2.1',\r\n        generationTimeMs: Date.now() - startTime,\r\n        context: request.context,\r\n      });\r\n\r\n      this.logger.log(`Generated ${savedRecommendations.length} recommendations for user ${request.userId} in ${Date.now() - startTime}ms`);\r\n      return savedRecommendations;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error generating recommendations for user ${request.userId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get existing recommendations for a user\r\n   */\r\n  async getRecommendations(userId: string, query: GetRecommendationsQueryDto): Promise<{\r\n    recommendations: Recommendation[];\r\n    total: number;\r\n  }> {\r\n    const queryBuilder = this.recommendationRepository\r\n      .createQueryBuilder('recommendation')\r\n      .leftJoinAndSelect('recommendation.course', 'course')\r\n      .where('recommendation.userId = :userId', { userId });\r\n\r\n    // Apply filters\r\n    if (query.type) {\r\n      queryBuilder.andWhere('recommendation.recommendationType = :type', { type: query.type });\r\n    }\r\n\r\n    if (query.status) {\r\n      queryBuilder.andWhere('recommendation.status = :status', { status: query.status });\r\n    } else {\r\n      // Default to active recommendations\r\n      queryBuilder.andWhere('recommendation.status = :status', { status: RecommendationStatus.ACTIVE });\r\n    }\r\n\r\n    if (query.minConfidence) {\r\n      queryBuilder.andWhere('recommendation.confidenceScore >= :minConfidence', { minConfidence: query.minConfidence });\r\n    }\r\n\r\n    if (!query.includeExpired) {\r\n      queryBuilder.andWhere('(recommendation.expiresAt IS NULL OR recommendation.expiresAt > :now)', { now: new Date() });\r\n    }\r\n\r\n    // Apply sorting\r\n    const sortField = `recommendation.${query.sortBy}`;\r\n    queryBuilder.orderBy(sortField, query.sortOrder);\r\n\r\n    // Get total count\r\n    const total = await queryBuilder.getCount();\r\n\r\n    // Apply pagination\r\n    queryBuilder.skip(query.offset).take(query.limit);\r\n\r\n    const recommendations = await queryBuilder.getMany();\r\n\r\n    return { recommendations, total };\r\n  }\r\n\r\n  /**\r\n   * Record user interaction with a recommendation\r\n   */\r\n  async recordInteraction(recommendationId: string, interactionType: 'view' | 'click' | 'dismiss', metadata?: any): Promise<void> {\r\n    const recommendation = await this.recommendationRepository.findOne({ where: { id: recommendationId } });\r\n    if (!recommendation) {\r\n      throw new Error(`Recommendation ${recommendationId} not found`);\r\n    }\r\n\r\n    // Update recommendation based on interaction\r\n    switch (interactionType) {\r\n      case 'view':\r\n        recommendation.viewedAt = new Date();\r\n        break;\r\n      case 'click':\r\n        recommendation.clickedAt = new Date();\r\n        break;\r\n      case 'dismiss':\r\n        recommendation.status = RecommendationStatus.DISMISSED;\r\n        recommendation.dismissedAt = new Date();\r\n        break;\r\n    }\r\n\r\n    await this.recommendationRepository.save(recommendation);\r\n\r\n    // Track analytics\r\n    await this.analyticsService.trackRecommendationInteraction({\r\n      recommendationId,\r\n      userId: recommendation.userId,\r\n      interactionType,\r\n      metadata,\r\n    });\r\n\r\n    // Create user interaction record\r\n    await this.interactionRepository.save({\r\n      userId: recommendation.userId,\r\n      courseId: recommendation.courseId,\r\n      recommendationId,\r\n      interactionType: interactionType as any,\r\n      context: 'recommendation' as any,\r\n      metadata,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Provide feedback on recommendation quality\r\n   */\r\n  async provideFeedback(recommendationId: string, score: number, feedbackType: 'explicit' | 'implicit' = 'explicit', comment?: string): Promise<void> {\r\n    const recommendation = await this.recommendationRepository.findOne({ where: { id: recommendationId } });\r\n    if (!recommendation) {\r\n      throw new Error(`Recommendation ${recommendationId} not found`);\r\n    }\r\n\r\n    // Update recommendation metadata with feedback\r\n    recommendation.metadata = {\r\n      ...recommendation.metadata,\r\n      feedback: {\r\n        score,\r\n        feedbackType,\r\n        comment,\r\n        timestamp: new Date(),\r\n      },\r\n    };\r\n\r\n    await this.recommendationRepository.save(recommendation);\r\n\r\n    // Track feedback for ML model improvement\r\n    await this.analyticsService.trackRecommendationFeedback({\r\n      recommendationId,\r\n      userId: recommendation.userId,\r\n      score,\r\n      feedbackType,\r\n      comment,\r\n    });\r\n\r\n    // Update ML model with feedback\r\n    await this.mlService.updateModelWithFeedback(recommendation.userId, recommendationId, score);\r\n  }\r\n\r\n  /**\r\n   * Build recommendation context from user data\r\n   */\r\n  private async buildRecommendationContext(request: RecommendationRequest): Promise<RecommendationContext> {\r\n    const { userId } = request;\r\n\r\n    // Get recent user interactions\r\n    const recentInteractions = await this.interactionRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 100,\r\n      relations: ['course'],\r\n    });\r\n\r\n    // Get user profile\r\n    const user = await this.userRepository.findOne({ \r\n      where: { id: userId },\r\n      relations: ['enrollments', 'enrollments.course'],\r\n    });\r\n\r\n    return {\r\n      userId,\r\n      recentInteractions,\r\n      userProfile: user,\r\n      ...request.context,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations using multiple algorithms\r\n   */\r\n  private async generateMultiAlgorithmRecommendations(\r\n    context: RecommendationContext,\r\n    request: RecommendationRequest,\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    const recommendations: Partial<Recommendation>[] = [];\r\n\r\n    // 1. Collaborative Filtering\r\n    const collaborativeRecs = await this.collaborativeService.generateRecommendations(context, {\r\n      limit: Math.ceil((request.limit || 10) * 0.4),\r\n      minConfidence: request.minConfidence || 0.1,\r\n    });\r\n    recommendations.push(...collaborativeRecs);\r\n\r\n    // 2. Content-Based Filtering\r\n    const contentRecs = await this.similarityService.generateContentBasedRecommendations(context, {\r\n      limit: Math.ceil((request.limit || 10) * 0.3),\r\n      minConfidence: request.minConfidence || 0.1,\r\n    });\r\n    recommendations.push(...contentRecs);\r\n\r\n    // 3. ML Personalization\r\n    const mlRecs = await this.mlService.generatePersonalizedRecommendations(context, {\r\n      limit: Math.ceil((request.limit || 10) * 0.3),\r\n      minConfidence: request.minConfidence || 0.1,\r\n    });\r\n    recommendations.push(...mlRecs);\r\n\r\n    // 4. Trending and Popular Content\r\n    const trendingRecs = await this.generateTrendingRecommendations(context, {\r\n      limit: Math.ceil((request.limit || 10) * 0.2),\r\n    });\r\n    recommendations.push(...trendingRecs);\r\n\r\n    // 5. Skill Gap Analysis\r\n    const skillGapRecs = await this.generateSkillGapRecommendations(context, {\r\n      limit: Math.ceil((request.limit || 10) * 0.2),\r\n    });\r\n    recommendations.push(...skillGapRecs);\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Rank recommendations using ensemble method\r\n   */\r\n  private async rankRecommendations(\r\n    recommendations: Partial<Recommendation>[],\r\n    context: RecommendationContext,\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    // Remove duplicates\r\n    const uniqueRecs = this.removeDuplicateRecommendations(recommendations);\r\n\r\n    // Calculate ensemble scores\r\n    for (const rec of uniqueRecs) {\r\n      rec.relevanceScore = await this.calculateEnsembleScore(rec, context);\r\n      rec.priority = this.calculatePriority(rec, context);\r\n    }\r\n\r\n    // Sort by relevance score and priority\r\n    return uniqueRecs.sort((a, b) => {\r\n      if (a.priority !== b.priority) {\r\n        return (b.priority || 0) - (a.priority || 0);\r\n      }\r\n      return (b.relevanceScore || 0) - (a.relevanceScore || 0);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Apply business rules and filters\r\n   */\r\n  private async applyBusinessRules(\r\n    recommendations: Partial<Recommendation>[],\r\n    request: RecommendationRequest,\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    let filtered = recommendations;\r\n\r\n    // Exclude specific courses\r\n    if (request.excludeCourseIds?.length) {\r\n      filtered = filtered.filter(rec => !request.excludeCourseIds!.includes(rec.courseId!));\r\n    }\r\n\r\n    // Filter by recommendation reasons\r\n    if (request.includeReasons?.length) {\r\n      filtered = filtered.filter(rec => request.includeReasons!.includes(rec.reason!));\r\n    }\r\n\r\n    // Apply confidence threshold\r\n    if (request.minConfidence) {\r\n      filtered = filtered.filter(rec => (rec.confidenceScore || 0) >= request.minConfidence!);\r\n    }\r\n\r\n    // Limit results\r\n    if (request.limit) {\r\n      filtered = filtered.slice(0, request.limit);\r\n    }\r\n\r\n    // Ensure diversity in recommendations\r\n    filtered = this.ensureRecommendationDiversity(filtered);\r\n\r\n    return filtered;\r\n  }\r\n\r\n  /**\r\n   * Save recommendations to database\r\n   */\r\n  private async saveRecommendations(recommendations: Partial<Recommendation>[]): Promise<Recommendation[]> {\r\n    const entities = recommendations.map(rec => {\r\n      const recommendation = new Recommendation();\r\n      Object.assign(recommendation, rec);\r\n      recommendation.status = RecommendationStatus.ACTIVE;\r\n      recommendation.expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\r\n      return recommendation;\r\n    });\r\n\r\n    return await this.recommendationRepository.save(entities);\r\n  }\r\n\r\n  /**\r\n   * Generate trending recommendations\r\n   */\r\n  private async generateTrendingRecommendations(\r\n    context: RecommendationContext,\r\n    options: { limit: number },\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    // Get trending courses based on recent interactions\r\n    const trendingCourses = await this.courseRepository\r\n      .createQueryBuilder('course')\r\n      .leftJoin('course.interactions', 'interaction')\r\n      .where('interaction.createdAt > :date', { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) })\r\n      .groupBy('course.id')\r\n      .orderBy('COUNT(interaction.id)', 'DESC')\r\n      .take(options.limit)\r\n      .getMany();\r\n\r\n    return trendingCourses.map(course => ({\r\n      userId: context.userId,\r\n      courseId: course.id,\r\n      recommendationType: RecommendationType.COURSE,\r\n      reason: RecommendationReason.TRENDING,\r\n      confidenceScore: 0.7,\r\n      relevanceScore: 0.6,\r\n      priority: 3,\r\n      explanation: `${course.title} is trending among learners`,\r\n      metadata: {\r\n        algorithmUsed: 'trending',\r\n        trendingScore: Math.random() * 0.3 + 0.7,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate skill gap recommendations\r\n   */\r\n  private async generateSkillGapRecommendations(\r\n    context: RecommendationContext,\r\n    options: { limit: number },\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    // Analyze user's current skills vs. desired skills\r\n    const userSkills = context.userProfile?.skills || [];\r\n    const desiredSkills = context.userProfile?.desiredSkills || [];\r\n    const skillGaps = desiredSkills.filter((skill: string) => !userSkills.includes(skill));\r\n\r\n    if (skillGaps.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Find courses that teach missing skills\r\n    const gapFillingCourses = await this.courseRepository\r\n      .createQueryBuilder('course')\r\n      .where('course.skills && :skillGaps', { skillGaps })\r\n      .take(options.limit)\r\n      .getMany();\r\n\r\n    return gapFillingCourses.map(course => ({\r\n      userId: context.userId,\r\n      courseId: course.id,\r\n      recommendationType: RecommendationType.SKILL_BASED,\r\n      reason: RecommendationReason.SKILL_GAP,\r\n      confidenceScore: 0.8,\r\n      relevanceScore: 0.9,\r\n      priority: 5,\r\n      explanation: `This course helps fill gaps in your skill profile`,\r\n      metadata: {\r\n        algorithmUsed: 'skill_gap',\r\n        skillGaps: skillGaps.slice(0, 3),\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate recommendations\r\n   */\r\n  private removeDuplicateRecommendations(recommendations: Partial<Recommendation>[]): Partial<Recommendation>[] {\r\n    const seen = new Set<string>();\r\n    return recommendations.filter(rec => {\r\n      const key = `${rec.courseId}-${rec.recommendationType}`;\r\n      if (seen.has(key)) {\r\n        return false;\r\n      }\r\n      seen.add(key);\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate ensemble score combining multiple algorithms\r\n   */\r\n  private async calculateEnsembleScore(\r\n    recommendation: Partial<Recommendation>,\r\n    context: RecommendationContext,\r\n  ): Promise<number> {\r\n    const weights = {\r\n      collaborative: 0.3,\r\n      content: 0.25,\r\n      ml: 0.3,\r\n      trending: 0.1,\r\n      skillGap: 0.05,\r\n    };\r\n\r\n    const algorithmUsed = recommendation.metadata?.algorithmUsed || 'unknown';\r\n    const baseScore = recommendation.confidenceScore || 0.5;\r\n    const weight = weights[algorithmUsed as keyof typeof weights] || 0.1;\r\n\r\n    // Apply contextual adjustments\r\n    let adjustedScore = baseScore * weight;\r\n\r\n    // Boost recent interactions\r\n    if (context.recentInteractions?.some(i => i.courseId === recommendation.courseId)) {\r\n      adjustedScore *= 1.2;\r\n    }\r\n\r\n    // Boost based on user preferences\r\n    if (recommendation.metadata?.tags?.some((tag: string) => \r\n      context.userProfile?.preferences?.favoriteTopics?.includes(tag))) {\r\n      adjustedScore *= 1.15;\r\n    }\r\n\r\n    return Math.min(adjustedScore, 1.0);\r\n  }\r\n\r\n  /**\r\n   * Calculate recommendation priority\r\n   */\r\n  private calculatePriority(recommendation: Partial<Recommendation>, context: RecommendationContext): number {\r\n    let priority = 1;\r\n\r\n    // High priority for skill gaps\r\n    if (recommendation.reason === RecommendationReason.SKILL_GAP) {\r\n      priority += 3;\r\n    }\r\n\r\n    // Medium priority for continuation\r\n    if (recommendation.reason === RecommendationReason.CONTINUATION) {\r\n      priority += 2;\r\n    }\r\n\r\n    // Boost for high confidence\r\n    if ((recommendation.confidenceScore || 0) > 0.8) {\r\n      priority += 1;\r\n    }\r\n\r\n    return priority;\r\n  }\r\n\r\n  /**\r\n   * Ensure diversity in recommendation types and topics\r\n   */\r\n  private ensureRecommendationDiversity(recommendations: Partial<Recommendation>[]): Partial<Recommendation>[] {\r\n    const diversified: Partial<Recommendation>[] = [];\r\n    const typeCount = new Map<RecommendationType, number>();\r\n    const topicCount = new Map<string, number>();\r\n\r\n    for (const rec of recommendations) {\r\n      const type = rec.recommendationType!;\r\n      const topics = rec.metadata?.tags || [];\r\n\r\n      // Limit recommendations per type\r\n      const currentTypeCount = typeCount.get(type) || 0;\r\n      if (currentTypeCount >= 3) continue;\r\n\r\n      // Limit recommendations per topic\r\n      const hasOverrepresentedTopic = topics.some((topic: string) => (topicCount.get(topic) || 0) >= 2);\r\n      if (hasOverrepresentedTopic) continue;\r\n\r\n      diversified.push(rec);\r\n      typeCount.set(type, currentTypeCount + 1);\r\n      topics.forEach((topic: string) => topicCount.set(topic, (topicCount.get(topic) || 0) + 1));\r\n    }\r\n\r\n    return diversified;\r\n  }\r\n}\r\n"],"version":3}