f9bb09e9d15469b870c69b31e4a139aa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const ioredis_1 = __importDefault(require("ioredis"));
/**
 * Service for interacting with Redis, including caching and token blacklisting.
 * Handles connection lifecycle and provides utility methods for Redis operations.
 */
let RedisService = class RedisService {
    /**
     * Constructs the RedisService.
     * @param configService - The configuration service for accessing Redis connection settings.
     */
    constructor(configService) {
        this.configService = configService;
    }
    /**
     * Initializes the Redis client connection on module init.
     */
    onModuleInit() {
        this.client = new ioredis_1.default({
            host: this.configService.get('cache.redis.host'),
            port: this.configService.get('cache.redis.port'),
            password: this.configService.get('cache.redis.password'),
            db: this.configService.get('cache.redis.db'),
        });
    }
    /**
     * Closes the Redis client connection on module destroy.
     */
    onModuleDestroy() {
        if (this.client)
            this.client.quit();
    }
    /**
     * Set a value in Redis with optional TTL.
     * @param key Redis key
     * @param value Value to store
     * @param ttlSeconds Optional time-to-live in seconds
     */
    async set(key, value, ttlSeconds) {
        if (ttlSeconds) {
            await this.client.set(key, value, 'EX', ttlSeconds);
        }
        else {
            await this.client.set(key, value);
        }
    }
    /**
     * Get a value from Redis by key.
     * @param key Redis key
     * @returns The value or null if not found
     */
    async get(key) {
        return this.client.get(key);
    }
    /**
     * Delete a key from Redis.
     * @param key Redis key
     */
    async del(key) {
        await this.client.del(key);
    }
    /**
     * Check if a key exists in Redis.
     * @param key Redis key
     * @returns True if exists, false otherwise
     */
    async exists(key) {
        return (await this.client.exists(key)) === 1;
    }
    /**
     * Blacklist a token for a specified duration.
     * @param token Token to blacklist
     * @param expiresIn Expiry time in seconds
     */
    async blacklistToken(token, expiresIn) {
        await this.set(`blacklist:${token}`, '1', expiresIn);
    }
    /**
     * Check if a token is blacklisted.
     * @param token Token to check
     * @returns True if blacklisted, false otherwise
     */
    async isTokenBlacklisted(token) {
        return this.exists(`blacklist:${token}`);
    }
};
exports.RedisService = RedisService;
exports.RedisService = RedisService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], RedisService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzaGFyZWRcXHNlcnZpY2VzXFxyZWRpcy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkU7QUFDM0UsMkNBQStDO0FBQy9DLHNEQUE0QjtBQUU1Qjs7O0dBR0c7QUFFSSxJQUFNLFlBQVksR0FBbEIsTUFBTSxZQUFZO0lBR3ZCOzs7T0FHRztJQUNILFlBQTZCLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUU3RDs7T0FFRztJQUNILFlBQVk7UUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQUssQ0FBQztZQUN0QixJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQVMsa0JBQWtCLENBQUM7WUFDeEQsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFTLGtCQUFrQixDQUFDO1lBQ3hELFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBUyxzQkFBc0IsQ0FBQztZQUNoRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQVMsZ0JBQWdCLENBQUM7U0FDckQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE1BQU07WUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQWEsRUFBRSxVQUFtQjtRQUN2RCxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0RCxDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBVztRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQVc7UUFDbkIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBVztRQUN0QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBYSxFQUFFLFNBQWlCO1FBQ25ELE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGLENBQUE7QUFyRlksb0NBQVk7dUJBQVosWUFBWTtJQUR4QixJQUFBLG1CQUFVLEdBQUU7eURBUWlDLHNCQUFhLG9CQUFiLHNCQUFhO0dBUDlDLFlBQVksQ0FxRnhCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcc2hhcmVkXFxzZXJ2aWNlc1xccmVkaXMuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbk1vZHVsZUluaXQsIE9uTW9kdWxlRGVzdHJveSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcclxuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZm9yIGludGVyYWN0aW5nIHdpdGggUmVkaXMsIGluY2x1ZGluZyBjYWNoaW5nIGFuZCB0b2tlbiBibGFja2xpc3RpbmcuXHJcbiAqIEhhbmRsZXMgY29ubmVjdGlvbiBsaWZlY3ljbGUgYW5kIHByb3ZpZGVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgUmVkaXMgb3BlcmF0aW9ucy5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlZGlzU2VydmljZSBpbXBsZW1lbnRzIE9uTW9kdWxlSW5pdCwgT25Nb2R1bGVEZXN0cm95IHtcclxuICBwcml2YXRlIGNsaWVudDogUmVkaXM7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdHMgdGhlIFJlZGlzU2VydmljZS5cclxuICAgKiBAcGFyYW0gY29uZmlnU2VydmljZSAtIFRoZSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIGFjY2Vzc2luZyBSZWRpcyBjb25uZWN0aW9uIHNldHRpbmdzLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29uZmlnU2VydmljZTogQ29uZmlnU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFJlZGlzIGNsaWVudCBjb25uZWN0aW9uIG9uIG1vZHVsZSBpbml0LlxyXG4gICAqL1xyXG4gIG9uTW9kdWxlSW5pdCgpIHtcclxuICAgIHRoaXMuY2xpZW50ID0gbmV3IFJlZGlzKHtcclxuICAgICAgaG9zdDogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdjYWNoZS5yZWRpcy5ob3N0JyksXHJcbiAgICAgIHBvcnQ6IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignY2FjaGUucmVkaXMucG9ydCcpLFxyXG4gICAgICBwYXNzd29yZDogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdjYWNoZS5yZWRpcy5wYXNzd29yZCcpLFxyXG4gICAgICBkYjogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KCdjYWNoZS5yZWRpcy5kYicpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZXMgdGhlIFJlZGlzIGNsaWVudCBjb25uZWN0aW9uIG9uIG1vZHVsZSBkZXN0cm95LlxyXG4gICAqL1xyXG4gIG9uTW9kdWxlRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmNsaWVudCkgdGhpcy5jbGllbnQucXVpdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGEgdmFsdWUgaW4gUmVkaXMgd2l0aCBvcHRpb25hbCBUVEwuXHJcbiAgICogQHBhcmFtIGtleSBSZWRpcyBrZXlcclxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc3RvcmVcclxuICAgKiBAcGFyYW0gdHRsU2Vjb25kcyBPcHRpb25hbCB0aW1lLXRvLWxpdmUgaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIGFzeW5jIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdHRsU2Vjb25kcz86IG51bWJlcikge1xyXG4gICAgaWYgKHR0bFNlY29uZHMpIHtcclxuICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0KGtleSwgdmFsdWUsICdFWCcsIHR0bFNlY29uZHMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgdmFsdWUgZnJvbSBSZWRpcyBieSBrZXkuXHJcbiAgICogQHBhcmFtIGtleSBSZWRpcyBrZXlcclxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICAgKi9cclxuICBhc3luYyBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoa2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlbGV0ZSBhIGtleSBmcm9tIFJlZGlzLlxyXG4gICAqIEBwYXJhbSBrZXkgUmVkaXMga2V5XHJcbiAgICovXHJcbiAgYXN5bmMgZGVsKGtleTogc3RyaW5nKSB7XHJcbiAgICBhd2FpdCB0aGlzLmNsaWVudC5kZWwoa2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIGEga2V5IGV4aXN0cyBpbiBSZWRpcy5cclxuICAgKiBAcGFyYW0ga2V5IFJlZGlzIGtleVxyXG4gICAqIEByZXR1cm5zIFRydWUgaWYgZXhpc3RzLCBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuICBhc3luYyBleGlzdHMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiAoYXdhaXQgdGhpcy5jbGllbnQuZXhpc3RzKGtleSkpID09PSAxO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQmxhY2tsaXN0IGEgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGR1cmF0aW9uLlxyXG4gICAqIEBwYXJhbSB0b2tlbiBUb2tlbiB0byBibGFja2xpc3RcclxuICAgKiBAcGFyYW0gZXhwaXJlc0luIEV4cGlyeSB0aW1lIGluIHNlY29uZHNcclxuICAgKi9cclxuICBhc3luYyBibGFja2xpc3RUb2tlbih0b2tlbjogc3RyaW5nLCBleHBpcmVzSW46IG51bWJlcikge1xyXG4gICAgYXdhaXQgdGhpcy5zZXQoYGJsYWNrbGlzdDoke3Rva2VufWAsICcxJywgZXhwaXJlc0luKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIGEgdG9rZW4gaXMgYmxhY2tsaXN0ZWQuXHJcbiAgICogQHBhcmFtIHRva2VuIFRva2VuIHRvIGNoZWNrXHJcbiAgICogQHJldHVybnMgVHJ1ZSBpZiBibGFja2xpc3RlZCwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgYXN5bmMgaXNUb2tlbkJsYWNrbGlzdGVkKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmV4aXN0cyhgYmxhY2tsaXN0OiR7dG9rZW59YCk7XHJcbiAgfVxyXG59Il0sInZlcnNpb24iOjN9