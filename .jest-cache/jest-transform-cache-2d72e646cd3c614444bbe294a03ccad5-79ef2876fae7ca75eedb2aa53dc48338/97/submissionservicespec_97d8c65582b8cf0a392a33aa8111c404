eaa93bb4fb52256df2bf6c502dd240c3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const submission_service_1 = require("./provider/submission.service");
const typeorm_1 = require("@nestjs/typeorm");
const submission_entity_1 = require("./submission.entity");
const common_1 = require("@nestjs/common");
describe('SubmissionService', () => {
    let service;
    let repo;
    const mockRepo = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                submission_service_1.SubmissionService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(submission_entity_1.Submission),
                    useValue: mockRepo,
                },
            ],
        }).compile();
        service = module.get(submission_service_1.SubmissionService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(submission_entity_1.Submission));
    });
    afterEach(() => jest.clearAllMocks());
    describe('create', () => {
        it('should create and save a submission with a file', async () => {
            const dto = {
                studentId: 'uuid-student',
                assignmentId: 'uuid-assignment',
                textContent: 'My answer',
            };
            const file = { path: 'uploads/file.pdf' };
            const submission = { id: '1', ...dto, fileUrl: file.path, status: 'submitted' };
            mockRepo.create.mockReturnValue(submission);
            mockRepo.save.mockResolvedValue(submission);
            const result = await service.create(dto, file);
            expect(result).toEqual(submission);
        });
        it('should create a submission without a file', async () => {
            const dto = {
                studentId: 'uuid-student',
                assignmentId: 'uuid-assignment',
            };
            const submission = { id: '1', ...dto, fileUrl: null, status: 'submitted' };
            mockRepo.create.mockReturnValue(submission);
            mockRepo.save.mockResolvedValue(submission);
            const result = await service.create(dto);
            expect(result).toEqual(submission);
        });
    });
    describe('findOne', () => {
        it('should return a submission if found', async () => {
            const submission = { id: '1', studentId: 'uuid', assignmentId: 'uuid' };
            mockRepo.findOne.mockResolvedValue(submission);
            const result = await service.findOne('1');
            expect(result).toEqual(submission);
        });
        it('should throw NotFoundException if not found', async () => {
            mockRepo.findOne.mockResolvedValue(null);
            await expect(service.findOne('123')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        it('should update submission if within time limit', async () => {
            const submittedAt = new Date(Date.now() - 1000 * 60 * 60 * 2); // 2 hours ago
            const submission = {
                id: '1',
                studentId: 'uuid',
                assignmentId: 'uuid',
                submittedAt,
            };
            mockRepo.findOne.mockResolvedValue(submission);
            mockRepo.save.mockResolvedValue({ ...submission, textContent: 'Updated' });
            const result = await service.update('1', { textContent: 'Updated' });
            expect(result.textContent).toBe('Updated');
        });
        it('should throw BadRequestException if past 6 hours', async () => {
            const submittedAt = new Date(Date.now() - 1000 * 60 * 60 * 7); // 7 hours ago
            const submission = {
                id: '1',
                studentId: 'uuid',
                assignmentId: 'uuid',
                submittedAt,
            };
            mockRepo.findOne.mockResolvedValue(submission);
            await expect(service.update('1', { textContent: 'Late' })).rejects.toThrow(common_1.BadRequestException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,