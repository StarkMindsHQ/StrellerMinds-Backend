{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\consent.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\consent.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport {\r\n  UserConsent,\r\n  ConsentType,\r\n  ConsentStatus,\r\n} from './entities/user-consent.entity';\r\nimport { UpdateConsentDto, ConsentPreferencesDto } from './dto/consent.dto';\r\n\r\n@Injectable()\r\nexport class ConsentService {\r\n  constructor(\r\n    @InjectRepository(UserConsent)\r\n    private consentRepository: Repository<UserConsent>,\r\n  ) {}\r\n\r\n  async getUserConsents(userId: string): Promise<UserConsent[]> {\r\n    return this.consentRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n    });\r\n  }\r\n\r\n  async updateConsent(\r\n    userId: string,\r\n    consentDto: UpdateConsentDto,\r\n  ): Promise<UserConsent> {\r\n    const existingConsent = await this.consentRepository.findOne({\r\n      where: { userId, consentType: consentDto.consentType },\r\n    });\r\n\r\n    if (existingConsent) {\r\n      Object.assign(existingConsent, consentDto);\r\n      return this.consentRepository.save(existingConsent);\r\n    }\r\n\r\n    const newConsent = this.consentRepository.create({\r\n      userId,\r\n      ...consentDto,\r\n    });\r\n\r\n    return this.consentRepository.save(newConsent);\r\n  }\r\n\r\n  async updateConsentPreferences(\r\n    userId: string,\r\n    preferences: ConsentPreferencesDto,\r\n  ): Promise<UserConsent[]> {\r\n    const results: UserConsent[] = [];\r\n\r\n    for (const [type, status] of Object.entries(preferences)) {\r\n      if (status) {\r\n        const consent = await this.updateConsent(userId, {\r\n          consentType: type as ConsentType,\r\n          status,\r\n          purpose: `User preference for ${type}`,\r\n          legalBasis: 'consent',\r\n        });\r\n        results.push(consent);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  async withdrawAllConsents(userId: string): Promise<void> {\r\n    await this.consentRepository.update(\r\n      { userId },\r\n      { status: ConsentStatus.WITHDRAWN, updatedAt: new Date() },\r\n    );\r\n  }\r\n\r\n  async hasValidConsent(\r\n    userId: string,\r\n    consentType: ConsentType,\r\n  ): Promise<boolean> {\r\n    const consent = await this.consentRepository.findOne({\r\n      where: { userId, consentType, status: ConsentStatus.GRANTED },\r\n    });\r\n\r\n    if (!consent) return false;\r\n\r\n    if (consent.expiresAt && consent.expiresAt < new Date()) {\r\n      await this.consentRepository.update(consent.id, {\r\n        status: ConsentStatus.WITHDRAWN,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"version":3}