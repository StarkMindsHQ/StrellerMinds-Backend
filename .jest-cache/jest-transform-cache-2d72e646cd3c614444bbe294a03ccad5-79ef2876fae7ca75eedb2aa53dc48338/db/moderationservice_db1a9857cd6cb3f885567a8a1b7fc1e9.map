{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,sCAAsC;AACtC,2CAA4C;AAC5C,6CAAmD;AACnD,0FAAwE;AACxE,qCAAqC;AACrC,4DAAkD;AAClD,yDAA+C;AAE/C;;GAEG;AAEI,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEU,uBAAkD,EACxB,UAA8B,EAC/B,SAA4B;QAFrD,4BAAuB,GAAvB,uBAAuB,CAA2B;QACxB,eAAU,GAAV,UAAU,CAAoB;QAC/B,cAAS,GAAT,SAAS,CAAmB;IAC5D,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAC,QAAgB;QAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAC9D,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,mBAAmB,CACvB,MAAc,EACd,UAAkB,EAClB,QAAgB,EAChB,WAAmB;QAEnB,MAAM,GAAG,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;YAC9C,MAAM;YACN,UAAU;YACV,QAAQ;YACR,SAAS,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE;SAC/B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC;CACF,CAAA;AA7DY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,4CAAa,CAAC,CAAA;IAE/B,WAAA,IAAA,0BAAgB,EAAC,sBAAM,CAAC,CAAA;IACxB,WAAA,IAAA,0BAAgB,EAAC,oBAAK,CAAC,CAAA;yDAFS,oBAAU,oBAAV,oBAAU,oDACG,oBAAU,oBAAV,oBAAU,oDACZ,oBAAU,oBAAV,oBAAU;GAL7C,iBAAiB,CA6D7B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { ModerationLog } from './entities/forum-moderation-logs.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { Thread } from 'src/thread/thread.entity';\r\nimport { Reply } from 'src/reply/reply.entity';\r\n\r\n/**\r\n * Service for moderation logic: locking threads, reporting/deleting replies, and logging actions.\r\n */\r\n@Injectable()\r\nexport class ModerationService {\r\n  constructor(\r\n    @InjectRepository(ModerationLog)\r\n    private moderationLogRepository: Repository<ModerationLog>,\r\n    @InjectRepository(Thread) private threadRepo: Repository<Thread>,\r\n    @InjectRepository(Reply) private replyRepo: Repository<Reply>,\r\n  ) {}\r\n\r\n  /**\r\n   * Lock a thread by its ID.\r\n   * @param threadId - The ID of the thread to be locked.\r\n   * @returns The updated thread entity.\r\n   */\r\n  async lockThread(threadId: number) {\r\n    const thread = await this.threadRepo.findOneBy({ id: threadId });\r\n    thread.isOpen = false;\r\n    return this.threadRepo.save(thread);\r\n  }\r\n\r\n  /**\r\n   * Report a reply by its ID.\r\n   * @param replyId - The ID of the reply to be reported.\r\n   * @returns The updated reply entity.\r\n   */\r\n  async reportReply(replyId: number) {\r\n    const reply = await this.replyRepo.findOneBy({ id: replyId });\r\n    reply.isReported = true;\r\n    return this.replyRepo.save(reply);\r\n  }\r\n\r\n  /**\r\n   * Soft delete a reply by its ID.\r\n   * @param replyId - The ID of the reply to be deleted.\r\n   * @returns The result of the delete operation.\r\n   */\r\n  async deleteReply(replyId: number) {\r\n    return this.replyRepo.softDelete(replyId);\r\n  }\r\n\r\n  /**\r\n   * Log a moderation action.\r\n   * @param action - The action performed (e.g., 'lock', 'report', 'delete').\r\n   * @param entityType - The type of entity being moderated (e.g., 'thread', 'reply').\r\n   * @param entityId - The ID of the entity being moderated.\r\n   * @param moderatorId - The ID of the moderator performing the action.\r\n   * @returns The created moderation log entry.\r\n   */\r\n  async logModerationAction(\r\n    action: string,\r\n    entityType: string,\r\n    entityId: string,\r\n    moderatorId: string,\r\n  ): Promise<ModerationLog> {\r\n    const log = this.moderationLogRepository.create({\r\n      action,\r\n      entityType,\r\n      entityId,\r\n      moderator: { id: moderatorId },\r\n    });\r\n    return this.moderationLogRepository.save(log);\r\n  }\r\n}\r\n"],"version":3}