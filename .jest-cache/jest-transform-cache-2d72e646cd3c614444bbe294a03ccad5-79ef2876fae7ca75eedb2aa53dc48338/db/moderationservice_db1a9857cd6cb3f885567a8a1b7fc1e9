f3ed65ef4f63c31337ac499ff62b50a8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModerationService = void 0;
/* eslint-disable prettier/prettier */
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const forum_moderation_logs_entity_1 = require("./entities/forum-moderation-logs.entity");
const typeorm_2 = require("typeorm");
const thread_entity_1 = require("src/thread/thread.entity");
const reply_entity_1 = require("src/reply/reply.entity");
/**
 * Service for moderation logic: locking threads, reporting/deleting replies, and logging actions.
 */
let ModerationService = class ModerationService {
    constructor(moderationLogRepository, threadRepo, replyRepo) {
        this.moderationLogRepository = moderationLogRepository;
        this.threadRepo = threadRepo;
        this.replyRepo = replyRepo;
    }
    /**
     * Lock a thread by its ID.
     * @param threadId - The ID of the thread to be locked.
     * @returns The updated thread entity.
     */
    async lockThread(threadId) {
        const thread = await this.threadRepo.findOneBy({ id: threadId });
        thread.isOpen = false;
        return this.threadRepo.save(thread);
    }
    /**
     * Report a reply by its ID.
     * @param replyId - The ID of the reply to be reported.
     * @returns The updated reply entity.
     */
    async reportReply(replyId) {
        const reply = await this.replyRepo.findOneBy({ id: replyId });
        reply.isReported = true;
        return this.replyRepo.save(reply);
    }
    /**
     * Soft delete a reply by its ID.
     * @param replyId - The ID of the reply to be deleted.
     * @returns The result of the delete operation.
     */
    async deleteReply(replyId) {
        return this.replyRepo.softDelete(replyId);
    }
    /**
     * Log a moderation action.
     * @param action - The action performed (e.g., 'lock', 'report', 'delete').
     * @param entityType - The type of entity being moderated (e.g., 'thread', 'reply').
     * @param entityId - The ID of the entity being moderated.
     * @param moderatorId - The ID of the moderator performing the action.
     * @returns The created moderation log entry.
     */
    async logModerationAction(action, entityType, entityId, moderatorId) {
        const log = this.moderationLogRepository.create({
            action,
            entityType,
            entityId,
            moderator: { id: moderatorId },
        });
        return this.moderationLogRepository.save(log);
    }
};
exports.ModerationService = ModerationService;
exports.ModerationService = ModerationService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(forum_moderation_logs_entity_1.ModerationLog)),
    __param(1, (0, typeorm_1.InjectRepository)(thread_entity_1.Thread)),
    __param(2, (0, typeorm_1.InjectRepository)(reply_entity_1.Reply)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], ModerationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxtb2RlcmF0aW9uXFxtb2RlcmF0aW9uLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNDQUFzQztBQUN0QywyQ0FBNEM7QUFDNUMsNkNBQW1EO0FBQ25ELDBGQUF3RTtBQUN4RSxxQ0FBcUM7QUFDckMsNERBQWtEO0FBQ2xELHlEQUErQztBQUUvQzs7R0FFRztBQUVJLElBQU0saUJBQWlCLEdBQXZCLE1BQU0saUJBQWlCO0lBQzVCLFlBRVUsdUJBQWtELEVBQ3hCLFVBQThCLEVBQy9CLFNBQTRCO1FBRnJELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBMkI7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDL0IsY0FBUyxHQUFULFNBQVMsQ0FBbUI7SUFDNUQsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQWdCO1FBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQy9CLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUM5RCxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsbUJBQW1CLENBQ3ZCLE1BQWMsRUFDZCxVQUFrQixFQUNsQixRQUFnQixFQUNoQixXQUFtQjtRQUVuQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDO1lBQzlDLE1BQU07WUFDTixVQUFVO1lBQ1YsUUFBUTtZQUNSLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUU7U0FDL0IsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRixDQUFBO0FBN0RZLDhDQUFpQjs0QkFBakIsaUJBQWlCO0lBRDdCLElBQUEsbUJBQVUsR0FBRTtJQUdSLFdBQUEsSUFBQSwwQkFBZ0IsRUFBQyw0Q0FBYSxDQUFDLENBQUE7SUFFL0IsV0FBQSxJQUFBLDBCQUFnQixFQUFDLHNCQUFNLENBQUMsQ0FBQTtJQUN4QixXQUFBLElBQUEsMEJBQWdCLEVBQUMsb0JBQUssQ0FBQyxDQUFBO3lEQUZTLG9CQUFVLG9CQUFWLG9CQUFVLG9EQUNHLG9CQUFVLG9CQUFWLG9CQUFVLG9EQUNaLG9CQUFVLG9CQUFWLG9CQUFVO0dBTDdDLGlCQUFpQixDQTZEN0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxtb2RlcmF0aW9uXFxtb2RlcmF0aW9uLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IE1vZGVyYXRpb25Mb2cgfSBmcm9tICcuL2VudGl0aWVzL2ZvcnVtLW1vZGVyYXRpb24tbG9ncy5lbnRpdHknO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcbmltcG9ydCB7IFRocmVhZCB9IGZyb20gJ3NyYy90aHJlYWQvdGhyZWFkLmVudGl0eSc7XHJcbmltcG9ydCB7IFJlcGx5IH0gZnJvbSAnc3JjL3JlcGx5L3JlcGx5LmVudGl0eSc7XHJcblxyXG4vKipcclxuICogU2VydmljZSBmb3IgbW9kZXJhdGlvbiBsb2dpYzogbG9ja2luZyB0aHJlYWRzLCByZXBvcnRpbmcvZGVsZXRpbmcgcmVwbGllcywgYW5kIGxvZ2dpbmcgYWN0aW9ucy5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1vZGVyYXRpb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KE1vZGVyYXRpb25Mb2cpXHJcbiAgICBwcml2YXRlIG1vZGVyYXRpb25Mb2dSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PE1vZGVyYXRpb25Mb2c+LFxyXG4gICAgQEluamVjdFJlcG9zaXRvcnkoVGhyZWFkKSBwcml2YXRlIHRocmVhZFJlcG86IFJlcG9zaXRvcnk8VGhyZWFkPixcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFJlcGx5KSBwcml2YXRlIHJlcGx5UmVwbzogUmVwb3NpdG9yeTxSZXBseT4sXHJcbiAgKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBMb2NrIGEgdGhyZWFkIGJ5IGl0cyBJRC5cclxuICAgKiBAcGFyYW0gdGhyZWFkSWQgLSBUaGUgSUQgb2YgdGhlIHRocmVhZCB0byBiZSBsb2NrZWQuXHJcbiAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgdGhyZWFkIGVudGl0eS5cclxuICAgKi9cclxuICBhc3luYyBsb2NrVGhyZWFkKHRocmVhZElkOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHRocmVhZCA9IGF3YWl0IHRoaXMudGhyZWFkUmVwby5maW5kT25lQnkoeyBpZDogdGhyZWFkSWQgfSk7XHJcbiAgICB0aHJlYWQuaXNPcGVuID0gZmFsc2U7XHJcbiAgICByZXR1cm4gdGhpcy50aHJlYWRSZXBvLnNhdmUodGhyZWFkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcG9ydCBhIHJlcGx5IGJ5IGl0cyBJRC5cclxuICAgKiBAcGFyYW0gcmVwbHlJZCAtIFRoZSBJRCBvZiB0aGUgcmVwbHkgdG8gYmUgcmVwb3J0ZWQuXHJcbiAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgcmVwbHkgZW50aXR5LlxyXG4gICAqL1xyXG4gIGFzeW5jIHJlcG9ydFJlcGx5KHJlcGx5SWQ6IG51bWJlcikge1xyXG4gICAgY29uc3QgcmVwbHkgPSBhd2FpdCB0aGlzLnJlcGx5UmVwby5maW5kT25lQnkoeyBpZDogcmVwbHlJZCB9KTtcclxuICAgIHJlcGx5LmlzUmVwb3J0ZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbHlSZXBvLnNhdmUocmVwbHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU29mdCBkZWxldGUgYSByZXBseSBieSBpdHMgSUQuXHJcbiAgICogQHBhcmFtIHJlcGx5SWQgLSBUaGUgSUQgb2YgdGhlIHJlcGx5IHRvIGJlIGRlbGV0ZWQuXHJcbiAgICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgZGVsZXRlIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBhc3luYyBkZWxldGVSZXBseShyZXBseUlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcGx5UmVwby5zb2Z0RGVsZXRlKHJlcGx5SWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIGEgbW9kZXJhdGlvbiBhY3Rpb24uXHJcbiAgICogQHBhcmFtIGFjdGlvbiAtIFRoZSBhY3Rpb24gcGVyZm9ybWVkIChlLmcuLCAnbG9jaycsICdyZXBvcnQnLCAnZGVsZXRlJykuXHJcbiAgICogQHBhcmFtIGVudGl0eVR5cGUgLSBUaGUgdHlwZSBvZiBlbnRpdHkgYmVpbmcgbW9kZXJhdGVkIChlLmcuLCAndGhyZWFkJywgJ3JlcGx5JykuXHJcbiAgICogQHBhcmFtIGVudGl0eUlkIC0gVGhlIElEIG9mIHRoZSBlbnRpdHkgYmVpbmcgbW9kZXJhdGVkLlxyXG4gICAqIEBwYXJhbSBtb2RlcmF0b3JJZCAtIFRoZSBJRCBvZiB0aGUgbW9kZXJhdG9yIHBlcmZvcm1pbmcgdGhlIGFjdGlvbi5cclxuICAgKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBtb2RlcmF0aW9uIGxvZyBlbnRyeS5cclxuICAgKi9cclxuICBhc3luYyBsb2dNb2RlcmF0aW9uQWN0aW9uKFxyXG4gICAgYWN0aW9uOiBzdHJpbmcsXHJcbiAgICBlbnRpdHlUeXBlOiBzdHJpbmcsXHJcbiAgICBlbnRpdHlJZDogc3RyaW5nLFxyXG4gICAgbW9kZXJhdG9ySWQ6IHN0cmluZyxcclxuICApOiBQcm9taXNlPE1vZGVyYXRpb25Mb2c+IHtcclxuICAgIGNvbnN0IGxvZyA9IHRoaXMubW9kZXJhdGlvbkxvZ1JlcG9zaXRvcnkuY3JlYXRlKHtcclxuICAgICAgYWN0aW9uLFxyXG4gICAgICBlbnRpdHlUeXBlLFxyXG4gICAgICBlbnRpdHlJZCxcclxuICAgICAgbW9kZXJhdG9yOiB7IGlkOiBtb2RlcmF0b3JJZCB9LFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5tb2RlcmF0aW9uTG9nUmVwb3NpdG9yeS5zYXZlKGxvZyk7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==