{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\integration\\analytics.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\integration\\analytics.integration.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { TypeOrmModule } from \"@nestjs/typeorm\"\r\nimport { BullModule } from \"@nestjs/bull\"\r\nimport { ScheduleModule } from \"@nestjs/schedule\"\r\n\r\nimport { AnalyticsModule } from \"../../analytics.module\"\r\nimport { DataCollectionService } from \"../../services/data-collection.service\"\r\nimport { BusinessIntelligenceService } from \"../../services/business-intelligence.service\"\r\nimport { EventType } from \"../../entities/analytics-event.entity\"\r\n\r\ndescribe(\"Analytics Integration\", () => {\r\n  let module: TestingModule\r\n  let dataCollectionService: DataCollectionService\r\n  let businessIntelligenceService: BusinessIntelligenceService\r\n\r\n  beforeAll(async () => {\r\n    module = await Test.createTestingModule({\r\n      imports: [\r\n        TypeOrmModule.forRoot({\r\n          type: \"sqlite\",\r\n          database: \":memory:\",\r\n          entities: [__dirname + \"/../../entities/*.entity{.ts,.js}\"],\r\n          synchronize: true,\r\n        }),\r\n        BullModule.forRoot({\r\n          redis: {\r\n            host: \"localhost\",\r\n            port: 6379,\r\n          },\r\n        }),\r\n        ScheduleModule.forRoot(),\r\n        AnalyticsModule,\r\n      ],\r\n    }).compile()\r\n\r\n    dataCollectionService = module.get<DataCollectionService>(DataCollectionService)\r\n    businessIntelligenceService = module.get<BusinessIntelligenceService>(BusinessIntelligenceService)\r\n  })\r\n\r\n  afterAll(async () => {\r\n    await module.close()\r\n  })\r\n\r\n  it(\"should track and query events end-to-end\", async () => {\r\n    // Track some events\r\n    await dataCollectionService.trackEvent({\r\n      eventType: EventType.USER_ACTION,\r\n      eventName: \"button_click\",\r\n      userId: \"user123\",\r\n      properties: { button: \"submit\" },\r\n    })\r\n\r\n    await dataCollectionService.trackEvent({\r\n      eventType: EventType.USER_ACTION,\r\n      eventName: \"page_view\",\r\n      userId: \"user123\",\r\n      properties: { page: \"/dashboard\" },\r\n    })\r\n\r\n    // Wait for processing\r\n    await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n    // Query events\r\n    const events = await dataCollectionService.getEvents({\r\n      userId: \"user123\",\r\n      limit: 10,\r\n    })\r\n\r\n    expect(events.total).toBeGreaterThan(0)\r\n    expect(events.events[0].userId).toBe(\"user123\")\r\n\r\n    // Get user analytics\r\n    const userAnalytics = await businessIntelligenceService.getUserAnalytics(\"user123\", {\r\n      start: new Date(Date.now() - 24 * 60 * 60 * 1000),\r\n      end: new Date(),\r\n    })\r\n\r\n    expect(userAnalytics.userId).toBe(\"user123\")\r\n    expect(userAnalytics.totalEvents).toBeGreaterThan(0)\r\n  }, 10000)\r\n})\r\n"],"version":3}