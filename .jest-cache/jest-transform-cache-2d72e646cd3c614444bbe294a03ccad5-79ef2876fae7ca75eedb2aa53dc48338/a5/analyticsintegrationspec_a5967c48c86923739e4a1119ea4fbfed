eb70172761a5524459468da067a8b4d6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const schedule_1 = require("@nestjs/schedule");
const analytics_module_1 = require("../../analytics.module");
const data_collection_service_1 = require("../../services/data-collection.service");
const business_intelligence_service_1 = require("../../services/business-intelligence.service");
const analytics_event_entity_1 = require("../../entities/analytics-event.entity");
describe("Analytics Integration", () => {
    let module;
    let dataCollectionService;
    let businessIntelligenceService;
    beforeAll(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                typeorm_1.TypeOrmModule.forRoot({
                    type: "sqlite",
                    database: ":memory:",
                    entities: [__dirname + "/../../entities/*.entity{.ts,.js}"],
                    synchronize: true,
                }),
                bull_1.BullModule.forRoot({
                    redis: {
                        host: "localhost",
                        port: 6379,
                    },
                }),
                schedule_1.ScheduleModule.forRoot(),
                analytics_module_1.AnalyticsModule,
            ],
        }).compile();
        dataCollectionService = module.get(data_collection_service_1.DataCollectionService);
        businessIntelligenceService = module.get(business_intelligence_service_1.BusinessIntelligenceService);
    });
    afterAll(async () => {
        await module.close();
    });
    it("should track and query events end-to-end", async () => {
        // Track some events
        await dataCollectionService.trackEvent({
            eventType: analytics_event_entity_1.EventType.USER_ACTION,
            eventName: "button_click",
            userId: "user123",
            properties: { button: "submit" },
        });
        await dataCollectionService.trackEvent({
            eventType: analytics_event_entity_1.EventType.USER_ACTION,
            eventName: "page_view",
            userId: "user123",
            properties: { page: "/dashboard" },
        });
        // Wait for processing
        await new Promise((resolve) => setTimeout(resolve, 1000));
        // Query events
        const events = await dataCollectionService.getEvents({
            userId: "user123",
            limit: 10,
        });
        expect(events.total).toBeGreaterThan(0);
        expect(events.events[0].userId).toBe("user123");
        // Get user analytics
        const userAnalytics = await businessIntelligenceService.getUserAnalytics("user123", {
            start: new Date(Date.now() - 24 * 60 * 60 * 1000),
            end: new Date(),
        });
        expect(userAnalytics.userId).toBe("user123");
        expect(userAnalytics.totalEvents).toBeGreaterThan(0);
    }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhbmFseXRpY1xcX190ZXN0c19fXFxpbnRlZ3JhdGlvblxcYW5hbHl0aWNzLmludGVncmF0aW9uLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBMEQ7QUFDMUQsNkNBQStDO0FBQy9DLHVDQUF5QztBQUN6QywrQ0FBaUQ7QUFFakQsNkRBQXdEO0FBQ3hELG9GQUE4RTtBQUM5RSxnR0FBMEY7QUFDMUYsa0ZBQWlFO0FBRWpFLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsSUFBSSxNQUFxQixDQUFBO0lBQ3pCLElBQUkscUJBQTRDLENBQUE7SUFDaEQsSUFBSSwyQkFBd0QsQ0FBQTtJQUU1RCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxHQUFHLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RDLE9BQU8sRUFBRTtnQkFDUCx1QkFBYSxDQUFDLE9BQU8sQ0FBQztvQkFDcEIsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSxDQUFDLFNBQVMsR0FBRyxtQ0FBbUMsQ0FBQztvQkFDM0QsV0FBVyxFQUFFLElBQUk7aUJBQ2xCLENBQUM7Z0JBQ0YsaUJBQVUsQ0FBQyxPQUFPLENBQUM7b0JBQ2pCLEtBQUssRUFBRTt3QkFDTCxJQUFJLEVBQUUsV0FBVzt3QkFDakIsSUFBSSxFQUFFLElBQUk7cUJBQ1g7aUJBQ0YsQ0FBQztnQkFDRix5QkFBYyxDQUFDLE9BQU8sRUFBRTtnQkFDeEIsa0NBQWU7YUFDaEI7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFWixxQkFBcUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUF3QiwrQ0FBcUIsQ0FBQyxDQUFBO1FBQ2hGLDJCQUEyQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQThCLDJEQUEyQixDQUFDLENBQUE7SUFDcEcsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEQsb0JBQW9CO1FBQ3BCLE1BQU0scUJBQXFCLENBQUMsVUFBVSxDQUFDO1lBQ3JDLFNBQVMsRUFBRSxrQ0FBUyxDQUFDLFdBQVc7WUFDaEMsU0FBUyxFQUFFLGNBQWM7WUFDekIsTUFBTSxFQUFFLFNBQVM7WUFDakIsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtTQUNqQyxDQUFDLENBQUE7UUFFRixNQUFNLHFCQUFxQixDQUFDLFVBQVUsQ0FBQztZQUNyQyxTQUFTLEVBQUUsa0NBQVMsQ0FBQyxXQUFXO1lBQ2hDLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7U0FDbkMsQ0FBQyxDQUFBO1FBRUYsc0JBQXNCO1FBQ3RCLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUV6RCxlQUFlO1FBQ2YsTUFBTSxNQUFNLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxTQUFTLENBQUM7WUFDbkQsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDLENBQUE7UUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFL0MscUJBQXFCO1FBQ3JCLE1BQU0sYUFBYSxHQUFHLE1BQU0sMkJBQTJCLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1lBQ2xGLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ2pELEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRTtTQUNoQixDQUFDLENBQUE7UUFFRixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUM1QyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDWCxDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGFuYWx5dGljXFxfX3Rlc3RzX19cXGludGVncmF0aW9uXFxhbmFseXRpY3MuaW50ZWdyYXRpb24uc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCB0eXBlIFRlc3RpbmdNb2R1bGUgfSBmcm9tIFwiQG5lc3Rqcy90ZXN0aW5nXCJcclxuaW1wb3J0IHsgVHlwZU9ybU1vZHVsZSB9IGZyb20gXCJAbmVzdGpzL3R5cGVvcm1cIlxyXG5pbXBvcnQgeyBCdWxsTW9kdWxlIH0gZnJvbSBcIkBuZXN0anMvYnVsbFwiXHJcbmltcG9ydCB7IFNjaGVkdWxlTW9kdWxlIH0gZnJvbSBcIkBuZXN0anMvc2NoZWR1bGVcIlxyXG5cclxuaW1wb3J0IHsgQW5hbHl0aWNzTW9kdWxlIH0gZnJvbSBcIi4uLy4uL2FuYWx5dGljcy5tb2R1bGVcIlxyXG5pbXBvcnQgeyBEYXRhQ29sbGVjdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZGF0YS1jb2xsZWN0aW9uLnNlcnZpY2VcIlxyXG5pbXBvcnQgeyBCdXNpbmVzc0ludGVsbGlnZW5jZVNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvYnVzaW5lc3MtaW50ZWxsaWdlbmNlLnNlcnZpY2VcIlxyXG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tIFwiLi4vLi4vZW50aXRpZXMvYW5hbHl0aWNzLWV2ZW50LmVudGl0eVwiXHJcblxyXG5kZXNjcmliZShcIkFuYWx5dGljcyBJbnRlZ3JhdGlvblwiLCAoKSA9PiB7XHJcbiAgbGV0IG1vZHVsZTogVGVzdGluZ01vZHVsZVxyXG4gIGxldCBkYXRhQ29sbGVjdGlvblNlcnZpY2U6IERhdGFDb2xsZWN0aW9uU2VydmljZVxyXG4gIGxldCBidXNpbmVzc0ludGVsbGlnZW5jZVNlcnZpY2U6IEJ1c2luZXNzSW50ZWxsaWdlbmNlU2VydmljZVxyXG5cclxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgbW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgaW1wb3J0czogW1xyXG4gICAgICAgIFR5cGVPcm1Nb2R1bGUuZm9yUm9vdCh7XHJcbiAgICAgICAgICB0eXBlOiBcInNxbGl0ZVwiLFxyXG4gICAgICAgICAgZGF0YWJhc2U6IFwiOm1lbW9yeTpcIixcclxuICAgICAgICAgIGVudGl0aWVzOiBbX19kaXJuYW1lICsgXCIvLi4vLi4vZW50aXRpZXMvKi5lbnRpdHl7LnRzLC5qc31cIl0sXHJcbiAgICAgICAgICBzeW5jaHJvbml6ZTogdHJ1ZSxcclxuICAgICAgICB9KSxcclxuICAgICAgICBCdWxsTW9kdWxlLmZvclJvb3Qoe1xyXG4gICAgICAgICAgcmVkaXM6IHtcclxuICAgICAgICAgICAgaG9zdDogXCJsb2NhbGhvc3RcIixcclxuICAgICAgICAgICAgcG9ydDogNjM3OSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgU2NoZWR1bGVNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIEFuYWx5dGljc01vZHVsZSxcclxuICAgICAgXSxcclxuICAgIH0pLmNvbXBpbGUoKVxyXG5cclxuICAgIGRhdGFDb2xsZWN0aW9uU2VydmljZSA9IG1vZHVsZS5nZXQ8RGF0YUNvbGxlY3Rpb25TZXJ2aWNlPihEYXRhQ29sbGVjdGlvblNlcnZpY2UpXHJcbiAgICBidXNpbmVzc0ludGVsbGlnZW5jZVNlcnZpY2UgPSBtb2R1bGUuZ2V0PEJ1c2luZXNzSW50ZWxsaWdlbmNlU2VydmljZT4oQnVzaW5lc3NJbnRlbGxpZ2VuY2VTZXJ2aWNlKVxyXG4gIH0pXHJcblxyXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IG1vZHVsZS5jbG9zZSgpXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJzaG91bGQgdHJhY2sgYW5kIHF1ZXJ5IGV2ZW50cyBlbmQtdG8tZW5kXCIsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIFRyYWNrIHNvbWUgZXZlbnRzXHJcbiAgICBhd2FpdCBkYXRhQ29sbGVjdGlvblNlcnZpY2UudHJhY2tFdmVudCh7XHJcbiAgICAgIGV2ZW50VHlwZTogRXZlbnRUeXBlLlVTRVJfQUNUSU9OLFxyXG4gICAgICBldmVudE5hbWU6IFwiYnV0dG9uX2NsaWNrXCIsXHJcbiAgICAgIHVzZXJJZDogXCJ1c2VyMTIzXCIsXHJcbiAgICAgIHByb3BlcnRpZXM6IHsgYnV0dG9uOiBcInN1Ym1pdFwiIH0sXHJcbiAgICB9KVxyXG5cclxuICAgIGF3YWl0IGRhdGFDb2xsZWN0aW9uU2VydmljZS50cmFja0V2ZW50KHtcclxuICAgICAgZXZlbnRUeXBlOiBFdmVudFR5cGUuVVNFUl9BQ1RJT04sXHJcbiAgICAgIGV2ZW50TmFtZTogXCJwYWdlX3ZpZXdcIixcclxuICAgICAgdXNlcklkOiBcInVzZXIxMjNcIixcclxuICAgICAgcHJvcGVydGllczogeyBwYWdlOiBcIi9kYXNoYm9hcmRcIiB9LFxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBXYWl0IGZvciBwcm9jZXNzaW5nXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcclxuXHJcbiAgICAvLyBRdWVyeSBldmVudHNcclxuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGRhdGFDb2xsZWN0aW9uU2VydmljZS5nZXRFdmVudHMoe1xyXG4gICAgICB1c2VySWQ6IFwidXNlcjEyM1wiLFxyXG4gICAgICBsaW1pdDogMTAsXHJcbiAgICB9KVxyXG5cclxuICAgIGV4cGVjdChldmVudHMudG90YWwpLnRvQmVHcmVhdGVyVGhhbigwKVxyXG4gICAgZXhwZWN0KGV2ZW50cy5ldmVudHNbMF0udXNlcklkKS50b0JlKFwidXNlcjEyM1wiKVxyXG5cclxuICAgIC8vIEdldCB1c2VyIGFuYWx5dGljc1xyXG4gICAgY29uc3QgdXNlckFuYWx5dGljcyA9IGF3YWl0IGJ1c2luZXNzSW50ZWxsaWdlbmNlU2VydmljZS5nZXRVc2VyQW5hbHl0aWNzKFwidXNlcjEyM1wiLCB7XHJcbiAgICAgIHN0YXJ0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjQgKiA2MCAqIDYwICogMTAwMCksXHJcbiAgICAgIGVuZDogbmV3IERhdGUoKSxcclxuICAgIH0pXHJcblxyXG4gICAgZXhwZWN0KHVzZXJBbmFseXRpY3MudXNlcklkKS50b0JlKFwidXNlcjEyM1wiKVxyXG4gICAgZXhwZWN0KHVzZXJBbmFseXRpY3MudG90YWxFdmVudHMpLnRvQmVHcmVhdGVyVGhhbigwKVxyXG4gIH0sIDEwMDAwKVxyXG59KVxyXG4iXSwidmVyc2lvbiI6M30=