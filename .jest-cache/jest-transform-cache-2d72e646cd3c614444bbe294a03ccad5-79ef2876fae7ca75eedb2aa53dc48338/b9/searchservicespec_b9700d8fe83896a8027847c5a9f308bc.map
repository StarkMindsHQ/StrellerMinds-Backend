{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\search.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\search.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { ElasticsearchService } from \"@nestjs/elasticsearch\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { SearchService } from \"./search.service\"\r\nimport { Course } from \"../courses/entities/course.entity\"\r\nimport { SearchAnalytics } from \"./entities/search-analytics.entity\"\r\nimport type { SearchDto } from \"./dto/search.dto\"\r\nimport type { AdvancedFilterDto } from \"./dto/advanced-filter.dto\"\r\nimport type { SearchSuggestionDto } from \"./dto/search-suggestion.dto\"\r\nimport { BadRequestException, InternalServerErrorException } from \"@nestjs/common\"\r\nimport { jest } from \"@jest/globals\" // Import jest to declare it\r\n\r\ndescribe(\"SearchService\", () => {\r\n  let service: SearchService\r\n  let elasticsearchService: ElasticsearchService\r\n  let courseRepository: Repository<Course>\r\n  let searchAnalyticsRepository: Repository<SearchAnalytics>\r\n\r\n  const mockElasticsearchService = {\r\n    search: jest.fn(),\r\n    index: jest.fn(),\r\n    update: jest.fn(),\r\n    delete: jest.fn(),\r\n    indices: {\r\n      create: jest.fn(),\r\n      exists: jest.fn(),\r\n      putMapping: jest.fn(),\r\n    },\r\n    bulk: jest.fn(),\r\n  }\r\n\r\n  const mockCourseRepository = {\r\n    find: jest.fn(),\r\n    findOne: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  }\r\n\r\n  const mockSearchAnalyticsRepository = {\r\n    save: jest.fn(),\r\n    find: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  }\r\n\r\n  const mockCourses = [\r\n    {\r\n      id: \"1\",\r\n      title: \"Introduction to Stellar Blockchain\",\r\n      description: \"Learn the basics of Stellar blockchain technology\",\r\n      category: \"blockchain\",\r\n      level: \"beginner\",\r\n      duration: 120,\r\n      price: 99.99,\r\n      instructor: \"John Doe\",\r\n      tags: [\"stellar\", \"blockchain\", \"cryptocurrency\"],\r\n      createdAt: new Date(\"2024-01-01\"),\r\n      updatedAt: new Date(\"2024-01-01\"),\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Advanced Smart Contracts on Stellar\",\r\n      description: \"Master smart contract development on Stellar network\",\r\n      category: \"development\",\r\n      level: \"advanced\",\r\n      duration: 240,\r\n      price: 199.99,\r\n      instructor: \"Jane Smith\",\r\n      tags: [\"stellar\", \"smart-contracts\", \"development\"],\r\n      createdAt: new Date(\"2024-01-02\"),\r\n      updatedAt: new Date(\"2024-01-02\"),\r\n    },\r\n  ]\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        SearchService,\r\n        {\r\n          provide: ElasticsearchService,\r\n          useValue: mockElasticsearchService,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(Course),\r\n          useValue: mockCourseRepository,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(SearchAnalytics),\r\n          useValue: mockSearchAnalyticsRepository,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<SearchService>(SearchService)\r\n    elasticsearchService = module.get<ElasticsearchService>(ElasticsearchService)\r\n    courseRepository = module.get<Repository<Course>>(getRepositoryToken(Course))\r\n    searchAnalyticsRepository = module.get<Repository<SearchAnalytics>>(getRepositoryToken(SearchAnalytics))\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"onModuleInit\", () => {\r\n    it(\"should initialize Elasticsearch index\", async () => {\r\n      mockElasticsearchService.indices.exists.mockResolvedValue({ body: false })\r\n      mockElasticsearchService.indices.create.mockResolvedValue({ body: { acknowledged: true } })\r\n      mockElasticsearchService.indices.putMapping.mockResolvedValue({ body: { acknowledged: true } })\r\n\r\n      await service.onModuleInit()\r\n\r\n      expect(mockElasticsearchService.indices.exists).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n      })\r\n      expect(mockElasticsearchService.indices.create).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        body: expect.objectContaining({\r\n          settings: expect.any(Object),\r\n        }),\r\n      })\r\n    })\r\n\r\n    it(\"should not create index if it already exists\", async () => {\r\n      mockElasticsearchService.indices.exists.mockResolvedValue({ body: true })\r\n\r\n      await service.onModuleInit()\r\n\r\n      expect(mockElasticsearchService.indices.create).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe(\"indexCourse\", () => {\r\n    it(\"should index a course successfully\", async () => {\r\n      const course = mockCourses[0]\r\n      mockElasticsearchService.index.mockResolvedValue({\r\n        body: { _id: course.id, result: \"created\" },\r\n      })\r\n\r\n      const result = await service.indexCourse(course)\r\n\r\n      expect(mockElasticsearchService.index).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        id: course.id,\r\n        body: {\r\n          title: course.title,\r\n          description: course.description,\r\n          category: course.category,\r\n          level: course.level,\r\n          duration: course.duration,\r\n          price: course.price,\r\n          instructor: course.instructor,\r\n          tags: course.tags,\r\n          createdAt: course.createdAt,\r\n          updatedAt: course.updatedAt,\r\n        },\r\n      })\r\n      expect(result).toEqual({ _id: course.id, result: \"created\" })\r\n    })\r\n\r\n    it(\"should handle indexing errors\", async () => {\r\n      const course = mockCourses[0]\r\n      mockElasticsearchService.index.mockRejectedValue(new Error(\"Elasticsearch error\"))\r\n\r\n      await expect(service.indexCourse(course)).rejects.toThrow(InternalServerErrorException)\r\n    })\r\n  })\r\n\r\n  describe(\"search\", () => {\r\n    const searchDto: SearchDto = {\r\n      query: \"stellar blockchain\",\r\n      page: 1,\r\n      limit: 10,\r\n    }\r\n\r\n    it(\"should perform full-text search successfully\", async () => {\r\n      const mockSearchResponse = {\r\n        body: {\r\n          hits: {\r\n            total: { value: 2 },\r\n            hits: [\r\n              {\r\n                _id: \"1\",\r\n                _source: mockCourses[0],\r\n                _score: 1.5,\r\n              },\r\n              {\r\n                _id: \"2\",\r\n                _source: mockCourses[1],\r\n                _score: 1.2,\r\n              },\r\n            ],\r\n          },\r\n          aggregations: {\r\n            categories: {\r\n              buckets: [\r\n                { key: \"blockchain\", doc_count: 1 },\r\n                { key: \"development\", doc_count: 1 },\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      }\r\n\r\n      mockElasticsearchService.search.mockResolvedValue(mockSearchResponse)\r\n      mockSearchAnalyticsRepository.save.mockResolvedValue({})\r\n\r\n      const result = await service.search(searchDto, \"user123\")\r\n\r\n      expect(mockElasticsearchService.search).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        body: expect.objectContaining({\r\n          query: expect.objectContaining({\r\n            multi_match: expect.objectContaining({\r\n              query: \"stellar blockchain\",\r\n              fields: [\"title^3\", \"description^2\", \"instructor\", \"tags\"],\r\n            }),\r\n          }),\r\n          from: 0,\r\n          size: 10,\r\n        }),\r\n      })\r\n\r\n      expect(result).toEqual({\r\n        courses: mockCourses,\r\n        total: 2,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 1,\r\n        aggregations: {\r\n          categories: [\r\n            { key: \"blockchain\", doc_count: 1 },\r\n            { key: \"development\", doc_count: 1 },\r\n          ],\r\n        },\r\n      })\r\n\r\n      expect(mockSearchAnalyticsRepository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          query: \"stellar blockchain\",\r\n          userId: \"user123\",\r\n          resultsCount: 2,\r\n        }),\r\n      )\r\n    })\r\n\r\n    it(\"should handle empty search query\", async () => {\r\n      const emptySearchDto: SearchDto = {\r\n        query: \"\",\r\n        page: 1,\r\n        limit: 10,\r\n      }\r\n\r\n      await expect(service.search(emptySearchDto, \"user123\")).rejects.toThrow(BadRequestException)\r\n    })\r\n\r\n    it(\"should handle search errors\", async () => {\r\n      mockElasticsearchService.search.mockRejectedValue(new Error(\"Search failed\"))\r\n\r\n      await expect(service.search(searchDto, \"user123\")).rejects.toThrow(InternalServerErrorException)\r\n    })\r\n  })\r\n\r\n  describe(\"advancedSearch\", () => {\r\n    const advancedFilterDto: AdvancedFilterDto = {\r\n      query: \"stellar\",\r\n      categories: [\"blockchain\", \"development\"],\r\n      levels: [\"beginner\", \"advanced\"],\r\n      priceRange: { min: 50, max: 200 },\r\n      durationRange: { min: 60, max: 300 },\r\n      instructors: [\"John Doe\"],\r\n      tags: [\"stellar\"],\r\n      sortBy: \"relevance\",\r\n      sortOrder: \"desc\",\r\n      page: 1,\r\n      limit: 10,\r\n    }\r\n\r\n    it(\"should perform advanced search with filters\", async () => {\r\n      const mockSearchResponse = {\r\n        body: {\r\n          hits: {\r\n            total: { value: 1 },\r\n            hits: [\r\n              {\r\n                _id: \"1\",\r\n                _source: mockCourses[0],\r\n                _score: 1.5,\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      }\r\n\r\n      mockElasticsearchService.search.mockResolvedValue(mockSearchResponse)\r\n      mockSearchAnalyticsRepository.save.mockResolvedValue({})\r\n\r\n      const result = await service.advancedSearch(advancedFilterDto, \"user123\")\r\n\r\n      expect(mockElasticsearchService.search).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        body: expect.objectContaining({\r\n          query: expect.objectContaining({\r\n            bool: expect.objectContaining({\r\n              must: expect.arrayContaining([\r\n                expect.objectContaining({\r\n                  multi_match: expect.objectContaining({\r\n                    query: \"stellar\",\r\n                  }),\r\n                }),\r\n              ]),\r\n              filter: expect.arrayContaining([\r\n                expect.objectContaining({\r\n                  terms: { category: [\"blockchain\", \"development\"] },\r\n                }),\r\n                expect.objectContaining({\r\n                  terms: { level: [\"beginner\", \"advanced\"] },\r\n                }),\r\n                expect.objectContaining({\r\n                  range: { price: { gte: 50, lte: 200 } },\r\n                }),\r\n              ]),\r\n            }),\r\n          }),\r\n        }),\r\n      })\r\n\r\n      expect(result.courses).toHaveLength(1)\r\n      expect(result.total).toBe(1)\r\n    })\r\n\r\n    it(\"should handle sorting options\", async () => {\r\n      const sortDto = { ...advancedFilterDto, sortBy: \"price\", sortOrder: \"asc\" as const }\r\n\r\n      mockElasticsearchService.search.mockResolvedValue({\r\n        body: { hits: { total: { value: 0 }, hits: [] } },\r\n      })\r\n\r\n      await service.advancedSearch(sortDto, \"user123\")\r\n\r\n      expect(mockElasticsearchService.search).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          body: expect.objectContaining({\r\n            sort: [{ price: { order: \"asc\" } }],\r\n          }),\r\n        }),\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"getSuggestions\", () => {\r\n    const suggestionDto: SearchSuggestionDto = {\r\n      query: \"stel\",\r\n      limit: 5,\r\n    }\r\n\r\n    it(\"should return search suggestions\", async () => {\r\n      const mockSuggestResponse = {\r\n        body: {\r\n          suggest: {\r\n            title_suggest: [\r\n              {\r\n                options: [\r\n                  { text: \"stellar\", _score: 1.0 },\r\n                  { text: \"stellar blockchain\", _score: 0.8 },\r\n                ],\r\n              },\r\n            ],\r\n            description_suggest: [\r\n              {\r\n                options: [{ text: \"stellar network\", _score: 0.9 }],\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      }\r\n\r\n      mockElasticsearchService.search.mockResolvedValue(mockSuggestResponse)\r\n\r\n      const result = await service.getSuggestions(suggestionDto)\r\n\r\n      expect(mockElasticsearchService.search).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        body: {\r\n          suggest: {\r\n            title_suggest: {\r\n              prefix: \"stel\",\r\n              completion: {\r\n                field: \"title.suggest\",\r\n                size: 5,\r\n              },\r\n            },\r\n            description_suggest: {\r\n              prefix: \"stel\",\r\n              completion: {\r\n                field: \"description.suggest\",\r\n                size: 5,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n\r\n      expect(result).toEqual({\r\n        suggestions: [\r\n          { text: \"stellar\", score: 1.0, source: \"title\" },\r\n          { text: \"stellar blockchain\", score: 0.8, source: \"title\" },\r\n          { text: \"stellar network\", score: 0.9, source: \"description\" },\r\n        ],\r\n      })\r\n    })\r\n\r\n    it(\"should handle empty suggestions\", async () => {\r\n      mockElasticsearchService.search.mockResolvedValue({\r\n        body: {\r\n          suggest: {\r\n            title_suggest: [{ options: [] }],\r\n            description_suggest: [{ options: [] }],\r\n          },\r\n        },\r\n      })\r\n\r\n      const result = await service.getSuggestions(suggestionDto)\r\n\r\n      expect(result.suggestions).toHaveLength(0)\r\n    })\r\n  })\r\n\r\n  describe(\"getSearchAnalytics\", () => {\r\n    it(\"should return search analytics\", async () => {\r\n      const mockAnalytics = [\r\n        {\r\n          id: \"1\",\r\n          query: \"stellar\",\r\n          userId: \"user123\",\r\n          resultsCount: 5,\r\n          clickedResults: [\"1\", \"2\"],\r\n          searchedAt: new Date(),\r\n        },\r\n      ]\r\n\r\n      const mockQueryBuilder = {\r\n        where: jest.fn().mockReturnThis(),\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockReturnThis(),\r\n        getMany: jest.fn().mockResolvedValue(mockAnalytics),\r\n        select: jest.fn().mockReturnThis(),\r\n        addSelect: jest.fn().mockReturnThis(),\r\n        groupBy: jest.fn().mockReturnThis(),\r\n        getRawMany: jest.fn().mockResolvedValue([\r\n          { query: \"stellar\", count: \"10\" },\r\n          { query: \"blockchain\", count: \"8\" },\r\n        ]),\r\n      }\r\n\r\n      mockSearchAnalyticsRepository.createQueryBuilder.mockReturnValue(mockQueryBuilder)\r\n\r\n      const result = await service.getSearchAnalytics({\r\n        startDate: new Date(\"2024-01-01\"),\r\n        endDate: new Date(\"2024-01-31\"),\r\n        userId: \"user123\",\r\n      })\r\n\r\n      expect(result).toEqual({\r\n        recentSearches: mockAnalytics,\r\n        popularQueries: [\r\n          { query: \"stellar\", count: 10 },\r\n          { query: \"blockchain\", count: 8 },\r\n        ],\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"updateCourse\", () => {\r\n    it(\"should update course in Elasticsearch\", async () => {\r\n      const courseId = \"1\"\r\n      const updateData = { title: \"Updated Title\" }\r\n\r\n      mockElasticsearchService.update.mockResolvedValue({\r\n        body: { _id: courseId, result: \"updated\" },\r\n      })\r\n\r\n      const result = await service.updateCourse(courseId, updateData)\r\n\r\n      expect(mockElasticsearchService.update).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        id: courseId,\r\n        body: {\r\n          doc: updateData,\r\n        },\r\n      })\r\n\r\n      expect(result).toEqual({ _id: courseId, result: \"updated\" })\r\n    })\r\n  })\r\n\r\n  describe(\"deleteCourse\", () => {\r\n    it(\"should delete course from Elasticsearch\", async () => {\r\n      const courseId = \"1\"\r\n\r\n      mockElasticsearchService.delete.mockResolvedValue({\r\n        body: { _id: courseId, result: \"deleted\" },\r\n      })\r\n\r\n      const result = await service.deleteCourse(courseId)\r\n\r\n      expect(mockElasticsearchService.delete).toHaveBeenCalledWith({\r\n        index: \"courses\",\r\n        id: courseId,\r\n      })\r\n\r\n      expect(result).toEqual({ _id: courseId, result: \"deleted\" })\r\n    })\r\n  })\r\n\r\n  describe(\"bulkIndexCourses\", () => {\r\n    it(\"should bulk index multiple courses\", async () => {\r\n      mockElasticsearchService.bulk.mockResolvedValue({\r\n        body: {\r\n          errors: false,\r\n          items: [{ index: { _id: \"1\", result: \"created\" } }, { index: { _id: \"2\", result: \"created\" } }],\r\n        },\r\n      })\r\n\r\n      const result = await service.bulkIndexCourses(mockCourses)\r\n\r\n      expect(mockElasticsearchService.bulk).toHaveBeenCalledWith({\r\n        body: expect.arrayContaining([\r\n          { index: { _index: \"courses\", _id: \"1\" } },\r\n          expect.objectContaining({ title: mockCourses[0].title }),\r\n          { index: { _index: \"courses\", _id: \"2\" } },\r\n          expect.objectContaining({ title: mockCourses[1].title }),\r\n        ]),\r\n      })\r\n\r\n      expect(result.errors).toBe(false)\r\n      expect(result.items).toHaveLength(2)\r\n    })\r\n\r\n    it(\"should handle bulk indexing errors\", async () => {\r\n      mockElasticsearchService.bulk.mockResolvedValue({\r\n        body: {\r\n          errors: true,\r\n          items: [{ index: { _id: \"1\", error: { reason: \"Document already exists\" } } }],\r\n        },\r\n      })\r\n\r\n      const result = await service.bulkIndexCourses([mockCourses[0]])\r\n\r\n      expect(result.errors).toBe(true)\r\n      expect(result.items[0].index.error).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe(\"getPopularSearchTerms\", () => {\r\n    it(\"should return popular search terms\", async () => {\r\n      const mockQueryBuilder = {\r\n        select: jest.fn().mockReturnThis(),\r\n        addSelect: jest.fn().mockReturnThis(),\r\n        where: jest.fn().mockReturnThis(),\r\n        groupBy: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockReturnThis(),\r\n        getRawMany: jest.fn().mockResolvedValue([\r\n          { query: \"stellar\", searchCount: \"15\" },\r\n          { query: \"blockchain\", searchCount: \"12\" },\r\n          { query: \"smart contracts\", searchCount: \"8\" },\r\n        ]),\r\n      }\r\n\r\n      mockSearchAnalyticsRepository.createQueryBuilder.mockReturnValue(mockQueryBuilder)\r\n\r\n      const result = await service.getPopularSearchTerms(10)\r\n\r\n      expect(result).toEqual([\r\n        { query: \"stellar\", searchCount: 15 },\r\n        { query: \"blockchain\", searchCount: 12 },\r\n        { query: \"smart contracts\", searchCount: 8 },\r\n      ])\r\n\r\n      expect(mockQueryBuilder.limit).toHaveBeenCalledWith(10)\r\n    })\r\n  })\r\n\r\n  describe(\"trackSearchClick\", () => {\r\n    it(\"should track search result click\", async () => {\r\n      const searchId = \"search123\"\r\n      const courseId = \"course456\"\r\n\r\n      const mockSearchAnalytic = {\r\n        id: searchId,\r\n        clickedResults: [\"course123\"],\r\n        save: jest.fn(),\r\n      }\r\n\r\n      mockSearchAnalyticsRepository.findOne.mockResolvedValue(mockSearchAnalytic)\r\n\r\n      await service.trackSearchClick(searchId, courseId)\r\n\r\n      expect(mockSearchAnalyticsRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id: searchId },\r\n      })\r\n\r\n      expect(mockSearchAnalytic.clickedResults).toContain(courseId)\r\n      expect(mockSearchAnalytic.save).toHaveBeenCalled()\r\n    })\r\n\r\n    it(\"should handle non-existent search analytics\", async () => {\r\n      mockSearchAnalyticsRepository.findOne.mockResolvedValue(null)\r\n\r\n      await expect(service.trackSearchClick(\"nonexistent\", \"course123\")).rejects.toThrow(BadRequestException)\r\n    })\r\n  })\r\n})\r\n"],"version":3}