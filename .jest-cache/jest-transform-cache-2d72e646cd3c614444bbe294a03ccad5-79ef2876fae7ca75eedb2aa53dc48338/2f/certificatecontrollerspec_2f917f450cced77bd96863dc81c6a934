cdc34d02c787251bb37cc03e9a540ccd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const certificate_controller_1 = require("./certificate.controller");
const certificate_service_1 = require("./certificate.service");
describe('CertificatesController', () => {
    let controller;
    let service;
    const mockCertificate = {
        id: '1',
        certificateNumber: 'CERT123',
        issueDate: new Date(),
        pdfUrl: 'http://example.com/cert.pdf',
        user: Promise.resolve({ id: 'user1' }),
        course: Promise.resolve({ id: 'course1' }),
    };
    const mockService = {
        create: jest.fn().mockResolvedValue(mockCertificate),
        findAll: jest.fn().mockResolvedValue([mockCertificate]),
        findOne: jest.fn().mockResolvedValue(mockCertificate),
        update: jest.fn().mockResolvedValue(mockCertificate),
        remove: jest.fn().mockResolvedValue(undefined),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [certificate_controller_1.CertificatesController],
            providers: [
                {
                    provide: certificate_service_1.CertificatesService,
                    useValue: mockService,
                },
            ],
        }).compile();
        controller = module.get(certificate_controller_1.CertificatesController);
        service = module.get(certificate_service_1.CertificatesService);
    });
    it('should create a certificate', async () => {
        const dto = { certificateNumber: 'CERT123', issueDate: new Date(), userId: 'user1', courseId: 'course1' };
        const result = await controller.create(dto);
        expect(result).toEqual(mockCertificate);
        expect(service.create).toHaveBeenCalledWith(dto);
    });
    it('should return all certificates', async () => {
        const result = await controller.findAll();
        expect(result).toEqual([mockCertificate]);
        expect(service.findAll).toHaveBeenCalled();
    });
    it('should return a certificate by ID', async () => {
        const result = await controller.findOne('1');
        expect(result).toEqual(mockCertificate);
        expect(service.findOne).toHaveBeenCalledWith('1');
    });
    it('should update a certificate', async () => {
        const updateDto = { pdfUrl: 'updated.pdf' };
        const result = await controller.update('1', updateDto);
        expect(result).toEqual(mockCertificate);
        expect(service.update).toHaveBeenCalledWith('1', updateDto);
    });
    it('should delete a certificate', async () => {
        const result = await controller.remove('1');
        expect(result).toBeUndefined();
        expect(service.remove).toHaveBeenCalledWith('1');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjZXJ0aWZpY2F0ZVxcY2VydGlmaWNhdGUuY29udHJvbGxlci5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELHFFQUFrRTtBQUNsRSwrREFBNEQ7QUFHNUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLFVBQWtDLENBQUM7SUFDdkMsSUFBSSxPQUE0QixDQUFDO0lBRWpDLE1BQU0sZUFBZSxHQUFHO1FBQ3RCLEVBQUUsRUFBRSxHQUFHO1FBQ1AsaUJBQWlCLEVBQUUsU0FBUztRQUM1QixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDckIsTUFBTSxFQUFFLDZCQUE2QjtRQUNyQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUN0QyxNQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQztLQUM1QixDQUFDO0lBRWpCLE1BQU0sV0FBVyxHQUFHO1FBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDO1FBQ3BELE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztRQUNyRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztRQUNwRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztLQUMvQyxDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1B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ZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGNlcnRpZmljYXRlXFxjZXJ0aWZpY2F0ZS5jb250cm9sbGVyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XHJcbmltcG9ydCB7IENlcnRpZmljYXRlc0NvbnRyb2xsZXIgfSBmcm9tICcuL2NlcnRpZmljYXRlLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDZXJ0aWZpY2F0ZXNTZXJ2aWNlIH0gZnJvbSAnLi9jZXJ0aWZpY2F0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2VydGlmaWNhdGUgfSBmcm9tICcuL2VudGl0eS9jZXJ0aWZpY2F0ZS5lbnRpdHknO1xyXG5cclxuZGVzY3JpYmUoJ0NlcnRpZmljYXRlc0NvbnRyb2xsZXInLCAoKSA9PiB7XHJcbiAgbGV0IGNvbnRyb2xsZXI6IENlcnRpZmljYXRlc0NvbnRyb2xsZXI7XHJcbiAgbGV0IHNlcnZpY2U6IENlcnRpZmljYXRlc1NlcnZpY2U7XHJcblxyXG4gIGNvbnN0IG1vY2tDZXJ0aWZpY2F0ZSA9IHtcclxuICAgIGlkOiAnMScsXHJcbiAgICBjZXJ0aWZpY2F0ZU51bWJlcjogJ0NFUlQxMjMnLFxyXG4gICAgaXNzdWVEYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgcGRmVXJsOiAnaHR0cDovL2V4YW1wbGUuY29tL2NlcnQucGRmJyxcclxuICAgIHVzZXI6IFByb21pc2UucmVzb2x2ZSh7IGlkOiAndXNlcjEnIH0pLFxyXG4gICAgY291cnNlOiBQcm9taXNlLnJlc29sdmUoeyBpZDogJ2NvdXJzZTEnIH0pLFxyXG4gIH0gYXMgQ2VydGlmaWNhdGU7XHJcblxyXG4gIGNvbnN0IG1vY2tTZXJ2aWNlID0ge1xyXG4gICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NlcnRpZmljYXRlKSxcclxuICAgIGZpbmRBbGw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja0NlcnRpZmljYXRlXSksXHJcbiAgICBmaW5kT25lOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NlcnRpZmljYXRlKSxcclxuICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tDZXJ0aWZpY2F0ZSksXHJcbiAgICByZW1vdmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxyXG4gIH07XHJcblxyXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgY29udHJvbGxlcnM6IFtDZXJ0aWZpY2F0ZXNDb250cm9sbGVyXSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQ2VydGlmaWNhdGVzU2VydmljZSxcclxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrU2VydmljZSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZSgpO1xyXG5cclxuICAgIGNvbnRyb2xsZXIgPSBtb2R1bGUuZ2V0PENlcnRpZmljYXRlc0NvbnRyb2xsZXI+KENlcnRpZmljYXRlc0NvbnRyb2xsZXIpO1xyXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8Q2VydGlmaWNhdGVzU2VydmljZT4oQ2VydGlmaWNhdGVzU2VydmljZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY3JlYXRlIGEgY2VydGlmaWNhdGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBkdG8gPSB7IGNlcnRpZmljYXRlTnVtYmVyOiAnQ0VSVDEyMycsIGlzc3VlRGF0ZTogbmV3IERhdGUoKSwgdXNlcklkOiAndXNlcjEnLCBjb3Vyc2VJZDogJ2NvdXJzZTEnIH07XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmNyZWF0ZShkdG8gYXMgYW55KTtcclxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0NlcnRpZmljYXRlKTtcclxuICAgIGV4cGVjdChzZXJ2aWNlLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZHRvKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gYWxsIGNlcnRpZmljYXRlcycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZmluZEFsbCgpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbbW9ja0NlcnRpZmljYXRlXSk7XHJcbiAgICBleHBlY3Qoc2VydmljZS5maW5kQWxsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgY2VydGlmaWNhdGUgYnkgSUQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmZpbmRPbmUoJzEnKTtcclxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0NlcnRpZmljYXRlKTtcclxuICAgIGV4cGVjdChzZXJ2aWNlLmZpbmRPbmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcxJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgdXBkYXRlIGEgY2VydGlmaWNhdGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB1cGRhdGVEdG8gPSB7IHBkZlVybDogJ3VwZGF0ZWQucGRmJyB9O1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci51cGRhdGUoJzEnLCB1cGRhdGVEdG8pO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ2VydGlmaWNhdGUpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UudXBkYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMScsIHVwZGF0ZUR0byk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZGVsZXRlIGEgY2VydGlmaWNhdGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLnJlbW92ZSgnMScpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMScpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9