{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { CertificatesController } from './certificate.controller';\r\nimport { CertificatesService } from './certificate.service';\r\nimport { Certificate } from './entity/certificate.entity';\r\n\r\ndescribe('CertificatesController', () => {\r\n  let controller: CertificatesController;\r\n  let service: CertificatesService;\r\n\r\n  const mockCertificate = {\r\n    id: '1',\r\n    certificateNumber: 'CERT123',\r\n    issueDate: new Date(),\r\n    pdfUrl: 'http://example.com/cert.pdf',\r\n    user: Promise.resolve({ id: 'user1' }),\r\n    course: Promise.resolve({ id: 'course1' }),\r\n  } as Certificate;\r\n\r\n  const mockService = {\r\n    create: jest.fn().mockResolvedValue(mockCertificate),\r\n    findAll: jest.fn().mockResolvedValue([mockCertificate]),\r\n    findOne: jest.fn().mockResolvedValue(mockCertificate),\r\n    update: jest.fn().mockResolvedValue(mockCertificate),\r\n    remove: jest.fn().mockResolvedValue(undefined),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [CertificatesController],\r\n      providers: [\r\n        {\r\n          provide: CertificatesService,\r\n          useValue: mockService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<CertificatesController>(CertificatesController);\r\n    service = module.get<CertificatesService>(CertificatesService);\r\n  });\r\n\r\n  it('should create a certificate', async () => {\r\n    const dto = { certificateNumber: 'CERT123', issueDate: new Date(), userId: 'user1', courseId: 'course1' };\r\n    const result = await controller.create(dto as any);\r\n    expect(result).toEqual(mockCertificate);\r\n    expect(service.create).toHaveBeenCalledWith(dto);\r\n  });\r\n\r\n  it('should return all certificates', async () => {\r\n    const result = await controller.findAll();\r\n    expect(result).toEqual([mockCertificate]);\r\n    expect(service.findAll).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should return a certificate by ID', async () => {\r\n    const result = await controller.findOne('1');\r\n    expect(result).toEqual(mockCertificate);\r\n    expect(service.findOne).toHaveBeenCalledWith('1');\r\n  });\r\n\r\n  it('should update a certificate', async () => {\r\n    const updateDto = { pdfUrl: 'updated.pdf' };\r\n    const result = await controller.update('1', updateDto);\r\n    expect(result).toEqual(mockCertificate);\r\n    expect(service.update).toHaveBeenCalledWith('1', updateDto);\r\n  });\r\n\r\n  it('should delete a certificate', async () => {\r\n    const result = await controller.remove('1');\r\n    expect(result).toBeUndefined();\r\n    expect(service.remove).toHaveBeenCalledWith('1');\r\n  });\r\n});\r\n"],"version":3}