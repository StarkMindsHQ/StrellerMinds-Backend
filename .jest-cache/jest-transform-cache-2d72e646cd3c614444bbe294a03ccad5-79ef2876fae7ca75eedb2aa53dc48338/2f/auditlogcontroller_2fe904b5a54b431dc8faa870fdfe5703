211d8ac7e840a0c9236ade76ddf110d9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditLogController = void 0;
/**
 * AuditLogController handles endpoints for retrieving audit logs.
 */
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../auth/guards/roles.guard");
const roles_decorator_1 = require("../../auth/decorators/roles.decorator");
const userRole_enum_1 = require("../../users/enums/userRole.enum");
const audit_log_service_1 = require("../services/audit.log.service");
const audit_log_entity_1 = require("../entities/audit.log.entity");
let AuditLogController = class AuditLogController {
    constructor(auditLogService) {
        this.auditLogService = auditLogService;
    }
    async getUserDeletionLogs() {
        return this.auditLogService.getUserDeletionLogs();
    }
    async getEntityLogs(entityType, entityId) {
        return this.auditLogService.getLogsForEntity(entityType, entityId);
    }
};
exports.AuditLogController = AuditLogController;
__decorate([
    (0, common_1.Get)('user-deletions'),
    (0, swagger_1.ApiOperation)({ summary: 'Get all user deletion audit logs' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns all user deletion audit logs',
        type: [audit_log_entity_1.AuditLog],
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], AuditLogController.prototype, "getUserDeletionLogs", null);
__decorate([
    (0, common_1.Get)('entity/:type/:id'),
    (0, swagger_1.ApiOperation)({ summary: 'Get audit logs for a specific entity' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns audit logs for the specified entity',
        type: [audit_log_entity_1.AuditLog],
    }),
    __param(0, (0, common_1.Param)('type')),
    __param(1, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], AuditLogController.prototype, "getEntityLogs", null);
exports.AuditLogController = AuditLogController = __decorate([
    (0, swagger_1.ApiTags)('audit'),
    (0, common_1.Controller)('audit'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(userRole_enum_1.UserRole.ADMIN) // Only admins can access audit logs
    ,
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof audit_log_service_1.AuditLogService !== "undefined" && audit_log_service_1.AuditLogService) === "function" ? _a : Object])
], AuditLogController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhdWRpdFxcY29udHJvbGxlcnNcXGF1ZGl0LmxvZy5jb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7R0FFRztBQUNILDJDQU93QjtBQUN4Qiw2Q0FNeUI7QUFDekIscUVBQWdFO0FBQ2hFLCtEQUEyRDtBQUMzRCwyRUFBOEQ7QUFDOUQsbUVBQTJEO0FBQzNELHFFQUFnRTtBQUNoRSxtRUFBd0Q7QUFPakQsSUFBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBa0I7SUFDN0IsWUFBNkIsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQVMzRCxBQUFOLEtBQUssQ0FBQyxtQkFBbUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDcEQsQ0FBQztJQVNLLEFBQU4sS0FBSyxDQUFDLGFBQWEsQ0FDRixVQUFrQixFQUNMLFFBQWdCO1FBRTVDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQztDQUNGLENBQUE7QUEzQlksZ0RBQWtCO0FBVXZCO0lBUEwsSUFBQSxZQUFHLEVBQUMsZ0JBQWdCLENBQUM7SUFDckIsSUFBQSxzQkFBWSxFQUFDLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7SUFDN0QsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsTUFBTSxFQUFFLEdBQUc7UUFDWCxXQUFXLEVBQUUsc0NBQXNDO1FBQ25ELElBQUksRUFBRSxDQUFDLDJCQUFRLENBQUM7S0FDakIsQ0FBQzs7O3dEQUMyQixPQUFPLG9CQUFQLE9BQU87NkRBRW5DO0FBU0s7SUFQTCxJQUFBLFlBQUcsRUFBQyxrQkFBa0IsQ0FBQztJQUN2QixJQUFBLHNCQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsQ0FBQztJQUNqRSxJQUFBLHFCQUFXLEVBQUM7UUFDWCxNQUFNLEVBQUUsR0FBRztRQUNYLFdBQVcsRUFBRSw2Q0FBNkM7UUFDMUQsSUFBSSxFQUFFLENBQUMsMkJBQVEsQ0FBQztLQUNqQixDQUFDO0lBRUMsV0FBQSxJQUFBLGNBQUssRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUNiLFdBQUEsSUFBQSxjQUFLLEVBQUMsSUFBSSxFQUFFLHNCQUFhLENBQUMsQ0FBQTs7O3dEQUMxQixPQUFPLG9CQUFQLE9BQU87dURBRVQ7NkJBMUJVLGtCQUFrQjtJQUw5QixJQUFBLGlCQUFPLEVBQUMsT0FBTyxDQUFDO0lBQ2hCLElBQUEsbUJBQVUsRUFBQyxPQUFPLENBQUM7SUFDbkIsSUFBQSxrQkFBUyxFQUFDLDZCQUFZLEVBQUUsd0JBQVUsQ0FBQztJQUNuQyxJQUFBLHVCQUFLLEVBQUMsd0JBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxvQ0FBb0M7O0lBQzFELElBQUEsdUJBQWEsR0FBRTt5REFFZ0MsbUNBQWUsb0JBQWYsbUNBQWU7R0FEbEQsa0JBQWtCLENBMkI5QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGF1ZGl0XFxjb250cm9sbGVyc1xcYXVkaXQubG9nLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEF1ZGl0TG9nQ29udHJvbGxlciBoYW5kbGVzIGVuZHBvaW50cyBmb3IgcmV0cmlldmluZyBhdWRpdCBsb2dzLlxyXG4gKi9cclxuaW1wb3J0IHtcclxuICBDb250cm9sbGVyLFxyXG4gIEdldCxcclxuICBQYXJhbSxcclxuICBRdWVyeSxcclxuICBVc2VHdWFyZHMsXHJcbiAgUGFyc2VVVUlEUGlwZSxcclxufSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgQXBpVGFncyxcclxuICBBcGlPcGVyYXRpb24sXHJcbiAgQXBpUmVzcG9uc2UsXHJcbiAgQXBpQmVhcmVyQXV0aCxcclxuICBBcGlRdWVyeSxcclxufSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xyXG5pbXBvcnQgeyBKd3RBdXRoR3VhcmQgfSBmcm9tICcuLi8uLi9hdXRoL2d1YXJkcy9qd3QtYXV0aC5ndWFyZCc7XHJcbmltcG9ydCB7IFJvbGVzR3VhcmQgfSBmcm9tICcuLi8uLi9hdXRoL2d1YXJkcy9yb2xlcy5ndWFyZCc7XHJcbmltcG9ydCB7IFJvbGVzIH0gZnJvbSAnLi4vLi4vYXV0aC9kZWNvcmF0b3JzL3JvbGVzLmRlY29yYXRvcic7XHJcbmltcG9ydCB7IFVzZXJSb2xlIH0gZnJvbSAnLi4vLi4vdXNlcnMvZW51bXMvdXNlclJvbGUuZW51bSc7XHJcbmltcG9ydCB7IEF1ZGl0TG9nU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2F1ZGl0LmxvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXVkaXRMb2cgfSBmcm9tICcuLi9lbnRpdGllcy9hdWRpdC5sb2cuZW50aXR5JztcclxuXHJcbkBBcGlUYWdzKCdhdWRpdCcpXHJcbkBDb250cm9sbGVyKCdhdWRpdCcpXHJcbkBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkLCBSb2xlc0d1YXJkKVxyXG5AUm9sZXMoVXNlclJvbGUuQURNSU4pIC8vIE9ubHkgYWRtaW5zIGNhbiBhY2Nlc3MgYXVkaXQgbG9nc1xyXG5AQXBpQmVhcmVyQXV0aCgpXHJcbmV4cG9ydCBjbGFzcyBBdWRpdExvZ0NvbnRyb2xsZXIge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXVkaXRMb2dTZXJ2aWNlOiBBdWRpdExvZ1NlcnZpY2UpIHt9XHJcblxyXG4gIEBHZXQoJ3VzZXItZGVsZXRpb25zJylcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCBhbGwgdXNlciBkZWxldGlvbiBhdWRpdCBsb2dzJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7XHJcbiAgICBzdGF0dXM6IDIwMCxcclxuICAgIGRlc2NyaXB0aW9uOiAnUmV0dXJucyBhbGwgdXNlciBkZWxldGlvbiBhdWRpdCBsb2dzJyxcclxuICAgIHR5cGU6IFtBdWRpdExvZ10sXHJcbiAgfSlcclxuICBhc3luYyBnZXRVc2VyRGVsZXRpb25Mb2dzKCk6IFByb21pc2U8QXVkaXRMb2dbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXVkaXRMb2dTZXJ2aWNlLmdldFVzZXJEZWxldGlvbkxvZ3MoKTtcclxuICB9XHJcblxyXG4gIEBHZXQoJ2VudGl0eS86dHlwZS86aWQnKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnR2V0IGF1ZGl0IGxvZ3MgZm9yIGEgc3BlY2lmaWMgZW50aXR5JyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7XHJcbiAgICBzdGF0dXM6IDIwMCxcclxuICAgIGRlc2NyaXB0aW9uOiAnUmV0dXJucyBhdWRpdCBsb2dzIGZvciB0aGUgc3BlY2lmaWVkIGVudGl0eScsXHJcbiAgICB0eXBlOiBbQXVkaXRMb2ddLFxyXG4gIH0pXHJcbiAgYXN5bmMgZ2V0RW50aXR5TG9ncyhcclxuICAgIEBQYXJhbSgndHlwZScpIGVudGl0eVR5cGU6IHN0cmluZyxcclxuICAgIEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBlbnRpdHlJZDogc3RyaW5nLFxyXG4gICk6IFByb21pc2U8QXVkaXRMb2dbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXVkaXRMb2dTZXJ2aWNlLmdldExvZ3NGb3JFbnRpdHkoZW50aXR5VHlwZSwgZW50aXR5SWQpO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=