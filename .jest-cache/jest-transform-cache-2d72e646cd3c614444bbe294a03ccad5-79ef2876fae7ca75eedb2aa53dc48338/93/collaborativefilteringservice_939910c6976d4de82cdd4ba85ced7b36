bb94149a851d76a29c2b68ba48e018cb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var CollaborativeFilteringService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollaborativeFilteringService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_interaction_entity_1 = require("../entities/user-interaction.entity");
const user_entity_1 = require("../../users/entities/user.entity");
const course_entity_1 = require("../../courses/entities/course.entity");
const recommendation_entity_1 = require("../entities/recommendation.entity");
let CollaborativeFilteringService = CollaborativeFilteringService_1 = class CollaborativeFilteringService {
    constructor(interactionRepository, userRepository, courseRepository) {
        this.interactionRepository = interactionRepository;
        this.userRepository = userRepository;
        this.courseRepository = courseRepository;
        this.logger = new common_1.Logger(CollaborativeFilteringService_1.name);
        this.userSimilarityCache = new Map();
        this.itemSimilarityCache = new Map();
        this.cacheExpiry = 24 * 60 * 60 * 1000; // 24 hours
    }
    /**
     * Generate recommendations using collaborative filtering
     */
    async generateRecommendations(context, options) {
        try {
            this.logger.log(`Generating collaborative filtering recommendations for user ${context.userId}`);
            // Get user-based collaborative filtering recommendations
            const userBasedRecs = await this.getUserBasedRecommendations(context, Math.ceil(options.limit * 0.6));
            // Get item-based collaborative filtering recommendations
            const itemBasedRecs = await this.getItemBasedRecommendations(context, Math.ceil(options.limit * 0.4));
            // Combine and rank recommendations
            const combinedRecs = [...userBasedRecs, ...itemBasedRecs];
            const rankedRecs = this.rankCollaborativeRecommendations(combinedRecs);
            // Filter by confidence and limit
            const filteredRecs = rankedRecs
                .filter(rec => rec.score >= options.minConfidence)
                .slice(0, options.limit);
            // Convert to recommendation format
            return filteredRecs.map(rec => this.createRecommendation(rec, context));
        }
        catch (error) {
            this.logger.error('Error generating collaborative filtering recommendations:', error);
            return [];
        }
    }
    /**
     * Find similar users based on interaction patterns
     */
    async findSimilarUsers(userId, limit = 20) {
        // Check cache first
        const cacheKey = `user_${userId}`;
        const cached = this.userSimilarityCache.get(cacheKey);
        if (cached && this.isCacheValid(cacheKey)) {
            return cached.slice(0, limit);
        }
        try {
            // Get user's interactions
            const userInteractions = await this.getUserInteractions(userId);
            if (userInteractions.length === 0) {
                return [];
            }
            // Get all other users who have interacted with similar content
            const courseIds = userInteractions.map(i => i.courseId).filter(Boolean);
            const otherUsers = await this.interactionRepository
                .createQueryBuilder('interaction')
                .select('DISTINCT interaction.userId')
                .where('interaction.courseId IN (:...courseIds)', { courseIds })
                .andWhere('interaction.userId != :userId', { userId })
                .getRawMany();
            // Calculate similarity with each user
            const similarities = [];
            for (const { userId: otherUserId } of otherUsers) {
                const otherInteractions = await this.getUserInteractions(otherUserId);
                const similarity = this.calculateUserSimilarity(userInteractions, otherInteractions);
                if (similarity.similarity > 0.1) { // Only include users with meaningful similarity
                    similarities.push({
                        userId: otherUserId,
                        similarity: similarity.similarity,
                        commonInteractions: similarity.commonInteractions,
                    });
                }
            }
            // Sort by similarity and cache
            similarities.sort((a, b) => b.similarity - a.similarity);
            this.userSimilarityCache.set(cacheKey, similarities);
            return similarities.slice(0, limit);
        }
        catch (error) {
            this.logger.error(`Error finding similar users for ${userId}:`, error);
            return [];
        }
    }
    /**
     * Find similar items (courses) based on user interaction patterns
     */
    async findSimilarItems(courseId, limit = 20) {
        // Check cache first
        const cacheKey = `item_${courseId}`;
        const cached = this.itemSimilarityCache.get(cacheKey);
        if (cached && this.isCacheValid(cacheKey)) {
            return cached.slice(0, limit);
        }
        try {
            // Get users who interacted with this course
            const courseUsers = await this.interactionRepository.find({
                where: { courseId },
                select: ['userId'],
            });
            if (courseUsers.length === 0) {
                return [];
            }
            const userIds = courseUsers.map(u => u.userId);
            // Get other courses these users interacted with
            const otherCourses = await this.interactionRepository
                .createQueryBuilder('interaction')
                .select('DISTINCT interaction.courseId')
                .where('interaction.userId IN (:...userIds)', { userIds })
                .andWhere('interaction.courseId != :courseId', { courseId })
                .getRawMany();
            // Calculate similarity with each course
            const similarities = [];
            for (const { courseId: otherCourseId } of otherCourses) {
                const otherCourseUsers = await this.interactionRepository.find({
                    where: { courseId: otherCourseId },
                    select: ['userId'],
                });
                const similarity = this.calculateItemSimilarity(userIds, otherCourseUsers.map(u => u.userId));
                if (similarity.similarity > 0.1) {
                    similarities.push({
                        courseId: otherCourseId,
                        similarity: similarity.similarity,
                        commonUsers: similarity.commonUsers,
                    });
                }
            }
            // Sort by similarity and cache
            similarities.sort((a, b) => b.similarity - a.similarity);
            this.itemSimilarityCache.set(cacheKey, similarities);
            return similarities.slice(0, limit);
        }
        catch (error) {
            this.logger.error(`Error finding similar items for ${courseId}:`, error);
            return [];
        }
    }
    /**
     * Get user-based collaborative filtering recommendations
     */
    async getUserBasedRecommendations(context, limit) {
        // Find similar users
        const similarUsers = await this.findSimilarUsers(context.userId, 50);
        if (similarUsers.length === 0) {
            return [];
        }
        // Get courses that similar users liked but current user hasn't interacted with
        const userCourseIds = new Set(context.recentInteractions?.map(i => i.courseId).filter(Boolean) || []);
        const recommendations = new Map();
        for (const similarUser of similarUsers.slice(0, 20)) { // Top 20 similar users
            const similarUserInteractions = await this.getUserInteractions(similarUser.userId);
            // Find highly rated interactions from similar users
            const positiveInteractions = similarUserInteractions.filter(interaction => this.isPositiveInteraction(interaction) &&
                !userCourseIds.has(interaction.courseId));
            for (const interaction of positiveInteractions) {
                if (!interaction.courseId)
                    continue;
                const existing = recommendations.get(interaction.courseId) || {
                    score: 0,
                    count: 0,
                    similarUsers: [],
                };
                // Weight by user similarity and interaction strength
                const interactionWeight = this.getInteractionWeight(interaction);
                const weightedScore = similarUser.similarity * interactionWeight;
                existing.score += weightedScore;
                existing.count += 1;
                existing.similarUsers.push(similarUser.userId);
                recommendations.set(interaction.courseId, existing);
            }
        }
        // Convert to recommendation format and sort
        const result = [];
        for (const [courseId, data] of recommendations.entries()) {
            const normalizedScore = data.score / Math.max(data.count, 1);
            result.push({
                courseId,
                score: normalizedScore,
                reason: `Recommended by ${data.count} similar learners`,
                similarUsers: data.similarUsers.slice(0, 5),
            });
        }
        return result
            .sort((a, b) => b.score - a.score)
            .slice(0, limit);
    }
    /**
     * Get item-based collaborative filtering recommendations
     */
    async getItemBasedRecommendations(context, limit) {
        // Get courses user has positively interacted with
        const userInteractions = context.recentInteractions || [];
        const positiveCourses = userInteractions
            .filter(i => this.isPositiveInteraction(i) && i.courseId)
            .map(i => i.courseId)
            .slice(0, 10); // Consider top 10 courses
        if (positiveCourses.length === 0) {
            return [];
        }
        const recommendations = new Map();
        // For each course user liked, find similar courses
        for (const courseId of positiveCourses) {
            const similarItems = await this.findSimilarItems(courseId, 20);
            for (const similarItem of similarItems) {
                // Skip if user already interacted with this course
                if (positiveCourses.includes(similarItem.courseId))
                    continue;
                const existing = recommendations.get(similarItem.courseId) || {
                    score: 0,
                    count: 0,
                    similarItems: [],
                };
                existing.score += similarItem.similarity;
                existing.count += 1;
                existing.similarItems.push(courseId);
                recommendations.set(similarItem.courseId, existing);
            }
        }
        // Convert to recommendation format and sort
        const result = [];
        for (const [courseId, data] of recommendations.entries()) {
            const normalizedScore = data.score / Math.max(data.count, 1);
            result.push({
                courseId,
                score: normalizedScore,
                reason: `Similar to ${data.count} courses you've engaged with`,
                similarItems: data.similarItems.slice(0, 3),
            });
        }
        return result
            .sort((a, b) => b.score - a.score)
            .slice(0, limit);
    }
    /**
     * Get user interactions with weighted values
     */
    async getUserInteractions(userId) {
        return await this.interactionRepository.find({
            where: { userId },
            order: { createdAt: 'DESC' },
            take: 500, // Limit for performance
            relations: ['course'],
        });
    }
    /**
     * Calculate similarity between two users based on their interactions
     */
    calculateUserSimilarity(user1Interactions, user2Interactions) {
        // Create maps of course interactions for each user
        const user1Courses = new Map();
        const user2Courses = new Map();
        // Build weighted interaction maps
        user1Interactions.forEach(interaction => {
            if (interaction.courseId) {
                const weight = this.getInteractionWeight(interaction);
                user1Courses.set(interaction.courseId, (user1Courses.get(interaction.courseId) || 0) + weight);
            }
        });
        user2Interactions.forEach(interaction => {
            if (interaction.courseId) {
                const weight = this.getInteractionWeight(interaction);
                user2Courses.set(interaction.courseId, (user2Courses.get(interaction.courseId) || 0) + weight);
            }
        });
        // Find common courses
        const commonCourses = new Set([...user1Courses.keys()].filter(courseId => user2Courses.has(courseId)));
        if (commonCourses.size === 0) {
            return { similarity: 0, commonInteractions: 0 };
        }
        // Calculate cosine similarity
        let dotProduct = 0;
        let norm1 = 0;
        let norm2 = 0;
        // Calculate for all courses (not just common ones)
        const allCourses = new Set([...user1Courses.keys(), ...user2Courses.keys()]);
        for (const courseId of allCourses) {
            const rating1 = user1Courses.get(courseId) || 0;
            const rating2 = user2Courses.get(courseId) || 0;
            dotProduct += rating1 * rating2;
            norm1 += rating1 * rating1;
            norm2 += rating2 * rating2;
        }
        const similarity = (norm1 > 0 && norm2 > 0)
            ? dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2))
            : 0;
        return {
            similarity: Math.max(0, Math.min(1, similarity)),
            commonInteractions: commonCourses.size,
        };
    }
    /**
     * Calculate similarity between two items based on user interactions
     */
    calculateItemSimilarity(item1Users, item2Users) {
        const users1Set = new Set(item1Users);
        const users2Set = new Set(item2Users);
        // Calculate Jaccard similarity
        const intersection = new Set([...users1Set].filter(userId => users2Set.has(userId)));
        const union = new Set([...users1Set, ...users2Set]);
        const similarity = union.size > 0 ? intersection.size / union.size : 0;
        return {
            similarity,
            commonUsers: intersection.size,
        };
    }
    /**
     * Get weight for different interaction types
     */
    getInteractionWeight(interaction) {
        const weights = {
            [user_interaction_entity_1.InteractionType.VIEW]: 0.1,
            [user_interaction_entity_1.InteractionType.CLICK]: 0.2,
            [user_interaction_entity_1.InteractionType.ENROLL]: 0.8,
            [user_interaction_entity_1.InteractionType.START]: 0.6,
            [user_interaction_entity_1.InteractionType.PROGRESS]: 0.7,
            [user_interaction_entity_1.InteractionType.COMPLETE]: 1.0,
            [user_interaction_entity_1.InteractionType.RATE]: 0.9,
            [user_interaction_entity_1.InteractionType.BOOKMARK]: 0.5,
            [user_interaction_entity_1.InteractionType.SHARE]: 0.4,
            [user_interaction_entity_1.InteractionType.DOWNLOAD]: 0.3,
        };
        let baseWeight = weights[interaction.interactionType] || 0.1;
        // Apply additional weighting based on interaction metadata
        if (interaction.weightedValue) {
            baseWeight *= interaction.weightedValue;
        }
        return Math.max(0, Math.min(1, baseWeight));
    }
    /**
     * Check if interaction is positive (indicates user interest/satisfaction)
     */
    isPositiveInteraction(interaction) {
        const positiveTypes = [
            user_interaction_entity_1.InteractionType.ENROLL,
            user_interaction_entity_1.InteractionType.COMPLETE,
            user_interaction_entity_1.InteractionType.RATE,
            user_interaction_entity_1.InteractionType.BOOKMARK,
            user_interaction_entity_1.InteractionType.SHARE,
            user_interaction_entity_1.InteractionType.PROGRESS,
        ];
        return positiveTypes.includes(interaction.interactionType) ||
            (interaction.weightedValue && interaction.weightedValue > 0.5);
    }
    /**
     * Rank collaborative recommendations by combining scores
     */
    rankCollaborativeRecommendations(recommendations) {
        // Remove duplicates and combine scores
        const combined = new Map();
        recommendations.forEach(rec => {
            const existing = combined.get(rec.courseId);
            if (existing) {
                // Combine scores using weighted average
                existing.score = (existing.score + rec.score) / 2;
                existing.reason = `${existing.reason} and ${rec.reason}`;
                if (rec.similarUsers) {
                    existing.similarUsers = [...(existing.similarUsers || []), ...rec.similarUsers];
                }
                if (rec.similarItems) {
                    existing.similarItems = [...(existing.similarItems || []), ...rec.similarItems];
                }
            }
            else {
                combined.set(rec.courseId, { ...rec });
            }
        });
        return Array.from(combined.values()).sort((a, b) => b.score - a.score);
    }
    /**
     * Create recommendation from collaborative recommendation
     */
    createRecommendation(colabRec, context) {
        const hasUserBased = colabRec.similarUsers && colabRec.similarUsers.length > 0;
        const hasItemBased = colabRec.similarItems && colabRec.similarItems.length > 0;
        let reason;
        if (hasUserBased && hasItemBased) {
            reason = recommendation_entity_1.RecommendationReason.COLLABORATIVE_FILTERING;
        }
        else if (hasUserBased) {
            reason = recommendation_entity_1.RecommendationReason.SIMILAR_USERS;
        }
        else {
            reason = recommendation_entity_1.RecommendationReason.SIMILAR_CONTENT;
        }
        return {
            userId: context.userId,
            courseId: colabRec.courseId,
            recommendationType: recommendation_entity_1.RecommendationType.COLLABORATIVE,
            reason,
            confidenceScore: colabRec.score,
            relevanceScore: colabRec.score * 0.9,
            priority: this.calculatePriority(colabRec.score),
            explanation: colabRec.reason,
            metadata: {
                algorithmUsed: 'collaborative_filtering',
                collaborativeScore: colabRec.score,
                similarUsers: colabRec.similarUsers?.slice(0, 3) || [],
                similarItems: colabRec.similarItems?.slice(0, 3) || [],
                recommendationType: hasUserBased ? 'user_based' : 'item_based',
            },
        };
    }
    /**
     * Calculate priority based on collaborative score
     */
    calculatePriority(score) {
        if (score >= 0.8)
            return 5;
        if (score >= 0.6)
            return 4;
        if (score >= 0.4)
            return 3;
        if (score >= 0.2)
            return 2;
        return 1;
    }
    /**
     * Check if cache is still valid
     */
    isCacheValid(cacheKey) {
        // Simple time-based cache validation
        // In a real implementation, you might want more sophisticated cache invalidation
        return true; // Placeholder - implement based on your caching strategy
    }
    /**
     * Clear similarity caches (useful for testing or manual cache refresh)
     */
    clearCache() {
        this.userSimilarityCache.clear();
        this.itemSimilarityCache.clear();
        this.logger.log('Collaborative filtering caches cleared');
    }
};
exports.CollaborativeFilteringService = CollaborativeFilteringService;
exports.CollaborativeFilteringService = CollaborativeFilteringService = CollaborativeFilteringService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_interaction_entity_1.UserInteraction)),
    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __param(2, (0, typeorm_1.InjectRepository)(course_entity_1.Course)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], CollaborativeFilteringService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,