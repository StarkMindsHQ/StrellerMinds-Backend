16c6281da829d0e854f704a8c77061b5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLApiModule = void 0;
const common_1 = require("@nestjs/common");
const graphql_1 = require("@nestjs/graphql");
const apollo_1 = require("@nestjs/apollo");
const path_1 = require("path");
const user_module_1 = require("./modules/user/user.module");
const post_module_1 = require("./modules/post/post.module");
const analytics_module_1 = require("./modules/analytics/analytics.module");
const auth_module_1 = require("./modules/auth/auth.module");
const complexity_plugin_1 = require("./plugins/complexity.plugin");
const logging_plugin_1 = require("./plugins/logging.plugin");
const cache_plugin_1 = require("./plugins/cache.plugin");
let GraphQLApiModule = class GraphQLApiModule {
};
exports.GraphQLApiModule = GraphQLApiModule;
exports.GraphQLApiModule = GraphQLApiModule = __decorate([
    (0, common_1.Module)({
        imports: [
            graphql_1.GraphQLModule.forRoot({
                driver: apollo_1.ApolloDriver,
                autoSchemaFile: (0, path_1.join)(process.cwd(), "src/graphql/schema.gql"),
                sortSchema: true,
                playground: process.env.NODE_ENV !== "production",
                introspection: true,
                subscriptions: {
                    "graphql-ws": true,
                    "subscriptions-transport-ws": true,
                },
                context: ({ req, res, connection, extra }) => {
                    if (connection) {
                        // WebSocket connection for subscriptions
                        return {
                            req: connection.context.req,
                            res: connection.context.res,
                            user: connection.context.user,
                            dataSources: {},
                        };
                    }
                    // HTTP request
                    return {
                        req,
                        res,
                        user: req.user,
                        dataSources: {},
                    };
                },
                formatError: (error) => {
                    console.error("GraphQL Error:", error);
                    return {
                        message: error.message,
                        code: error.extensions?.code,
                        path: error.path,
                        timestamp: new Date().toISOString(),
                    };
                },
                plugins: [new complexity_plugin_1.GraphQLComplexityPlugin(), new logging_plugin_1.GraphQLLoggingPlugin(), new cache_plugin_1.GraphQLCachePlugin()],
                cors: {
                    origin: process.env.CORS_ORIGIN || "*",
                    credentials: true,
                },
            }),
            user_module_1.UserModule,
            post_module_1.PostModule,
            analytics_module_1.AnalyticsModule,
            auth_module_1.AuthModule,
        ],
    })
], GraphQLApiModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFwaHFsXFxncmFwaHFsLm1vZHVsZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMsNkNBQStDO0FBQy9DLDJDQUFzRTtBQUN0RSwrQkFBMkI7QUFFM0IsNERBQXVEO0FBQ3ZELDREQUF1RDtBQUN2RCwyRUFBc0U7QUFDdEUsNERBQXVEO0FBR3ZELG1FQUFxRTtBQUNyRSw2REFBK0Q7QUFDL0QseURBQTJEO0FBcURwRCxJQUFNLGdCQUFnQixHQUF0QixNQUFNLGdCQUFnQjtDQUFHLENBQUE7QUFBbkIsNENBQWdCOzJCQUFoQixnQkFBZ0I7SUFuRDVCLElBQUEsZUFBTSxFQUFDO1FBQ04sT0FBTyxFQUFFO1lBQ1AsdUJBQWEsQ0FBQyxPQUFPLENBQXFCO2dCQUN4QyxNQUFNLEVBQUUscUJBQVk7Z0JBQ3BCLGNBQWMsRUFBRSxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsd0JBQXdCLENBQUM7Z0JBQzdELFVBQVUsRUFBRSxJQUFJO2dCQUNoQixVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWTtnQkFDakQsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLGFBQWEsRUFBRTtvQkFDYixZQUFZLEVBQUUsSUFBSTtvQkFDbEIsNEJBQTRCLEVBQUUsSUFBSTtpQkFDbkM7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBa0IsRUFBRTtvQkFDM0QsSUFBSSxVQUFVLEVBQUUsQ0FBQzt3QkFDZix5Q0FBeUM7d0JBQ3pDLE9BQU87NEJBQ0wsR0FBRyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRzs0QkFDM0IsR0FBRyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRzs0QkFDM0IsSUFBSSxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSTs0QkFDN0IsV0FBVyxFQUFFLEVBQUU7eUJBQ2hCLENBQUE7b0JBQ0gsQ0FBQztvQkFDRCxlQUFlO29CQUNmLE9BQU87d0JBQ0wsR0FBRzt3QkFDSCxHQUFHO3dCQUNILElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTt3QkFDZCxXQUFXLEVBQUUsRUFBRTtxQkFDaEIsQ0FBQTtnQkFDSCxDQUFDO2dCQUNELFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNyQixPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUN0QyxPQUFPO3dCQUNMLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTzt3QkFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSTt3QkFDNUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO3dCQUNoQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7cUJBQ3BDLENBQUE7Z0JBQ0gsQ0FBQztnQkFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLDJDQUF1QixFQUFFLEVBQUUsSUFBSSxxQ0FBb0IsRUFBRSxFQUFFLElBQUksaUNBQWtCLEVBQUUsQ0FBQztnQkFDOUYsSUFBSSxFQUFFO29CQUNKLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxHQUFHO29CQUN0QyxXQUFXLEVBQUUsSUFBSTtpQkFDbEI7YUFDRixDQUFDO1lBQ0Ysd0JBQVU7WUFDVix3QkFBVTtZQUNWLGtDQUFlO1lBQ2Ysd0JBQVU7U0FDWDtLQUNGLENBQUM7R0FDVyxnQkFBZ0IsQ0FBRyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGdyYXBocWxcXGdyYXBocWwubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZSB9IGZyb20gXCJAbmVzdGpzL2NvbW1vblwiXHJcbmltcG9ydCB7IEdyYXBoUUxNb2R1bGUgfSBmcm9tIFwiQG5lc3Rqcy9ncmFwaHFsXCJcclxuaW1wb3J0IHsgQXBvbGxvRHJpdmVyLCB0eXBlIEFwb2xsb0RyaXZlckNvbmZpZyB9IGZyb20gXCJAbmVzdGpzL2Fwb2xsb1wiXHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiXHJcblxyXG5pbXBvcnQgeyBVc2VyTW9kdWxlIH0gZnJvbSBcIi4vbW9kdWxlcy91c2VyL3VzZXIubW9kdWxlXCJcclxuaW1wb3J0IHsgUG9zdE1vZHVsZSB9IGZyb20gXCIuL21vZHVsZXMvcG9zdC9wb3N0Lm1vZHVsZVwiXHJcbmltcG9ydCB7IEFuYWx5dGljc01vZHVsZSB9IGZyb20gXCIuL21vZHVsZXMvYW5hbHl0aWNzL2FuYWx5dGljcy5tb2R1bGVcIlxyXG5pbXBvcnQgeyBBdXRoTW9kdWxlIH0gZnJvbSBcIi4vbW9kdWxlcy9hdXRoL2F1dGgubW9kdWxlXCJcclxuXHJcbmltcG9ydCB0eXBlIHsgR3JhcGhRTENvbnRleHQgfSBmcm9tIFwiLi90eXBlcy9jb250ZXh0LnR5cGVcIlxyXG5pbXBvcnQgeyBHcmFwaFFMQ29tcGxleGl0eVBsdWdpbiB9IGZyb20gXCIuL3BsdWdpbnMvY29tcGxleGl0eS5wbHVnaW5cIlxyXG5pbXBvcnQgeyBHcmFwaFFMTG9nZ2luZ1BsdWdpbiB9IGZyb20gXCIuL3BsdWdpbnMvbG9nZ2luZy5wbHVnaW5cIlxyXG5pbXBvcnQgeyBHcmFwaFFMQ2FjaGVQbHVnaW4gfSBmcm9tIFwiLi9wbHVnaW5zL2NhY2hlLnBsdWdpblwiXHJcblxyXG5ATW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBHcmFwaFFMTW9kdWxlLmZvclJvb3Q8QXBvbGxvRHJpdmVyQ29uZmlnPih7XHJcbiAgICAgIGRyaXZlcjogQXBvbGxvRHJpdmVyLFxyXG4gICAgICBhdXRvU2NoZW1hRmlsZTogam9pbihwcm9jZXNzLmN3ZCgpLCBcInNyYy9ncmFwaHFsL3NjaGVtYS5ncWxcIiksXHJcbiAgICAgIHNvcnRTY2hlbWE6IHRydWUsXHJcbiAgICAgIHBsYXlncm91bmQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIixcclxuICAgICAgaW50cm9zcGVjdGlvbjogdHJ1ZSxcclxuICAgICAgc3Vic2NyaXB0aW9uczoge1xyXG4gICAgICAgIFwiZ3JhcGhxbC13c1wiOiB0cnVlLFxyXG4gICAgICAgIFwic3Vic2NyaXB0aW9ucy10cmFuc3BvcnQtd3NcIjogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgY29udGV4dDogKHsgcmVxLCByZXMsIGNvbm5lY3Rpb24sIGV4dHJhIH0pOiBHcmFwaFFMQ29udGV4dCA9PiB7XHJcbiAgICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcclxuICAgICAgICAgIC8vIFdlYlNvY2tldCBjb25uZWN0aW9uIGZvciBzdWJzY3JpcHRpb25zXHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXE6IGNvbm5lY3Rpb24uY29udGV4dC5yZXEsXHJcbiAgICAgICAgICAgIHJlczogY29ubmVjdGlvbi5jb250ZXh0LnJlcyxcclxuICAgICAgICAgICAgdXNlcjogY29ubmVjdGlvbi5jb250ZXh0LnVzZXIsXHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2VzOiB7fSxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSFRUUCByZXF1ZXN0XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHJlcSxcclxuICAgICAgICAgIHJlcyxcclxuICAgICAgICAgIHVzZXI6IHJlcS51c2VyLFxyXG4gICAgICAgICAgZGF0YVNvdXJjZXM6IHt9LFxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZm9ybWF0RXJyb3I6IChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJHcmFwaFFMIEVycm9yOlwiLCBlcnJvcilcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICAgIGNvZGU6IGVycm9yLmV4dGVuc2lvbnM/LmNvZGUsXHJcbiAgICAgICAgICBwYXRoOiBlcnJvci5wYXRoLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBwbHVnaW5zOiBbbmV3IEdyYXBoUUxDb21wbGV4aXR5UGx1Z2luKCksIG5ldyBHcmFwaFFMTG9nZ2luZ1BsdWdpbigpLCBuZXcgR3JhcGhRTENhY2hlUGx1Z2luKCldLFxyXG4gICAgICBjb3JzOiB7XHJcbiAgICAgICAgb3JpZ2luOiBwcm9jZXNzLmVudi5DT1JTX09SSUdJTiB8fCBcIipcIixcclxuICAgICAgICBjcmVkZW50aWFsczogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH0pLFxyXG4gICAgVXNlck1vZHVsZSxcclxuICAgIFBvc3RNb2R1bGUsXHJcbiAgICBBbmFseXRpY3NNb2R1bGUsXHJcbiAgICBBdXRoTW9kdWxlLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcmFwaFFMQXBpTW9kdWxlIHt9XHJcbiJdLCJ2ZXJzaW9uIjozfQ==