5a7a5ca7090c04f6dd99c7f4193f16f1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('fs/promises');
jest.mock('child_process', () => ({ exec: jest.fn((cmd, opts, cb) => cb?.(null, { stdout: '' }, null)) }));
/* eslint-disable prettier/prettier */
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const backup_service_1 = require("./backup.service");
const backup_verification_service_1 = require("./backup-verification.service");
const backup_retention_service_1 = require("./backup-retention.service");
const email_service_1 = require("../email/email.service");
const fs = __importStar(require("fs/promises"));
const child_process = __importStar(require("child_process"));
describe('BackupService', () => {
    let service;
    let emailService;
    let verificationService;
    let retentionService;
    let configService;
    beforeEach(async () => {
        const emailServiceMock = { sendImmediate: jest.fn().mockResolvedValue(true) };
        const verificationServiceMock = { verifyDatabaseBackup: jest.fn().mockResolvedValue(true) };
        const retentionServiceMock = { cleanupOldBackups: jest.fn().mockResolvedValue(undefined) };
        const configServiceMock = {
            get: jest.fn().mockImplementation((key, defaultValue) => {
                const config = {
                    BACKUP_DIR: './test-backups',
                    BACKUP_ADMIN_EMAIL: 'admin@example.com',
                    'database.host': 'localhost',
                    'database.port': 5432,
                    'database.user': 'postgres',
                    'database.password': 'password',
                    'database.name': 'test_db',
                };
                return config[key] || defaultValue;
            }),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                backup_service_1.BackupService,
                { provide: config_1.ConfigService, useValue: configServiceMock },
                { provide: backup_verification_service_1.BackupVerificationService, useValue: verificationServiceMock },
                { provide: backup_retention_service_1.BackupRetentionService, useValue: retentionServiceMock },
                { provide: email_service_1.EmailService, useValue: emailServiceMock },
            ],
        }).compile();
        service = module.get(backup_service_1.BackupService);
        emailService = module.get(email_service_1.EmailService);
        verificationService = module.get(backup_verification_service_1.BackupVerificationService);
        retentionService = module.get(backup_retention_service_1.BackupRetentionService);
        configService = module.get(config_1.ConfigService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    it('should create database backup and verify it', async () => {
        fs.stat.mockResolvedValue({ size: 1234 });
        child_process.exec.mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));
        const verifySpy = jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(true);
        const result = await service.createDatabaseBackup();
        expect(result.success).toBe(true);
        expect(verifySpy).toHaveBeenCalled();
    });
    it('should call sendBackupFailureAlert if verification fails', async () => {
        fs.stat.mockResolvedValue({ size: 1234 });
        child_process.exec.mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));
        jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(false);
        const alertSpy = jest.spyOn(service, 'sendBackupFailureAlert').mockImplementation(jest.fn());
        await service.createDatabaseBackup();
        expect(alertSpy).toHaveBeenCalledWith('Backup verification failed');
    });
    it('should call sendBackupFailureAlert if backup throws error', async () => {
        child_process.exec.mockImplementation((cmd, opts, cb) => cb(new Error('fail'), null, null));
        const alertSpy = jest.spyOn(service, 'sendBackupFailureAlert').mockImplementation(jest.fn());
        await service.createDatabaseBackup();
        expect(alertSpy).toHaveBeenCalled();
    });
    it('should call retention cleanup after scheduled backup', async () => {
        fs.stat.mockResolvedValue({ size: 1234 });
        child_process.exec.mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));
        jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(true);
        const cleanupSpy = jest.spyOn(retentionService, 'cleanupOldBackups');
        await service.scheduledDatabaseBackup();
        expect(cleanupSpy).toHaveBeenCalled();
    });
    it('should send email to admin on backup failure', async () => {
        const emailSpy = jest.spyOn(emailService, 'sendImmediate');
        await service.sendBackupFailureAlert('test error');
        expect(emailSpy).toHaveBeenCalledWith({
            to: 'admin@example.com',
            subject: 'Backup Failure Alert',
            templateName: 'backup-failure',
            context: expect.objectContaining({ error: 'test error' }),
        });
    });
    it('should list backups', async () => {
        const backups = await service.listBackups();
        expect(Array.isArray(backups)).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,