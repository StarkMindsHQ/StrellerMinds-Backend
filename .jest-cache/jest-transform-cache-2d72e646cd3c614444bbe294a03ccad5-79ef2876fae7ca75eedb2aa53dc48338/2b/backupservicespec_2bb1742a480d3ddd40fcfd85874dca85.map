{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup.service.spec.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { BackupService } from './backup.service';\r\nimport { BackupVerificationService } from './backup-verification.service';\r\nimport { BackupRetentionService } from './backup-retention.service';\r\nimport { EmailService } from '../email/email.service';\r\nimport * as fs from 'fs/promises';\r\nimport * as child_process from 'child_process';\r\n\r\njest.mock('fs/promises');\r\njest.mock('child_process', () => ({ exec: jest.fn((cmd, opts, cb) => cb?.(null, { stdout: '' }, null)) }));\r\n\r\ndescribe('BackupService', () => {\r\n  let service: BackupService;\r\n  let emailService: EmailService;\r\n  let verificationService: BackupVerificationService;\r\n  let retentionService: BackupRetentionService;\r\n  let configService: ConfigService;\r\n\r\n  beforeEach(async () => {\r\n    const emailServiceMock = { sendImmediate: jest.fn().mockResolvedValue(true) };\r\n    const verificationServiceMock = { verifyDatabaseBackup: jest.fn().mockResolvedValue(true) };\r\n    const retentionServiceMock = { cleanupOldBackups: jest.fn().mockResolvedValue(undefined) };\r\n    const configServiceMock = {\r\n      get: jest.fn().mockImplementation((key: string, defaultValue?: any) => {\r\n        const config = {\r\n          BACKUP_DIR: './test-backups',\r\n          BACKUP_ADMIN_EMAIL: 'admin@example.com',\r\n          'database.host': 'localhost',\r\n          'database.port': 5432,\r\n          'database.user': 'postgres',\r\n          'database.password': 'password',\r\n          'database.name': 'test_db',\r\n        };\r\n        return config[key] || defaultValue;\r\n      }),\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        BackupService,\r\n        { provide: ConfigService, useValue: configServiceMock },\r\n        { provide: BackupVerificationService, useValue: verificationServiceMock },\r\n        { provide: BackupRetentionService, useValue: retentionServiceMock },\r\n        { provide: EmailService, useValue: emailServiceMock },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<BackupService>(BackupService);\r\n    emailService = module.get<EmailService>(EmailService);\r\n    verificationService = module.get<BackupVerificationService>(BackupVerificationService);\r\n    retentionService = module.get<BackupRetentionService>(BackupRetentionService);\r\n    configService = module.get<ConfigService>(ConfigService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  it('should create database backup and verify it', async () => {\r\n    (fs.stat as jest.Mock).mockResolvedValue({ size: 1234 });\r\n    ((child_process.exec as unknown) as jest.Mock).mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));\r\n    const verifySpy = jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(true);\r\n    const result = await service.createDatabaseBackup();\r\n    expect(result.success).toBe(true);\r\n    expect(verifySpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call sendBackupFailureAlert if verification fails', async () => {\r\n    (fs.stat as jest.Mock).mockResolvedValue({ size: 1234 });\r\n    ((child_process.exec as unknown) as jest.Mock).mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));\r\n    jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(false);\r\n    const alertSpy = jest.spyOn<any, any>(service, 'sendBackupFailureAlert').mockImplementation(jest.fn());\r\n    await service.createDatabaseBackup();\r\n    expect(alertSpy).toHaveBeenCalledWith('Backup verification failed');\r\n  });\r\n\r\n  it('should call sendBackupFailureAlert if backup throws error', async () => {\r\n    ((child_process.exec as unknown) as jest.Mock).mockImplementation((cmd, opts, cb) => cb(new Error('fail'), null, null));\r\n    const alertSpy = jest.spyOn<any, any>(service, 'sendBackupFailureAlert').mockImplementation(jest.fn());\r\n    await service.createDatabaseBackup();\r\n    expect(alertSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call retention cleanup after scheduled backup', async () => {\r\n    (fs.stat as jest.Mock).mockResolvedValue({ size: 1234 });\r\n    ((child_process.exec as unknown) as jest.Mock).mockImplementation((cmd, opts, cb) => cb(null, { stdout: '' }, null));\r\n    jest.spyOn(verificationService, 'verifyDatabaseBackup').mockResolvedValue(true);\r\n    const cleanupSpy = jest.spyOn(retentionService, 'cleanupOldBackups');\r\n    await service.scheduledDatabaseBackup();\r\n    expect(cleanupSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should send email to admin on backup failure', async () => {\r\n    const emailSpy = jest.spyOn(emailService, 'sendImmediate');\r\n    await (service as any).sendBackupFailureAlert('test error');\r\n    expect(emailSpy).toHaveBeenCalledWith({\r\n      to: 'admin@example.com',\r\n      subject: 'Backup Failure Alert',\r\n      templateName: 'backup-failure',\r\n      context: expect.objectContaining({ error: 'test error' }),\r\n    });\r\n  });\r\n\r\n  it('should list backups', async () => {\r\n    const backups = await service.listBackups();\r\n    expect(Array.isArray(backups)).toBe(true);\r\n  });\r\n});\r\n"],"version":3}