f83f05c0f7ca62306dc4c7887d9edaf6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnrollmentService = void 0;
// src/enrollment/enrollment.service.ts
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
/**
 * EnrollmentService provides logic for enrolling, unenrolling, and listing enrollments.
 */
let EnrollmentService = class EnrollmentService {
    constructor() {
        this.enrollments = []; // Simulating DB
        this.courseCapacities = { 'course1': 2, 'course2': 3 }; // example
        this.prerequisites = { 'course2': ['course1'] }; // example
    }
    /**
     * Enroll a student in a course.
     * @param createEnrollmentDto - DTO containing student and course IDs
     * @returns The created Enrollment entity
     */
    async enroll(createEnrollmentDto) {
        const { studentId, courseId } = createEnrollmentDto;
        // Check if already enrolled
        const existing = this.enrollments.find(e => e.studentId === studentId && e.courseId === courseId && e.status === 'ENROLLED');
        if (existing)
            throw new common_1.BadRequestException('Already enrolled.');
        // Capacity Check
        const enrolledCount = this.enrollments.filter(e => e.courseId === courseId && e.status === 'ENROLLED').length;
        const capacity = this.courseCapacities[courseId] ?? 100;
        if (enrolledCount >= capacity)
            throw new common_1.BadRequestException('Course capacity full.');
        // Prerequisite Check
        const prereqs = this.prerequisites[courseId];
        if (prereqs) {
            const completed = prereqs.every(prereq => this.enrollments.find(e => e.courseId === prereq && e.studentId === studentId && e.status === 'ENROLLED'));
            if (!completed)
                throw new common_1.BadRequestException('Prerequisites not met.');
        }
        // (Mock) Payment
        const paymentSuccess = true; // Always success for now
        const enrollment = {
            id: (0, uuid_1.v4)(),
            studentId,
            courseId,
            enrolledAt: new Date(),
            status: 'ENROLLED',
            paymentStatus: paymentSuccess ? 'PAID' : 'PENDING',
        };
        this.enrollments.push(enrollment);
        return enrollment;
    }
    /**
     * Unenroll a student from a course.
     * @param enrollmentId - Enrollment ID
     */
    async unenroll(enrollmentId) {
        const enrollment = this.enrollments.find(e => e.id === enrollmentId);
        if (!enrollment)
            throw new common_1.NotFoundException('Enrollment not found.');
        if (enrollment.status === 'UNENROLLED')
            throw new common_1.BadRequestException('Already unenrolled.');
        enrollment.status = 'UNENROLLED';
    }
    /**
     * List all enrollments.
     * @returns Array of Enrollment entities
     */
    findAll() {
        return this.enrollments;
    }
};
exports.EnrollmentService = EnrollmentService;
exports.EnrollmentService = EnrollmentService = __decorate([
    (0, common_1.Injectable)()
], EnrollmentService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbnJvbGxtZW50XFxlbnJvbGxtZW50LnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLDJDQUFvRjtBQUdwRiwrQkFBb0M7QUFFcEM7O0dBRUc7QUFFSSxJQUFNLGlCQUFpQixHQUF2QixNQUFNLGlCQUFpQjtJQUF2QjtRQUNHLGdCQUFXLEdBQWlCLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtRQUNoRCxxQkFBZ0IsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVTtRQUM3RCxrQkFBYSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVU7SUE4RGhFLENBQUM7SUE1REM7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsbUJBQXdDO1FBQ25ELE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsbUJBQW1CLENBQUM7UUFFcEQsNEJBQTRCO1FBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsQ0FBQztRQUM3SCxJQUFJLFFBQVE7WUFBRSxNQUFNLElBQUksNEJBQW1CLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUVqRSxpQkFBaUI7UUFDakIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUM5RyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ3hELElBQUksYUFBYSxJQUFJLFFBQVE7WUFBRSxNQUFNLElBQUksNEJBQW1CLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV0RixxQkFBcUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ1osTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDLENBQzFHLENBQUM7WUFDRixJQUFJLENBQUMsU0FBUztnQkFBRSxNQUFNLElBQUksNEJBQW1CLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUMxRSxDQUFDO1FBRUQsaUJBQWlCO1FBQ2pCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxDQUFDLHlCQUF5QjtRQUV0RCxNQUFNLFVBQVUsR0FBZTtZQUM3QixFQUFFLEVBQUUsSUFBQSxTQUFNLEdBQUU7WUFDWixTQUFTO1lBQ1QsUUFBUTtZQUNSLFVBQVUsRUFBRSxJQUFJLElBQUksRUFBRTtZQUN0QixNQUFNLEVBQUUsVUFBVTtZQUNsQixhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDbkQsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQW9CO1FBQ2pDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxZQUFZLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsVUFBVTtZQUFFLE1BQU0sSUFBSSwwQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3RFLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxZQUFZO1lBQUUsTUFBTSxJQUFJLDRCQUFtQixDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFN0YsVUFBVSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztDQUNGLENBQUE7QUFqRVksOENBQWlCOzRCQUFqQixpQkFBaUI7SUFEN0IsSUFBQSxtQkFBVSxHQUFFO0dBQ0EsaUJBQWlCLENBaUU3QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGVucm9sbG1lbnRcXGVucm9sbG1lbnQuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW5yb2xsbWVudC9lbnJvbGxtZW50LnNlcnZpY2UudHNcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTm90Rm91bmRFeGNlcHRpb24sIEJhZFJlcXVlc3RFeGNlcHRpb24gfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IENyZWF0ZUVucm9sbG1lbnREdG8gfSBmcm9tICcuL2R0by9jcmVhdGUtZW5yb2xsbWVudC5kdG8nO1xyXG5pbXBvcnQgeyBFbnJvbGxtZW50IH0gZnJvbSAnLi9lbnRpdGllcy9lbnJvbGxtZW50LmVudGl0eSc7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xyXG5cclxuLyoqXHJcbiAqIEVucm9sbG1lbnRTZXJ2aWNlIHByb3ZpZGVzIGxvZ2ljIGZvciBlbnJvbGxpbmcsIHVuZW5yb2xsaW5nLCBhbmQgbGlzdGluZyBlbnJvbGxtZW50cy5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEVucm9sbG1lbnRTZXJ2aWNlIHtcclxuICBwcml2YXRlIGVucm9sbG1lbnRzOiBFbnJvbGxtZW50W10gPSBbXTsgLy8gU2ltdWxhdGluZyBEQlxyXG4gIHByaXZhdGUgY291cnNlQ2FwYWNpdGllcyA9IHsgJ2NvdXJzZTEnOiAyLCAnY291cnNlMic6IDMgfTsgLy8gZXhhbXBsZVxyXG4gIHByaXZhdGUgcHJlcmVxdWlzaXRlcyA9IHsgJ2NvdXJzZTInOiBbJ2NvdXJzZTEnXSB9OyAvLyBleGFtcGxlXHJcblxyXG4gIC8qKlxyXG4gICAqIEVucm9sbCBhIHN0dWRlbnQgaW4gYSBjb3Vyc2UuXHJcbiAgICogQHBhcmFtIGNyZWF0ZUVucm9sbG1lbnREdG8gLSBEVE8gY29udGFpbmluZyBzdHVkZW50IGFuZCBjb3Vyc2UgSURzXHJcbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgRW5yb2xsbWVudCBlbnRpdHlcclxuICAgKi9cclxuICBhc3luYyBlbnJvbGwoY3JlYXRlRW5yb2xsbWVudER0bzogQ3JlYXRlRW5yb2xsbWVudER0byk6IFByb21pc2U8RW5yb2xsbWVudD4ge1xyXG4gICAgY29uc3QgeyBzdHVkZW50SWQsIGNvdXJzZUlkIH0gPSBjcmVhdGVFbnJvbGxtZW50RHRvO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGFscmVhZHkgZW5yb2xsZWRcclxuICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5lbnJvbGxtZW50cy5maW5kKGUgPT4gZS5zdHVkZW50SWQgPT09IHN0dWRlbnRJZCAmJiBlLmNvdXJzZUlkID09PSBjb3Vyc2VJZCAmJiBlLnN0YXR1cyA9PT0gJ0VOUk9MTEVEJyk7XHJcbiAgICBpZiAoZXhpc3RpbmcpIHRocm93IG5ldyBCYWRSZXF1ZXN0RXhjZXB0aW9uKCdBbHJlYWR5IGVucm9sbGVkLicpO1xyXG5cclxuICAgIC8vIENhcGFjaXR5IENoZWNrXHJcbiAgICBjb25zdCBlbnJvbGxlZENvdW50ID0gdGhpcy5lbnJvbGxtZW50cy5maWx0ZXIoZSA9PiBlLmNvdXJzZUlkID09PSBjb3Vyc2VJZCAmJiBlLnN0YXR1cyA9PT0gJ0VOUk9MTEVEJykubGVuZ3RoO1xyXG4gICAgY29uc3QgY2FwYWNpdHkgPSB0aGlzLmNvdXJzZUNhcGFjaXRpZXNbY291cnNlSWRdID8/IDEwMDtcclxuICAgIGlmIChlbnJvbGxlZENvdW50ID49IGNhcGFjaXR5KSB0aHJvdyBuZXcgQmFkUmVxdWVzdEV4Y2VwdGlvbignQ291cnNlIGNhcGFjaXR5IGZ1bGwuJyk7XHJcblxyXG4gICAgLy8gUHJlcmVxdWlzaXRlIENoZWNrXHJcbiAgICBjb25zdCBwcmVyZXFzID0gdGhpcy5wcmVyZXF1aXNpdGVzW2NvdXJzZUlkXTtcclxuICAgIGlmIChwcmVyZXFzKSB7XHJcbiAgICAgIGNvbnN0IGNvbXBsZXRlZCA9IHByZXJlcXMuZXZlcnkocHJlcmVxID0+XHJcbiAgICAgICAgdGhpcy5lbnJvbGxtZW50cy5maW5kKGUgPT4gZS5jb3Vyc2VJZCA9PT0gcHJlcmVxICYmIGUuc3R1ZGVudElkID09PSBzdHVkZW50SWQgJiYgZS5zdGF0dXMgPT09ICdFTlJPTExFRCcpLFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoIWNvbXBsZXRlZCkgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ1ByZXJlcXVpc2l0ZXMgbm90IG1ldC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAoTW9jaykgUGF5bWVudFxyXG4gICAgY29uc3QgcGF5bWVudFN1Y2Nlc3MgPSB0cnVlOyAvLyBBbHdheXMgc3VjY2VzcyBmb3Igbm93XHJcblxyXG4gICAgY29uc3QgZW5yb2xsbWVudDogRW5yb2xsbWVudCA9IHtcclxuICAgICAgaWQ6IHV1aWR2NCgpLFxyXG4gICAgICBzdHVkZW50SWQsXHJcbiAgICAgIGNvdXJzZUlkLFxyXG4gICAgICBlbnJvbGxlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICBzdGF0dXM6ICdFTlJPTExFRCcsXHJcbiAgICAgIHBheW1lbnRTdGF0dXM6IHBheW1lbnRTdWNjZXNzID8gJ1BBSUQnIDogJ1BFTkRJTkcnLFxyXG4gICAgfTtcclxuICAgIHRoaXMuZW5yb2xsbWVudHMucHVzaChlbnJvbGxtZW50KTtcclxuICAgIHJldHVybiBlbnJvbGxtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5lbnJvbGwgYSBzdHVkZW50IGZyb20gYSBjb3Vyc2UuXHJcbiAgICogQHBhcmFtIGVucm9sbG1lbnRJZCAtIEVucm9sbG1lbnQgSURcclxuICAgKi9cclxuICBhc3luYyB1bmVucm9sbChlbnJvbGxtZW50SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZW5yb2xsbWVudCA9IHRoaXMuZW5yb2xsbWVudHMuZmluZChlID0+IGUuaWQgPT09IGVucm9sbG1lbnRJZCk7XHJcbiAgICBpZiAoIWVucm9sbG1lbnQpIHRocm93IG5ldyBOb3RGb3VuZEV4Y2VwdGlvbignRW5yb2xsbWVudCBub3QgZm91bmQuJyk7XHJcbiAgICBpZiAoZW5yb2xsbWVudC5zdGF0dXMgPT09ICdVTkVOUk9MTEVEJykgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0FscmVhZHkgdW5lbnJvbGxlZC4nKTtcclxuXHJcbiAgICBlbnJvbGxtZW50LnN0YXR1cyA9ICdVTkVOUk9MTEVEJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExpc3QgYWxsIGVucm9sbG1lbnRzLlxyXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIEVucm9sbG1lbnQgZW50aXRpZXNcclxuICAgKi9cclxuICBmaW5kQWxsKCk6IEVucm9sbG1lbnRbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnJvbGxtZW50cztcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9