{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\enrollment\\enrollment.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\enrollment\\enrollment.service.ts"],"sourcesContent":["// src/enrollment/enrollment.service.ts\r\nimport { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { CreateEnrollmentDto } from './dto/create-enrollment.dto';\r\nimport { Enrollment } from './entities/enrollment.entity';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * EnrollmentService provides logic for enrolling, unenrolling, and listing enrollments.\r\n */\r\n@Injectable()\r\nexport class EnrollmentService {\r\n  private enrollments: Enrollment[] = []; // Simulating DB\r\n  private courseCapacities = { 'course1': 2, 'course2': 3 }; // example\r\n  private prerequisites = { 'course2': ['course1'] }; // example\r\n\r\n  /**\r\n   * Enroll a student in a course.\r\n   * @param createEnrollmentDto - DTO containing student and course IDs\r\n   * @returns The created Enrollment entity\r\n   */\r\n  async enroll(createEnrollmentDto: CreateEnrollmentDto): Promise<Enrollment> {\r\n    const { studentId, courseId } = createEnrollmentDto;\r\n\r\n    // Check if already enrolled\r\n    const existing = this.enrollments.find(e => e.studentId === studentId && e.courseId === courseId && e.status === 'ENROLLED');\r\n    if (existing) throw new BadRequestException('Already enrolled.');\r\n\r\n    // Capacity Check\r\n    const enrolledCount = this.enrollments.filter(e => e.courseId === courseId && e.status === 'ENROLLED').length;\r\n    const capacity = this.courseCapacities[courseId] ?? 100;\r\n    if (enrolledCount >= capacity) throw new BadRequestException('Course capacity full.');\r\n\r\n    // Prerequisite Check\r\n    const prereqs = this.prerequisites[courseId];\r\n    if (prereqs) {\r\n      const completed = prereqs.every(prereq =>\r\n        this.enrollments.find(e => e.courseId === prereq && e.studentId === studentId && e.status === 'ENROLLED'),\r\n      );\r\n      if (!completed) throw new BadRequestException('Prerequisites not met.');\r\n    }\r\n\r\n    // (Mock) Payment\r\n    const paymentSuccess = true; // Always success for now\r\n\r\n    const enrollment: Enrollment = {\r\n      id: uuidv4(),\r\n      studentId,\r\n      courseId,\r\n      enrolledAt: new Date(),\r\n      status: 'ENROLLED',\r\n      paymentStatus: paymentSuccess ? 'PAID' : 'PENDING',\r\n    };\r\n    this.enrollments.push(enrollment);\r\n    return enrollment;\r\n  }\r\n\r\n  /**\r\n   * Unenroll a student from a course.\r\n   * @param enrollmentId - Enrollment ID\r\n   */\r\n  async unenroll(enrollmentId: string): Promise<void> {\r\n    const enrollment = this.enrollments.find(e => e.id === enrollmentId);\r\n    if (!enrollment) throw new NotFoundException('Enrollment not found.');\r\n    if (enrollment.status === 'UNENROLLED') throw new BadRequestException('Already unenrolled.');\r\n\r\n    enrollment.status = 'UNENROLLED';\r\n  }\r\n\r\n  /**\r\n   * List all enrollments.\r\n   * @returns Array of Enrollment entities\r\n   */\r\n  findAll(): Enrollment[] {\r\n    return this.enrollments;\r\n  }\r\n}\r\n"],"version":3}