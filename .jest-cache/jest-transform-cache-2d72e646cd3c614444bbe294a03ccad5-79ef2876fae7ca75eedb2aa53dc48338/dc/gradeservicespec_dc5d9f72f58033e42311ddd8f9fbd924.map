{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\grading\\services\\grade.service.spec.ts","mappings":";;AAAA,yBAAyB;AACzB,6CAAsD;AAEtD,6CAAqD;AACrD,2DAAiD;AACjD,gFAA6E;AAC7E,qCAAqC;AACrC,uDAAmD;AAEnD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,OAAuB,CAAC;IAC5B,IAAI,eAAkC,CAAC;IAEvC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,gCAAc;gBACd;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,oBAAK,CAAC;oBAClC,QAAQ,EAAE,oBAAU;iBACrB;gBACD;oBACE,OAAO,EAAE,2CAAoB;oBAC7B,QAAQ,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;iBACvC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAC;QACrD,eAAe,GAAG,MAAM,CAAC,GAAG,CAAoB,IAAA,4BAAkB,EAAC,oBAAK,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,OAAO,GAAG,IAAI;aACjB,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC;aAC9B,qBAAqB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAS,CAAC,CAAC;QAC3C,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;YAClE,EAAE,EAAE,CAAC;YACL,IAAI,EAAE,QAAQ;SACR,CAAC,CAAC;QAEV,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\grading\\services\\grade.service.spec.ts"],"sourcesContent":["// grades.service.spec.ts\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\n\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Grade } from '../entities/grade-entity';\r\nimport { NotificationsService } from 'src/notification/notification.service';\r\nimport { Repository } from 'typeorm';\r\nimport { GradingService } from './grading.service';\r\n\r\ndescribe('GradesService', () => {\r\n  let service: GradingService;\r\n  let gradeRepository: Repository<Grade>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        GradingService,\r\n        {\r\n          provide: getRepositoryToken(Grade),\r\n          useClass: Repository,\r\n        },\r\n        {\r\n          provide: NotificationsService,\r\n          useValue: { notifyStudent: jest.fn() },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<GradingService>(GradingService);\r\n    gradeRepository = module.get<Repository<Grade>>(getRepositoryToken(Grade));\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  it('should create a grade and notify student', async () => {\r\n    const saveSpy = jest\r\n      .spyOn(gradeRepository, 'save')\r\n      .mockResolvedValueOnce({ id: 1 } as any);\r\n    await service.createGrade(1, { grade: 95, feedback: 'Great job!' }, {\r\n      id: 2,\r\n      role: 'mentor',\r\n    } as any);\r\n\r\n    expect(saveSpy).toHaveBeenCalled();\r\n  });\r\n});\r\n"],"version":3}