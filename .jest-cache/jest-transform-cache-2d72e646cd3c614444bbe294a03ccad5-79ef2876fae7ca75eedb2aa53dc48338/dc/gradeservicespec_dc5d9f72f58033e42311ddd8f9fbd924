edf548e0682514cb13d343f029d44d0e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// grades.service.spec.ts
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const grade_entity_1 = require("../entities/grade-entity");
const notification_service_1 = require("src/notification/notification.service");
const typeorm_2 = require("typeorm");
const grading_service_1 = require("./grading.service");
describe('GradesService', () => {
    let service;
    let gradeRepository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                grading_service_1.GradingService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(grade_entity_1.Grade),
                    useClass: typeorm_2.Repository,
                },
                {
                    provide: notification_service_1.NotificationsService,
                    useValue: { notifyStudent: jest.fn() },
                },
            ],
        }).compile();
        service = module.get(grading_service_1.GradingService);
        gradeRepository = module.get((0, typeorm_1.getRepositoryToken)(grade_entity_1.Grade));
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    it('should create a grade and notify student', async () => {
        const saveSpy = jest
            .spyOn(gradeRepository, 'save')
            .mockResolvedValueOnce({ id: 1 });
        await service.createGrade(1, { grade: 95, feedback: 'Great job!' }, {
            id: 2,
            role: 'mentor',
        });
        expect(saveSpy).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxzZXJ2aWNlc1xcZ3JhZGUuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBQ3pCLDZDQUFzRDtBQUV0RCw2Q0FBcUQ7QUFDckQsMkRBQWlEO0FBQ2pELGdGQUE2RTtBQUM3RSxxQ0FBcUM7QUFDckMsdURBQW1EO0FBRW5ELFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksT0FBdUIsQ0FBQztJQUM1QixJQUFJLGVBQWtDLENBQUM7SUFFdkMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxTQUFTLEVBQUU7Z0JBQ1QsZ0NBQWM7Z0JBQ2Q7b0JBQ0UsT0FBTyxFQUFFLElBQUEsNEJBQWtCLEVBQUMsb0JBQUssQ0FBQztvQkFDbEMsUUFBUSxFQUFFLG9CQUFVO2lCQUNyQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsMkNBQW9CO29CQUM3QixRQUFRLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFO2lCQUN2QzthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWlCLGdDQUFjLENBQUMsQ0FBQztRQUNyRCxlQUFlLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBb0IsSUFBQSw0QkFBa0IsRUFBQyxvQkFBSyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUk7YUFDakIsS0FBSyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7YUFDOUIscUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFTLENBQUMsQ0FBQztRQUMzQyxNQUFNLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEVBQUU7WUFDbEUsRUFBRSxFQUFFLENBQUM7WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNSLENBQUMsQ0FBQztRQUVWLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxzZXJ2aWNlc1xcZ3JhZGUuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdyYWRlcy5zZXJ2aWNlLnNwZWMudHNcclxuaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XHJcblxyXG5pbXBvcnQgeyBnZXRSZXBvc2l0b3J5VG9rZW4gfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBHcmFkZSB9IGZyb20gJy4uL2VudGl0aWVzL2dyYWRlLWVudGl0eSc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnc3JjL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuaW1wb3J0IHsgR3JhZGluZ1NlcnZpY2UgfSBmcm9tICcuL2dyYWRpbmcuc2VydmljZSc7XHJcblxyXG5kZXNjcmliZSgnR3JhZGVzU2VydmljZScsICgpID0+IHtcclxuICBsZXQgc2VydmljZTogR3JhZGluZ1NlcnZpY2U7XHJcbiAgbGV0IGdyYWRlUmVwb3NpdG9yeTogUmVwb3NpdG9yeTxHcmFkZT47XHJcblxyXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgR3JhZGluZ1NlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKEdyYWRlKSxcclxuICAgICAgICAgIHVzZUNsYXNzOiBSZXBvc2l0b3J5LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogTm90aWZpY2F0aW9uc1NlcnZpY2UsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogeyBub3RpZnlTdHVkZW50OiBqZXN0LmZuKCkgfSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZSgpO1xyXG5cclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PEdyYWRpbmdTZXJ2aWNlPihHcmFkaW5nU2VydmljZSk7XHJcbiAgICBncmFkZVJlcG9zaXRvcnkgPSBtb2R1bGUuZ2V0PFJlcG9zaXRvcnk8R3JhZGU+PihnZXRSZXBvc2l0b3J5VG9rZW4oR3JhZGUpKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHNlcnZpY2UpLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY3JlYXRlIGEgZ3JhZGUgYW5kIG5vdGlmeSBzdHVkZW50JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3Qgc2F2ZVNweSA9IGplc3RcclxuICAgICAgLnNweU9uKGdyYWRlUmVwb3NpdG9yeSwgJ3NhdmUnKVxyXG4gICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgaWQ6IDEgfSBhcyBhbnkpO1xyXG4gICAgYXdhaXQgc2VydmljZS5jcmVhdGVHcmFkZSgxLCB7IGdyYWRlOiA5NSwgZmVlZGJhY2s6ICdHcmVhdCBqb2IhJyB9LCB7XHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICByb2xlOiAnbWVudG9yJyxcclxuICAgIH0gYXMgYW55KTtcclxuXHJcbiAgICBleHBlY3Qoc2F2ZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9