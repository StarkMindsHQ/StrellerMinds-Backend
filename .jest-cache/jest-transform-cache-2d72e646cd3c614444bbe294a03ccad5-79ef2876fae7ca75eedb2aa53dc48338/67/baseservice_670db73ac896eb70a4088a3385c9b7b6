2e1451cdb8cfc345b04df9983c791277
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
let BaseService = class BaseService {
    constructor(repository) {
        this.repository = repository;
        this.logger = new common_1.Logger(this.constructor.name);
        this.defaultPageSize = 10;
        this.maxPageSize = 100;
    }
    /**
     * Create a new entity
     */
    async createEntity(data) {
        try {
            const entity = this.repository.create(data);
            return await this.repository.save(entity);
        }
        catch (error) {
            this.handleError(error, 'create entity');
        }
    }
    /**
     * Find entity by ID with optional relations
     */
    async findEntityById(id, relations = []) {
        try {
            const entity = await this.repository.findOne({
                where: { id },
                relations,
            });
            if (!entity) {
                throw new common_1.NotFoundException(`Entity with ID ${id} not found`);
            }
            return entity;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            this.handleError(error, 'find entity by ID', `ID: ${id}`);
        }
    }
    /**
     * Find entities with pagination and filtering
     */
    async findEntitiesWithPagination(options) {
        try {
            const { page = 1, limit = this.defaultPageSize, sortBy, sortOrder = 'ASC', ...findOptions } = options;
            // Ensure page and limit are within reasonable bounds
            const safePage = Math.max(1, page);
            const safeLimit = Math.min(Math.max(1, limit), this.maxPageSize);
            const skip = (safePage - 1) * safeLimit;
            const [data, total] = await this.repository.findAndCount({
                ...findOptions,
                skip,
                take: safeLimit,
                order: sortBy ? { [sortBy]: sortOrder } : undefined,
            });
            return {
                data,
                total,
                page: safePage,
                limit: safeLimit,
                totalPages: Math.ceil(total / safeLimit),
            };
        }
        catch (error) {
            this.handleError(error, 'find entities with pagination');
        }
    }
    /**
     * Update entity by ID
     */
    async updateEntity(id, data) {
        try {
            await this.findEntityById(id);
            await this.repository.update(id, data);
            return await this.findEntityById(id);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            this.handleError(error, 'update entity', `ID: ${id}`);
        }
    }
    /**
     * Delete entity by ID (soft delete if available, with fallback to hard delete)
     */
    async deleteEntity(id, forceHardDelete = false) {
        try {
            if (forceHardDelete) {
                const result = await this.repository.delete(id);
                if (result.affected === 0) {
                    throw new common_1.NotFoundException(`Entity with ID ${id} not found`);
                }
            }
            else {
                // Try soft delete first, fallback to hard delete if not supported
                try {
                    const result = await this.repository.softDelete(id);
                    if (result.affected === 0) {
                        throw new common_1.NotFoundException(`Entity with ID ${id} not found`);
                    }
                }
                catch (softDeleteError) {
                    this.logger.warn(`Soft delete not supported for entity ${id}, using hard delete`);
                    const result = await this.repository.delete(id);
                    if (result.affected === 0) {
                        throw new common_1.NotFoundException(`Entity with ID ${id} not found`);
                    }
                }
            }
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException)
                throw error;
            this.handleError(error, 'delete entity', `ID: ${id}`);
        }
    }
    /**
     * Check if entity exists
     */
    async entityExists(where) {
        try {
            const count = await this.repository.count({ where });
            return count > 0;
        }
        catch (error) {
            this.handleError(error, 'check entity existence');
        }
    }
    /**
     * Handle service errors consistently
     */
    handleError(error, operation, context) {
        const contextInfo = context ? ` in ${context}` : '';
        this.logger.error(`Error during ${operation}${contextInfo}: ${error.message}`, error.stack);
        if (error instanceof common_1.NotFoundException || error instanceof common_1.InternalServerErrorException) {
            throw error;
        }
        throw new common_1.InternalServerErrorException(`Error during ${operation}`);
    }
};
exports.BaseService = BaseService;
exports.BaseService = BaseService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], BaseService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,