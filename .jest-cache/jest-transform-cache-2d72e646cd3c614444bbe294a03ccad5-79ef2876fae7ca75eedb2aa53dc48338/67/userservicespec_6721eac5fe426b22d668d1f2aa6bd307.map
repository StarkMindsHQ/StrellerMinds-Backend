{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\user.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\user.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { UserService } from \"../modules/user/services/user.service\"\r\nimport { User } from \"../modules/user/entities/user.entity\"\r\n\r\ndescribe(\"UserService\", () => {\r\n  let service: UserService\r\n  let repository: jest.Mocked<Repository<User>>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UserService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            createQueryBuilder: jest.fn(),\r\n            findOne: jest.fn(),\r\n            findByIds: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            remove: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<UserService>(UserService)\r\n    repository = module.get(getRepositoryToken(User))\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"findById\", () => {\r\n    it(\"should return a user by id\", async () => {\r\n      const mockUser: User = {\r\n        id: \"1\",\r\n        email: \"test@example.com\",\r\n        firstName: \"John\",\r\n        lastName: \"Doe\",\r\n        isActive: true,\r\n        posts: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      } as User\r\n\r\n      repository.findOne.mockResolvedValue(mockUser)\r\n\r\n      const result = await service.findById(\"1\")\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(repository.findOne).toHaveBeenCalledWith({ where: { id: \"1\" } })\r\n    })\r\n  })\r\n\r\n  describe(\"create\", () => {\r\n    it(\"should create a new user\", async () => {\r\n      const input = {\r\n        email: \"test@example.com\",\r\n        firstName: \"John\",\r\n        lastName: \"Doe\",\r\n      }\r\n\r\n      const mockUser: User = {\r\n        id: \"1\",\r\n        ...input,\r\n        isActive: true,\r\n        posts: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      } as User\r\n\r\n      repository.create.mockReturnValue(mockUser)\r\n      repository.save.mockResolvedValue(mockUser)\r\n\r\n      const result = await service.create(input)\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(repository.create).toHaveBeenCalledWith(input)\r\n      expect(repository.save).toHaveBeenCalledWith(mockUser)\r\n    })\r\n  })\r\n})\r\n"],"version":3}