{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\services\\base.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\services\\base.service.ts"],"sourcesContent":["import { Injectable, Logger, InternalServerErrorException, NotFoundException } from '@nestjs/common';\r\nimport { Repository, FindOptionsWhere, FindManyOptions } from 'typeorm';\r\n\r\nexport interface PaginationOptions {\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: string;\r\n  sortOrder?: 'ASC' | 'DESC';\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  data: T[];\r\n  total: number;\r\n  page: number;\r\n  limit: number;\r\n  totalPages: number;\r\n}\r\n\r\n@Injectable()\r\nexport abstract class BaseService<T> {\r\n  protected readonly logger = new Logger(this.constructor.name);\r\n  protected readonly defaultPageSize = 10;\r\n  protected readonly maxPageSize = 100;\r\n\r\n  constructor(protected readonly repository: Repository<T>) {}\r\n\r\n  /**\r\n   * Create a new entity\r\n   */\r\n  protected async createEntity(data: Partial<T>): Promise<T> {\r\n    try {\r\n      const entity = this.repository.create(data);\r\n      return await this.repository.save(entity);\r\n    } catch (error) {\r\n      this.handleError(error, 'create entity');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find entity by ID with optional relations\r\n   */\r\n  protected async findEntityById(id: string, relations: string[] = []): Promise<T> {\r\n    try {\r\n      const entity = await this.repository.findOne({\r\n        where: { id } as FindOptionsWhere<T>,\r\n        relations,\r\n      });\r\n      \r\n      if (!entity) {\r\n        throw new NotFoundException(`Entity with ID ${id} not found`);\r\n      }\r\n      \r\n      return entity;\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      this.handleError(error, 'find entity by ID', `ID: ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find entities with pagination and filtering\r\n   */\r\n  protected async findEntitiesWithPagination(\r\n    options: FindManyOptions<T> & PaginationOptions\r\n  ): Promise<PaginatedResult<T>> {\r\n    try {\r\n      const { \r\n        page = 1, \r\n        limit = this.defaultPageSize, \r\n        sortBy, \r\n        sortOrder = 'ASC', \r\n        ...findOptions \r\n      } = options;\r\n      \r\n      // Ensure page and limit are within reasonable bounds\r\n      const safePage = Math.max(1, page);\r\n      const safeLimit = Math.min(Math.max(1, limit), this.maxPageSize);\r\n      const skip = (safePage - 1) * safeLimit;\r\n\r\n      const [data, total] = await this.repository.findAndCount({\r\n        ...findOptions,\r\n        skip,\r\n        take: safeLimit,\r\n        order: sortBy ? { [sortBy]: sortOrder } : undefined,\r\n      });\r\n\r\n      return {\r\n        data,\r\n        total,\r\n        page: safePage,\r\n        limit: safeLimit,\r\n        totalPages: Math.ceil(total / safeLimit),\r\n      };\r\n    } catch (error) {\r\n      this.handleError(error, 'find entities with pagination');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update entity by ID\r\n   */\r\n  protected async updateEntity(id: string, data: Partial<T>): Promise<T> {\r\n    try {\r\n      await this.findEntityById(id);\r\n      await this.repository.update(id, data);\r\n      return await this.findEntityById(id);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      this.handleError(error, 'update entity', `ID: ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete entity by ID (soft delete if available, with fallback to hard delete)\r\n   */\r\n  protected async deleteEntity(id: string, forceHardDelete = false): Promise<void> {\r\n    try {\r\n      if (forceHardDelete) {\r\n        const result = await this.repository.delete(id);\r\n        if (result.affected === 0) {\r\n          throw new NotFoundException(`Entity with ID ${id} not found`);\r\n        }\r\n      } else {\r\n        // Try soft delete first, fallback to hard delete if not supported\r\n        try {\r\n          const result = await this.repository.softDelete(id);\r\n          if (result.affected === 0) {\r\n            throw new NotFoundException(`Entity with ID ${id} not found`);\r\n          }\r\n        } catch (softDeleteError) {\r\n          this.logger.warn(`Soft delete not supported for entity ${id}, using hard delete`);\r\n          const result = await this.repository.delete(id);\r\n          if (result.affected === 0) {\r\n            throw new NotFoundException(`Entity with ID ${id} not found`);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      this.handleError(error, 'delete entity', `ID: ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if entity exists\r\n   */\r\n  protected async entityExists(where: FindOptionsWhere<T>): Promise<boolean> {\r\n    try {\r\n      const count = await this.repository.count({ where });\r\n      return count > 0;\r\n    } catch (error) {\r\n      this.handleError(error, 'check entity existence');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors consistently\r\n   */\r\n  protected handleError(error: any, operation: string, context?: string): never {\r\n    const contextInfo = context ? ` in ${context}` : '';\r\n    this.logger.error(`Error during ${operation}${contextInfo}: ${error.message}`, error.stack);\r\n    \r\n    if (error instanceof NotFoundException || error instanceof InternalServerErrorException) {\r\n      throw error;\r\n    }\r\n    \r\n    throw new InternalServerErrorException(`Error during ${operation}`);\r\n  }\r\n}\r\n"],"version":3}