{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.service.ts","mappings":";;;;;;;;;;;;;;;AAAA,2CAKwB;AAKjB,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,YAEmB,UAA2B;QAA3B,eAAU,GAAV,UAAU,CAAiB;IAC3C,CAAC;IAEI,WAAW,CAAC,IAAY;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,4BAAmB,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,YAAoB,EAAE,WAAgB;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAChD,OAAO,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,YAAoB,EAAE,IAAS;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAChD,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,YAAoB,EAAE,WAAgB;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACvB,MAAM,IAAI,4BAAmB,CAAC,8BAA8B,YAAY,EAAE,CAAC,CAAC;QAC9E,CAAC;QACD,OAAO,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;CACF,CAAA;AA/BY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,iBAAiB,CAAC,CAAA;;GAFjB,WAAW,CA+BvB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  UnauthorizedException,\r\n  BadRequestException,\r\n  Inject,\r\n} from '@nestjs/common';\r\nimport { IAuthStrategy } from './strategies/auth-strategy.interface';\r\nimport { AuthResponseDto } from './dto/auth-response.dto';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    @Inject('AUTH_STRATEGIES')\r\n    private readonly strategies: IAuthStrategy[],\r\n  ) {}\r\n\r\n  private getStrategy(name: string): IAuthStrategy {\r\n    const strategy = this.strategies.find((s) => s.name === name);\r\n    if (!strategy) {\r\n      throw new BadRequestException(`Unsupported auth strategy: ${name}`);\r\n    }\r\n    return strategy;\r\n  }\r\n\r\n  async validate(strategyName: string, credentials: any): Promise<any> {\r\n    const strategy = this.getStrategy(strategyName);\r\n    return strategy.validate(credentials);\r\n  }\r\n\r\n  async login(strategyName: string, user: any): Promise<AuthResponseDto> {\r\n    const strategy = this.getStrategy(strategyName);\r\n    return strategy.login(user);\r\n  }\r\n\r\n  async register(strategyName: string, credentials: any): Promise<AuthResponseDto> {\r\n    const strategy = this.getStrategy(strategyName);\r\n    if (!strategy.register) {\r\n      throw new BadRequestException(`Register not supported for ${strategyName}`);\r\n    }\r\n    return strategy.register(credentials);\r\n  }\r\n}\r\n"],"version":3}