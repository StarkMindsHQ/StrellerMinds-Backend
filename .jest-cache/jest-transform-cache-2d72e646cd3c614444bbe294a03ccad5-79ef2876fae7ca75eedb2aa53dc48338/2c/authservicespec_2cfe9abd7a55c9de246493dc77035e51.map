{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\unit\\auth\\auth.service.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,qCAAyC;AACzC,2CAA+C;AAC/C,6CAAqD;AAErD,+CAAiC;AAEjC,iEAA6D;AAC7D,oEAAgE;AAEhE,0FAA+E;AAC/E,+CAA8C;AAC9C,2CAA4E;AAE5E,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,OAAoB,CAAC;IACzB,IAAI,YAA0B,CAAC;IAC/B,IAAI,UAAsB,CAAC;IAC3B,IAAI,sBAAgD,CAAC;IACrD,IAAI,aAA4B,CAAC;IAEjC,MAAM,QAAQ,GAAG,uBAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACpD,MAAM,gBAAgB,GAAG;QACvB,EAAE,EAAE,kBAAkB;QACtB,KAAK,EAAE,eAAe;QACtB,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACzD,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,0BAAW;gBACX;oBACE,OAAO,EAAE,4BAAY;oBACrB,QAAQ,EAAE;wBACR,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;wBACtB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;wBACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;wBACnB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB;iBACF;gBACD;oBACE,OAAO,EAAE,gBAAU;oBACnB,QAAQ,EAAE;wBACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;wBACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB;iBACF;gBACD;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,mCAAY,CAAC;oBACzC,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;wBACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;wBACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;wBAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;wBACjB,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE;qBAC9B;iBACF;gBACD;oBACE,OAAO,EAAE,sBAAa;oBACtB,QAAQ,EAAE;wBACR,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,EAAE;4BAC3B,MAAM,MAAM,GAAG;gCACb,UAAU,EAAE,aAAa;gCACzB,cAAc,EAAE,KAAK;gCACrB,kBAAkB,EAAE,qBAAqB;gCACzC,sBAAsB,EAAE,IAAI;6BAC7B,CAAC;4BACF,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;wBACrB,CAAC,CAAC;qBACH;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAc,0BAAW,CAAC,CAAC;QAC/C,YAAY,GAAG,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAC;QACtD,UAAU,GAAG,MAAM,CAAC,GAAG,CAAa,gBAAU,CAAC,CAAC;QAChD,sBAAsB,GAAG,MAAM,CAAC,GAAG,CACjC,IAAA,4BAAkB,EAAC,mCAAY,CAAC,CACjC,CAAC;QACF,aAAa,GAAG,MAAM,CAAC,GAAG,CAAgB,sBAAa,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,IAAa,CAAC,CAAC;YAE/D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAEzE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;aACpB,CAAC,CAAC;YACH,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEhE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;YAE9E,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,KAAc,CAAC,CAAC;YAEhE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;YAE3E,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,YAAY,GAAG,uBAAW,CAAC,QAAQ,EAAE,CAAC;YAC5C,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAExE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAE7E,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,WAAW,GAAG,cAAc,CAAC;YACnC,MAAM,YAAY,GAAG,eAAe,CAAC;YAErC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC;iBAC3B,mBAAmB,CAAC,WAAW,CAAC;iBAChC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAErC,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,gBAAuB,CAAC,CAAC;YACtF,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,gBAAuB,CAAC,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,YAAY;gBAC3B,IAAI,EAAE;oBACJ,EAAE,EAAE,QAAQ,CAAC,EAAE;oBACf,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB;aACF,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACxD,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,gBAAuB,CAAC,CAAC;YACtF,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,gBAAuB,CAAC,CAAC;YACtF,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAE/D,MAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE9B,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,QAAQ,CAAC,EAAE,EACX,MAAM,CAAC,gBAAgB,CAAC;gBACtB,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aAC9B,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,MAAM,WAAW,GAAG;YAClB,KAAK,EAAE,kBAAkB;YACzB,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE,UAAU;YAChB,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,MAAM;SACjB,CAAC;QAEF,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,OAAO,GAAG,uBAAW,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC;YAC/D,MAAM,WAAW,GAAG,cAAc,CAAC;YACnC,MAAM,YAAY,GAAG,eAAe,CAAC;YAErC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAChE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC9D,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC;iBAC3B,mBAAmB,CAAC,WAAW,CAAC;iBAChC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,gBAAuB,CAAC,CAAC;YACtF,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,gBAAuB,CAAC,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,YAAY;gBAC3B,IAAI,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC5B,KAAK,EAAE,WAAW,CAAC,KAAK;oBACxB,IAAI,EAAE,WAAW,CAAC,IAAI;iBACvB,CAAC;aACH,CAAC,CAAC;YACH,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,IAAI,EAAE,WAAW,CAAC,IAAI;aACvB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAEpE,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,4BAAmB,CAAC,CAAC;YACjF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,cAAc,GAAG,kBAAkB,CAAC;YAE1C,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;YACvE,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,gBAAuB,CAAC,CAAC;YACzF,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACjE,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAE/D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,YAAY,EAAE,cAAc;aAC7B,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,eAAe,EAAE;gBAC9D,MAAM,EAAE,qBAAqB;aAC9B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,8BAAqB,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,YAAY,GAAG;gBACnB,GAAG,gBAAgB;gBACnB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;aACvC,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;YACvE,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,YAAmB,CAAC,CAAC;YAErF,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,8BAAqB,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAS,CAAC,CAAC;YAEvF,MAAM,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAEtC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC;gBACzD,KAAK,EAAE,eAAe;aACvB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAE/D,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE7C,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,QAAQ,CAAC,EAAE,EACX,MAAM,CAAC,gBAAgB,CAAC;gBACtB,kBAAkB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtC,oBAAoB,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aACvC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEhE,MAAM,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACtF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,kBAAkB,GAAG,uBAAW,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YAC9E,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YAEzE,MAAM,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE7D,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,kBAAkB,CAAC,EAAE,EACrB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAC5B,kBAAkB,EAAE,IAAI;gBACxB,oBAAoB,EAAE,IAAI;aAC3B,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEhE,MAAM,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACjF,4BAAmB,CACpB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\unit\\auth\\auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\nimport { AuthService } from '../../../src/auth/auth.service';\r\nimport { UsersService } from '../../../src/users/users.service';\r\nimport { User } from '../../../src/users/entities/user.entity';\r\nimport { RefreshToken } from '../../../src/auth/entities/refresh-token.entity';\r\nimport { userFactory } from '../../factories';\r\nimport { UnauthorizedException, BadRequestException } from '@nestjs/common';\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n  let usersService: UsersService;\r\n  let jwtService: JwtService;\r\n  let refreshTokenRepository: Repository<RefreshToken>;\r\n  let configService: ConfigService;\r\n\r\n  const mockUser = userFactory.forAuth('password123');\r\n  const mockRefreshToken = {\r\n    id: 'refresh-token-id',\r\n    token: 'refresh-token',\r\n    user: mockUser,\r\n    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        {\r\n          provide: UsersService,\r\n          useValue: {\r\n            findByEmail: jest.fn(),\r\n            create: jest.fn(),\r\n            findById: jest.fn(),\r\n            update: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: JwtService,\r\n          useValue: {\r\n            sign: jest.fn(),\r\n            verify: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(RefreshToken),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            findOne: jest.fn(),\r\n            delete: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: ConfigService,\r\n          useValue: {\r\n            get: jest.fn((key: string) => {\r\n              const config = {\r\n                JWT_SECRET: 'test-secret',\r\n                JWT_EXPIRES_IN: '15m',\r\n                JWT_REFRESH_SECRET: 'test-refresh-secret',\r\n                JWT_REFRESH_EXPIRES_IN: '7d',\r\n              };\r\n              return config[key];\r\n            }),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<AuthService>(AuthService);\r\n    usersService = module.get<UsersService>(UsersService);\r\n    jwtService = module.get<JwtService>(JwtService);\r\n    refreshTokenRepository = module.get<Repository<RefreshToken>>(\r\n      getRepositoryToken(RefreshToken),\r\n    );\r\n    configService = module.get<ConfigService>(ConfigService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('validateUser', () => {\r\n    it('should return user data when credentials are valid', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);\r\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true as never);\r\n\r\n      const result = await service.validateUser(mockUser.email, 'password123');\r\n\r\n      expect(result).toEqual({\r\n        id: mockUser.id,\r\n        email: mockUser.email,\r\n        name: mockUser.name,\r\n        role: mockUser.role,\r\n      });\r\n      expect(usersService.findByEmail).toHaveBeenCalledWith(mockUser.email);\r\n    });\r\n\r\n    it('should return null when user is not found', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);\r\n\r\n      const result = await service.validateUser('nonexistent@test.com', 'password');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should return null when password is invalid', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);\r\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(false as never);\r\n\r\n      const result = await service.validateUser(mockUser.email, 'wrongpassword');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should return null when user is inactive', async () => {\r\n      const inactiveUser = userFactory.inactive();\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(inactiveUser);\r\n\r\n      const result = await service.validateUser(inactiveUser.email, 'password123');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should return access and refresh tokens for valid user', async () => {\r\n      const accessToken = 'access-token';\r\n      const refreshToken = 'refresh-token';\r\n\r\n      jest.spyOn(jwtService, 'sign')\r\n        .mockReturnValueOnce(accessToken)\r\n        .mockReturnValueOnce(refreshToken);\r\n      \r\n      jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken as any);\r\n      jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken as any);\r\n\r\n      const result = await service.login(mockUser);\r\n\r\n      expect(result).toEqual({\r\n        access_token: accessToken,\r\n        refresh_token: refreshToken,\r\n        user: {\r\n          id: mockUser.id,\r\n          email: mockUser.email,\r\n          name: mockUser.name,\r\n          role: mockUser.role,\r\n        },\r\n      });\r\n      expect(jwtService.sign).toHaveBeenCalledTimes(2);\r\n      expect(refreshTokenRepository.save).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should update last login timestamp', async () => {\r\n      jest.spyOn(jwtService, 'sign').mockReturnValue('token');\r\n      jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken as any);\r\n      jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken as any);\r\n      jest.spyOn(usersService, 'update').mockResolvedValue(mockUser);\r\n\r\n      await service.login(mockUser);\r\n\r\n      expect(usersService.update).toHaveBeenCalledWith(\r\n        mockUser.id,\r\n        expect.objectContaining({\r\n          lastLoginAt: expect.any(Date),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('register', () => {\r\n    const registerDto = {\r\n      email: 'newuser@test.com',\r\n      password: 'password123',\r\n      name: 'New User',\r\n      firstName: 'New',\r\n      lastName: 'User',\r\n    };\r\n\r\n    it('should create new user and return tokens', async () => {\r\n      const newUser = userFactory.create({ overrides: registerDto });\r\n      const accessToken = 'access-token';\r\n      const refreshToken = 'refresh-token';\r\n\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);\r\n      jest.spyOn(usersService, 'create').mockResolvedValue(newUser);\r\n      jest.spyOn(jwtService, 'sign')\r\n        .mockReturnValueOnce(accessToken)\r\n        .mockReturnValueOnce(refreshToken);\r\n      jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken as any);\r\n      jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken as any);\r\n\r\n      const result = await service.register(registerDto);\r\n\r\n      expect(result).toEqual({\r\n        access_token: accessToken,\r\n        refresh_token: refreshToken,\r\n        user: expect.objectContaining({\r\n          email: registerDto.email,\r\n          name: registerDto.name,\r\n        }),\r\n      });\r\n      expect(usersService.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          email: registerDto.email,\r\n          name: registerDto.name,\r\n        }),\r\n      );\r\n    });\r\n\r\n    it('should throw error when email already exists', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);\r\n\r\n      await expect(service.register(registerDto)).rejects.toThrow(BadRequestException);\r\n      expect(usersService.create).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('refreshToken', () => {\r\n    it('should return new access token for valid refresh token', async () => {\r\n      const newAccessToken = 'new-access-token';\r\n      \r\n      jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: mockUser.id });\r\n      jest.spyOn(refreshTokenRepository, 'findOne').mockResolvedValue(mockRefreshToken as any);\r\n      jest.spyOn(usersService, 'findById').mockResolvedValue(mockUser);\r\n      jest.spyOn(jwtService, 'sign').mockReturnValue(newAccessToken);\r\n\r\n      const result = await service.refreshToken('refresh-token');\r\n\r\n      expect(result).toEqual({\r\n        access_token: newAccessToken,\r\n      });\r\n      expect(jwtService.verify).toHaveBeenCalledWith('refresh-token', {\r\n        secret: 'test-refresh-secret',\r\n      });\r\n    });\r\n\r\n    it('should throw error for invalid refresh token', async () => {\r\n      jest.spyOn(jwtService, 'verify').mockImplementation(() => {\r\n        throw new Error('Invalid token');\r\n      });\r\n\r\n      await expect(service.refreshToken('invalid-token')).rejects.toThrow(UnauthorizedException);\r\n    });\r\n\r\n    it('should throw error for expired refresh token', async () => {\r\n      const expiredToken = {\r\n        ...mockRefreshToken,\r\n        expiresAt: new Date(Date.now() - 1000),\r\n      };\r\n\r\n      jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: mockUser.id });\r\n      jest.spyOn(refreshTokenRepository, 'findOne').mockResolvedValue(expiredToken as any);\r\n\r\n      await expect(service.refreshToken('expired-token')).rejects.toThrow(UnauthorizedException);\r\n    });\r\n  });\r\n\r\n  describe('logout', () => {\r\n    it('should delete refresh token', async () => {\r\n      jest.spyOn(refreshTokenRepository, 'delete').mockResolvedValue({ affected: 1 } as any);\r\n\r\n      await service.logout('refresh-token');\r\n\r\n      expect(refreshTokenRepository.delete).toHaveBeenCalledWith({\r\n        token: 'refresh-token',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('forgotPassword', () => {\r\n    it('should generate reset token for existing user', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);\r\n      jest.spyOn(usersService, 'update').mockResolvedValue(mockUser);\r\n\r\n      await service.forgotPassword(mockUser.email);\r\n\r\n      expect(usersService.update).toHaveBeenCalledWith(\r\n        mockUser.id,\r\n        expect.objectContaining({\r\n          passwordResetToken: expect.any(String),\r\n          passwordResetExpires: expect.any(Date),\r\n        }),\r\n      );\r\n    });\r\n\r\n    it('should not throw error for non-existent email', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);\r\n\r\n      await expect(service.forgotPassword('nonexistent@test.com')).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('resetPassword', () => {\r\n    it('should reset password with valid token', async () => {\r\n      const userWithResetToken = userFactory.withTrait('withResetToken');\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(userWithResetToken);\r\n      jest.spyOn(usersService, 'update').mockResolvedValue(userWithResetToken);\r\n\r\n      await service.resetPassword('reset-token', 'newpassword123');\r\n\r\n      expect(usersService.update).toHaveBeenCalledWith(\r\n        userWithResetToken.id,\r\n        expect.objectContaining({\r\n          password: expect.any(String),\r\n          passwordResetToken: null,\r\n          passwordResetExpires: null,\r\n        }),\r\n      );\r\n    });\r\n\r\n    it('should throw error for invalid reset token', async () => {\r\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);\r\n\r\n      await expect(service.resetPassword('invalid-token', 'newpassword')).rejects.toThrow(\r\n        BadRequestException,\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"version":3}