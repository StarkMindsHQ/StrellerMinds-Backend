{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup-retention.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup-retention.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\n@Injectable()\r\nexport class BackupRetentionService {\r\n  private readonly logger = new Logger(BackupRetentionService.name);\r\n  private readonly backupDir: string;\r\n  private readonly retentionDays: number;\r\n  private readonly monthlyRetentionMonths: number;\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    this.backupDir = this.configService.get<string>('BACKUP_DIR', './backups');\r\n    this.retentionDays = this.configService.get<number>(\r\n      'BACKUP_RETENTION_DAYS',\r\n      30,\r\n    );\r\n    this.monthlyRetentionMonths = this.configService.get<number>(\r\n      'BACKUP_MONTHLY_RETENTION_MONTHS',\r\n      12,\r\n    );\r\n  }\r\n\r\n  async cleanupOldBackups(): Promise<void> {\r\n    try {\r\n      const files = await fs.readdir(this.backupDir);\r\n      const backupFiles = files.filter(\r\n        (file) => file.endsWith('.sql') || file.endsWith('.tar.gz'),\r\n      );\r\n\r\n      const now = new Date();\r\n      const cutoffDate = new Date(\r\n        now.getTime() - this.retentionDays * 24 * 60 * 60 * 1000,\r\n      );\r\n      const monthlyCutoffDate = new Date(\r\n        now.getTime() - this.monthlyRetentionMonths * 30 * 24 * 60 * 60 * 1000,\r\n      );\r\n\r\n      let deletedCount = 0;\r\n      let preservedCount = 0;\r\n\r\n      for (const file of backupFiles) {\r\n        const filePath = path.join(this.backupDir, file);\r\n        const stats = await fs.stat(filePath);\r\n        const fileDate = stats.birthtime;\r\n\r\n        // Keep monthly backups (first backup of each month) for longer\r\n        const isMonthlyBackup = this.isFirstBackupOfMonth(file, backupFiles);\r\n\r\n        if (isMonthlyBackup && fileDate > monthlyCutoffDate) {\r\n          preservedCount++;\r\n          continue;\r\n        }\r\n\r\n        if (fileDate < cutoffDate) {\r\n          await fs.unlink(filePath);\r\n          this.logger.log(`Deleted old backup: ${file}`);\r\n          deletedCount++;\r\n        } else {\r\n          preservedCount++;\r\n        }\r\n      }\r\n\r\n      this.logger.log(\r\n        `Backup cleanup completed: ${deletedCount} deleted, ${preservedCount} preserved`,\r\n      );\r\n    } catch (error) {\r\n      this.logger.error(`Backup cleanup failed: ${error.message}`, error.stack);\r\n    }\r\n  }\r\n\r\n  private isFirstBackupOfMonth(filename: string, allFiles: string[]): boolean {\r\n    // Extract date from filename (assuming format: db-backup-YYYY-MM-DDTHH-MM-SS.sql)\r\n    const dateMatch = filename.match(/(\\d{4}-\\d{2}-\\d{2})/);\r\n    if (!dateMatch) return false;\r\n\r\n    const fileDate = dateMatch[1];\r\n    const yearMonth = fileDate.substring(0, 7); // YYYY-MM\r\n\r\n    // Check if this is the first backup file for this month\r\n    const monthFiles = allFiles.filter((f) => f.includes(yearMonth)).sort();\r\n\r\n    return monthFiles[0] === filename;\r\n  }\r\n}\r\n"],"version":3}