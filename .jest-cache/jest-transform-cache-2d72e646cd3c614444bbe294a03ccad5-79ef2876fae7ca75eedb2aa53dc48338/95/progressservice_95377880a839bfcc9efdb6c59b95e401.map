{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\progress\\progress.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAA2F;AAC3F,sFAAkF;AAClF,4EAAwE;AACxE,+DAAqD;AACrD,qCAAqC;AACrC,6CAAmD;AAEnD;;GAEG;AAGI,IAAM,eAAe,uBAArB,MAAM,eAAe;IAIxB,YACkD,kBAAuD,EAC5D,aAA6C,EAC9D,cAAiD;QAFV,uBAAkB,GAAlB,kBAAkB,CAAoB;QAC3C,kBAAa,GAAb,aAAa,CAAe;QAC7C,mBAAc,GAAd,cAAc,CAAkB;QANrE,iBAAY,GAAG,IAAI,GAAG,EAAuB,CAAC;QACrC,WAAM,GAAG,IAAI,eAAM,CAAC,iBAAe,CAAC,IAAI,CAAC,CAAC;IAMxD,CAAC;IAEF;;;;KAIC;IAEH,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,QAAgB;QAEjD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE5C,4DAA4D;QAC5D,IAAI,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACzE,IAAI,CAAC,IAAI;gBAAE,MAAM,IAAI,0BAAiB,CAAC,gBAAgB,CAAC,CAAC;YACzD,yDAAyD;YACzD,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACzD,kDAAkD;YAClD,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9E,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,uBAAuB,CAAC,MAAc,EAAE,YAAoB;QACxD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC;YAAE,OAAO,CAAC,CAAC;QAC7C,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC,GAAG,GAAG,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACH,eAAe,CAAC,MAAc,EAAE,YAAoB;QAChD,OAAO;YACH,MAAM;YACN,gBAAgB,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACjE,oBAAoB,EAAE,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,YAAY,CAAC;SAC3E,CAAC;IACN,CAAC;CACJ,CAAA;AA5DY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAMJ,WAAA,IAAA,eAAM,EAAC,IAAA,mBAAU,EAAC,GAAG,EAAE,CAAC,wCAAkB,CAAC,CAAC,CAAA;IAC5C,WAAA,IAAA,eAAM,EAAC,IAAA,mBAAU,EAAC,GAAG,EAAE,CAAC,8BAAa,CAAC,CAAC,CAAA;IACvC,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;yDAF4D,wCAAkB,oBAAlB,wCAAkB,oDAC5B,8BAAa,oBAAb,8BAAa,oDAC7B,oBAAU,oBAAV,oBAAU;GAP9D,eAAe,CA4D3B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\progress\\progress.service.ts"],"sourcesContent":["import { Injectable, Inject, forwardRef, Logger, NotFoundException } from '@nestjs/common';\r\nimport { AchievementService } from '../gamification/services/achievement.service';\r\nimport { RewardService } from '../gamification/services/reward.service';\r\nimport { User } from '../users/entities/user.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\n\r\n/**\r\n * Service for tracking and calculating user lesson progress.\r\n */\r\n\r\n@Injectable()\r\nexport class ProgressService {\r\n    private userProgress = new Map<number, Set<number>>();\r\n    private readonly logger = new Logger(ProgressService.name);\r\n\r\n    constructor(\r\n        @Inject(forwardRef(() => AchievementService)) private readonly achievementService: AchievementService,\r\n        @Inject(forwardRef(() => RewardService)) private readonly rewardService: RewardService,\r\n        @InjectRepository(User) private readonly userRepository: Repository<User>,\r\n    ) {}\r\n    \r\n      /**\r\n     * Mark a lesson as completed for a user.\r\n     * @param userId - The ID of the user.\r\n     * @param lessonId - The ID of the lesson to be marked as completed.\r\n     */\r\n  \r\n    async completeLesson(userId: number, lessonId: number) {\r\n\r\n        if (!this.userProgress.has(userId)) {\r\n            this.userProgress.set(userId, new Set());\r\n        }\r\n        this.userProgress.get(userId).add(lessonId);\r\n\r\n        // Gamification logic: unlock achievements and grant rewards\r\n        try {\r\n            const user = await this.userRepository.findOneBy({ id: String(userId) });\r\n            if (!user) throw new NotFoundException('User not found');\r\n            // Example: unlock an achievement for completing a lesson\r\n            await this.achievementService.unlockAchievement(user, 1); \r\n            // Example: grant a reward for completing a lesson\r\n            await this.rewardService.grantReward(user, 1); \r\n        } catch (error) {\r\n            this.logger.error('Gamification error on lesson completion', error.stack);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the completion percentage of lessons for a user.\r\n     * @param userId - The ID of the user.\r\n     * @param totalLessons - The total number of lessons available.\r\n     * @returns The completion percentage as a number.\r\n     */\r\n    getCompletionPercentage(userId: number, totalLessons: number): number {\r\n        if (!this.userProgress.has(userId)) return 0;\r\n        return (this.userProgress.get(userId).size / totalLessons) * 100;\r\n    }\r\n\r\n    /**\r\n     * Get the progress data for a user, including completed lessons and completion percentage.\r\n     * @param userId - The ID of the user.\r\n     * @param totalLessons - The total number of lessons available.\r\n     * @returns An object containing the user's ID, an array of completed lessons, and the completion percentage.\r\n     */\r\n    getProgressData(userId: number, totalLessons: number) {\r\n        return {\r\n            userId,\r\n            completedLessons: Array.from(this.userProgress.get(userId) || []),\r\n            completionPercentage: this.getCompletionPercentage(userId, totalLessons),\r\n        };\r\n    }\r\n}\r\n"],"version":3}