{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\services\\offline-sync.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\services\\offline-sync.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\n\r\nimport type { OfflineSync, SyncStatus, SyncOperation } from \"../entities/offline-sync.entity\"\r\n\r\nexport interface CreateSyncJobDto {\r\n  userId?: string\r\n  operation: SyncOperation\r\n  entityType: string\r\n  entityId?: string\r\n  data: any\r\n  metadata?: any\r\n  priority?: number\r\n}\r\n\r\nexport interface SyncResult {\r\n  success: boolean\r\n  data?: any\r\n  error?: string\r\n}\r\n\r\n@Injectable()\r\nexport class OfflineSyncService {\r\n  private readonly logger = new Logger(\"OfflineSyncService\")\r\n\r\n  constructor(\r\n    private readonly syncRepository: Repository<OfflineSync>,\r\n    private readonly syncQueue: Queue,\r\n  ) {}\r\n\r\n  async createSyncJob(dto: CreateSyncJobDto): Promise<OfflineSync> {\r\n    try {\r\n      const syncJob = this.syncRepository.create({\r\n        userId: dto.userId,\r\n        operation: dto.operation,\r\n        entityType: dto.entityType,\r\n        entityId: dto.entityId,\r\n        data: dto.data,\r\n        metadata: {\r\n          clientTimestamp: new Date(),\r\n          ...dto.metadata,\r\n        },\r\n        priority: dto.priority || 5,\r\n        status: \"pending\",\r\n      })\r\n\r\n      const saved = await this.syncRepository.save(syncJob)\r\n\r\n      // Queue for processing\r\n      await this.syncQueue.add(\r\n        \"process-sync\",\r\n        { syncJobId: saved.id },\r\n        {\r\n          priority: saved.priority,\r\n          attempts: saved.maxRetries,\r\n          backoff: {\r\n            type: \"exponential\",\r\n            delay: 2000,\r\n          },\r\n        },\r\n      )\r\n\r\n      this.logger.log(`Created sync job: ${saved.id} for ${dto.entityType}`)\r\n\r\n      return saved\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create sync job: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async batchCreateSyncJobs(jobs: CreateSyncJobDto[]): Promise<OfflineSync[]> {\r\n    try {\r\n      const syncJobs = jobs.map((dto) =>\r\n        this.syncRepository.create({\r\n          userId: dto.userId,\r\n          operation: dto.operation,\r\n          entityType: dto.entityType,\r\n          entityId: dto.entityId,\r\n          data: dto.data,\r\n          metadata: {\r\n            clientTimestamp: new Date(),\r\n            ...dto.metadata,\r\n          },\r\n          priority: dto.priority || 5,\r\n          status: \"pending\",\r\n        }),\r\n      )\r\n\r\n      const saved = await this.syncRepository.save(syncJobs)\r\n\r\n      // Queue all jobs for processing\r\n      const queueJobs = saved.map((job) => ({\r\n        name: \"process-sync\",\r\n        data: { syncJobId: job.id },\r\n        opts: {\r\n          priority: job.priority,\r\n          attempts: job.maxRetries,\r\n          backoff: {\r\n            type: \"exponential\",\r\n            delay: 2000,\r\n          },\r\n        },\r\n      }))\r\n\r\n      await this.syncQueue.addBulk(queueJobs)\r\n\r\n      this.logger.log(`Created ${saved.length} sync jobs`)\r\n\r\n      return saved\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create batch sync jobs: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async updateSyncJobStatus(id: string, status: SyncStatus, result?: SyncResult, errorMessage?: string): Promise<void> {\r\n    try {\r\n      const updates: Partial<OfflineSync> = {\r\n        status,\r\n        processedAt: status === \"completed\" || status === \"failed\" ? new Date() : undefined,\r\n        result: result?.data,\r\n        errorMessage: errorMessage || result?.error,\r\n      }\r\n\r\n      if (status === \"failed\") {\r\n        const syncJob = await this.syncRepository.findOne({ where: { id } })\r\n        if (syncJob) {\r\n          updates.retryCount = syncJob.retryCount + 1\r\n          if (syncJob.retryCount < syncJob.maxRetries) {\r\n            updates.status = \"pending\"\r\n            updates.nextRetryAt = new Date(Date.now() + Math.pow(2, syncJob.retryCount) * 1000)\r\n          }\r\n        }\r\n      }\r\n\r\n      await this.syncRepository.update(id, updates)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to update sync job status: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getSyncJobs(filters: {\r\n    userId?: string\r\n    status?: SyncStatus\r\n    entityType?: string\r\n    limit?: number\r\n    offset?: number\r\n  }): Promise<{ jobs: OfflineSync[]; total: number }> {\r\n    const query = this.syncRepository.createQueryBuilder(\"sync\")\r\n\r\n    if (filters.userId) {\r\n      query.andWhere(\"sync.userId = :userId\", { userId: filters.userId })\r\n    }\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"sync.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.entityType) {\r\n      query.andWhere(\"sync.entityType = :entityType\", { entityType: filters.entityType })\r\n    }\r\n\r\n    query.orderBy(\"sync.priority\", \"DESC\").addOrderBy(\"sync.createdAt\", \"ASC\")\r\n\r\n    if (filters.limit) {\r\n      query.limit(filters.limit)\r\n    }\r\n\r\n    if (filters.offset) {\r\n      query.offset(filters.offset)\r\n    }\r\n\r\n    const [jobs, total] = await query.getManyAndCount()\r\n\r\n    return { jobs, total }\r\n  }\r\n\r\n  async getPendingSyncJobs(limit = 100): Promise<OfflineSync[]> {\r\n    return await this.syncRepository.find({\r\n      where: [\r\n        { status: \"pending\" },\r\n        {\r\n          status: \"failed\",\r\n          nextRetryAt: { $lte: new Date() } as any,\r\n        },\r\n      ],\r\n      order: {\r\n        priority: \"DESC\",\r\n        createdAt: \"ASC\",\r\n      },\r\n      take: limit,\r\n    })\r\n  }\r\n\r\n  async getSyncStats(): Promise<{\r\n    total: number\r\n    byStatus: Record<SyncStatus, number>\r\n    byEntityType: Record<string, number>\r\n    avgProcessingTime: number\r\n  }> {\r\n    const total = await this.syncRepository.count()\r\n\r\n    const statusStats = await this.syncRepository\r\n      .createQueryBuilder(\"sync\")\r\n      .select(\"sync.status\", \"status\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .groupBy(\"sync.status\")\r\n      .getRawMany()\r\n\r\n    const entityTypeStats = await this.syncRepository\r\n      .createQueryBuilder(\"sync\")\r\n      .select(\"sync.entityType\", \"entityType\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .groupBy(\"sync.entityType\")\r\n      .getRawMany()\r\n\r\n    const avgProcessingTimeResult = await this.syncRepository\r\n      .createQueryBuilder(\"sync\")\r\n      .select(\"AVG(EXTRACT(EPOCH FROM (sync.processedAt - sync.createdAt)))\", \"avgTime\")\r\n      .where(\"sync.processedAt IS NOT NULL\")\r\n      .getRawOne()\r\n\r\n    const byStatus = statusStats.reduce(\r\n      (acc, stat) => {\r\n        acc[stat.status as SyncStatus] = Number.parseInt(stat.count)\r\n        return acc\r\n      },\r\n      {} as Record<SyncStatus, number>,\r\n    )\r\n\r\n    const byEntityType = entityTypeStats.reduce((acc, stat) => {\r\n      acc[stat.entityType] = Number.parseInt(stat.count)\r\n      return acc\r\n    }, {})\r\n\r\n    return {\r\n      total,\r\n      byStatus,\r\n      byEntityType,\r\n      avgProcessingTime: Number.parseFloat(avgProcessingTimeResult?.avgTime || \"0\"),\r\n    }\r\n  }\r\n\r\n  async cleanupOldJobs(olderThanDays = 30): Promise<number> {\r\n    const cutoffDate = new Date()\r\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays)\r\n\r\n    const result = await this.syncRepository.delete({\r\n      status: { $in: [\"completed\", \"cancelled\"] } as any,\r\n      processedAt: { $lt: cutoffDate } as any,\r\n    })\r\n\r\n    this.logger.log(`Cleaned up ${result.affected} old sync jobs`)\r\n\r\n    return result.affected || 0\r\n  }\r\n}\r\n"],"version":3}