{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\logger.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\logger.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { LoggerService } from './logger.service';\r\n\r\ndescribe('LoggerService', () => {\r\n  let service: LoggerService;\r\n  let configService: ConfigService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        LoggerService,\r\n        {\r\n          provide: ConfigService,\r\n          useValue: {\r\n            get: jest.fn((key: string, defaultValue?: any) => {\r\n              const config = {\r\n                LOG_LEVEL: 'info',\r\n                LOG_FORMAT: 'json',\r\n                LOG_FILE_ENABLED: true,\r\n                LOG_CONSOLE_ENABLED: true,\r\n                NODE_ENV: 'test',\r\n                APP_NAME: 'test-app',\r\n                APP_VERSION: '1.0.0',\r\n              };\r\n              return config[key] || defaultValue;\r\n            }),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<LoggerService>(LoggerService);\r\n    configService = module.get<ConfigService>(ConfigService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  it('should set context', () => {\r\n    service.setContext('TestContext');\r\n    expect(service['context']).toBe('TestContext');\r\n  });\r\n\r\n  it('should log debug message', () => {\r\n    const logSpy = jest.spyOn(service['logger'], 'log');\r\n    service.debug('Test debug message', { correlationId: 'test-123' });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'debug',\r\n      'Test debug message',\r\n      expect.objectContaining({\r\n        correlationId: 'test-123',\r\n        context: 'Application',\r\n        environment: 'test',\r\n        service: 'test-app',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should log error with context', () => {\r\n    const logSpy = jest.spyOn(service['logger'], 'log');\r\n    const error = new Error('Test error');\r\n    \r\n    service.logError(error, {\r\n      correlationId: 'test-123',\r\n      userId: 'user-456',\r\n    });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'error',\r\n      'Test error',\r\n      expect.objectContaining({\r\n        correlationId: 'test-123',\r\n        userId: 'user-456',\r\n        type: 'error',\r\n        errorType: 'Error',\r\n        stack: expect.any(String),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should create child logger with additional context', () => {\r\n    const childLogger = service.child({ userId: 'user-123' });\r\n    expect(childLogger).toBeInstanceOf(LoggerService);\r\n  });\r\n\r\n  it('should sanitize database queries', () => {\r\n    const query = \"SELECT * FROM users WHERE password='secret123' AND token='abc123'\";\r\n    const sanitized = service['sanitizeQuery'](query);\r\n    \r\n    expect(sanitized).toContain(\"password='***'\");\r\n    expect(sanitized).toContain(\"token='***'\");\r\n    expect(sanitized).not.toContain('secret123');\r\n    expect(sanitized).not.toContain('abc123');\r\n  });\r\n\r\n  it('should log performance with appropriate level', () => {\r\n    const logSpy = jest.spyOn(service['logger'], 'log');\r\n    \r\n    // Fast request\r\n    service.logPerformance('Fast request', {\r\n      correlationId: 'test-123',\r\n      duration: 100,\r\n    });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'info',\r\n      'Fast request',\r\n      expect.objectContaining({\r\n        duration: 100,\r\n        type: 'performance',\r\n      })\r\n    );\r\n\r\n    // Slow request\r\n    service.logPerformance('Slow request', {\r\n      correlationId: 'test-456',\r\n      duration: 6000,\r\n    });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'warn',\r\n      'Slow request',\r\n      expect.objectContaining({\r\n        duration: 6000,\r\n        type: 'performance',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should log business events', () => {\r\n    const logSpy = jest.spyOn(service['logger'], 'log');\r\n    \r\n    service.logBusinessEvent('User registered', {\r\n      correlationId: 'test-123',\r\n      userId: 'user-456',\r\n    });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'info',\r\n      'User registered',\r\n      expect.objectContaining({\r\n        type: 'business_event',\r\n        correlationId: 'test-123',\r\n        userId: 'user-456',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should log security events with high severity', () => {\r\n    const logSpy = jest.spyOn(service['logger'], 'log');\r\n    \r\n    service.logSecurityEvent('Failed login attempt', {\r\n      correlationId: 'test-123',\r\n      ip: '192.168.1.1',\r\n    });\r\n    \r\n    expect(logSpy).toHaveBeenCalledWith(\r\n      'warn',\r\n      'Failed login attempt',\r\n      expect.objectContaining({\r\n        type: 'security_event',\r\n        severity: 'high',\r\n        correlationId: 'test-123',\r\n        ip: '192.168.1.1',\r\n      })\r\n    );\r\n  });\r\n});\r\n"],"version":3}