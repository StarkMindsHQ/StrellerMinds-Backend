{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\interceptors\\search-analytics.interceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\interceptors\\search-analytics.interceptor.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport type { ExecutionContext, CallHandler } from \"@nestjs/common\"\r\nimport { of } from \"rxjs\"\r\nimport { SearchAnalyticsInterceptor } from \"./search-analytics.interceptor\"\r\nimport { SearchService } from \"../search.service\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\ndescribe(\"SearchAnalyticsInterceptor\", () => {\r\n  let interceptor: SearchAnalyticsInterceptor\r\n  let searchService: SearchService\r\n\r\n  const mockSearchService = {\r\n    trackSearchAnalytics: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        SearchAnalyticsInterceptor,\r\n        {\r\n          provide: SearchService,\r\n          useValue: mockSearchService,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    interceptor = module.get<SearchAnalyticsInterceptor>(SearchAnalyticsInterceptor)\r\n    searchService = module.get<SearchService>(SearchService)\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(interceptor).toBeDefined()\r\n  })\r\n\r\n  it(\"should track search analytics for search requests\", async () => {\r\n    const mockExecutionContext = {\r\n      switchToHttp: () => ({\r\n        getRequest: () => ({\r\n          method: \"POST\",\r\n          url: \"/search\",\r\n          body: { query: \"stellar blockchain\" },\r\n          user: { id: \"user123\" },\r\n        }),\r\n      }),\r\n    } as ExecutionContext\r\n\r\n    const mockCallHandler = {\r\n      handle: () => of({ courses: [], total: 5 }),\r\n    } as CallHandler\r\n\r\n    mockSearchService.trackSearchAnalytics.mockResolvedValue(undefined)\r\n\r\n    const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise()\r\n\r\n    expect(result).toEqual({ courses: [], total: 5 })\r\n    expect(mockSearchService.trackSearchAnalytics).toHaveBeenCalledWith({\r\n      query: \"stellar blockchain\",\r\n      userId: \"user123\",\r\n      resultsCount: 5,\r\n      endpoint: \"/search\",\r\n    })\r\n  })\r\n\r\n  it(\"should not track analytics for non-search requests\", async () => {\r\n    const mockExecutionContext = {\r\n      switchToHttp: () => ({\r\n        getRequest: () => ({\r\n          method: \"GET\",\r\n          url: \"/courses\",\r\n          user: { id: \"user123\" },\r\n        }),\r\n      }),\r\n    } as ExecutionContext\r\n\r\n    const mockCallHandler = {\r\n      handle: () => of({ courses: [] }),\r\n    } as CallHandler\r\n\r\n    const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise()\r\n\r\n    expect(result).toEqual({ courses: [] })\r\n    expect(mockSearchService.trackSearchAnalytics).not.toHaveBeenCalled()\r\n  })\r\n\r\n  it(\"should handle anonymous users\", async () => {\r\n    const mockExecutionContext = {\r\n      switchToHttp: () => ({\r\n        getRequest: () => ({\r\n          method: \"POST\",\r\n          url: \"/search\",\r\n          body: { query: \"stellar\" },\r\n          user: null,\r\n        }),\r\n      }),\r\n    } as ExecutionContext\r\n\r\n    const mockCallHandler = {\r\n      handle: () => of({ courses: [], total: 3 }),\r\n    } as CallHandler\r\n\r\n    const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise()\r\n\r\n    expect(mockSearchService.trackSearchAnalytics).toHaveBeenCalledWith({\r\n      query: \"stellar\",\r\n      userId: null,\r\n      resultsCount: 3,\r\n      endpoint: \"/search\",\r\n    })\r\n  })\r\n\r\n  it(\"should handle errors gracefully\", async () => {\r\n    const mockExecutionContext = {\r\n      switchToHttp: () => ({\r\n        getRequest: () => ({\r\n          method: \"POST\",\r\n          url: \"/search\",\r\n          body: { query: \"stellar\" },\r\n          user: { id: \"user123\" },\r\n        }),\r\n      }),\r\n    } as ExecutionContext\r\n\r\n    const mockCallHandler = {\r\n      handle: () => of({ courses: [], total: 2 }),\r\n    } as CallHandler\r\n\r\n    mockSearchService.trackSearchAnalytics.mockRejectedValue(new Error(\"Analytics error\"))\r\n\r\n    const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise()\r\n\r\n    expect(result).toEqual({ courses: [], total: 2 })\r\n    // Should not throw error even if analytics tracking fails\r\n  })\r\n})\r\n"],"version":3}