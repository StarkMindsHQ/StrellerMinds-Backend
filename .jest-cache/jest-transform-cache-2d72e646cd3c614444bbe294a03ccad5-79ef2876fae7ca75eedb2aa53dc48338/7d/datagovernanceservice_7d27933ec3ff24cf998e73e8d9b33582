47928bc092251e7b30d34e17de3dd56d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataGovernanceService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGovernanceService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
const data_governance_policy_entity_1 = require("../entities/data-governance-policy.entity");
let DataGovernanceService = DataGovernanceService_1 = class DataGovernanceService {
    constructor(policyRepository, lineageRepository) {
        this.policyRepository = policyRepository;
        this.lineageRepository = lineageRepository;
        this.logger = new common_1.Logger(DataGovernanceService_1.name);
    }
    async createPolicy(policyData) {
        const policy = this.policyRepository.create(policyData);
        return this.policyRepository.save(policy);
    }
    async updatePolicy(id, updates) {
        await this.policyRepository.update(id, updates);
        const policy = await this.policyRepository.findOne({ where: { id } });
        if (!policy) {
            throw new Error(`Policy with id ${id} not found`);
        }
        return policy;
    }
    async activatePolicy(id) {
        await this.policyRepository.update(id, {
            status: data_governance_policy_entity_1.PolicyStatus.ACTIVE,
            effectiveDate: new Date(),
        });
    }
    async deactivatePolicy(id) {
        await this.policyRepository.update(id, { status: data_governance_policy_entity_1.PolicyStatus.INACTIVE });
    }
    async getPolicies(filters) {
        const query = this.policyRepository.createQueryBuilder("policy");
        if (filters.policyType) {
            query.andWhere("policy.policyType = :policyType", { policyType: filters.policyType });
        }
        if (filters.status) {
            query.andWhere("policy.status = :status", { status: filters.status });
        }
        if (filters.entityType) {
            query.andWhere("policy.entityType = :entityType", { entityType: filters.entityType });
        }
        return query.orderBy("policy.createdAt", "DESC").getMany();
    }
    async checkPolicyCompliance(entityType, data) {
        const policies = await this.getPolicies({
            entityType,
            status: data_governance_policy_entity_1.PolicyStatus.ACTIVE,
        });
        const violations = [];
        for (const policy of policies) {
            const policyViolations = await this.validatePolicy(policy, data);
            violations.push(...policyViolations);
        }
        return {
            compliant: violations.length === 0,
            violations,
        };
    }
    async validatePolicy(policy, data) {
        const violations = [];
        switch (policy.policyType) {
            case "data_retention":
                const retentionViolations = this.checkRetentionPolicy(policy, data);
                violations.push(...retentionViolations.map((v) => ({
                    policyId: policy.id,
                    policyName: policy.name,
                    violation: v,
                    severity: "medium",
                })));
                break;
            case "data_access":
                const accessViolations = this.checkAccessPolicy(policy, data);
                violations.push(...accessViolations.map((v) => ({
                    policyId: policy.id,
                    policyName: policy.name,
                    violation: v,
                    severity: "high",
                })));
                break;
            case "data_classification":
                const classificationViolations = this.checkClassificationPolicy(policy, data);
                violations.push(...classificationViolations.map((v) => ({
                    policyId: policy.id,
                    policyName: policy.name,
                    violation: v,
                    severity: "medium",
                })));
                break;
            case "data_privacy":
                const privacyViolations = this.checkPrivacyPolicy(policy, data);
                violations.push(...privacyViolations.map((v) => ({
                    policyId: policy.id,
                    policyName: policy.name,
                    violation: v,
                    severity: "critical",
                })));
                break;
        }
        return violations;
    }
    checkRetentionPolicy(policy, data) {
        const violations = [];
        const retentionDays = policy.rules.retentionDays;
        const dateField = policy.rules.dateField || "createdAt";
        if (retentionDays) {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            const expiredRecords = data.filter((item) => {
                const recordDate = new Date(item[dateField]);
                return recordDate < cutoffDate;
            });
            if (expiredRecords.length > 0) {
                violations.push(`${expiredRecords.length} records exceed retention period of ${retentionDays} days`);
            }
        }
        return violations;
    }
    checkAccessPolicy(policy, data) {
        const violations = [];
        const allowedRoles = policy.rules.allowedRoles || [];
        const sensitiveFields = policy.rules.sensitiveFields || [];
        // This would typically check against actual access logs
        // For now, we'll check if sensitive fields are properly protected
        for (const item of data) {
            for (const field of sensitiveFields) {
                if (item[field] && !item[`${field}_encrypted`]) {
                    violations.push(`Sensitive field ${field} is not encrypted`);
                    break;
                }
            }
        }
        return violations;
    }
    checkClassificationPolicy(policy, data) {
        const violations = [];
        const requiredClassification = policy.rules.requiredClassification;
        const classificationField = policy.rules.classificationField || "dataClassification";
        if (requiredClassification) {
            const unclassifiedRecords = data.filter((item) => !item[classificationField] || !requiredClassification.includes(item[classificationField]));
            if (unclassifiedRecords.length > 0) {
                violations.push(`${unclassifiedRecords.length} records lack proper data classification`);
            }
        }
        return violations;
    }
    checkPrivacyPolicy(policy, data) {
        const violations = [];
        const piiFields = policy.rules.piiFields || [];
        const consentRequired = policy.rules.consentRequired || false;
        for (const item of data) {
            // Check for PII without proper handling
            for (const field of piiFields) {
                if (item[field] && !item[`${field}_anonymized`] && !item[`${field}_encrypted`]) {
                    violations.push(`PII field ${field} is not properly protected`);
                    break;
                }
            }
            // Check for consent
            if (consentRequired && !item.consentGiven) {
                violations.push("Record processed without required consent");
                break;
            }
        }
        return violations;
    }
    async recordLineage(lineageData) {
        const lineage = this.lineageRepository.create(lineageData);
        return this.lineageRepository.save(lineage);
    }
    async getLineage(entityName) {
        const upstream = await this.lineageRepository.find({
            where: { targetEntity: entityName, isActive: true },
            order: { createdAt: "DESC" },
        });
        const downstream = await this.lineageRepository.find({
            where: { sourceEntity: entityName, isActive: true },
            order: { createdAt: "DESC" },
        });
        return { upstream, downstream };
    }
    async generateGovernanceReport() {
        const totalPolicies = await this.policyRepository.count();
        const activePolicies = await this.policyRepository.count({
            where: { status: data_governance_policy_entity_1.PolicyStatus.ACTIVE },
        });
        const totalLineage = await this.lineageRepository.count({ where: { isActive: true } });
        const uniqueEntities = await this.lineageRepository
            .createQueryBuilder("lineage")
            .select("DISTINCT lineage.sourceEntity")
            .addSelect("DISTINCT lineage.targetEntity")
            .where("lineage.isActive = :isActive", { isActive: true })
            .getRawMany();
        const recommendations = [];
        if (activePolicies < totalPolicies * 0.8) {
            recommendations.push("Consider activating more governance policies");
        }
        if (totalLineage < uniqueEntities.length * 2) {
            recommendations.push("Improve data lineage documentation");
        }
        return {
            policyCompliance: {
                total: totalPolicies,
                compliant: activePolicies,
                nonCompliant: totalPolicies - activePolicies,
                rate: totalPolicies > 0 ? (activePolicies / totalPolicies) * 100 : 100,
            },
            dataLineage: {
                entities: uniqueEntities.length,
                relationships: totalLineage,
                orphaned: 0, // Would need more complex query
            },
            recommendations,
        };
    }
    async reviewPolicies() {
        this.logger.log("Starting daily policy review");
        const policies = await this.policyRepository.find({
            where: { status: data_governance_policy_entity_1.PolicyStatus.ACTIVE },
        });
        for (const policy of policies) {
            // Check if policy needs review
            if (policy.reviewDate && policy.reviewDate <= new Date()) {
                this.logger.log(`Policy ${policy.name} is due for review`);
                // Could send notifications or create tasks here
            }
            // Check if policy has expired
            if (policy.expirationDate && policy.expirationDate <= new Date()) {
                await this.policyRepository.update(policy.id, {
                    status: data_governance_policy_entity_1.PolicyStatus.INACTIVE,
                });
                this.logger.log(`Policy ${policy.name} has been deactivated due to expiration`);
            }
        }
    }
};
exports.DataGovernanceService = DataGovernanceService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], DataGovernanceService.prototype, "reviewPolicies", null);
exports.DataGovernanceService = DataGovernanceService = DataGovernanceService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], DataGovernanceService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,