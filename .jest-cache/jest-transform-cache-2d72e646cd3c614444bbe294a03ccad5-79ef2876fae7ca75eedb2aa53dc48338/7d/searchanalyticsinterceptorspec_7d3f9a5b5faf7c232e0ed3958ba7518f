e94843c9673e8379122adf5361fc0e03
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const rxjs_1 = require("rxjs");
const search_analytics_interceptor_1 = require("./search-analytics.interceptor");
const search_service_1 = require("../search.service");
describe("SearchAnalyticsInterceptor", () => {
    let interceptor;
    let searchService;
    const mockSearchService = {
        trackSearchAnalytics: globals_1.jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                search_analytics_interceptor_1.SearchAnalyticsInterceptor,
                {
                    provide: search_service_1.SearchService,
                    useValue: mockSearchService,
                },
            ],
        }).compile();
        interceptor = module.get(search_analytics_interceptor_1.SearchAnalyticsInterceptor);
        searchService = module.get(search_service_1.SearchService);
    });
    afterEach(() => {
        globals_1.jest.clearAllMocks();
    });
    it("should be defined", () => {
        expect(interceptor).toBeDefined();
    });
    it("should track search analytics for search requests", async () => {
        const mockExecutionContext = {
            switchToHttp: () => ({
                getRequest: () => ({
                    method: "POST",
                    url: "/search",
                    body: { query: "stellar blockchain" },
                    user: { id: "user123" },
                }),
            }),
        };
        const mockCallHandler = {
            handle: () => (0, rxjs_1.of)({ courses: [], total: 5 }),
        };
        mockSearchService.trackSearchAnalytics.mockResolvedValue(undefined);
        const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();
        expect(result).toEqual({ courses: [], total: 5 });
        expect(mockSearchService.trackSearchAnalytics).toHaveBeenCalledWith({
            query: "stellar blockchain",
            userId: "user123",
            resultsCount: 5,
            endpoint: "/search",
        });
    });
    it("should not track analytics for non-search requests", async () => {
        const mockExecutionContext = {
            switchToHttp: () => ({
                getRequest: () => ({
                    method: "GET",
                    url: "/courses",
                    user: { id: "user123" },
                }),
            }),
        };
        const mockCallHandler = {
            handle: () => (0, rxjs_1.of)({ courses: [] }),
        };
        const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();
        expect(result).toEqual({ courses: [] });
        expect(mockSearchService.trackSearchAnalytics).not.toHaveBeenCalled();
    });
    it("should handle anonymous users", async () => {
        const mockExecutionContext = {
            switchToHttp: () => ({
                getRequest: () => ({
                    method: "POST",
                    url: "/search",
                    body: { query: "stellar" },
                    user: null,
                }),
            }),
        };
        const mockCallHandler = {
            handle: () => (0, rxjs_1.of)({ courses: [], total: 3 }),
        };
        const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();
        expect(mockSearchService.trackSearchAnalytics).toHaveBeenCalledWith({
            query: "stellar",
            userId: null,
            resultsCount: 3,
            endpoint: "/search",
        });
    });
    it("should handle errors gracefully", async () => {
        const mockExecutionContext = {
            switchToHttp: () => ({
                getRequest: () => ({
                    method: "POST",
                    url: "/search",
                    body: { query: "stellar" },
                    user: { id: "user123" },
                }),
            }),
        };
        const mockCallHandler = {
            handle: () => (0, rxjs_1.of)({ courses: [], total: 2 }),
        };
        mockSearchService.trackSearchAnalytics.mockRejectedValue(new Error("Analytics error"));
        const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();
        expect(result).toEqual({ courses: [], total: 2 });
        // Should not throw error even if analytics tracking fails
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,