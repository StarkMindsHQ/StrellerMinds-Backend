{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-governance.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-governance.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { Cron, CronExpression } from \"@nestjs/schedule\"\r\n\r\nimport { type DataGovernancePolicy, PolicyStatus } from \"../entities/data-governance-policy.entity\"\r\nimport type { DataLineage } from \"../entities/data-lineage.entity\"\r\n\r\nexport interface GovernanceReport {\r\n  policyCompliance: {\r\n    total: number\r\n    compliant: number\r\n    nonCompliant: number\r\n    rate: number\r\n  }\r\n  dataLineage: {\r\n    entities: number\r\n    relationships: number\r\n    orphaned: number\r\n  }\r\n  recommendations: string[]\r\n}\r\n\r\n@Injectable()\r\nexport class DataGovernanceService {\r\n  private readonly logger = new Logger(DataGovernanceService.name)\r\n\r\n  constructor(\r\n    private readonly policyRepository: Repository<DataGovernancePolicy>,\r\n    private readonly lineageRepository: Repository<DataLineage>,\r\n  ) {}\r\n\r\n  async createPolicy(policyData: Partial<DataGovernancePolicy>): Promise<DataGovernancePolicy> {\r\n    const policy = this.policyRepository.create(policyData)\r\n    return this.policyRepository.save(policy)\r\n  }\r\n\r\n  async updatePolicy(id: string, updates: Partial<DataGovernancePolicy>): Promise<DataGovernancePolicy> {\r\n    await this.policyRepository.update(id, updates)\r\n    const policy = await this.policyRepository.findOne({ where: { id } })\r\n    if (!policy) {\r\n      throw new Error(`Policy with id ${id} not found`)\r\n    }\r\n    return policy\r\n  }\r\n\r\n  async activatePolicy(id: string): Promise<void> {\r\n    await this.policyRepository.update(id, {\r\n      status: PolicyStatus.ACTIVE,\r\n      effectiveDate: new Date(),\r\n    })\r\n  }\r\n\r\n  async deactivatePolicy(id: string): Promise<void> {\r\n    await this.policyRepository.update(id, { status: PolicyStatus.INACTIVE })\r\n  }\r\n\r\n  async getPolicies(filters: {\r\n    policyType?: string\r\n    status?: PolicyStatus\r\n    entityType?: string\r\n  }): Promise<DataGovernancePolicy[]> {\r\n    const query = this.policyRepository.createQueryBuilder(\"policy\")\r\n\r\n    if (filters.policyType) {\r\n      query.andWhere(\"policy.policyType = :policyType\", { policyType: filters.policyType })\r\n    }\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"policy.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.entityType) {\r\n      query.andWhere(\"policy.entityType = :entityType\", { entityType: filters.entityType })\r\n    }\r\n\r\n    return query.orderBy(\"policy.createdAt\", \"DESC\").getMany()\r\n  }\r\n\r\n  async checkPolicyCompliance(\r\n    entityType: string,\r\n    data: any[],\r\n  ): Promise<{\r\n    compliant: boolean\r\n    violations: Array<{\r\n      policyId: string\r\n      policyName: string\r\n      violation: string\r\n      severity: string\r\n    }>\r\n  }> {\r\n    const policies = await this.getPolicies({\r\n      entityType,\r\n      status: PolicyStatus.ACTIVE,\r\n    })\r\n\r\n    const violations: Array<{\r\n      policyId: string\r\n      policyName: string\r\n      violation: string\r\n      severity: string\r\n    }> = []\r\n\r\n    for (const policy of policies) {\r\n      const policyViolations = await this.validatePolicy(policy, data)\r\n      violations.push(...policyViolations)\r\n    }\r\n\r\n    return {\r\n      compliant: violations.length === 0,\r\n      violations,\r\n    }\r\n  }\r\n\r\n  private async validatePolicy(\r\n    policy: DataGovernancePolicy,\r\n    data: any[],\r\n  ): Promise<\r\n    Array<{\r\n      policyId: string\r\n      policyName: string\r\n      violation: string\r\n      severity: string\r\n    }>\r\n  > {\r\n    const violations: Array<{\r\n      policyId: string\r\n      policyName: string\r\n      violation: string\r\n      severity: string\r\n    }> = []\r\n\r\n    switch (policy.policyType) {\r\n      case \"data_retention\":\r\n        const retentionViolations = this.checkRetentionPolicy(policy, data)\r\n        violations.push(\r\n          ...retentionViolations.map((v) => ({\r\n            policyId: policy.id,\r\n            policyName: policy.name,\r\n            violation: v,\r\n            severity: \"medium\",\r\n          })),\r\n        )\r\n        break\r\n\r\n      case \"data_access\":\r\n        const accessViolations = this.checkAccessPolicy(policy, data)\r\n        violations.push(\r\n          ...accessViolations.map((v) => ({\r\n            policyId: policy.id,\r\n            policyName: policy.name,\r\n            violation: v,\r\n            severity: \"high\",\r\n          })),\r\n        )\r\n        break\r\n\r\n      case \"data_classification\":\r\n        const classificationViolations = this.checkClassificationPolicy(policy, data)\r\n        violations.push(\r\n          ...classificationViolations.map((v) => ({\r\n            policyId: policy.id,\r\n            policyName: policy.name,\r\n            violation: v,\r\n            severity: \"medium\",\r\n          })),\r\n        )\r\n        break\r\n\r\n      case \"data_privacy\":\r\n        const privacyViolations = this.checkPrivacyPolicy(policy, data)\r\n        violations.push(\r\n          ...privacyViolations.map((v) => ({\r\n            policyId: policy.id,\r\n            policyName: policy.name,\r\n            violation: v,\r\n            severity: \"critical\",\r\n          })),\r\n        )\r\n        break\r\n    }\r\n\r\n    return violations\r\n  }\r\n\r\n  private checkRetentionPolicy(policy: DataGovernancePolicy, data: any[]): string[] {\r\n    const violations: string[] = []\r\n    const retentionDays = policy.rules.retentionDays\r\n    const dateField = policy.rules.dateField || \"createdAt\"\r\n\r\n    if (retentionDays) {\r\n      const cutoffDate = new Date()\r\n      cutoffDate.setDate(cutoffDate.getDate() - retentionDays)\r\n\r\n      const expiredRecords = data.filter((item) => {\r\n        const recordDate = new Date(item[dateField])\r\n        return recordDate < cutoffDate\r\n      })\r\n\r\n      if (expiredRecords.length > 0) {\r\n        violations.push(`${expiredRecords.length} records exceed retention period of ${retentionDays} days`)\r\n      }\r\n    }\r\n\r\n    return violations\r\n  }\r\n\r\n  private checkAccessPolicy(policy: DataGovernancePolicy, data: any[]): string[] {\r\n    const violations: string[] = []\r\n    const allowedRoles = policy.rules.allowedRoles || []\r\n    const sensitiveFields = policy.rules.sensitiveFields || []\r\n\r\n    // This would typically check against actual access logs\r\n    // For now, we'll check if sensitive fields are properly protected\r\n    for (const item of data) {\r\n      for (const field of sensitiveFields) {\r\n        if (item[field] && !item[`${field}_encrypted`]) {\r\n          violations.push(`Sensitive field ${field} is not encrypted`)\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    return violations\r\n  }\r\n\r\n  private checkClassificationPolicy(policy: DataGovernancePolicy, data: any[]): string[] {\r\n    const violations: string[] = []\r\n    const requiredClassification = policy.rules.requiredClassification\r\n    const classificationField = policy.rules.classificationField || \"dataClassification\"\r\n\r\n    if (requiredClassification) {\r\n      const unclassifiedRecords = data.filter(\r\n        (item) => !item[classificationField] || !requiredClassification.includes(item[classificationField]),\r\n      )\r\n\r\n      if (unclassifiedRecords.length > 0) {\r\n        violations.push(`${unclassifiedRecords.length} records lack proper data classification`)\r\n      }\r\n    }\r\n\r\n    return violations\r\n  }\r\n\r\n  private checkPrivacyPolicy(policy: DataGovernancePolicy, data: any[]): string[] {\r\n    const violations: string[] = []\r\n    const piiFields = policy.rules.piiFields || []\r\n    const consentRequired = policy.rules.consentRequired || false\r\n\r\n    for (const item of data) {\r\n      // Check for PII without proper handling\r\n      for (const field of piiFields) {\r\n        if (item[field] && !item[`${field}_anonymized`] && !item[`${field}_encrypted`]) {\r\n          violations.push(`PII field ${field} is not properly protected`)\r\n          break\r\n        }\r\n      }\r\n\r\n      // Check for consent\r\n      if (consentRequired && !item.consentGiven) {\r\n        violations.push(\"Record processed without required consent\")\r\n        break\r\n      }\r\n    }\r\n\r\n    return violations\r\n  }\r\n\r\n  async recordLineage(lineageData: Partial<DataLineage>): Promise<DataLineage> {\r\n    const lineage = this.lineageRepository.create(lineageData)\r\n    return this.lineageRepository.save(lineage)\r\n  }\r\n\r\n  async getLineage(entityName: string): Promise<{\r\n    upstream: DataLineage[]\r\n    downstream: DataLineage[]\r\n  }> {\r\n    const upstream = await this.lineageRepository.find({\r\n      where: { targetEntity: entityName, isActive: true },\r\n      order: { createdAt: \"DESC\" },\r\n    })\r\n\r\n    const downstream = await this.lineageRepository.find({\r\n      where: { sourceEntity: entityName, isActive: true },\r\n      order: { createdAt: \"DESC\" },\r\n    })\r\n\r\n    return { upstream, downstream }\r\n  }\r\n\r\n  async generateGovernanceReport(): Promise<GovernanceReport> {\r\n    const totalPolicies = await this.policyRepository.count()\r\n    const activePolicies = await this.policyRepository.count({\r\n      where: { status: PolicyStatus.ACTIVE },\r\n    })\r\n\r\n    const totalLineage = await this.lineageRepository.count({ where: { isActive: true } })\r\n    const uniqueEntities = await this.lineageRepository\r\n      .createQueryBuilder(\"lineage\")\r\n      .select(\"DISTINCT lineage.sourceEntity\")\r\n      .addSelect(\"DISTINCT lineage.targetEntity\")\r\n      .where(\"lineage.isActive = :isActive\", { isActive: true })\r\n      .getRawMany()\r\n\r\n    const recommendations: string[] = []\r\n\r\n    if (activePolicies < totalPolicies * 0.8) {\r\n      recommendations.push(\"Consider activating more governance policies\")\r\n    }\r\n\r\n    if (totalLineage < uniqueEntities.length * 2) {\r\n      recommendations.push(\"Improve data lineage documentation\")\r\n    }\r\n\r\n    return {\r\n      policyCompliance: {\r\n        total: totalPolicies,\r\n        compliant: activePolicies,\r\n        nonCompliant: totalPolicies - activePolicies,\r\n        rate: totalPolicies > 0 ? (activePolicies / totalPolicies) * 100 : 100,\r\n      },\r\n      dataLineage: {\r\n        entities: uniqueEntities.length,\r\n        relationships: totalLineage,\r\n        orphaned: 0, // Would need more complex query\r\n      },\r\n      recommendations,\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\r\n  async reviewPolicies(): Promise<void> {\r\n    this.logger.log(\"Starting daily policy review\")\r\n\r\n    const policies = await this.policyRepository.find({\r\n      where: { status: PolicyStatus.ACTIVE },\r\n    })\r\n\r\n    for (const policy of policies) {\r\n      // Check if policy needs review\r\n      if (policy.reviewDate && policy.reviewDate <= new Date()) {\r\n        this.logger.log(`Policy ${policy.name} is due for review`)\r\n        // Could send notifications or create tasks here\r\n      }\r\n\r\n      // Check if policy has expired\r\n      if (policy.expirationDate && policy.expirationDate <= new Date()) {\r\n        await this.policyRepository.update(policy.id, {\r\n          status: PolicyStatus.INACTIVE,\r\n        })\r\n        this.logger.log(`Policy ${policy.name} has been deactivated due to expiration`)\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"version":3}