{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\__tests__\\recommendation.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\__tests__\\recommendation.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { HttpException, HttpStatus } from '@nestjs/common';\r\nimport { RecommendationController } from '../controllers/recommendation.controller';\r\nimport { RecommendationEngineService } from '../services/recommendation-engine.service';\r\nimport { RecommendationAnalyticsService } from '../services/recommendation-analytics.service';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { Recommendation, RecommendationType, RecommendationReason, RecommendationStatus } from '../entities/recommendation.entity';\r\n\r\ndescribe('RecommendationController', () => {\r\n  let controller: RecommendationController;\r\n  let recommendationService: RecommendationEngineService;\r\n  let analyticsService: RecommendationAnalyticsService;\r\n\r\n  const mockUser: User = {\r\n    id: 'user-1',\r\n    email: 'test@example.com',\r\n    firstName: 'Test',\r\n    lastName: 'User',\r\n  } as User;\r\n\r\n  const mockRecommendation: Recommendation = {\r\n    id: 'rec-1',\r\n    userId: 'user-1',\r\n    courseId: 'course-1',\r\n    recommendationType: RecommendationType.CONTENT_BASED,\r\n    reason: RecommendationReason.SKILL_BASED,\r\n    confidenceScore: 0.85,\r\n    relevanceScore: 0.80,\r\n    priority: 4,\r\n    explanation: 'Recommended based on your skills',\r\n    status: RecommendationStatus.ACTIVE,\r\n    metadata: { algorithmUsed: 'content_similarity' },\r\n    course: {\r\n      id: 'course-1',\r\n      title: 'Advanced React',\r\n      description: 'Learn advanced React concepts',\r\n      difficulty: 'intermediate',\r\n      duration: 120,\r\n      rating: 4.5,\r\n    },\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n  } as Recommendation;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [RecommendationController],\r\n      providers: [\r\n        {\r\n          provide: RecommendationEngineService,\r\n          useValue: {\r\n            generateRecommendations: jest.fn(),\r\n            getRecommendations: jest.fn(),\r\n            recordInteraction: jest.fn(),\r\n            provideFeedback: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: RecommendationAnalyticsService,\r\n          useValue: {\r\n            getUserAnalytics: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<RecommendationController>(RecommendationController);\r\n    recommendationService = module.get<RecommendationEngineService>(RecommendationEngineService);\r\n    analyticsService = module.get<RecommendationAnalyticsService>(RecommendationAnalyticsService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n\r\n  describe('getRecommendations', () => {\r\n    it('should return recommendations with pagination', async () => {\r\n      // Arrange\r\n      const query = {\r\n        limit: 10,\r\n        offset: 0,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'DESC' as 'DESC',\r\n      };\r\n\r\n      const serviceResult = {\r\n        recommendations: [mockRecommendation],\r\n        total: 1,\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);\r\n\r\n      // Act\r\n      const result = await controller.getRecommendations(mockUser, query);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.recommendations).toHaveLength(1);\r\n      expect(result.total).toBe(1);\r\n      expect(result.pagination.page).toBe(1);\r\n      expect(result.pagination.totalPages).toBe(1);\r\n      expect(recommendationService.getRecommendations).toHaveBeenCalledWith(mockUser.id, query);\r\n    });\r\n\r\n    it('should handle service errors gracefully', async () => {\r\n      // Arrange\r\n      const query = {\r\n        limit: 10,\r\n        offset: 0,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'DESC' as 'DESC',\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockRejectedValue(new Error('Service error'));\r\n\r\n      // Act & Assert\r\n      await expect(controller.getRecommendations(mockUser, query)).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('generateRecommendations', () => {\r\n    it('should generate new recommendations successfully', async () => {\r\n      // Arrange\r\n      const request = {\r\n        limit: 5,\r\n        minConfidence: 0.1,\r\n        sessionId: 'session-1',\r\n        deviceType: 'desktop',\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([mockRecommendation]);\r\n\r\n      // Act\r\n      const result = await controller.generateRecommendations(mockUser, request);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.recommendations).toHaveLength(1);\r\n      expect(result.generationTime).toBeDefined();\r\n      expect(recommendationService.generateRecommendations).toHaveBeenCalledWith({\r\n        userId: mockUser.id,\r\n        type: request.type,\r\n        limit: 5,\r\n        minConfidence: 0.1,\r\n        context: {\r\n          userId: mockUser.id,\r\n          sessionId: 'session-1',\r\n          deviceType: 'desktop',\r\n          context: request.context,\r\n        },\r\n        excludeCourseIds: request.excludeCourseIds,\r\n        includeReasons: request.includeReasons,\r\n      });\r\n    });\r\n\r\n    it('should use default values when not provided', async () => {\r\n      // Arrange\r\n      const request = {};\r\n\r\n      jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([]);\r\n\r\n      // Act\r\n      await controller.generateRecommendations(mockUser, request);\r\n\r\n      // Assert\r\n      expect(recommendationService.generateRecommendations).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          limit: 10,\r\n          minConfidence: 0.1,\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('getRecommendation', () => {\r\n    it('should return specific recommendation and record view', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n      const serviceResult = {\r\n        recommendations: [mockRecommendation],\r\n        total: 1,\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);\r\n      jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();\r\n\r\n      // Act\r\n      const result = await controller.getRecommendation(mockUser, recommendationId);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.id).toBe(recommendationId);\r\n      expect(recommendationService.recordInteraction).toHaveBeenCalledWith(recommendationId, 'view');\r\n    });\r\n\r\n    it('should throw 404 when recommendation not found', async () => {\r\n      // Arrange\r\n      const recommendationId = 'nonexistent-rec';\r\n      const serviceResult = {\r\n        recommendations: [],\r\n        total: 0,\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);\r\n\r\n      // Act & Assert\r\n      await expect(controller.getRecommendation(mockUser, recommendationId)).rejects.toThrow(\r\n        new HttpException('Recommendation not found', HttpStatus.NOT_FOUND)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('recordInteraction', () => {\r\n    it('should record interaction successfully', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n      const body = {\r\n        interactionType: 'click' as 'click',\r\n        metadata: { source: 'homepage' },\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();\r\n\r\n      // Act\r\n      const result = await controller.recordInteraction(mockUser, recommendationId, body);\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        success: true,\r\n        message: 'Interaction recorded successfully',\r\n      });\r\n      expect(recommendationService.recordInteraction).toHaveBeenCalledWith(\r\n        recommendationId,\r\n        'click',\r\n        body.metadata\r\n      );\r\n    });\r\n\r\n    it('should handle service errors', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n      const body = { interactionType: 'click' as 'click' };\r\n\r\n      jest.spyOn(recommendationService, 'recordInteraction').mockRejectedValue(new Error('Service error'));\r\n\r\n      // Act & Assert\r\n      await expect(controller.recordInteraction(mockUser, recommendationId, body)).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('provideFeedback', () => {\r\n    it('should record feedback successfully', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n      const feedback = {\r\n        score: 4,\r\n        feedbackType: 'explicit' as 'explicit',\r\n        comment: 'Great recommendation!',\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'provideFeedback').mockResolvedValue();\r\n\r\n      // Act\r\n      const result = await controller.provideFeedback(mockUser, recommendationId, feedback);\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        success: true,\r\n        message: 'Feedback recorded successfully',\r\n      });\r\n      expect(recommendationService.provideFeedback).toHaveBeenCalledWith(\r\n        recommendationId,\r\n        feedback.score,\r\n        feedback.feedbackType,\r\n        feedback.comment\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('dismissRecommendation', () => {\r\n    it('should dismiss recommendation successfully', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n\r\n      jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();\r\n\r\n      // Act\r\n      const result = await controller.dismissRecommendation(mockUser, recommendationId);\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        success: true,\r\n        message: 'Recommendation dismissed successfully',\r\n      });\r\n      expect(recommendationService.recordInteraction).toHaveBeenCalledWith(recommendationId, 'dismiss');\r\n    });\r\n  });\r\n\r\n  describe('getAnalyticsSummary', () => {\r\n    it('should return user analytics summary', async () => {\r\n      // Arrange\r\n      const days = 30;\r\n      const analyticsData = {\r\n        totalRecommendationsReceived: 50,\r\n        totalInteractions: 25,\r\n        averageFeedbackScore: 4.2,\r\n        topRecommendationReasons: ['SKILL_BASED', 'SIMILAR_CONTENT'],\r\n        engagementTrend: [\r\n          { date: '2023-01-01', interactions: 5 },\r\n          { date: '2023-01-02', interactions: 3 },\r\n        ],\r\n      };\r\n\r\n      jest.spyOn(analyticsService, 'getUserAnalytics').mockResolvedValue(analyticsData);\r\n\r\n      // Act\r\n      const result = await controller.getAnalyticsSummary(mockUser, days);\r\n\r\n      // Assert\r\n      expect(result).toEqual(analyticsData);\r\n      expect(analyticsService.getUserAnalytics).toHaveBeenCalledWith(mockUser.id, days);\r\n    });\r\n\r\n    it('should use default days when not provided', async () => {\r\n      // Arrange\r\n      const analyticsData = {\r\n        totalRecommendationsReceived: 0,\r\n        totalInteractions: 0,\r\n        averageFeedbackScore: 0,\r\n        topRecommendationReasons: [],\r\n        engagementTrend: [],\r\n      };\r\n\r\n      jest.spyOn(analyticsService, 'getUserAnalytics').mockResolvedValue(analyticsData);\r\n\r\n      // Act\r\n      await controller.getAnalyticsSummary(mockUser);\r\n\r\n      // Assert\r\n      expect(analyticsService.getUserAnalytics).toHaveBeenCalledWith(mockUser.id, 30);\r\n    });\r\n  });\r\n\r\n  describe('getSimilarCourseRecommendations', () => {\r\n    it('should return similar course recommendations', async () => {\r\n      // Arrange\r\n      const courseId = 'course-1';\r\n      const limit = 5;\r\n\r\n      jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([mockRecommendation]);\r\n\r\n      // Act\r\n      const result = await controller.getSimilarCourseRecommendations(mockUser, courseId, limit);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.recommendations).toHaveLength(1);\r\n      expect(result.baseCourse.id).toBe(courseId);\r\n      expect(recommendationService.generateRecommendations).toHaveBeenCalledWith({\r\n        userId: mockUser.id,\r\n        limit,\r\n        minConfidence: 0.3,\r\n        context: {\r\n          userId: mockUser.id,\r\n          currentCourse: courseId,\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('provideBulkFeedback', () => {\r\n    it('should process bulk feedback successfully', async () => {\r\n      // Arrange\r\n      const feedbackList = [\r\n        {\r\n          recommendationId: 'rec-1',\r\n          feedback: { score: 4, feedbackType: 'explicit' as 'explicit' },\r\n        },\r\n        {\r\n          recommendationId: 'rec-2',\r\n          feedback: { score: 5, feedbackType: 'explicit' as 'explicit' },\r\n        },\r\n      ];\r\n\r\n      jest.spyOn(recommendationService, 'provideFeedback').mockResolvedValue();\r\n\r\n      // Act\r\n      const result = await controller.provideBulkFeedback(mockUser, feedbackList);\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        success: true,\r\n        processed: 2,\r\n        failed: 0,\r\n      });\r\n      expect(recommendationService.provideFeedback).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should handle partial failures in bulk feedback', async () => {\r\n      // Arrange\r\n      const feedbackList = [\r\n        {\r\n          recommendationId: 'rec-1',\r\n          feedback: { score: 4, feedbackType: 'explicit' as 'explicit' },\r\n        },\r\n        {\r\n          recommendationId: 'rec-2',\r\n          feedback: { score: 5, feedbackType: 'explicit' as 'explicit' },\r\n        },\r\n      ];\r\n\r\n      jest.spyOn(recommendationService, 'provideFeedback')\r\n        .mockResolvedValueOnce()\r\n        .mockRejectedValueOnce(new Error('Service error'));\r\n\r\n      // Act\r\n      const result = await controller.provideBulkFeedback(mockUser, feedbackList);\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        success: false,\r\n        processed: 1,\r\n        failed: 1,\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getTrendingTopics', () => {\r\n    it('should return trending topics and skills', async () => {\r\n      // Act\r\n      const result = await controller.getTrendingTopics();\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.trendingSkills).toBeDefined();\r\n      expect(result.trendingTopics).toBeDefined();\r\n      expect(Array.isArray(result.trendingSkills)).toBe(true);\r\n      expect(Array.isArray(result.trendingTopics)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('mapToResponseDto', () => {\r\n    it('should map recommendation entity to response DTO correctly', () => {\r\n      // Act\r\n      const result = (controller as any).mapToResponseDto(mockRecommendation);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.id).toBe(mockRecommendation.id);\r\n      expect(result.courseId).toBe(mockRecommendation.courseId);\r\n      expect(result.recommendationType).toBe(mockRecommendation.recommendationType);\r\n      expect(result.course).toBeDefined();\r\n      expect(result.course.id).toBe(mockRecommendation.course.id);\r\n    });\r\n\r\n    it('should handle recommendation without course', () => {\r\n      // Arrange\r\n      const recWithoutCourse = { ...mockRecommendation, course: null };\r\n\r\n      // Act\r\n      const result = (controller as any).mapToResponseDto(recWithoutCourse);\r\n\r\n      // Assert\r\n      expect(result).toBeDefined();\r\n      expect(result.course).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('error handling', () => {\r\n    it('should handle unexpected errors gracefully', async () => {\r\n      // Arrange\r\n      const query = {\r\n        limit: 10,\r\n        offset: 0,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'DESC' as 'DESC',\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockRejectedValue(new Error('Unexpected error'));\r\n\r\n      // Act & Assert\r\n      await expect(controller.getRecommendations(mockUser, query)).rejects.toThrow(\r\n        new HttpException('Failed to get recommendations', HttpStatus.INTERNAL_SERVER_ERROR)\r\n      );\r\n    });\r\n\r\n    it('should preserve HttpExceptions from service layer', async () => {\r\n      // Arrange\r\n      const recommendationId = 'rec-1';\r\n      const serviceResult = {\r\n        recommendations: [],\r\n        total: 0,\r\n      };\r\n\r\n      jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);\r\n\r\n      // Act & Assert\r\n      await expect(controller.getRecommendation(mockUser, recommendationId)).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n});\r\n"],"version":3}