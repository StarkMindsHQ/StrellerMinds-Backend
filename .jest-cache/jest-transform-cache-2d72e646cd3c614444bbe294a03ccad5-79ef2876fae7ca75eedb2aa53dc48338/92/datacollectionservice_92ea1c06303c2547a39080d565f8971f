59f34457a97c2a858ffbbe611044629c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataCollectionService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCollectionService = void 0;
const common_1 = require("@nestjs/common");
let DataCollectionService = DataCollectionService_1 = class DataCollectionService {
    constructor(analyticsEventRepository, dataCollectionQueue, realTimeAnalyticsService) {
        this.analyticsEventRepository = analyticsEventRepository;
        this.dataCollectionQueue = dataCollectionQueue;
        this.realTimeAnalyticsService = realTimeAnalyticsService;
        this.logger = new common_1.Logger(DataCollectionService_1.name);
    }
    async trackEvent(eventData) {
        try {
            // Add to queue for async processing
            await this.dataCollectionQueue.add("process-event", {
                ...eventData,
                timestamp: new Date(),
            });
            // Send to real-time analytics
            await this.realTimeAnalyticsService.processRealTimeEvent(eventData);
            this.logger.log(`Event tracked: ${eventData.eventName}`);
        }
        catch (error) {
            this.logger.error(`Failed to track event: ${error.message}`, error.stack);
            throw error;
        }
    }
    async batchTrackEvents(events) {
        try {
            const jobs = events.map((eventData) => ({
                name: "process-event",
                data: {
                    ...eventData,
                    timestamp: new Date(),
                },
            }));
            await this.dataCollectionQueue.addBulk(jobs);
            // Process real-time events
            await Promise.all(events.map((event) => this.realTimeAnalyticsService.processRealTimeEvent(event)));
            this.logger.log(`Batch tracked ${events.length} events`);
        }
        catch (error) {
            this.logger.error(`Failed to batch track events: ${error.message}`, error.stack);
            throw error;
        }
    }
    async getEvents(filters) {
        const query = this.analyticsEventRepository.createQueryBuilder("event");
        if (filters.eventType) {
            query.andWhere("event.eventType = :eventType", {
                eventType: filters.eventType,
            });
        }
        if (filters.userId) {
            query.andWhere("event.userId = :userId", { userId: filters.userId });
        }
        if (filters.sessionId) {
            query.andWhere("event.sessionId = :sessionId", {
                sessionId: filters.sessionId,
            });
        }
        if (filters.startDate) {
            query.andWhere("event.timestamp >= :startDate", {
                startDate: filters.startDate,
            });
        }
        if (filters.endDate) {
            query.andWhere("event.timestamp <= :endDate", {
                endDate: filters.endDate,
            });
        }
        query.orderBy("event.timestamp", "DESC");
        if (filters.limit) {
            query.limit(filters.limit);
        }
        if (filters.offset) {
            query.offset(filters.offset);
        }
        const [events, total] = await query.getManyAndCount();
        return { events, total };
    }
};
exports.DataCollectionService = DataCollectionService;
exports.DataCollectionService = DataCollectionService = DataCollectionService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object])
], DataCollectionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,