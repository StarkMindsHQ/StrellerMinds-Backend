{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\controllers\\recommendation.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\controllers\\recommendation.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Body,\r\n  Param,\r\n  Query,\r\n  UseGuards,\r\n  HttpStatus,\r\n  HttpException,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport {\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBearerAuth,\r\n  ApiParam,\r\n  ApiQuery,\r\n} from '@nestjs/swagger';\r\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\r\nimport { GetUser } from '../../auth/decorators/get-user.decorator';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { RecommendationEngineService } from '../services/recommendation-engine.service';\r\nimport { RecommendationAnalyticsService } from '../services/recommendation-analytics.service';\r\nimport {\r\n  CreateRecommendationDto,\r\n  UpdateRecommendationDto,\r\n  GetRecommendationsQueryDto,\r\n  RecommendationResponseDto,\r\n  RecommendationFeedbackDto,\r\n  BulkRecommendationRequestDto,\r\n} from '../dto/recommendation.dto';\r\nimport { Recommendation } from '../entities/recommendation.entity';\r\n\r\n@ApiTags('Recommendations')\r\n@Controller('recommendations')\r\n@UseGuards(JwtAuthGuard)\r\n@ApiBearerAuth()\r\nexport class RecommendationController {\r\n  private readonly logger = new Logger(RecommendationController.name);\r\n\r\n  constructor(\r\n    private readonly recommendationService: RecommendationEngineService,\r\n    private readonly analyticsService: RecommendationAnalyticsService,\r\n  ) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get personalized recommendations for the current user' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns personalized recommendations',\r\n    type: [RecommendationResponseDto],\r\n  })\r\n  @ApiQuery({ name: 'type', required: false, description: 'Filter by recommendation type' })\r\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of recommendations to return' })\r\n  @ApiQuery({ name: 'minConfidence', required: false, description: 'Minimum confidence score' })\r\n  async getRecommendations(\r\n    @GetUser() user: User,\r\n    @Query() query: GetRecommendationsQueryDto,\r\n  ): Promise<{\r\n    recommendations: RecommendationResponseDto[];\r\n    total: number;\r\n    pagination: {\r\n      page: number;\r\n      limit: number;\r\n      totalPages: number;\r\n    };\r\n  }> {\r\n    try {\r\n      this.logger.log(`Getting recommendations for user ${user.id}`);\r\n\r\n      const result = await this.recommendationService.getRecommendations(user.id, query);\r\n\r\n      const totalPages = Math.ceil(result.total / query.limit);\r\n\r\n      return {\r\n        recommendations: result.recommendations.map(rec => this.mapToResponseDto(rec)),\r\n        total: result.total,\r\n        pagination: {\r\n          page: Math.floor(query.offset / query.limit) + 1,\r\n          limit: query.limit,\r\n          totalPages,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error getting recommendations for user ${user.id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to get recommendations',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Post('generate')\r\n  @ApiOperation({ summary: 'Generate new personalized recommendations' })\r\n  @ApiResponse({\r\n    status: 201,\r\n    description: 'New recommendations generated successfully',\r\n    type: [RecommendationResponseDto],\r\n  })\r\n  async generateRecommendations(\r\n    @GetUser() user: User,\r\n    @Body() request: BulkRecommendationRequestDto,\r\n  ): Promise<{\r\n    recommendations: RecommendationResponseDto[];\r\n    generationTime: number;\r\n  }> {\r\n    try {\r\n      this.logger.log(`Generating recommendations for user ${user.id}`);\r\n      const startTime = Date.now();\r\n\r\n      const recommendations = await this.recommendationService.generateRecommendations({\r\n        userId: user.id,\r\n        type: request.type,\r\n        limit: request.limit || 10,\r\n        minConfidence: request.minConfidence || 0.1,\r\n        context: {\r\n          userId: user.id,\r\n          sessionId: request.sessionId,\r\n          deviceType: request.deviceType,\r\n          context: request.context,\r\n        },\r\n        excludeCourseIds: request.excludeCourseIds,\r\n        includeReasons: request.includeReasons,\r\n      });\r\n\r\n      const generationTime = Date.now() - startTime;\r\n\r\n      return {\r\n        recommendations: recommendations.map(rec => this.mapToResponseDto(rec)),\r\n        generationTime,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error generating recommendations for user ${user.id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to generate recommendations',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Get a specific recommendation by ID' })\r\n  @ApiParam({ name: 'id', description: 'Recommendation ID' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns the recommendation details',\r\n    type: RecommendationResponseDto,\r\n  })\r\n  @ApiResponse({ status: 404, description: 'Recommendation not found' })\r\n  async getRecommendation(\r\n    @GetUser() user: User,\r\n    @Param('id') id: string,\r\n  ): Promise<RecommendationResponseDto> {\r\n    try {\r\n      const recommendations = await this.recommendationService.getRecommendations(user.id, {\r\n        limit: 1,\r\n        offset: 0,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'DESC',\r\n      });\r\n\r\n      const recommendation = recommendations.recommendations.find(r => r.id === id);\r\n      \r\n      if (!recommendation) {\r\n        throw new HttpException('Recommendation not found', HttpStatus.NOT_FOUND);\r\n      }\r\n\r\n      // Track view interaction\r\n      await this.recommendationService.recordInteraction(id, 'view');\r\n\r\n      return this.mapToResponseDto(recommendation);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) {\r\n        throw error;\r\n      }\r\n      this.logger.error(`Error getting recommendation ${id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to get recommendation',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Post(':id/interact')\r\n  @ApiOperation({ summary: 'Record user interaction with a recommendation' })\r\n  @ApiParam({ name: 'id', description: 'Recommendation ID' })\r\n  @ApiResponse({ status: 200, description: 'Interaction recorded successfully' })\r\n  @ApiResponse({ status: 404, description: 'Recommendation not found' })\r\n  async recordInteraction(\r\n    @GetUser() user: User,\r\n    @Param('id') id: string,\r\n    @Body() body: { interactionType: 'view' | 'click' | 'dismiss'; metadata?: any },\r\n  ): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      await this.recommendationService.recordInteraction(\r\n        id,\r\n        body.interactionType,\r\n        body.metadata,\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Interaction recorded successfully',\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error recording interaction for recommendation ${id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to record interaction',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Post(':id/feedback')\r\n  @ApiOperation({ summary: 'Provide feedback on a recommendation' })\r\n  @ApiParam({ name: 'id', description: 'Recommendation ID' })\r\n  @ApiResponse({ status: 200, description: 'Feedback recorded successfully' })\r\n  @ApiResponse({ status: 404, description: 'Recommendation not found' })\r\n  async provideFeedback(\r\n    @GetUser() user: User,\r\n    @Param('id') id: string,\r\n    @Body() feedback: RecommendationFeedbackDto,\r\n  ): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      await this.recommendationService.provideFeedback(\r\n        id,\r\n        feedback.score,\r\n        feedback.feedbackType,\r\n        feedback.comment,\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Feedback recorded successfully',\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error recording feedback for recommendation ${id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to record feedback',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Dismiss a recommendation' })\r\n  @ApiParam({ name: 'id', description: 'Recommendation ID' })\r\n  @ApiResponse({ status: 200, description: 'Recommendation dismissed successfully' })\r\n  @ApiResponse({ status: 404, description: 'Recommendation not found' })\r\n  async dismissRecommendation(\r\n    @GetUser() user: User,\r\n    @Param('id') id: string,\r\n  ): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      await this.recommendationService.recordInteraction(id, 'dismiss');\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Recommendation dismissed successfully',\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error dismissing recommendation ${id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to dismiss recommendation',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Get('analytics/summary')\r\n  @ApiOperation({ summary: 'Get recommendation analytics summary for the current user' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns user recommendation analytics',\r\n  })\r\n  @ApiQuery({ name: 'days', required: false, description: 'Number of days to analyze (default: 30)' })\r\n  async getAnalyticsSummary(\r\n    @GetUser() user: User,\r\n    @Query('days') days: number = 30,\r\n  ): Promise<{\r\n    totalRecommendationsReceived: number;\r\n    totalInteractions: number;\r\n    averageFeedbackScore: number;\r\n    topRecommendationReasons: string[];\r\n    engagementTrend: Array<{ date: string; interactions: number }>;\r\n  }> {\r\n    try {\r\n      const analytics = await this.analyticsService.getUserAnalytics(user.id, days);\r\n      return analytics;\r\n    } catch (error) {\r\n      this.logger.error(`Error getting analytics for user ${user.id}:`, error);\r\n      throw new HttpException(\r\n        'Failed to get analytics',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Get('similar/:courseId')\r\n  @ApiOperation({ summary: 'Get recommendations similar to a specific course' })\r\n  @ApiParam({ name: 'courseId', description: 'Course ID to find similar recommendations for' })\r\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of similar courses to return' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns similar course recommendations',\r\n  })\r\n  async getSimilarCourseRecommendations(\r\n    @GetUser() user: User,\r\n    @Param('courseId') courseId: string,\r\n    @Query('limit') limit: number = 5,\r\n  ): Promise<{\r\n    recommendations: RecommendationResponseDto[];\r\n    baseCourse: { id: string; title: string };\r\n  }> {\r\n    try {\r\n      // Generate recommendations based on the specific course\r\n      const recommendations = await this.recommendationService.generateRecommendations({\r\n        userId: user.id,\r\n        limit,\r\n        minConfidence: 0.3,\r\n        context: {\r\n          userId: user.id,\r\n          currentCourse: courseId,\r\n        },\r\n      });\r\n\r\n      return {\r\n        recommendations: recommendations.map(rec => this.mapToResponseDto(rec)),\r\n        baseCourse: {\r\n          id: courseId,\r\n          title: 'Course Title', // Would be fetched from course service\r\n        },\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Error getting similar recommendations for course ${courseId}:`, error);\r\n      throw new HttpException(\r\n        'Failed to get similar recommendations',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @Post('bulk-feedback')\r\n  @ApiOperation({ summary: 'Provide feedback on multiple recommendations' })\r\n  @ApiResponse({ status: 200, description: 'Bulk feedback recorded successfully' })\r\n  async provideBulkFeedback(\r\n    @GetUser() user: User,\r\n    @Body() feedbackList: Array<{ recommendationId: string; feedback: RecommendationFeedbackDto }>,\r\n  ): Promise<{ success: boolean; processed: number; failed: number }> {\r\n    let processed = 0;\r\n    let failed = 0;\r\n\r\n    for (const item of feedbackList) {\r\n      try {\r\n        await this.recommendationService.provideFeedback(\r\n          item.recommendationId,\r\n          item.feedback.score,\r\n          item.feedback.feedbackType,\r\n          item.feedback.comment,\r\n        );\r\n        processed++;\r\n      } catch (error) {\r\n        this.logger.error(`Error processing feedback for recommendation ${item.recommendationId}:`, error);\r\n        failed++;\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: failed === 0,\r\n      processed,\r\n      failed,\r\n    };\r\n  }\r\n\r\n  @Get('trending/topics')\r\n  @ApiOperation({ summary: 'Get trending topics and skills for recommendations' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns trending topics and skills',\r\n  })\r\n  async getTrendingTopics(): Promise<{\r\n    trendingSkills: Array<{ skill: string; growth: number; popularity: number }>;\r\n    trendingTopics: Array<{ topic: string; courseCount: number; enrollments: number }>;\r\n  }> {\r\n    try {\r\n      // This would typically fetch from analytics or a trending service\r\n      // For now, return mock data\r\n      return {\r\n        trendingSkills: [\r\n          { skill: 'React', growth: 25.5, popularity: 8.9 },\r\n          { skill: 'Python', growth: 22.1, popularity: 9.2 },\r\n          { skill: 'Machine Learning', growth: 35.7, popularity: 7.8 },\r\n          { skill: 'DevOps', growth: 18.3, popularity: 7.5 },\r\n          { skill: 'Cloud Computing', growth: 28.9, popularity: 8.1 },\r\n        ],\r\n        trendingTopics: [\r\n          { topic: 'Web Development', courseCount: 156, enrollments: 12450 },\r\n          { topic: 'Data Science', courseCount: 89, enrollments: 8920 },\r\n          { topic: 'Mobile Development', courseCount: 67, enrollments: 6780 },\r\n          { topic: 'Cybersecurity', courseCount: 45, enrollments: 5640 },\r\n          { topic: 'AI/ML', courseCount: 78, enrollments: 7890 },\r\n        ],\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Error getting trending topics:', error);\r\n      throw new HttpException(\r\n        'Failed to get trending topics',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map Recommendation entity to RecommendationResponseDto\r\n   */\r\n  private mapToResponseDto(recommendation: Recommendation): RecommendationResponseDto {\r\n    return {\r\n      id: recommendation.id,\r\n      courseId: recommendation.courseId,\r\n      course: recommendation.course ? {\r\n        id: recommendation.course.id,\r\n        title: recommendation.course.title,\r\n        description: recommendation.course.description,\r\n        difficulty: recommendation.course.difficulty,\r\n        duration: recommendation.course.duration,\r\n        rating: recommendation.course.rating,\r\n        tags: recommendation.course.tags,\r\n        skills: recommendation.course.skills,\r\n        instructor: recommendation.course.instructor,\r\n        thumbnailUrl: recommendation.course.thumbnailUrl,\r\n      } : undefined,\r\n      recommendationType: recommendation.recommendationType,\r\n      reason: recommendation.reason,\r\n      confidenceScore: recommendation.confidenceScore,\r\n      relevanceScore: recommendation.relevanceScore,\r\n      priority: recommendation.priority,\r\n      explanation: recommendation.explanation,\r\n      status: recommendation.status,\r\n      metadata: recommendation.metadata,\r\n      mlFeatures: recommendation.mlFeatures,\r\n      viewedAt: recommendation.viewedAt,\r\n      clickedAt: recommendation.clickedAt,\r\n      dismissedAt: recommendation.dismissedAt,\r\n      expiresAt: recommendation.expiresAt,\r\n      createdAt: recommendation.createdAt,\r\n      updatedAt: recommendation.updatedAt,\r\n    };\r\n  }\r\n}\r\n"],"version":3}