c13f3ae588f72c3dc2b2ccde2fc7c4a7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RecommendationController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const get_user_decorator_1 = require("../../auth/decorators/get-user.decorator");
const user_entity_1 = require("../../users/entities/user.entity");
const recommendation_engine_service_1 = require("../services/recommendation-engine.service");
const recommendation_analytics_service_1 = require("../services/recommendation-analytics.service");
const recommendation_dto_1 = require("../dto/recommendation.dto");
let RecommendationController = RecommendationController_1 = class RecommendationController {
    constructor(recommendationService, analyticsService) {
        this.recommendationService = recommendationService;
        this.analyticsService = analyticsService;
        this.logger = new common_1.Logger(RecommendationController_1.name);
    }
    async getRecommendations(user, query) {
        try {
            this.logger.log(`Getting recommendations for user ${user.id}`);
            const result = await this.recommendationService.getRecommendations(user.id, query);
            const totalPages = Math.ceil(result.total / query.limit);
            return {
                recommendations: result.recommendations.map(rec => this.mapToResponseDto(rec)),
                total: result.total,
                pagination: {
                    page: Math.floor(query.offset / query.limit) + 1,
                    limit: query.limit,
                    totalPages,
                },
            };
        }
        catch (error) {
            this.logger.error(`Error getting recommendations for user ${user.id}:`, error);
            throw new common_1.HttpException('Failed to get recommendations', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async generateRecommendations(user, request) {
        try {
            this.logger.log(`Generating recommendations for user ${user.id}`);
            const startTime = Date.now();
            const recommendations = await this.recommendationService.generateRecommendations({
                userId: user.id,
                type: request.type,
                limit: request.limit || 10,
                minConfidence: request.minConfidence || 0.1,
                context: {
                    userId: user.id,
                    sessionId: request.sessionId,
                    deviceType: request.deviceType,
                    context: request.context,
                },
                excludeCourseIds: request.excludeCourseIds,
                includeReasons: request.includeReasons,
            });
            const generationTime = Date.now() - startTime;
            return {
                recommendations: recommendations.map(rec => this.mapToResponseDto(rec)),
                generationTime,
            };
        }
        catch (error) {
            this.logger.error(`Error generating recommendations for user ${user.id}:`, error);
            throw new common_1.HttpException('Failed to generate recommendations', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getRecommendation(user, id) {
        try {
            const recommendations = await this.recommendationService.getRecommendations(user.id, {
                limit: 1,
                offset: 0,
                sortBy: 'createdAt',
                sortOrder: 'DESC',
            });
            const recommendation = recommendations.recommendations.find(r => r.id === id);
            if (!recommendation) {
                throw new common_1.HttpException('Recommendation not found', common_1.HttpStatus.NOT_FOUND);
            }
            // Track view interaction
            await this.recommendationService.recordInteraction(id, 'view');
            return this.mapToResponseDto(recommendation);
        }
        catch (error) {
            if (error instanceof common_1.HttpException) {
                throw error;
            }
            this.logger.error(`Error getting recommendation ${id}:`, error);
            throw new common_1.HttpException('Failed to get recommendation', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async recordInteraction(user, id, body) {
        try {
            await this.recommendationService.recordInteraction(id, body.interactionType, body.metadata);
            return {
                success: true,
                message: 'Interaction recorded successfully',
            };
        }
        catch (error) {
            this.logger.error(`Error recording interaction for recommendation ${id}:`, error);
            throw new common_1.HttpException('Failed to record interaction', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async provideFeedback(user, id, feedback) {
        try {
            await this.recommendationService.provideFeedback(id, feedback.score, feedback.feedbackType, feedback.comment);
            return {
                success: true,
                message: 'Feedback recorded successfully',
            };
        }
        catch (error) {
            this.logger.error(`Error recording feedback for recommendation ${id}:`, error);
            throw new common_1.HttpException('Failed to record feedback', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async dismissRecommendation(user, id) {
        try {
            await this.recommendationService.recordInteraction(id, 'dismiss');
            return {
                success: true,
                message: 'Recommendation dismissed successfully',
            };
        }
        catch (error) {
            this.logger.error(`Error dismissing recommendation ${id}:`, error);
            throw new common_1.HttpException('Failed to dismiss recommendation', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getAnalyticsSummary(user, days = 30) {
        try {
            const analytics = await this.analyticsService.getUserAnalytics(user.id, days);
            return analytics;
        }
        catch (error) {
            this.logger.error(`Error getting analytics for user ${user.id}:`, error);
            throw new common_1.HttpException('Failed to get analytics', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getSimilarCourseRecommendations(user, courseId, limit = 5) {
        try {
            // Generate recommendations based on the specific course
            const recommendations = await this.recommendationService.generateRecommendations({
                userId: user.id,
                limit,
                minConfidence: 0.3,
                context: {
                    userId: user.id,
                    currentCourse: courseId,
                },
            });
            return {
                recommendations: recommendations.map(rec => this.mapToResponseDto(rec)),
                baseCourse: {
                    id: courseId,
                    title: 'Course Title', // Would be fetched from course service
                },
            };
        }
        catch (error) {
            this.logger.error(`Error getting similar recommendations for course ${courseId}:`, error);
            throw new common_1.HttpException('Failed to get similar recommendations', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async provideBulkFeedback(user, feedbackList) {
        let processed = 0;
        let failed = 0;
        for (const item of feedbackList) {
            try {
                await this.recommendationService.provideFeedback(item.recommendationId, item.feedback.score, item.feedback.feedbackType, item.feedback.comment);
                processed++;
            }
            catch (error) {
                this.logger.error(`Error processing feedback for recommendation ${item.recommendationId}:`, error);
                failed++;
            }
        }
        return {
            success: failed === 0,
            processed,
            failed,
        };
    }
    async getTrendingTopics() {
        try {
            // This would typically fetch from analytics or a trending service
            // For now, return mock data
            return {
                trendingSkills: [
                    { skill: 'React', growth: 25.5, popularity: 8.9 },
                    { skill: 'Python', growth: 22.1, popularity: 9.2 },
                    { skill: 'Machine Learning', growth: 35.7, popularity: 7.8 },
                    { skill: 'DevOps', growth: 18.3, popularity: 7.5 },
                    { skill: 'Cloud Computing', growth: 28.9, popularity: 8.1 },
                ],
                trendingTopics: [
                    { topic: 'Web Development', courseCount: 156, enrollments: 12450 },
                    { topic: 'Data Science', courseCount: 89, enrollments: 8920 },
                    { topic: 'Mobile Development', courseCount: 67, enrollments: 6780 },
                    { topic: 'Cybersecurity', courseCount: 45, enrollments: 5640 },
                    { topic: 'AI/ML', courseCount: 78, enrollments: 7890 },
                ],
            };
        }
        catch (error) {
            this.logger.error('Error getting trending topics:', error);
            throw new common_1.HttpException('Failed to get trending topics', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    /**
     * Map Recommendation entity to RecommendationResponseDto
     */
    mapToResponseDto(recommendation) {
        return {
            id: recommendation.id,
            courseId: recommendation.courseId,
            course: recommendation.course ? {
                id: recommendation.course.id,
                title: recommendation.course.title,
                description: recommendation.course.description,
                difficulty: recommendation.course.difficulty,
                duration: recommendation.course.duration,
                rating: recommendation.course.rating,
                tags: recommendation.course.tags,
                skills: recommendation.course.skills,
                instructor: recommendation.course.instructor,
                thumbnailUrl: recommendation.course.thumbnailUrl,
            } : undefined,
            recommendationType: recommendation.recommendationType,
            reason: recommendation.reason,
            confidenceScore: recommendation.confidenceScore,
            relevanceScore: recommendation.relevanceScore,
            priority: recommendation.priority,
            explanation: recommendation.explanation,
            status: recommendation.status,
            metadata: recommendation.metadata,
            mlFeatures: recommendation.mlFeatures,
            viewedAt: recommendation.viewedAt,
            clickedAt: recommendation.clickedAt,
            dismissedAt: recommendation.dismissedAt,
            expiresAt: recommendation.expiresAt,
            createdAt: recommendation.createdAt,
            updatedAt: recommendation.updatedAt,
        };
    }
};
exports.RecommendationController = RecommendationController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get personalized recommendations for the current user' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns personalized recommendations',
        type: [recommendation_dto_1.RecommendationResponseDto],
    }),
    (0, swagger_1.ApiQuery)({ name: 'type', required: false, description: 'Filter by recommendation type' }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, description: 'Number of recommendations to return' }),
    (0, swagger_1.ApiQuery)({ name: 'minConfidence', required: false, description: 'Minimum confidence score' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _c : Object, typeof (_d = typeof recommendation_dto_1.GetRecommendationsQueryDto !== "undefined" && recommendation_dto_1.GetRecommendationsQueryDto) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], RecommendationController.prototype, "getRecommendations", null);
__decorate([
    (0, common_1.Post)('generate'),
    (0, swagger_1.ApiOperation)({ summary: 'Generate new personalized recommendations' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'New recommendations generated successfully',
        type: [recommendation_dto_1.RecommendationResponseDto],
    }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _f : Object, typeof (_g = typeof recommendation_dto_1.BulkRecommendationRequestDto !== "undefined" && recommendation_dto_1.BulkRecommendationRequestDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], RecommendationController.prototype, "generateRecommendations", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Get a specific recommendation by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Recommendation ID' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns the recommendation details',
        type: recommendation_dto_1.RecommendationResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Recommendation not found' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_j = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _j : Object, String]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], RecommendationController.prototype, "getRecommendation", null);
__decorate([
    (0, common_1.Post)(':id/interact'),
    (0, swagger_1.ApiOperation)({ summary: 'Record user interaction with a recommendation' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Recommendation ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Interaction recorded successfully' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Recommendation not found' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Param)('id')),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_l = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _l : Object, String, Object]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], RecommendationController.prototype, "recordInteraction", null);
__decorate([
    (0, common_1.Post)(':id/feedback'),
    (0, swagger_1.ApiOperation)({ summary: 'Provide feedback on a recommendation' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Recommendation ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Feedback recorded successfully' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Recommendation not found' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Param)('id')),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_o = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _o : Object, String, typeof (_p = typeof recommendation_dto_1.RecommendationFeedbackDto !== "undefined" && recommendation_dto_1.RecommendationFeedbackDto) === "function" ? _p : Object]),
    __metadata("design:returntype", typeof (_q = typeof Promise !== "undefined" && Promise) === "function" ? _q : Object)
], RecommendationController.prototype, "provideFeedback", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Dismiss a recommendation' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Recommendation ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Recommendation dismissed successfully' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Recommendation not found' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_r = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _r : Object, String]),
    __metadata("design:returntype", typeof (_s = typeof Promise !== "undefined" && Promise) === "function" ? _s : Object)
], RecommendationController.prototype, "dismissRecommendation", null);
__decorate([
    (0, common_1.Get)('analytics/summary'),
    (0, swagger_1.ApiOperation)({ summary: 'Get recommendation analytics summary for the current user' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns user recommendation analytics',
    }),
    (0, swagger_1.ApiQuery)({ name: 'days', required: false, description: 'Number of days to analyze (default: 30)' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Query)('days')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_t = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _t : Object, Number]),
    __metadata("design:returntype", typeof (_u = typeof Promise !== "undefined" && Promise) === "function" ? _u : Object)
], RecommendationController.prototype, "getAnalyticsSummary", null);
__decorate([
    (0, common_1.Get)('similar/:courseId'),
    (0, swagger_1.ApiOperation)({ summary: 'Get recommendations similar to a specific course' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', description: 'Course ID to find similar recommendations for' }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, description: 'Number of similar courses to return' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns similar course recommendations',
    }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Param)('courseId')),
    __param(2, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_v = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _v : Object, String, Number]),
    __metadata("design:returntype", typeof (_w = typeof Promise !== "undefined" && Promise) === "function" ? _w : Object)
], RecommendationController.prototype, "getSimilarCourseRecommendations", null);
__decorate([
    (0, common_1.Post)('bulk-feedback'),
    (0, swagger_1.ApiOperation)({ summary: 'Provide feedback on multiple recommendations' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Bulk feedback recorded successfully' }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_x = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _x : Object, typeof (_y = typeof Array !== "undefined" && Array) === "function" ? _y : Object]),
    __metadata("design:returntype", typeof (_z = typeof Promise !== "undefined" && Promise) === "function" ? _z : Object)
], RecommendationController.prototype, "provideBulkFeedback", null);
__decorate([
    (0, common_1.Get)('trending/topics'),
    (0, swagger_1.ApiOperation)({ summary: 'Get trending topics and skills for recommendations' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Returns trending topics and skills',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_0 = typeof Promise !== "undefined" && Promise) === "function" ? _0 : Object)
], RecommendationController.prototype, "getTrendingTopics", null);
exports.RecommendationController = RecommendationController = RecommendationController_1 = __decorate([
    (0, swagger_1.ApiTags)('Recommendations'),
    (0, common_1.Controller)('recommendations'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof recommendation_engine_service_1.RecommendationEngineService !== "undefined" && recommendation_engine_service_1.RecommendationEngineService) === "function" ? _a : Object, typeof (_b = typeof recommendation_analytics_service_1.RecommendationAnalyticsService !== "undefined" && recommendation_analytics_service_1.RecommendationAnalyticsService) === "function" ? _b : Object])
], RecommendationController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,