{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\learning-path.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\learning-path.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, In } from 'typeorm';\r\nimport { LearningPath, LearningPathStep, LearningPathStatus, StepType } from '../entities/learning-path.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { UserInteraction, InteractionType } from '../entities/user-interaction.entity';\r\nimport { CreateLearningPathDto, UpdateLearningPathDto, GetLearningPathsQueryDto } from '../dto/learning-path.dto';\r\nimport { RecommendationAnalyticsService } from './recommendation-analytics.service';\r\nimport { ContentSimilarityService } from './content-similarity.service';\r\n\r\nexport interface LearningGoal {\r\n  targetSkills: string[];\r\n  currentLevel: 'beginner' | 'intermediate' | 'advanced';\r\n  targetLevel: 'beginner' | 'intermediate' | 'advanced';\r\n  timeframe: number; // weeks\r\n  preferences: {\r\n    maxCoursesPerWeek?: number;\r\n    preferredDifficulty?: string[];\r\n    preferredDuration?: number; // minutes\r\n    excludeTopics?: string[];\r\n    includeTopics?: string[];\r\n  };\r\n}\r\n\r\nexport interface PathGenerationOptions {\r\n  maxCourses: number;\r\n  includeAssessments: boolean;\r\n  includeProjects: boolean;\r\n  adaptToProgress: boolean;\r\n  considerPrerequisites: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class LearningPathService {\r\n  private readonly logger = new Logger(LearningPathService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(LearningPath)\r\n    private learningPathRepository: Repository<LearningPath>,\r\n    @InjectRepository(LearningPathStep)\r\n    private stepRepository: Repository<LearningPathStep>,\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n    @InjectRepository(Course)\r\n    private courseRepository: Repository<Course>,\r\n    @InjectRepository(UserInteraction)\r\n    private interactionRepository: Repository<UserInteraction>,\r\n    private analyticsService: RecommendationAnalyticsService,\r\n    private similarityService: ContentSimilarityService,\r\n  ) {}\r\n\r\n  /**\r\n   * Generate a personalized learning path for a user\r\n   */\r\n  async generateLearningPath(\r\n    userId: string,\r\n    goal: LearningGoal,\r\n    options: PathGenerationOptions = {\r\n      maxCourses: 10,\r\n      includeAssessments: true,\r\n      includeProjects: true,\r\n      adaptToProgress: true,\r\n      considerPrerequisites: true,\r\n    },\r\n  ): Promise<LearningPath> {\r\n    this.logger.log(`Generating learning path for user ${userId}`);\r\n\r\n    try {\r\n      // Analyze user's current skills and progress\r\n      const userProfile = await this.analyzeUserProfile(userId);\r\n      \r\n      // Find relevant courses for the target skills\r\n      const candidateCourses = await this.findRelevantCourses(goal.targetSkills, goal.preferences);\r\n      \r\n      // Filter and sequence courses based on prerequisites and difficulty\r\n      const sequencedCourses = await this.sequenceCourses(candidateCourses, userProfile, goal, options);\r\n      \r\n      // Create learning path entity\r\n      const learningPath = await this.createLearningPathEntity(userId, goal, sequencedCourses);\r\n      \r\n      // Generate learning path steps\r\n      const steps = await this.generateLearningPathSteps(learningPath.id, sequencedCourses, goal, options);\r\n      \r\n      // Save the complete learning path\r\n      learningPath.steps = steps;\r\n      learningPath.totalSteps = steps.length;\r\n      learningPath.estimatedDuration = this.calculateEstimatedDuration(steps);\r\n      \r\n      const savedPath = await this.learningPathRepository.save(learningPath);\r\n      \r\n      // Track analytics\r\n      await this.analyticsService.trackRecommendationGeneration({\r\n        userId,\r\n        recommendationIds: [savedPath.id],\r\n        algorithmVersion: 'learning_path_v1.0',\r\n        generationTimeMs: Date.now(),\r\n        context: { goal, options },\r\n      });\r\n\r\n      this.logger.log(`Generated learning path with ${steps.length} steps for user ${userId}`);\r\n      return savedPath;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error generating learning path for user ${userId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get learning paths for a user\r\n   */\r\n  async getUserLearningPaths(userId: string, query: GetLearningPathsQueryDto): Promise<{\r\n    paths: LearningPath[];\r\n    total: number;\r\n  }> {\r\n    const queryBuilder = this.learningPathRepository\r\n      .createQueryBuilder('path')\r\n      .leftJoinAndSelect('path.steps', 'steps')\r\n      .leftJoinAndSelect('steps.course', 'course')\r\n      .where('path.userId = :userId', { userId });\r\n\r\n    // Apply filters\r\n    if (query.status) {\r\n      queryBuilder.andWhere('path.status = :status', { status: query.status });\r\n    }\r\n\r\n    if (query.skillArea) {\r\n      queryBuilder.andWhere('path.targetSkills @> :skillArea', { skillArea: [query.skillArea] });\r\n    }\r\n\r\n    // Apply sorting\r\n    queryBuilder.orderBy(`path.${query.sortBy}`, query.sortOrder);\r\n\r\n    // Get total count\r\n    const total = await queryBuilder.getCount();\r\n\r\n    // Apply pagination\r\n    queryBuilder.skip(query.offset).take(query.limit);\r\n\r\n    const paths = await queryBuilder.getMany();\r\n\r\n    return { paths, total };\r\n  }\r\n\r\n  /**\r\n   * Update learning path progress\r\n   */\r\n  async updateProgress(pathId: string, stepId: string, completed: boolean): Promise<LearningPath> {\r\n    const path = await this.learningPathRepository.findOne({\r\n      where: { id: pathId },\r\n      relations: ['steps'],\r\n    });\r\n\r\n    if (!path) {\r\n      throw new Error(`Learning path ${pathId} not found`);\r\n    }\r\n\r\n    const step = path.steps.find(s => s.id === stepId);\r\n    if (!step) {\r\n      throw new Error(`Step ${stepId} not found in learning path`);\r\n    }\r\n\r\n    // Update step completion\r\n    step.completed = completed;\r\n    step.completedAt = completed ? new Date() : null;\r\n    await this.stepRepository.save(step);\r\n\r\n    // Update path progress\r\n    const completedSteps = path.steps.filter(s => s.completed).length;\r\n    path.completedSteps = completedSteps;\r\n    path.progressPercentage = (completedSteps / path.totalSteps) * 100;\r\n\r\n    // Update path status\r\n    if (path.progressPercentage === 100) {\r\n      path.status = LearningPathStatus.COMPLETED;\r\n      path.completedAt = new Date();\r\n    } else if (path.progressPercentage > 0 && path.status === LearningPathStatus.NOT_STARTED) {\r\n      path.status = LearningPathStatus.IN_PROGRESS;\r\n      path.startedAt = new Date();\r\n    }\r\n\r\n    return await this.learningPathRepository.save(path);\r\n  }\r\n\r\n  /**\r\n   * Adapt learning path based on user progress and performance\r\n   */\r\n  async adaptLearningPath(pathId: string): Promise<LearningPath> {\r\n    const path = await this.learningPathRepository.findOne({\r\n      where: { id: pathId },\r\n      relations: ['steps', 'steps.course', 'user'],\r\n    });\r\n\r\n    if (!path) {\r\n      throw new Error(`Learning path ${pathId} not found`);\r\n    }\r\n\r\n    this.logger.log(`Adapting learning path ${pathId} based on user progress`);\r\n\r\n    // Analyze user's recent performance\r\n    const userPerformance = await this.analyzeUserPerformance(path.userId, path.steps);\r\n    \r\n    // Identify areas where user is struggling or excelling\r\n    const adaptations = await this.identifyAdaptations(path, userPerformance);\r\n    \r\n    // Apply adaptations\r\n    if (adaptations.length > 0) {\r\n      await this.applyAdaptations(path, adaptations);\r\n      \r\n      // Update path metadata\r\n      path.metadata = {\r\n        ...path.metadata,\r\n        adaptations: adaptations.map(a => ({\r\n          type: a.type,\r\n          reason: a.reason,\r\n          appliedAt: new Date(),\r\n        })),\r\n        lastAdaptedAt: new Date(),\r\n      };\r\n      \r\n      await this.learningPathRepository.save(path);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Get learning path recommendations based on user's interests and goals\r\n   */\r\n  async getPathRecommendations(userId: string, limit: number = 5): Promise<{\r\n    skillBasedPaths: LearningGoal[];\r\n    trendingPaths: LearningGoal[];\r\n    continuationPaths: LearningGoal[];\r\n  }> {\r\n    const user = await this.userRepository.findOne({ where: { id: userId } });\r\n    if (!user) {\r\n      throw new Error(`User ${userId} not found`);\r\n    }\r\n\r\n    // Get user's interaction history\r\n    const interactions = await this.interactionRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 100,\r\n      relations: ['course'],\r\n    });\r\n\r\n    // Generate skill-based path recommendations\r\n    const skillBasedPaths = await this.generateSkillBasedPathRecommendations(user, interactions, limit);\r\n    \r\n    // Generate trending path recommendations\r\n    const trendingPaths = await this.generateTrendingPathRecommendations(limit);\r\n    \r\n    // Generate continuation path recommendations\r\n    const continuationPaths = await this.generateContinuationPathRecommendations(user, interactions, limit);\r\n\r\n    return {\r\n      skillBasedPaths,\r\n      trendingPaths,\r\n      continuationPaths,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze user's current skills and learning profile\r\n   */\r\n  private async analyzeUserProfile(userId: string): Promise<{\r\n    currentSkills: string[];\r\n    skillLevels: Record<string, number>;\r\n    learningStyle: string;\r\n    completionRate: number;\r\n    averageSessionTime: number;\r\n    preferredDifficulty: string;\r\n  }> {\r\n    const user = await this.userRepository.findOne({ where: { id: userId } });\r\n    const interactions = await this.interactionRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 200,\r\n      relations: ['course'],\r\n    });\r\n\r\n    // Extract current skills from completed courses\r\n    const currentSkills = new Set<string>();\r\n    const skillLevels: Record<string, number> = {};\r\n    \r\n    interactions\r\n      .filter(i => i.interactionType === InteractionType.COMPLETE && i.course)\r\n      .forEach(i => {\r\n        if (i.course?.skills) {\r\n          i.course.skills.forEach(skill => {\r\n            currentSkills.add(skill);\r\n            skillLevels[skill] = (skillLevels[skill] || 0) + 1;\r\n          });\r\n        }\r\n      });\r\n\r\n    // Calculate completion rate\r\n    const enrollments = interactions.filter(i => i.interactionType === InteractionType.ENROLL).length;\r\n    const completions = interactions.filter(i => i.interactionType === InteractionType.COMPLETE).length;\r\n    const completionRate = enrollments > 0 ? completions / enrollments : 0;\r\n\r\n    // Analyze learning style based on interaction patterns\r\n    const learningStyle = this.determineLearningStyle(interactions);\r\n\r\n    // Calculate average session time (placeholder)\r\n    const averageSessionTime = 45; // minutes\r\n\r\n    // Determine preferred difficulty\r\n    const preferredDifficulty = this.determinePreferredDifficulty(interactions);\r\n\r\n    return {\r\n      currentSkills: Array.from(currentSkills),\r\n      skillLevels,\r\n      learningStyle,\r\n      completionRate,\r\n      averageSessionTime,\r\n      preferredDifficulty,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find courses relevant to target skills\r\n   */\r\n  private async findRelevantCourses(\r\n    targetSkills: string[],\r\n    preferences: LearningGoal['preferences'],\r\n  ): Promise<Course[]> {\r\n    const queryBuilder = this.courseRepository.createQueryBuilder('course')\r\n      .where('course.isActive = :isActive', { isActive: true });\r\n\r\n    // Filter by skills\r\n    if (targetSkills.length > 0) {\r\n      queryBuilder.andWhere('course.skills && :targetSkills', { targetSkills });\r\n    }\r\n\r\n    // Apply preferences\r\n    if (preferences.preferredDifficulty?.length) {\r\n      queryBuilder.andWhere('course.difficulty IN (:...difficulties)', {\r\n        difficulties: preferences.preferredDifficulty,\r\n      });\r\n    }\r\n\r\n    if (preferences.preferredDuration) {\r\n      queryBuilder.andWhere('course.duration <= :maxDuration', {\r\n        maxDuration: preferences.preferredDuration * 1.5, // Allow 50% flexibility\r\n      });\r\n    }\r\n\r\n    if (preferences.excludeTopics?.length) {\r\n      queryBuilder.andWhere('NOT (course.tags && :excludeTopics)', {\r\n        excludeTopics: preferences.excludeTopics,\r\n      });\r\n    }\r\n\r\n    if (preferences.includeTopics?.length) {\r\n      queryBuilder.andWhere('course.tags && :includeTopics', {\r\n        includeTopics: preferences.includeTopics,\r\n      });\r\n    }\r\n\r\n    // Order by rating and relevance\r\n    queryBuilder.orderBy('course.rating', 'DESC');\r\n\r\n    return await queryBuilder.getMany();\r\n  }\r\n\r\n  /**\r\n   * Sequence courses based on prerequisites and difficulty progression\r\n   */\r\n  private async sequenceCourses(\r\n    courses: Course[],\r\n    userProfile: any,\r\n    goal: LearningGoal,\r\n    options: PathGenerationOptions,\r\n  ): Promise<Course[]> {\r\n    // Group courses by difficulty level\r\n    const coursesByDifficulty = {\r\n      beginner: courses.filter(c => c.difficulty === 'beginner'),\r\n      intermediate: courses.filter(c => c.difficulty === 'intermediate'),\r\n      advanced: courses.filter(c => c.difficulty === 'advanced'),\r\n    };\r\n\r\n    const sequencedCourses: Course[] = [];\r\n    const userCurrentLevel = goal.currentLevel;\r\n    const userTargetLevel = goal.targetLevel;\r\n\r\n    // Start with appropriate difficulty level\r\n    let currentDifficulty = userCurrentLevel;\r\n    \r\n    // Add courses progressively\r\n    while (sequencedCourses.length < options.maxCourses && currentDifficulty) {\r\n      const availableCourses = coursesByDifficulty[currentDifficulty];\r\n      \r\n      if (availableCourses.length > 0) {\r\n        // Select best courses for current level\r\n        const selectedCourses = this.selectBestCoursesForLevel(\r\n          availableCourses,\r\n          userProfile,\r\n          goal,\r\n          Math.min(3, options.maxCourses - sequencedCourses.length)\r\n        );\r\n        \r\n        sequencedCourses.push(...selectedCourses);\r\n      }\r\n\r\n      // Progress to next difficulty level\r\n      if (currentDifficulty === 'beginner' && userTargetLevel !== 'beginner') {\r\n        currentDifficulty = 'intermediate';\r\n      } else if (currentDifficulty === 'intermediate' && userTargetLevel === 'advanced') {\r\n        currentDifficulty = 'advanced';\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return sequencedCourses.slice(0, options.maxCourses);\r\n  }\r\n\r\n  /**\r\n   * Select best courses for a specific difficulty level\r\n   */\r\n  private selectBestCoursesForLevel(\r\n    courses: Course[],\r\n    userProfile: any,\r\n    goal: LearningGoal,\r\n    maxCourses: number,\r\n  ): Course[] {\r\n    // Score courses based on relevance to user's goals and profile\r\n    const scoredCourses = courses.map(course => ({\r\n      course,\r\n      score: this.calculateCourseRelevanceScore(course, userProfile, goal),\r\n    }));\r\n\r\n    // Sort by score and return top courses\r\n    return scoredCourses\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, maxCourses)\r\n      .map(sc => sc.course);\r\n  }\r\n\r\n  /**\r\n   * Calculate course relevance score for learning path\r\n   */\r\n  private calculateCourseRelevanceScore(\r\n    course: Course,\r\n    userProfile: any,\r\n    goal: LearningGoal,\r\n  ): number {\r\n    let score = 0;\r\n\r\n    // Skill alignment (40% weight)\r\n    const skillOverlap = course.skills?.filter(skill => \r\n      goal.targetSkills.includes(skill)\r\n    ).length || 0;\r\n    const skillScore = skillOverlap / Math.max(goal.targetSkills.length, 1);\r\n    score += skillScore * 0.4;\r\n\r\n    // Course rating (20% weight)\r\n    const ratingScore = (course.rating || 0) / 5;\r\n    score += ratingScore * 0.2;\r\n\r\n    // User's current skill level alignment (20% weight)\r\n    const userHasPrereqs = course.prerequisites?.every(prereq => \r\n      userProfile.currentSkills.includes(prereq)\r\n    ) ?? true;\r\n    score += userHasPrereqs ? 0.2 : 0;\r\n\r\n    // Duration preference (10% weight)\r\n    if (goal.preferences.preferredDuration) {\r\n      const durationDiff = Math.abs((course.duration || 0) - goal.preferences.preferredDuration);\r\n      const durationScore = Math.max(0, 1 - durationDiff / goal.preferences.preferredDuration);\r\n      score += durationScore * 0.1;\r\n    }\r\n\r\n    // Popularity/enrollment count (10% weight)\r\n    const popularityScore = Math.min((course.enrollmentCount || 0) / 1000, 1);\r\n    score += popularityScore * 0.1;\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Create learning path entity\r\n   */\r\n  private async createLearningPathEntity(\r\n    userId: string,\r\n    goal: LearningGoal,\r\n    courses: Course[],\r\n  ): Promise<LearningPath> {\r\n    const learningPath = new LearningPath();\r\n    learningPath.userId = userId;\r\n    learningPath.title = `${goal.targetSkills.slice(0, 2).join(' & ')} Learning Path`;\r\n    learningPath.description = `Personalized learning path to master ${goal.targetSkills.join(', ')}`;\r\n    learningPath.targetSkills = goal.targetSkills;\r\n    learningPath.currentLevel = goal.currentLevel;\r\n    learningPath.targetLevel = goal.targetLevel;\r\n    learningPath.status = LearningPathStatus.NOT_STARTED;\r\n    learningPath.totalSteps = 0; // Will be updated after steps are created\r\n    learningPath.completedSteps = 0;\r\n    learningPath.progressPercentage = 0;\r\n    learningPath.estimatedDuration = 0; // Will be calculated after steps are created\r\n    learningPath.metadata = {\r\n      generatedAt: new Date(),\r\n      goal,\r\n      algorithmVersion: 'v1.0',\r\n    };\r\n\r\n    return await this.learningPathRepository.save(learningPath);\r\n  }\r\n\r\n  /**\r\n   * Generate learning path steps\r\n   */\r\n  private async generateLearningPathSteps(\r\n    pathId: string,\r\n    courses: Course[],\r\n    goal: LearningGoal,\r\n    options: PathGenerationOptions,\r\n  ): Promise<LearningPathStep[]> {\r\n    const steps: LearningPathStep[] = [];\r\n    let stepOrder = 1;\r\n\r\n    for (const course of courses) {\r\n      // Add course step\r\n      const courseStep = new LearningPathStep();\r\n      courseStep.learningPathId = pathId;\r\n      courseStep.courseId = course.id;\r\n      courseStep.stepType = StepType.COURSE;\r\n      courseStep.title = course.title;\r\n      courseStep.description = course.description;\r\n      courseStep.stepOrder = stepOrder++;\r\n      courseStep.estimatedDuration = course.duration || 60;\r\n      courseStep.completed = false;\r\n      courseStep.metadata = {\r\n        courseId: course.id,\r\n        difficulty: course.difficulty,\r\n        skills: course.skills,\r\n      };\r\n\r\n      steps.push(courseStep);\r\n\r\n      // Add assessment step if enabled\r\n      if (options.includeAssessments && stepOrder <= courses.length) {\r\n        const assessmentStep = new LearningPathStep();\r\n        assessmentStep.learningPathId = pathId;\r\n        assessmentStep.stepType = StepType.ASSESSMENT;\r\n        assessmentStep.title = `${course.title} - Knowledge Check`;\r\n        assessmentStep.description = `Assess your understanding of ${course.title}`;\r\n        assessmentStep.stepOrder = stepOrder++;\r\n        assessmentStep.estimatedDuration = 30;\r\n        assessmentStep.completed = false;\r\n        assessmentStep.metadata = {\r\n          relatedCourseId: course.id,\r\n          assessmentType: 'knowledge_check',\r\n        };\r\n\r\n        steps.push(assessmentStep);\r\n      }\r\n\r\n      // Add project step for advanced courses if enabled\r\n      if (options.includeProjects && course.difficulty === 'advanced') {\r\n        const projectStep = new LearningPathStep();\r\n        projectStep.learningPathId = pathId;\r\n        projectStep.stepType = StepType.PROJECT;\r\n        projectStep.title = `${course.title} - Practical Project`;\r\n        projectStep.description = `Apply your knowledge with a hands-on project`;\r\n        projectStep.stepOrder = stepOrder++;\r\n        projectStep.estimatedDuration = 120;\r\n        projectStep.completed = false;\r\n        projectStep.metadata = {\r\n          relatedCourseId: course.id,\r\n          projectType: 'capstone',\r\n        };\r\n\r\n        steps.push(projectStep);\r\n      }\r\n    }\r\n\r\n    // Save all steps\r\n    return await this.stepRepository.save(steps);\r\n  }\r\n\r\n  /**\r\n   * Calculate estimated duration for learning path\r\n   */\r\n  private calculateEstimatedDuration(steps: LearningPathStep[]): number {\r\n    return steps.reduce((total, step) => total + step.estimatedDuration, 0);\r\n  }\r\n\r\n  /**\r\n   * Analyze user performance for adaptation\r\n   */\r\n  private async analyzeUserPerformance(userId: string, steps: LearningPathStep[]): Promise<{\r\n    strugglingAreas: string[];\r\n    excellingAreas: string[];\r\n    averageCompletionTime: number;\r\n    completionRate: number;\r\n  }> {\r\n    // Analyze completion patterns and times\r\n    const completedSteps = steps.filter(s => s.completed);\r\n    const totalSteps = steps.length;\r\n    const completionRate = totalSteps > 0 ? completedSteps.length / totalSteps : 0;\r\n\r\n    // Identify struggling and excelling areas based on completion times and patterns\r\n    const strugglingAreas: string[] = [];\r\n    const excellingAreas: string[] = [];\r\n\r\n    // Calculate average completion time\r\n    const averageCompletionTime = completedSteps.length > 0\r\n      ? completedSteps.reduce((sum, step) => {\r\n          if (step.completedAt && step.createdAt) {\r\n            return sum + (step.completedAt.getTime() - step.createdAt.getTime());\r\n          }\r\n          return sum;\r\n        }, 0) / completedSteps.length\r\n      : 0;\r\n\r\n    return {\r\n      strugglingAreas,\r\n      excellingAreas,\r\n      averageCompletionTime: averageCompletionTime / (1000 * 60 * 60), // Convert to hours\r\n      completionRate,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Identify adaptations needed for learning path\r\n   */\r\n  private async identifyAdaptations(path: LearningPath, performance: any): Promise<Array<{\r\n    type: 'add_support' | 'skip_redundant' | 'adjust_pace' | 'change_difficulty';\r\n    reason: string;\r\n    stepId?: string;\r\n    newSteps?: Partial<LearningPathStep>[];\r\n  }>> {\r\n    const adaptations: any[] = [];\r\n\r\n    // If completion rate is low, add support materials\r\n    if (performance.completionRate < 0.5) {\r\n      adaptations.push({\r\n        type: 'add_support',\r\n        reason: 'Low completion rate detected, adding support materials',\r\n      });\r\n    }\r\n\r\n    // If user is excelling, skip redundant content\r\n    if (performance.excellingAreas.length > 0) {\r\n      adaptations.push({\r\n        type: 'skip_redundant',\r\n        reason: 'User excelling in certain areas, optimizing path',\r\n      });\r\n    }\r\n\r\n    return adaptations;\r\n  }\r\n\r\n  /**\r\n   * Apply adaptations to learning path\r\n   */\r\n  private async applyAdaptations(path: LearningPath, adaptations: any[]): Promise<void> {\r\n    for (const adaptation of adaptations) {\r\n      switch (adaptation.type) {\r\n        case 'add_support':\r\n          // Add support materials or easier prerequisite courses\r\n          break;\r\n        case 'skip_redundant':\r\n          // Mark certain steps as optional or completed\r\n          break;\r\n        case 'adjust_pace':\r\n          // Modify estimated durations\r\n          break;\r\n        case 'change_difficulty':\r\n          // Replace courses with easier/harder alternatives\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate skill-based path recommendations\r\n   */\r\n  private async generateSkillBasedPathRecommendations(\r\n    user: User,\r\n    interactions: UserInteraction[],\r\n    limit: number,\r\n  ): Promise<LearningGoal[]> {\r\n    // Analyze user's skill gaps and interests\r\n    const userSkills = user.skills || [];\r\n    const desiredSkills = user.desiredSkills || [];\r\n    const skillGaps = desiredSkills.filter(skill => !userSkills.includes(skill));\r\n\r\n    return skillGaps.slice(0, limit).map(skill => ({\r\n      targetSkills: [skill],\r\n      currentLevel: 'beginner' as const,\r\n      targetLevel: 'intermediate' as const,\r\n      timeframe: 8,\r\n      preferences: {\r\n        maxCoursesPerWeek: 2,\r\n        preferredDuration: 60,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate trending path recommendations\r\n   */\r\n  private async generateTrendingPathRecommendations(limit: number): Promise<LearningGoal[]> {\r\n    // Get trending skills/topics from recent course enrollments\r\n    const trendingSkills = ['React', 'Python', 'Machine Learning', 'DevOps', 'Cloud Computing'];\r\n\r\n    return trendingSkills.slice(0, limit).map(skill => ({\r\n      targetSkills: [skill],\r\n      currentLevel: 'beginner' as const,\r\n      targetLevel: 'advanced' as const,\r\n      timeframe: 12,\r\n      preferences: {\r\n        maxCoursesPerWeek: 1,\r\n        preferredDuration: 90,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate continuation path recommendations\r\n   */\r\n  private async generateContinuationPathRecommendations(\r\n    user: User,\r\n    interactions: UserInteraction[],\r\n    limit: number,\r\n  ): Promise<LearningGoal[]> {\r\n    // Find skills user has started learning but not mastered\r\n    const inProgressSkills = interactions\r\n      .filter(i => i.interactionType === InteractionType.START && i.course?.skills)\r\n      .flatMap(i => i.course!.skills!)\r\n      .filter((skill, index, arr) => arr.indexOf(skill) === index)\r\n      .slice(0, limit);\r\n\r\n    return inProgressSkills.map(skill => ({\r\n      targetSkills: [skill],\r\n      currentLevel: 'intermediate' as const,\r\n      targetLevel: 'advanced' as const,\r\n      timeframe: 6,\r\n      preferences: {\r\n        maxCoursesPerWeek: 2,\r\n        preferredDuration: 75,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Utility methods\r\n   */\r\n  private determineLearningStyle(interactions: UserInteraction[]): string {\r\n    // Analyze interaction patterns to determine learning style\r\n    const videoInteractions = interactions.filter(i => i.metadata?.contentType === 'video').length;\r\n    const textInteractions = interactions.filter(i => i.metadata?.contentType === 'text').length;\r\n    const practiceInteractions = interactions.filter(i => i.metadata?.contentType === 'practice').length;\r\n\r\n    if (videoInteractions > textInteractions && videoInteractions > practiceInteractions) {\r\n      return 'visual';\r\n    } else if (practiceInteractions > videoInteractions && practiceInteractions > textInteractions) {\r\n      return 'kinesthetic';\r\n    } else {\r\n      return 'reading';\r\n    }\r\n  }\r\n\r\n  private determinePreferredDifficulty(interactions: UserInteraction[]): string {\r\n    // Analyze completion rates by difficulty to determine preference\r\n    const completedCourses = interactions\r\n      .filter(i => i.interactionType === InteractionType.COMPLETE && i.course)\r\n      .map(i => i.course!);\r\n\r\n    const difficultyCompletions = {\r\n      beginner: completedCourses.filter(c => c.difficulty === 'beginner').length,\r\n      intermediate: completedCourses.filter(c => c.difficulty === 'intermediate').length,\r\n      advanced: completedCourses.filter(c => c.difficulty === 'advanced').length,\r\n    };\r\n\r\n    const maxCompletions = Math.max(...Object.values(difficultyCompletions));\r\n    const preferredDifficulty = Object.entries(difficultyCompletions)\r\n      .find(([_, count]) => count === maxCompletions)?.[0] || 'beginner';\r\n\r\n    return preferredDifficulty;\r\n  }\r\n}\r\n"],"version":3}