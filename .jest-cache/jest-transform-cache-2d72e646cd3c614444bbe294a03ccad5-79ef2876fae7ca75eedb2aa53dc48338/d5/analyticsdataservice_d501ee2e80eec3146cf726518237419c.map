{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\services\\analytics-data.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\services\\analytics-data.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport { type Repository, Between, MoreThanOrEqual } from \"typeorm\"\r\nimport type { UserCourseInteraction } from \"../../users/entities/user-course-interaction.entity\"\r\nimport type { Course } from \"../../courses/entities/course.entity\"\r\nimport type { User } from \"../../users/entities/user.entity\"\r\nimport type { CourseEngagementMetric } from \"../entities/course-engagement-metric.entity\"\r\nimport { Cron, CronExpression } from \"@nestjs/schedule\"\r\n\r\n@Injectable()\r\nexport class AnalyticsDataService {\r\n  private readonly logger = new Logger(AnalyticsDataService.name)\r\n\r\n  constructor(\r\n    userInteractionRepository: Repository<UserCourseInteraction>,\r\n    courseRepository: Repository<Course>,\r\n    userRepository: Repository<User>,\r\n    courseEngagementMetricRepository: Repository<CourseEngagementMetric>,\r\n  ) {\r\n    this.userInteractionRepository = userInteractionRepository\r\n    this.courseRepository = courseRepository\r\n    this.userRepository = userRepository\r\n    this.courseEngagementMetricRepository = courseEngagementMetricRepository\r\n  }\r\n\r\n  private readonly userInteractionRepository: Repository<UserCourseInteraction>\r\n  private readonly courseRepository: Repository<Course>\r\n  private readonly userRepository: Repository<User>\r\n  private readonly courseEngagementMetricRepository: Repository<CourseEngagementMetric>\r\n\r\n  async getCourseInteractions(\r\n    courseId?: string,\r\n    userId?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n  ): Promise<UserCourseInteraction[]> {\r\n    const where: any = {}\r\n    if (courseId) where.courseId = courseId\r\n    if (userId) where.userId = userId\r\n    if (startDate && endDate) where.createdAt = Between(startDate, endDate)\r\n    else if (startDate) where.createdAt = MoreThanOrEqual(startDate)\r\n\r\n    return this.userInteractionRepository.find({\r\n      where,\r\n      relations: [\"course\", \"user\"],\r\n    })\r\n  }\r\n\r\n  async getCourses(courseId?: string, instructorId?: string): Promise<Course[]> {\r\n    const where: any = {}\r\n    if (courseId) where.id = courseId\r\n    if (instructorId) where.instructorId = instructorId // Assuming instructorId exists on Course entity or can be joined\r\n    return this.courseRepository.find({ where })\r\n  }\r\n\r\n  async getUsers(userId?: string): Promise<User[]> {\r\n    const where: any = {}\r\n    if (userId) where.id = userId\r\n    return this.userRepository.find({ where })\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\r\n  async aggregateDailyCourseEngagementMetrics() {\r\n    this.logger.log(\"Starting daily course engagement aggregation...\")\r\n    const today = new Date()\r\n    today.setHours(0, 0, 0, 0) // Start of today\r\n\r\n    const yesterday = new Date(today)\r\n    yesterday.setDate(today.getDate() - 1)\r\n\r\n    try {\r\n      const courses = await this.courseRepository.find()\r\n\r\n      for (const course of courses) {\r\n        const interactions = await this.userInteractionRepository.find({\r\n          where: {\r\n            courseId: course.id,\r\n            createdAt: Between(yesterday, today),\r\n          },\r\n          relations: [\"user\"],\r\n        })\r\n\r\n        const totalEnrollments = interactions.filter((i) => i.progress === 0).length\r\n        const totalCompletions = interactions.filter((i) => i.completed).length\r\n        const activeUsers = new Set(interactions.map((i) => i.userId)).size\r\n\r\n        let totalProgress = 0\r\n        let totalTimeSpent = 0\r\n        let dropOffCount = 0\r\n\r\n        interactions.forEach((i) => {\r\n          totalProgress += i.progress || 0\r\n          totalTimeSpent += i.timeSpent || 0\r\n          if (i.progress > 0 && !i.completed && i.timeSpent < course.duration * 0.2) {\r\n            dropOffCount++ // Simple heuristic for drop-off\r\n          }\r\n        })\r\n\r\n        const averageProgress = activeUsers > 0 ? totalProgress / activeUsers : 0\r\n        const averageTimeSpent = activeUsers > 0 ? totalTimeSpent / activeUsers : 0\r\n        const dropOffRate = totalEnrollments > 0 ? (dropOffCount / totalEnrollments) * 100 : 0\r\n\r\n        let metric = await this.courseEngagementMetricRepository.findOne({\r\n          where: { courseId: course.id, date: yesterday },\r\n        })\r\n\r\n        if (!metric) {\r\n          metric = this.courseEngagementMetricRepository.create({\r\n            courseId: course.id,\r\n            date: yesterday,\r\n          })\r\n        }\r\n\r\n        metric.totalEnrollments = totalEnrollments\r\n        metric.totalCompletions = totalCompletions\r\n        metric.averageProgress = averageProgress\r\n        metric.averageTimeSpent = averageTimeSpent\r\n        metric.dropOffRate = dropOffRate\r\n        metric.activeUsers = activeUsers\r\n\r\n        await this.courseEngagementMetricRepository.save(metric)\r\n      }\r\n      this.logger.log(\"Daily course engagement aggregation completed.\")\r\n    } catch (error) {\r\n      this.logger.error(\"Error during daily course engagement aggregation:\", error.stack)\r\n    }\r\n  }\r\n\r\n  async getAggregatedCourseMetrics(\r\n    courseId: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n  ): Promise<CourseEngagementMetric[]> {\r\n    const where: any = { courseId }\r\n    if (startDate && endDate) where.date = Between(startDate, endDate)\r\n    else if (startDate) where.date = MoreThanOrEqual(startDate)\r\n\r\n    return this.courseEngagementMetricRepository.find({ where, order: { date: \"ASC\" } })\r\n  }\r\n}\r\n"],"version":3}