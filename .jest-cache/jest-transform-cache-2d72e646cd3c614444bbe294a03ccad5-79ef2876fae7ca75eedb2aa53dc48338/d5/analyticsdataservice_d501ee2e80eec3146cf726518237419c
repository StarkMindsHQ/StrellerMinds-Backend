9a30f34274c4f9552c485a4e8812aea1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AnalyticsDataService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsDataService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const schedule_1 = require("@nestjs/schedule");
let AnalyticsDataService = AnalyticsDataService_1 = class AnalyticsDataService {
    constructor(userInteractionRepository, courseRepository, userRepository, courseEngagementMetricRepository) {
        this.logger = new common_1.Logger(AnalyticsDataService_1.name);
        this.userInteractionRepository = userInteractionRepository;
        this.courseRepository = courseRepository;
        this.userRepository = userRepository;
        this.courseEngagementMetricRepository = courseEngagementMetricRepository;
    }
    async getCourseInteractions(courseId, userId, startDate, endDate) {
        const where = {};
        if (courseId)
            where.courseId = courseId;
        if (userId)
            where.userId = userId;
        if (startDate && endDate)
            where.createdAt = (0, typeorm_1.Between)(startDate, endDate);
        else if (startDate)
            where.createdAt = (0, typeorm_1.MoreThanOrEqual)(startDate);
        return this.userInteractionRepository.find({
            where,
            relations: ["course", "user"],
        });
    }
    async getCourses(courseId, instructorId) {
        const where = {};
        if (courseId)
            where.id = courseId;
        if (instructorId)
            where.instructorId = instructorId; // Assuming instructorId exists on Course entity or can be joined
        return this.courseRepository.find({ where });
    }
    async getUsers(userId) {
        const where = {};
        if (userId)
            where.id = userId;
        return this.userRepository.find({ where });
    }
    async aggregateDailyCourseEngagementMetrics() {
        this.logger.log("Starting daily course engagement aggregation...");
        const today = new Date();
        today.setHours(0, 0, 0, 0); // Start of today
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        try {
            const courses = await this.courseRepository.find();
            for (const course of courses) {
                const interactions = await this.userInteractionRepository.find({
                    where: {
                        courseId: course.id,
                        createdAt: (0, typeorm_1.Between)(yesterday, today),
                    },
                    relations: ["user"],
                });
                const totalEnrollments = interactions.filter((i) => i.progress === 0).length;
                const totalCompletions = interactions.filter((i) => i.completed).length;
                const activeUsers = new Set(interactions.map((i) => i.userId)).size;
                let totalProgress = 0;
                let totalTimeSpent = 0;
                let dropOffCount = 0;
                interactions.forEach((i) => {
                    totalProgress += i.progress || 0;
                    totalTimeSpent += i.timeSpent || 0;
                    if (i.progress > 0 && !i.completed && i.timeSpent < course.duration * 0.2) {
                        dropOffCount++; // Simple heuristic for drop-off
                    }
                });
                const averageProgress = activeUsers > 0 ? totalProgress / activeUsers : 0;
                const averageTimeSpent = activeUsers > 0 ? totalTimeSpent / activeUsers : 0;
                const dropOffRate = totalEnrollments > 0 ? (dropOffCount / totalEnrollments) * 100 : 0;
                let metric = await this.courseEngagementMetricRepository.findOne({
                    where: { courseId: course.id, date: yesterday },
                });
                if (!metric) {
                    metric = this.courseEngagementMetricRepository.create({
                        courseId: course.id,
                        date: yesterday,
                    });
                }
                metric.totalEnrollments = totalEnrollments;
                metric.totalCompletions = totalCompletions;
                metric.averageProgress = averageProgress;
                metric.averageTimeSpent = averageTimeSpent;
                metric.dropOffRate = dropOffRate;
                metric.activeUsers = activeUsers;
                await this.courseEngagementMetricRepository.save(metric);
            }
            this.logger.log("Daily course engagement aggregation completed.");
        }
        catch (error) {
            this.logger.error("Error during daily course engagement aggregation:", error.stack);
        }
    }
    async getAggregatedCourseMetrics(courseId, startDate, endDate) {
        const where = { courseId };
        if (startDate && endDate)
            where.date = (0, typeorm_1.Between)(startDate, endDate);
        else if (startDate)
            where.date = (0, typeorm_1.MoreThanOrEqual)(startDate);
        return this.courseEngagementMetricRepository.find({ where, order: { date: "ASC" } });
    }
};
exports.AnalyticsDataService = AnalyticsDataService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AnalyticsDataService.prototype, "aggregateDailyCourseEngagementMetrics", null);
exports.AnalyticsDataService = AnalyticsDataService = AnalyticsDataService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], AnalyticsDataService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,