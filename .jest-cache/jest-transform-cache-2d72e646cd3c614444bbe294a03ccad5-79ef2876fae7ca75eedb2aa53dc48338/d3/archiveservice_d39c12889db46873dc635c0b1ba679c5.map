{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\archive\\services\\archive.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\archive\\services\\archive.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { LessThan, Repository } from 'typeorm';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { ArchivedUser } from '../../users/entities/archived-user.entity';\r\nimport { UserProfile } from '../../user-profiles/entities/user-profile.entity';\r\nimport { ArchivedUserProfile } from '../../user-profiles/entities/archived-user-profile.entity';\r\nimport { ArchivedPayment } from '../../payment/entities/archived-payment.entity';\r\nimport { ArchivedNotification } from '../../notification/entities/archived-notification.entity';\r\n\r\n@Injectable()\r\nexport class ArchiveService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private userRepo: Repository<User>,\r\n\r\n    @InjectRepository(ArchivedUser)\r\n    private archivedUserRepo: Repository<ArchivedUser>,\r\n\r\n    @InjectRepository(UserProfile)\r\n    private profileRepo: Repository<UserProfile>,\r\n\r\n    @InjectRepository(ArchivedUserProfile)\r\n    private archivedProfileRepo: Repository<ArchivedUserProfile>,\r\n\r\n    \r\n\r\n    @InjectRepository(ArchivedPayment)\r\n    private archivedPaymentRepo: Repository<ArchivedPayment>,\r\n\r\n    @InjectRepository(Notification)\r\n    private notificationRepo: Repository<Notification>,\r\n\r\n    @InjectRepository(ArchivedNotification)\r\n    private archivedNotificationRepo: Repository<ArchivedNotification>,\r\n  ) {}\r\n\r\n  // _______________________ Archive Users ________________________________________\r\n\r\n  public async archiveOldUsers(): Promise<void> {\r\n    const oneYearAgo = new Date();\r\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\r\n\r\n    const oldUsers = await this.userRepo.find({\r\n      where: { createdAt: LessThan(oneYearAgo) },\r\n    });\r\n\r\n    const archived = oldUsers.map((user) => {\r\n      const archivedUser = new ArchivedUser();\r\n      Object.assign(archivedUser, user);\r\n      archivedUser.archivedAt = new Date();\r\n      return archivedUser;\r\n    });\r\n\r\n    await this.archivedUserRepo.save(archived);\r\n    await this.userRepo.remove(oldUsers);\r\n  }\r\n\r\n  //______________________________________ Archive UserProfiles ____________________________________\r\n\r\n  public async archiveOldUserProfiles(): Promise<void> {\r\n    const oneYearAgo = new Date();\r\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\r\n\r\n    const oldProfiles = await this.profileRepo.find({\r\n      where: { createdAt: LessThan(oneYearAgo) },\r\n    });\r\n\r\n    const archived = oldProfiles.map((profile) => {\r\n      const archivedProfile = new ArchivedUserProfile();\r\n      Object.assign(archivedProfile, profile);\r\n      archivedProfile.archivedAt = new Date();\r\n      return archivedProfile;\r\n    });\r\n\r\n    await this.archivedProfileRepo.save(archived);\r\n    await this.profileRepo.remove(oldProfiles);\r\n  }\r\n\r\n  // __________________________________ Archive Payments _____________________________________\r\n\r\n  // public async archiveOldPayments(): Promise<void> {\r\n  //   const sixMonthsAgo = new Date();\r\n  //   sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n  //   const oldPayments = await this.paymentRepo.find({\r\n  //     where: { createdAt: LessThan(sixMonthsAgo) },\r\n  //   });\r\n\r\n  //   const archived = oldPayments.map((payment) => {\r\n  //     const archivedPayment = new ArchivedPayment();\r\n  //     Object.assign(archivedPayment, payment);\r\n  //     archivedPayment.archivedAt = new Date();\r\n  //     return archivedPayment;\r\n  //   });\r\n\r\n  //   await this.archivedPaymentRepo.save(archived);\r\n  //   await this.paymentRepo.remove(oldPayments);\r\n  // }\r\n\r\n  //_____________________________________   Archive Notifications _____________________________\r\n\r\n  // public async archiveOldNotifications(): Promise<void> {\r\n  //   const sixMonthsAgo = new Date();\r\n  //   sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n  //   const oldNotifications = await this.notificationRepo.find({\r\n  //     where: { createdAt: LessThan(sixMonthsAgo) },\r\n  //   });\r\n\r\n  //   const archived = oldNotifications.map((notification) => {\r\n  //     const archivedNotification = new ArchivedNotification();\r\n  //     Object.assign(archivedNotification, notification);\r\n  //     archivedNotification.archivedAt = new Date();\r\n  //     return archivedNotification;\r\n  //   });\r\n\r\n  //   await this.archivedNotificationRepo.save(archived);\r\n  //   await this.notificationRepo.remove(oldNotifications);\r\n  // }\r\n}\r\n"],"version":3}