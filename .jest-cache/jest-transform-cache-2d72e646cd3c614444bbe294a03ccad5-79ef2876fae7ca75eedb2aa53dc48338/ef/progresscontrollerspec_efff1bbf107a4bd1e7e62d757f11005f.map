{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\progress\\progress.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,+DAA2D;AAC3D,yDAAqD;AAErD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,UAA8B,CAAC;IACnC,IAAI,OAAwB,CAAC;IAE7B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,wCAAkB,CAAC;YACjC,SAAS,EAAE,CAAC,kCAAe,CAAC;SAC7B,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,wCAAkB,CAAC,CAAC;QAChE,OAAO,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,YAAY,GAAG;YACnB,MAAM,EAAE,CAAC;YACT,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAC5B,oBAAoB,EAAE,IAAI;SAC3B,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACrE,MAAM,MAAM,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\progress\\progress.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ProgressController } from './progress.controller';\r\nimport { ProgressService } from './progress.service';\r\n\r\ndescribe('ProgressController', () => {\r\n  let controller: ProgressController;\r\n  let service: ProgressService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [ProgressController],\r\n      providers: [ProgressService],\r\n    }).compile();\r\n\r\n    controller = module.get<ProgressController>(ProgressController);\r\n    service = module.get<ProgressService>(ProgressService);\r\n  });\r\n\r\n  it('should call completeLesson and return message', () => {\r\n    const completeSpy = jest.spyOn(service, 'completeLesson');\r\n    const result = controller.completeLesson(1, 101);\r\n    expect(completeSpy).toHaveBeenCalledWith(1, 101);\r\n    expect(result).toEqual({ message: 'Lesson marked as completed' });\r\n  });\r\n\r\n  it('should get progress data for user', () => {\r\n    const mockProgress = {\r\n      userId: 1,\r\n      completedLessons: [101, 102],\r\n      completionPercentage: 66.7,\r\n    };\r\n    jest.spyOn(service, 'getProgressData').mockReturnValue(mockProgress);\r\n    const result = controller.getUserProgress(1, 3);\r\n    expect(result).toEqual(mockProgress);\r\n    expect(service.getProgressData).toHaveBeenCalledWith(1, 3);\r\n  });\r\n});\r\n"],"version":3}