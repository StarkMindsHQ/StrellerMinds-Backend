{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\enrollment\\enrollment.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\enrollment\\enrollment.service.spec.ts"],"sourcesContent":["// src/enrollment/enrollment.service.spec.ts\r\nimport { EnrollmentService } from './enrollment.service';\r\nimport { CreateEnrollmentDto } from './dto/create-enrollment.dto';\r\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\r\n\r\ndescribe('EnrollmentService', () => {\r\n  let service: EnrollmentService;\r\n\r\n  beforeEach(() => {\r\n    service = new EnrollmentService();\r\n  });\r\n\r\n  describe('enroll', () => {\r\n    it('should enroll a student successfully', async () => {\r\n      const dto: CreateEnrollmentDto = { studentId: 'student1', courseId: 'course1' };\r\n      const enrollment = await service.enroll(dto);\r\n\r\n      expect(enrollment).toHaveProperty('id');\r\n      expect(enrollment.studentId).toBe('student1');\r\n      expect(enrollment.courseId).toBe('course1');\r\n      expect(enrollment.status).toBe('ENROLLED');\r\n      expect(enrollment.paymentStatus).toBe('PAID');\r\n    });\r\n\r\n    it('should throw error if already enrolled', async () => {\r\n      const dto: CreateEnrollmentDto = { studentId: 'student2', courseId: 'course1' };\r\n      await service.enroll(dto);\r\n\r\n      await expect(service.enroll(dto)).rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw error if course is full', async () => {\r\n      const dto1 = { studentId: 's1', courseId: 'course1' };\r\n      const dto2 = { studentId: 's2', courseId: 'course1' };\r\n      const dto3 = { studentId: 's3', courseId: 'course1' };\r\n\r\n      await service.enroll(dto1);\r\n      await service.enroll(dto2);\r\n\r\n      await expect(service.enroll(dto3)).rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw error if prerequisites are not met', async () => {\r\n      const dto: CreateEnrollmentDto = { studentId: 'student3', courseId: 'course2' }; // course2 requires course1\r\n\r\n      await expect(service.enroll(dto)).rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should allow enrollment after completing prerequisites', async () => {\r\n      const studentId = 'student4';\r\n\r\n      // Complete course1 first\r\n      await service.enroll({ studentId, courseId: 'course1' });\r\n\r\n      // Then enroll in course2\r\n      const enrollment = await service.enroll({ studentId, courseId: 'course2' });\r\n\r\n      expect(enrollment.courseId).toBe('course2');\r\n      expect(enrollment.status).toBe('ENROLLED');\r\n    });\r\n  });\r\n\r\n  describe('unenroll', () => {\r\n    it('should unenroll a student successfully', async () => {\r\n      const dto: CreateEnrollmentDto = { studentId: 'student5', courseId: 'course1' };\r\n      const enrollment = await service.enroll(dto);\r\n\r\n      await service.unenroll(enrollment.id);\r\n\r\n      const found = service.findAll().find(e => e.id === enrollment.id);\r\n      expect(found.status).toBe('UNENROLLED');\r\n    });\r\n\r\n    it('should throw error if enrollment not found', async () => {\r\n      await expect(service.unenroll('non-existing-id')).rejects.toThrow(NotFoundException);\r\n    });\r\n\r\n    it('should throw error if already unenrolled', async () => {\r\n      const dto: CreateEnrollmentDto = { studentId: 'student6', courseId: 'course1' };\r\n      const enrollment = await service.enroll(dto);\r\n\r\n      await service.unenroll(enrollment.id);\r\n\r\n      await expect(service.unenroll(enrollment.id)).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return all enrollments', async () => {\r\n      const dto1: CreateEnrollmentDto = { studentId: 'student7', courseId: 'course1' };\r\n      const dto2: CreateEnrollmentDto = { studentId: 'student8', courseId: 'course1' };\r\n\r\n      await service.enroll(dto1);\r\n      await service.enroll(dto2);\r\n\r\n      const enrollments = service.findAll();\r\n      expect(enrollments.length).toBeGreaterThanOrEqual(2);\r\n    });\r\n  });\r\n});\r\n"],"version":3}