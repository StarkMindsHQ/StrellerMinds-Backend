ba1f6f50f2a7e321c579427b3b04548a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const search_analytics_entity_1 = require("./search-analytics.entity");
describe("SearchAnalytics Entity", () => {
    let searchAnalytics;
    beforeEach(() => {
        searchAnalytics = new search_analytics_entity_1.SearchAnalytics();
    });
    it("should create a valid search analytics entity", async () => {
        searchAnalytics.query = "stellar blockchain";
        searchAnalytics.userId = "user123";
        searchAnalytics.resultsCount = 5;
        searchAnalytics.clickedResults = ["course1", "course2"];
        searchAnalytics.searchedAt = new Date();
        const errors = await (0, class_validator_1.validate)(searchAnalytics);
        expect(errors).toHaveLength(0);
    });
    it("should fail validation for empty query", async () => {
        searchAnalytics.query = "";
        searchAnalytics.userId = "user123";
        searchAnalytics.resultsCount = 5;
        const errors = await (0, class_validator_1.validate)(searchAnalytics);
        expect(errors).toHaveLength(1);
        expect(errors[0].property).toBe("query");
    });
    it("should fail validation for negative results count", async () => {
        searchAnalytics.query = "stellar";
        searchAnalytics.userId = "user123";
        searchAnalytics.resultsCount = -1;
        const errors = await (0, class_validator_1.validate)(searchAnalytics);
        expect(errors).toHaveLength(1);
        expect(errors[0].property).toBe("resultsCount");
    });
    it("should allow null userId for anonymous searches", async () => {
        searchAnalytics.query = "stellar";
        searchAnalytics.userId = null;
        searchAnalytics.resultsCount = 5;
        const errors = await (0, class_validator_1.validate)(searchAnalytics);
        expect(errors).toHaveLength(0);
    });
    it("should initialize with default values", () => {
        expect(searchAnalytics.clickedResults).toEqual([]);
        expect(searchAnalytics.searchedAt).toBeInstanceOf(Date);
    });
    it("should handle clicked results array", () => {
        searchAnalytics.clickedResults = ["course1", "course2", "course3"];
        expect(searchAnalytics.clickedResults).toHaveLength(3);
        expect(searchAnalytics.clickedResults).toContain("course1");
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzZWFyY2hcXGVudGl0aWVzXFxzZWFyY2gtYW5hbHl0aWNzLmVudGl0eS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscURBQTBDO0FBQzFDLHVFQUEyRDtBQUUzRCxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksZUFBZ0MsQ0FBQTtJQUVwQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsZUFBZSxHQUFHLElBQUkseUNBQWUsRUFBRSxDQUFBO0lBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzdELGVBQWUsQ0FBQyxLQUFLLEdBQUcsb0JBQW9CLENBQUE7UUFDNUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUE7UUFDbEMsZUFBZSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7UUFDaEMsZUFBZSxDQUFDLGNBQWMsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN2RCxlQUFlLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7UUFFdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDBCQUFRLEVBQUMsZUFBZSxDQUFDLENBQUE7UUFDOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxlQUFlLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQTtRQUMxQixlQUFlLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQTtRQUNsQyxlQUFlLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQTtRQUVoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsMEJBQVEsRUFBQyxlQUFlLENBQUMsQ0FBQTtRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzFDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pFLGVBQWUsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFBO1FBQ2pDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFBO1FBQ2xDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFFakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDBCQUFRLEVBQUMsZUFBZSxDQUFDLENBQUE7UUFDOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUNqRCxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvRCxlQUFlLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQTtRQUNqQyxlQUFlLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTtRQUM3QixlQUFlLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQTtRQUVoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsMEJBQVEsRUFBQyxlQUFlLENBQUMsQ0FBQTtRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxNQUFNLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNsRCxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsZUFBZSxDQUFDLGNBQWMsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDbEUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDN0QsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXHNlYXJjaFxcZW50aXRpZXNcXHNlYXJjaC1hbmFseXRpY3MuZW50aXR5LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tIFwiY2xhc3MtdmFsaWRhdG9yXCJcclxuaW1wb3J0IHsgU2VhcmNoQW5hbHl0aWNzIH0gZnJvbSBcIi4vc2VhcmNoLWFuYWx5dGljcy5lbnRpdHlcIlxyXG5cclxuZGVzY3JpYmUoXCJTZWFyY2hBbmFseXRpY3MgRW50aXR5XCIsICgpID0+IHtcclxuICBsZXQgc2VhcmNoQW5hbHl0aWNzOiBTZWFyY2hBbmFseXRpY3NcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBzZWFyY2hBbmFseXRpY3MgPSBuZXcgU2VhcmNoQW5hbHl0aWNzKClcclxuICB9KVxyXG5cclxuICBpdChcInNob3VsZCBjcmVhdGUgYSB2YWxpZCBzZWFyY2ggYW5hbHl0aWNzIGVudGl0eVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBzZWFyY2hBbmFseXRpY3MucXVlcnkgPSBcInN0ZWxsYXIgYmxvY2tjaGFpblwiXHJcbiAgICBzZWFyY2hBbmFseXRpY3MudXNlcklkID0gXCJ1c2VyMTIzXCJcclxuICAgIHNlYXJjaEFuYWx5dGljcy5yZXN1bHRzQ291bnQgPSA1XHJcbiAgICBzZWFyY2hBbmFseXRpY3MuY2xpY2tlZFJlc3VsdHMgPSBbXCJjb3Vyc2UxXCIsIFwiY291cnNlMlwiXVxyXG4gICAgc2VhcmNoQW5hbHl0aWNzLnNlYXJjaGVkQXQgPSBuZXcgRGF0ZSgpXHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoc2VhcmNoQW5hbHl0aWNzKVxyXG4gICAgZXhwZWN0KGVycm9ycykudG9IYXZlTGVuZ3RoKDApXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJzaG91bGQgZmFpbCB2YWxpZGF0aW9uIGZvciBlbXB0eSBxdWVyeVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBzZWFyY2hBbmFseXRpY3MucXVlcnkgPSBcIlwiXHJcbiAgICBzZWFyY2hBbmFseXRpY3MudXNlcklkID0gXCJ1c2VyMTIzXCJcclxuICAgIHNlYXJjaEFuYWx5dGljcy5yZXN1bHRzQ291bnQgPSA1XHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoc2VhcmNoQW5hbHl0aWNzKVxyXG4gICAgZXhwZWN0KGVycm9ycykudG9IYXZlTGVuZ3RoKDEpXHJcbiAgICBleHBlY3QoZXJyb3JzWzBdLnByb3BlcnR5KS50b0JlKFwicXVlcnlcIilcclxuICB9KVxyXG5cclxuICBpdChcInNob3VsZCBmYWlsIHZhbGlkYXRpb24gZm9yIG5lZ2F0aXZlIHJlc3VsdHMgY291bnRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgc2VhcmNoQW5hbHl0aWNzLnF1ZXJ5ID0gXCJzdGVsbGFyXCJcclxuICAgIHNlYXJjaEFuYWx5dGljcy51c2VySWQgPSBcInVzZXIxMjNcIlxyXG4gICAgc2VhcmNoQW5hbHl0aWNzLnJlc3VsdHNDb3VudCA9IC0xXHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoc2VhcmNoQW5hbHl0aWNzKVxyXG4gICAgZXhwZWN0KGVycm9ycykudG9IYXZlTGVuZ3RoKDEpXHJcbiAgICBleHBlY3QoZXJyb3JzWzBdLnByb3BlcnR5KS50b0JlKFwicmVzdWx0c0NvdW50XCIpXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJzaG91bGQgYWxsb3cgbnVsbCB1c2VySWQgZm9yIGFub255bW91cyBzZWFyY2hlc1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBzZWFyY2hBbmFseXRpY3MucXVlcnkgPSBcInN0ZWxsYXJcIlxyXG4gICAgc2VhcmNoQW5hbHl0aWNzLnVzZXJJZCA9IG51bGxcclxuICAgIHNlYXJjaEFuYWx5dGljcy5yZXN1bHRzQ291bnQgPSA1XHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoc2VhcmNoQW5hbHl0aWNzKVxyXG4gICAgZXhwZWN0KGVycm9ycykudG9IYXZlTGVuZ3RoKDApXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzXCIsICgpID0+IHtcclxuICAgIGV4cGVjdChzZWFyY2hBbmFseXRpY3MuY2xpY2tlZFJlc3VsdHMpLnRvRXF1YWwoW10pXHJcbiAgICBleHBlY3Qoc2VhcmNoQW5hbHl0aWNzLnNlYXJjaGVkQXQpLnRvQmVJbnN0YW5jZU9mKERhdGUpXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJzaG91bGQgaGFuZGxlIGNsaWNrZWQgcmVzdWx0cyBhcnJheVwiLCAoKSA9PiB7XHJcbiAgICBzZWFyY2hBbmFseXRpY3MuY2xpY2tlZFJlc3VsdHMgPSBbXCJjb3Vyc2UxXCIsIFwiY291cnNlMlwiLCBcImNvdXJzZTNcIl1cclxuICAgIGV4cGVjdChzZWFyY2hBbmFseXRpY3MuY2xpY2tlZFJlc3VsdHMpLnRvSGF2ZUxlbmd0aCgzKVxyXG4gICAgZXhwZWN0KHNlYXJjaEFuYWx5dGljcy5jbGlja2VkUmVzdWx0cykudG9Db250YWluKFwiY291cnNlMVwiKVxyXG4gIH0pXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==