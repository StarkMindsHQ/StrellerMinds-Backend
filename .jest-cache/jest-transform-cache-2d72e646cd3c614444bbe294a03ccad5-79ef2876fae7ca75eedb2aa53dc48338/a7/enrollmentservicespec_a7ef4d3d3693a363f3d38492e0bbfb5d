d41f2bd3c4ff523654afaaf1e1ff6eb7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/enrollment/enrollment.service.spec.ts
const enrollment_service_1 = require("./enrollment.service");
const common_1 = require("@nestjs/common");
describe('EnrollmentService', () => {
    let service;
    beforeEach(() => {
        service = new enrollment_service_1.EnrollmentService();
    });
    describe('enroll', () => {
        it('should enroll a student successfully', async () => {
            const dto = { studentId: 'student1', courseId: 'course1' };
            const enrollment = await service.enroll(dto);
            expect(enrollment).toHaveProperty('id');
            expect(enrollment.studentId).toBe('student1');
            expect(enrollment.courseId).toBe('course1');
            expect(enrollment.status).toBe('ENROLLED');
            expect(enrollment.paymentStatus).toBe('PAID');
        });
        it('should throw error if already enrolled', async () => {
            const dto = { studentId: 'student2', courseId: 'course1' };
            await service.enroll(dto);
            await expect(service.enroll(dto)).rejects.toThrow(common_1.BadRequestException);
        });
        it('should throw error if course is full', async () => {
            const dto1 = { studentId: 's1', courseId: 'course1' };
            const dto2 = { studentId: 's2', courseId: 'course1' };
            const dto3 = { studentId: 's3', courseId: 'course1' };
            await service.enroll(dto1);
            await service.enroll(dto2);
            await expect(service.enroll(dto3)).rejects.toThrow(common_1.BadRequestException);
        });
        it('should throw error if prerequisites are not met', async () => {
            const dto = { studentId: 'student3', courseId: 'course2' }; // course2 requires course1
            await expect(service.enroll(dto)).rejects.toThrow(common_1.BadRequestException);
        });
        it('should allow enrollment after completing prerequisites', async () => {
            const studentId = 'student4';
            // Complete course1 first
            await service.enroll({ studentId, courseId: 'course1' });
            // Then enroll in course2
            const enrollment = await service.enroll({ studentId, courseId: 'course2' });
            expect(enrollment.courseId).toBe('course2');
            expect(enrollment.status).toBe('ENROLLED');
        });
    });
    describe('unenroll', () => {
        it('should unenroll a student successfully', async () => {
            const dto = { studentId: 'student5', courseId: 'course1' };
            const enrollment = await service.enroll(dto);
            await service.unenroll(enrollment.id);
            const found = service.findAll().find(e => e.id === enrollment.id);
            expect(found.status).toBe('UNENROLLED');
        });
        it('should throw error if enrollment not found', async () => {
            await expect(service.unenroll('non-existing-id')).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw error if already unenrolled', async () => {
            const dto = { studentId: 'student6', courseId: 'course1' };
            const enrollment = await service.enroll(dto);
            await service.unenroll(enrollment.id);
            await expect(service.unenroll(enrollment.id)).rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('findAll', () => {
        it('should return all enrollments', async () => {
            const dto1 = { studentId: 'student7', courseId: 'course1' };
            const dto2 = { studentId: 'student8', courseId: 'course1' };
            await service.enroll(dto1);
            await service.enroll(dto2);
            const enrollments = service.findAll();
            expect(enrollments.length).toBeGreaterThanOrEqual(2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,