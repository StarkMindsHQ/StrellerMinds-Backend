{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\entities\\search-analytics.entity.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\entities\\search-analytics.entity.spec.ts"],"sourcesContent":["import { validate } from \"class-validator\"\r\nimport { SearchAnalytics } from \"./search-analytics.entity\"\r\n\r\ndescribe(\"SearchAnalytics Entity\", () => {\r\n  let searchAnalytics: SearchAnalytics\r\n\r\n  beforeEach(() => {\r\n    searchAnalytics = new SearchAnalytics()\r\n  })\r\n\r\n  it(\"should create a valid search analytics entity\", async () => {\r\n    searchAnalytics.query = \"stellar blockchain\"\r\n    searchAnalytics.userId = \"user123\"\r\n    searchAnalytics.resultsCount = 5\r\n    searchAnalytics.clickedResults = [\"course1\", \"course2\"]\r\n    searchAnalytics.searchedAt = new Date()\r\n\r\n    const errors = await validate(searchAnalytics)\r\n    expect(errors).toHaveLength(0)\r\n  })\r\n\r\n  it(\"should fail validation for empty query\", async () => {\r\n    searchAnalytics.query = \"\"\r\n    searchAnalytics.userId = \"user123\"\r\n    searchAnalytics.resultsCount = 5\r\n\r\n    const errors = await validate(searchAnalytics)\r\n    expect(errors).toHaveLength(1)\r\n    expect(errors[0].property).toBe(\"query\")\r\n  })\r\n\r\n  it(\"should fail validation for negative results count\", async () => {\r\n    searchAnalytics.query = \"stellar\"\r\n    searchAnalytics.userId = \"user123\"\r\n    searchAnalytics.resultsCount = -1\r\n\r\n    const errors = await validate(searchAnalytics)\r\n    expect(errors).toHaveLength(1)\r\n    expect(errors[0].property).toBe(\"resultsCount\")\r\n  })\r\n\r\n  it(\"should allow null userId for anonymous searches\", async () => {\r\n    searchAnalytics.query = \"stellar\"\r\n    searchAnalytics.userId = null\r\n    searchAnalytics.resultsCount = 5\r\n\r\n    const errors = await validate(searchAnalytics)\r\n    expect(errors).toHaveLength(0)\r\n  })\r\n\r\n  it(\"should initialize with default values\", () => {\r\n    expect(searchAnalytics.clickedResults).toEqual([])\r\n    expect(searchAnalytics.searchedAt).toBeInstanceOf(Date)\r\n  })\r\n\r\n  it(\"should handle clicked results array\", () => {\r\n    searchAnalytics.clickedResults = [\"course1\", \"course2\", \"course3\"]\r\n    expect(searchAnalytics.clickedResults).toHaveLength(3)\r\n    expect(searchAnalytics.clickedResults).toContain(\"course1\")\r\n  })\r\n})\r\n"],"version":3}