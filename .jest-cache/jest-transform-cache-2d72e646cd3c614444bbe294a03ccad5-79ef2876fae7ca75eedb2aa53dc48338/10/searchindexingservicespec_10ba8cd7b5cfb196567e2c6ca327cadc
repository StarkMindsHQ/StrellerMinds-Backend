2111836d576d4e0a7a761b2fcf906a38
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const search_indexing_service_1 = require("./search-indexing.service");
const elasticsearch_1 = require("@nestjs/elasticsearch");
const config_1 = require("@nestjs/config");
const course_entity_1 = require("../../courses/entities/course.entity");
const search_ml_service_1 = require("./search-ml.service");
describe("SearchIndexingService.reindexAll", () => {
    let service;
    let es;
    let courseRepo;
    let ml;
    beforeEach(async () => {
        es = {
            bulk: jest.fn().mockResolvedValue({ body: { errors: false, items: [] } }),
            indices: {
                create: jest.fn().mockResolvedValue({}),
                updateAliases: jest.fn().mockResolvedValue({}),
                get: jest.fn().mockResolvedValue({ body: {} }),
                delete: jest.fn().mockResolvedValue({}),
                stats: jest.fn().mockResolvedValue({ body: { _all: { total: { docs: { count: 0 }, store: { size_in_bytes: 0 } } }, _shards: {} } }),
                forcemerge: jest.fn().mockResolvedValue({}),
            },
        };
        courseRepo = {
            count: jest.fn().mockResolvedValue(2),
            find: jest.fn().mockResolvedValue([
                { id: 'c1', title: 'T1', description: 'D1', createdAt: new Date(), updatedAt: new Date() },
                { id: 'c2', title: 'T2', description: 'D2', createdAt: new Date(), updatedAt: new Date() },
            ]),
        };
        ml = { generateCourseEmbedding: jest.fn().mockResolvedValue([0.1, 0.2]) };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                search_indexing_service_1.SearchIndexingService,
                { provide: elasticsearch_1.ElasticsearchService, useValue: es },
                { provide: config_1.ConfigService, useValue: { get: jest.fn(() => 100) } },
                { provide: search_ml_service_1.SearchMLService, useValue: ml },
                { provide: (0, typeorm_1.getRepositoryToken)(course_entity_1.Course), useValue: courseRepo },
            ],
        }).compile();
        service = module.get(search_indexing_service_1.SearchIndexingService);
    });
    it("creates index, indexes courses in batches, switches alias and cleans old", async () => {
        await service.reindexAll();
        expect(es.indices.create).toHaveBeenCalled();
        expect(courseRepo.count).toHaveBeenCalled();
        expect(es.bulk).toHaveBeenCalled();
        expect(es.indices.updateAliases).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzZWFyY2hcXHNlcnZpY2VzXFxzZWFyY2gtaW5kZXhpbmcuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXFEO0FBQ3JELDZDQUFvRDtBQUVwRCx1RUFBaUU7QUFDakUseURBQTREO0FBQzVELDJDQUE4QztBQUM5Qyx3RUFBNkQ7QUFDN0QsMkRBQXFEO0FBRXJELFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsSUFBSSxPQUE4QixDQUFBO0lBQ2xDLElBQUksRUFBcUMsQ0FBQTtJQUN6QyxJQUFJLFVBQTJDLENBQUE7SUFDL0MsSUFBSSxFQUEwQyxDQUFBO0lBRTlDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixFQUFFLEdBQUc7WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN6RSxPQUFPLEVBQUU7Z0JBQ1AsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO2dCQUM5QyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUM5QyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztnQkFDdkMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUNuSSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQzthQUM1QztTQUNLLENBQUE7UUFFUixVQUFVLEdBQUc7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2dCQUNoQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFTO2dCQUNqRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFTO2FBQ2xHLENBQUM7U0FDSSxDQUFBO1FBRVIsRUFBRSxHQUFHLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUV6RSxNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsU0FBUyxFQUFFO2dCQUNULCtDQUFxQjtnQkFDckIsRUFBRSxPQUFPLEVBQUUsb0NBQW9CLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtnQkFDL0MsRUFBRSxPQUFPLEVBQUUsc0JBQWEsRUFBRSxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO2dCQUNqRSxFQUFFLE9BQU8sRUFBRSxtQ0FBZSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7Z0JBQzFDLEVBQUUsT0FBTyxFQUFFLElBQUEsNEJBQWtCLEVBQUMsc0JBQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7YUFDOUQ7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFWixPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQywrQ0FBcUIsQ0FBQyxDQUFBO0lBQzdDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDBFQUEwRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hGLE1BQU0sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7UUFDNUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQzNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtRQUNsQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO0lBQ3JELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzZWFyY2hcXHNlcnZpY2VzXFxzZWFyY2gtaW5kZXhpbmcuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tIFwiQG5lc3Rqcy90ZXN0aW5nXCJcclxuaW1wb3J0IHsgZ2V0UmVwb3NpdG9yeVRva2VuIH0gZnJvbSBcIkBuZXN0anMvdHlwZW9ybVwiXHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tIFwidHlwZW9ybVwiXHJcbmltcG9ydCB7IFNlYXJjaEluZGV4aW5nU2VydmljZSB9IGZyb20gXCIuL3NlYXJjaC1pbmRleGluZy5zZXJ2aWNlXCJcclxuaW1wb3J0IHsgRWxhc3RpY3NlYXJjaFNlcnZpY2UgfSBmcm9tIFwiQG5lc3Rqcy9lbGFzdGljc2VhcmNoXCJcclxuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gXCJAbmVzdGpzL2NvbmZpZ1wiXHJcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gXCIuLi8uLi9jb3Vyc2VzL2VudGl0aWVzL2NvdXJzZS5lbnRpdHlcIlxyXG5pbXBvcnQgeyBTZWFyY2hNTFNlcnZpY2UgfSBmcm9tIFwiLi9zZWFyY2gtbWwuc2VydmljZVwiXHJcblxyXG5kZXNjcmliZShcIlNlYXJjaEluZGV4aW5nU2VydmljZS5yZWluZGV4QWxsXCIsICgpID0+IHtcclxuICBsZXQgc2VydmljZTogU2VhcmNoSW5kZXhpbmdTZXJ2aWNlXHJcbiAgbGV0IGVzOiB7IGJ1bGs6IGplc3QuTW9jazsgaW5kaWNlczogYW55IH1cclxuICBsZXQgY291cnNlUmVwbzogamVzdC5Nb2NrZWQ8UmVwb3NpdG9yeTxDb3Vyc2U+PlxyXG4gIGxldCBtbDogeyBnZW5lcmF0ZUNvdXJzZUVtYmVkZGluZzogamVzdC5Nb2NrIH1cclxuXHJcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICBlcyA9IHtcclxuICAgICAgYnVsazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYm9keTogeyBlcnJvcnM6IGZhbHNlLCBpdGVtczogW10gfSB9KSxcclxuICAgICAgaW5kaWNlczoge1xyXG4gICAgICAgIGNyZWF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcclxuICAgICAgICB1cGRhdGVBbGlhc2VzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxyXG4gICAgICAgIGdldDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYm9keToge30gfSksXHJcbiAgICAgICAgZGVsZXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxyXG4gICAgICAgIHN0YXRzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBib2R5OiB7IF9hbGw6IHsgdG90YWw6IHsgZG9jczogeyBjb3VudDogMCB9LCBzdG9yZTogeyBzaXplX2luX2J5dGVzOiAwIH0gfSB9LCBfc2hhcmRzOiB7fSB9IH0pLFxyXG4gICAgICAgIGZvcmNlbWVyZ2U6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXHJcbiAgICAgIH0sXHJcbiAgICB9IGFzIGFueVxyXG5cclxuICAgIGNvdXJzZVJlcG8gPSB7XHJcbiAgICAgIGNvdW50OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoMiksXHJcbiAgICAgIGZpbmQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXHJcbiAgICAgICAgeyBpZDogJ2MxJywgdGl0bGU6ICdUMScsIGRlc2NyaXB0aW9uOiAnRDEnLCBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksIHVwZGF0ZWRBdDogbmV3IERhdGUoKSB9IGFzIGFueSxcclxuICAgICAgICB7IGlkOiAnYzInLCB0aXRsZTogJ1QyJywgZGVzY3JpcHRpb246ICdEMicsIGNyZWF0ZWRBdDogbmV3IERhdGUoKSwgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpIH0gYXMgYW55LFxyXG4gICAgICBdKSxcclxuICAgIH0gYXMgYW55XHJcblxyXG4gICAgbWwgPSB7IGdlbmVyYXRlQ291cnNlRW1iZWRkaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoWzAuMSwgMC4yXSkgfVxyXG5cclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIFNlYXJjaEluZGV4aW5nU2VydmljZSxcclxuICAgICAgICB7IHByb3ZpZGU6IEVsYXN0aWNzZWFyY2hTZXJ2aWNlLCB1c2VWYWx1ZTogZXMgfSxcclxuICAgICAgICB7IHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsIHVzZVZhbHVlOiB7IGdldDogamVzdC5mbigoKSA9PiAxMDApIH0gfSxcclxuICAgICAgICB7IHByb3ZpZGU6IFNlYXJjaE1MU2VydmljZSwgdXNlVmFsdWU6IG1sIH0sXHJcbiAgICAgICAgeyBwcm92aWRlOiBnZXRSZXBvc2l0b3J5VG9rZW4oQ291cnNlKSwgdXNlVmFsdWU6IGNvdXJzZVJlcG8gfSxcclxuICAgICAgXSxcclxuICAgIH0pLmNvbXBpbGUoKVxyXG5cclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0KFNlYXJjaEluZGV4aW5nU2VydmljZSlcclxuICB9KVxyXG5cclxuICBpdChcImNyZWF0ZXMgaW5kZXgsIGluZGV4ZXMgY291cnNlcyBpbiBiYXRjaGVzLCBzd2l0Y2hlcyBhbGlhcyBhbmQgY2xlYW5zIG9sZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBzZXJ2aWNlLnJlaW5kZXhBbGwoKVxyXG4gICAgZXhwZWN0KGVzLmluZGljZXMuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICAgIGV4cGVjdChjb3Vyc2VSZXBvLmNvdW50KS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICAgIGV4cGVjdChlcy5idWxrKS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICAgIGV4cGVjdChlcy5pbmRpY2VzLnVwZGF0ZUFsaWFzZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKVxyXG4gIH0pXHJcbn0pXHJcblxyXG5cclxuIl0sInZlcnNpb24iOjN9