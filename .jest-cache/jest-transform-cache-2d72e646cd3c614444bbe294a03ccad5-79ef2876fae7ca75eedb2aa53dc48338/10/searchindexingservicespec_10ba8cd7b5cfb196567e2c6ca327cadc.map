{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\services\\search-indexing.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\services\\search-indexing.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { Repository } from \"typeorm\"\r\nimport { SearchIndexingService } from \"./search-indexing.service\"\r\nimport { ElasticsearchService } from \"@nestjs/elasticsearch\"\r\nimport { ConfigService } from \"@nestjs/config\"\r\nimport { Course } from \"../../courses/entities/course.entity\"\r\nimport { SearchMLService } from \"./search-ml.service\"\r\n\r\ndescribe(\"SearchIndexingService.reindexAll\", () => {\r\n  let service: SearchIndexingService\r\n  let es: { bulk: jest.Mock; indices: any }\r\n  let courseRepo: jest.Mocked<Repository<Course>>\r\n  let ml: { generateCourseEmbedding: jest.Mock }\r\n\r\n  beforeEach(async () => {\r\n    es = {\r\n      bulk: jest.fn().mockResolvedValue({ body: { errors: false, items: [] } }),\r\n      indices: {\r\n        create: jest.fn().mockResolvedValue({}),\r\n        updateAliases: jest.fn().mockResolvedValue({}),\r\n        get: jest.fn().mockResolvedValue({ body: {} }),\r\n        delete: jest.fn().mockResolvedValue({}),\r\n        stats: jest.fn().mockResolvedValue({ body: { _all: { total: { docs: { count: 0 }, store: { size_in_bytes: 0 } } }, _shards: {} } }),\r\n        forcemerge: jest.fn().mockResolvedValue({}),\r\n      },\r\n    } as any\r\n\r\n    courseRepo = {\r\n      count: jest.fn().mockResolvedValue(2),\r\n      find: jest.fn().mockResolvedValue([\r\n        { id: 'c1', title: 'T1', description: 'D1', createdAt: new Date(), updatedAt: new Date() } as any,\r\n        { id: 'c2', title: 'T2', description: 'D2', createdAt: new Date(), updatedAt: new Date() } as any,\r\n      ]),\r\n    } as any\r\n\r\n    ml = { generateCourseEmbedding: jest.fn().mockResolvedValue([0.1, 0.2]) }\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        SearchIndexingService,\r\n        { provide: ElasticsearchService, useValue: es },\r\n        { provide: ConfigService, useValue: { get: jest.fn(() => 100) } },\r\n        { provide: SearchMLService, useValue: ml },\r\n        { provide: getRepositoryToken(Course), useValue: courseRepo },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get(SearchIndexingService)\r\n  })\r\n\r\n  it(\"creates index, indexes courses in batches, switches alias and cleans old\", async () => {\r\n    await service.reindexAll()\r\n    expect(es.indices.create).toHaveBeenCalled()\r\n    expect(courseRepo.count).toHaveBeenCalled()\r\n    expect(es.bulk).toHaveBeenCalled()\r\n    expect(es.indices.updateAliases).toHaveBeenCalled()\r\n  })\r\n})\r\n\r\n\r\n"],"version":3}