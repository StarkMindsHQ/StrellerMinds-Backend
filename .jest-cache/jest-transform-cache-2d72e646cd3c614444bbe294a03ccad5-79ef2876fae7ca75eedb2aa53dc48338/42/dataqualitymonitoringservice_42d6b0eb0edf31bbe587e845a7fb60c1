7ca31f0bbf49107940e91d566f1a287f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DataQualityMonitoringService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataQualityMonitoringService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
const event_emitter_1 = require("@nestjs/event-emitter");
const bull_1 = require("@nestjs/bull");
let DataQualityMonitoringService = DataQualityMonitoringService_1 = class DataQualityMonitoringService {
    constructor(metricRepository, issueRepository, eventEmitter, monitoringQueue) {
        this.metricRepository = metricRepository;
        this.issueRepository = issueRepository;
        this.eventEmitter = eventEmitter;
        this.monitoringQueue = monitoringQueue;
        this.logger = new common_1.Logger(DataQualityMonitoringService_1.name);
    }
    async getDashboard(entityType) {
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 30); // Last 30 days
        // Get overall score
        const overallScore = await this.calculateOverallScore(entityType, startDate, endDate);
        // Get category scores
        const categoryScores = await this.calculateCategoryScores(entityType, startDate, endDate);
        // Get trend data
        const trendData = await this.getTrendData(entityType, startDate, endDate);
        // Get issue counts
        const activeIssues = await this.issueRepository.count({
            where: {
                status: "open",
                ...(entityType && { entityType }),
            },
        });
        const criticalIssues = await this.issueRepository.count({
            where: {
                status: "open",
                priority: "critical",
                ...(entityType && { entityType }),
            },
        });
        // Get recent issues
        const recentIssues = await this.issueRepository.find({
            where: {
                ...(entityType && { entityType }),
            },
            order: { createdAt: "DESC" },
            take: 10,
        });
        // Calculate health status
        const healthStatus = this.calculateHealthStatus(overallScore, criticalIssues);
        // Get entity counts
        const entityCounts = await this.getEntityCounts(entityType);
        // Get performance metrics
        const performanceMetrics = await this.getPerformanceMetrics(entityType, startDate, endDate);
        return {
            overallScore,
            categoryScores,
            trendData,
            activeIssues,
            criticalIssues,
            recentIssues,
            healthStatus,
            lastUpdated: new Date(),
            entityCounts,
            performanceMetrics,
        };
    }
    async calculateOverallScore(entityType, startDate, endDate) {
        const query = this.metricRepository.createQueryBuilder("metric").select("AVG(metric.value)", "avgScore");
        if (entityType) {
            query.andWhere("metric.entityType = :entityType", { entityType });
        }
        if (startDate) {
            query.andWhere("metric.timestamp >= :startDate", { startDate });
        }
        if (endDate) {
            query.andWhere("metric.timestamp <= :endDate", { endDate });
        }
        const result = await query.getRawOne();
        return Number.parseFloat(result.avgScore) || 0;
    }
    async calculateCategoryScores(entityType, startDate, endDate) {
        const query = this.metricRepository
            .createQueryBuilder("metric")
            .select("metric.metricCategory", "category")
            .addSelect("AVG(metric.value)", "avgScore")
            .groupBy("metric.metricCategory");
        if (entityType) {
            query.andWhere("metric.entityType = :entityType", { entityType });
        }
        if (startDate) {
            query.andWhere("metric.timestamp >= :startDate", { startDate });
        }
        if (endDate) {
            query.andWhere("metric.timestamp <= :endDate", { endDate });
        }
        const results = await query.getRawMany();
        const categoryScores = {};
        for (const result of results) {
            categoryScores[result.category] = Number.parseFloat(result.avgScore) || 0;
        }
        return categoryScores;
    }
    async getTrendData(entityType, startDate, endDate) {
        const query = this.metricRepository
            .createQueryBuilder("metric")
            .select("DATE(metric.timestamp)", "date")
            .addSelect("metric.metricCategory", "category")
            .addSelect("AVG(metric.value)", "score")
            .groupBy("DATE(metric.timestamp), metric.metricCategory")
            .orderBy("DATE(metric.timestamp)", "ASC");
        if (entityType) {
            query.andWhere("metric.entityType = :entityType", { entityType });
        }
        if (startDate) {
            query.andWhere("metric.timestamp >= :startDate", { startDate });
        }
        if (endDate) {
            query.andWhere("metric.timestamp <= :endDate", { endDate });
        }
        const results = await query.getRawMany();
        return results.map((result) => ({
            date: result.date,
            score: Number.parseFloat(result.score) || 0,
            category: result.category,
        }));
    }
    async getMetricHistory(metricName, entityType, days = 30) {
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);
        const query = this.metricRepository
            .createQueryBuilder("metric")
            .where("metric.metricName = :metricName", { metricName })
            .andWhere("metric.timestamp >= :startDate", { startDate });
        if (entityType) {
            query.andWhere("metric.entityType = :entityType", { entityType });
        }
        const metrics = await query.orderBy("metric.timestamp", "ASC").getMany();
        return metrics.map((metric) => ({
            timestamp: metric.timestamp,
            value: Number.parseFloat(metric.value.toString()),
            passed: metric.passed,
        }));
    }
    async monitorQualityThresholds() {
        this.logger.log("Starting quality threshold monitoring");
        try {
            const recentMetrics = await this.metricRepository.find({
                where: {
                    timestamp: new Date(Date.now() - 60 * 60 * 1000), // Last hour
                },
            });
            for (const metric of recentMetrics) {
                if (metric.threshold && metric.value < metric.threshold) {
                    this.logger.warn(`Quality threshold breach: ${metric.metricName} = ${metric.value} (threshold: ${metric.threshold})`);
                    // Could trigger alerts here
                }
            }
        }
        catch (error) {
            this.logger.error(`Quality monitoring failed: ${error.message}`, error.stack);
        }
    }
    async getQualityAlerts(entityType) {
        const alerts = [];
        // Get critical issues as alerts
        const criticalIssues = await this.issueRepository.find({
            where: {
                status: "open",
                priority: "critical",
                ...(entityType && { entityType }),
            },
            order: { createdAt: "DESC" },
            take: 50,
        });
        for (const issue of criticalIssues) {
            alerts.push({
                id: issue.id,
                type: "quality_issue",
                severity: issue.priority,
                message: issue.description,
                timestamp: issue.createdAt,
                entityType: issue.entityType,
            });
        }
        // Get threshold breaches
        const thresholdBreaches = await this.metricRepository.find({
            where: {
                passed: false,
                ...(entityType && { entityType }),
            },
            order: { timestamp: "DESC" },
            take: 50,
        });
        for (const breach of thresholdBreaches) {
            alerts.push({
                id: breach.id,
                type: "threshold_breach",
                severity: "high",
                message: `${breach.metricName} failed threshold: ${breach.value} < ${breach.threshold}`,
                timestamp: breach.timestamp,
                entityType: breach.entityType,
            });
        }
        return alerts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
    }
    calculateHealthStatus(overallScore, criticalIssues) {
        if (criticalIssues > 0 || overallScore < 60) {
            return 'critical';
        }
        if (overallScore < 80) {
            return 'warning';
        }
        return 'healthy';
    }
    async getEntityCounts(entityType) {
        const query = this.metricRepository
            .createQueryBuilder('metric')
            .select('metric.entityType', 'entityType')
            .addSelect('COUNT(*)', 'count')
            .groupBy('metric.entityType');
        if (entityType) {
            query.where('metric.entityType = :entityType', { entityType });
        }
        const results = await query.getRawMany();
        const counts = {};
        for (const result of results) {
            counts[result.entityType] = parseInt(result.count, 10);
        }
        return counts;
    }
    async getPerformanceMetrics(entityType, startDate, endDate) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        // Get total checks today
        const totalChecksQuery = this.metricRepository
            .createQueryBuilder('metric')
            .where('metric.timestamp >= :today', { today });
        if (entityType) {
            totalChecksQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        const totalChecksToday = await totalChecksQuery.getCount();
        // Get success rate
        const successQuery = this.metricRepository
            .createQueryBuilder('metric')
            .select('AVG(CASE WHEN metric.passed = true THEN 1 ELSE 0 END)', 'successRate');
        if (entityType) {
            successQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        if (startDate) {
            successQuery.andWhere('metric.timestamp >= :startDate', { startDate });
        }
        if (endDate) {
            successQuery.andWhere('metric.timestamp <= :endDate', { endDate });
        }
        const successResult = await successQuery.getRawOne();
        const successRate = parseFloat(successResult.successRate) * 100 || 0;
        return {
            avgProcessingTime: 0, // This would need to be tracked separately
            totalChecksToday,
            successRate,
        };
    }
    async getRealTimeMetrics(entityType) {
        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        // Get current score (last hour average)
        const currentScoreQuery = this.metricRepository
            .createQueryBuilder('metric')
            .select('AVG(metric.value)', 'avgScore')
            .where('metric.timestamp >= :oneHourAgo', { oneHourAgo });
        if (entityType) {
            currentScoreQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        const currentScoreResult = await currentScoreQuery.getRawOne();
        const currentScore = parseFloat(currentScoreResult.avgScore) || 0;
        // Get trend (compare with previous hour)
        const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);
        const previousScoreQuery = this.metricRepository
            .createQueryBuilder('metric')
            .select('AVG(metric.value)', 'avgScore')
            .where('metric.timestamp >= :twoHoursAgo', { twoHoursAgo })
            .andWhere('metric.timestamp < :oneHourAgo', { oneHourAgo });
        if (entityType) {
            previousScoreQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        const previousScoreResult = await previousScoreQuery.getRawOne();
        const previousScore = parseFloat(previousScoreResult.avgScore) || 0;
        let trend = 'stable';
        const scoreDiff = currentScore - previousScore;
        if (Math.abs(scoreDiff) > 5) {
            trend = scoreDiff > 0 ? 'improving' : 'declining';
        }
        // Get active checks count
        const activeChecks = await this.metricRepository.count({
            where: {
                timestamp: new Date(now.getTime() - 5 * 60 * 1000), // Last 5 minutes
                ...(entityType && { entityType }),
            },
        });
        // Get failure rate
        const failureQuery = this.metricRepository
            .createQueryBuilder('metric')
            .select('AVG(CASE WHEN metric.passed = false THEN 1 ELSE 0 END)', 'failureRate')
            .where('metric.timestamp >= :oneHourAgo', { oneHourAgo });
        if (entityType) {
            failureQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        const failureResult = await failureQuery.getRawOne();
        const failureRate = parseFloat(failureResult.failureRate) * 100 || 0;
        // Get last check time
        const lastCheckQuery = this.metricRepository
            .createQueryBuilder('metric')
            .select('MAX(metric.timestamp)', 'lastCheck');
        if (entityType) {
            lastCheckQuery.andWhere('metric.entityType = :entityType', { entityType });
        }
        const lastCheckResult = await lastCheckQuery.getRawOne();
        const lastCheckTime = lastCheckResult.lastCheck || now;
        return {
            currentScore,
            trend,
            activeChecks,
            failureRate,
            lastCheckTime,
        };
    }
    async acknowledgeAlert(alertId, acknowledgedBy) {
        // This would update an alert acknowledgment table if we had one
        // For now, we'll emit an event
        this.eventEmitter.emit('alert.acknowledged', {
            alertId,
            acknowledgedBy,
            timestamp: new Date(),
        });
    }
    async scheduleQualityCheck(entityType, delay = 0) {
        await this.monitoringQueue.add('quality-check', { entityType }, { delay });
    }
    async performRealTimeMonitoring() {
        try {
            const entityTypes = await this.getUniqueEntityTypes();
            for (const entityType of entityTypes) {
                const metrics = await this.getRealTimeMetrics(entityType);
                // Emit real-time metrics event
                this.eventEmitter.emit('metrics.realtime', {
                    entityType,
                    metrics,
                    timestamp: new Date(),
                });
                // Check for critical conditions
                if (metrics.failureRate > 50) {
                    this.eventEmitter.emit('alert.critical', {
                        type: 'high_failure_rate',
                        entityType,
                        failureRate: metrics.failureRate,
                        timestamp: new Date(),
                    });
                }
                if (metrics.currentScore < 60) {
                    this.eventEmitter.emit('alert.critical', {
                        type: 'low_quality_score',
                        entityType,
                        score: metrics.currentScore,
                        timestamp: new Date(),
                    });
                }
            }
        }
        catch (error) {
            this.logger.error(`Real-time monitoring failed: ${error.message}`, error.stack);
        }
    }
    async getUniqueEntityTypes() {
        const result = await this.metricRepository
            .createQueryBuilder('metric')
            .select('DISTINCT metric.entityType', 'entityType')
            .getRawMany();
        return result.map((r) => r.entityType);
    }
};
exports.DataQualityMonitoringService = DataQualityMonitoringService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_HOUR),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], DataQualityMonitoringService.prototype, "monitorQualityThresholds", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_5_MINUTES),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], DataQualityMonitoringService.prototype, "performRealTimeMonitoring", null);
exports.DataQualityMonitoringService = DataQualityMonitoringService = DataQualityMonitoringService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(3, (0, bull_1.InjectQueue)('data-quality-monitoring')),
    __metadata("design:paramtypes", [Object, Object, typeof (_a = typeof event_emitter_1.EventEmitter2 !== "undefined" && event_emitter_1.EventEmitter2) === "function" ? _a : Object, Object])
], DataQualityMonitoringService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,