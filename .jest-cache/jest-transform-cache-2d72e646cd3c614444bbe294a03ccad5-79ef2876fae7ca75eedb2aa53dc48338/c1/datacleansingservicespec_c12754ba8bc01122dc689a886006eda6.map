{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-cleansing.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-cleansing.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport type { Queue } from \"bull\"\r\n\r\nimport { DataCleansingService } from \"../services/data-cleansing.service\"\r\n\r\ndescribe(\"DataCleansingService\", () => {\r\n  let service: DataCleansingService\r\n  let cleansingQueue: Queue\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataCleansingService,\r\n        {\r\n          provide: getQueueToken(\"data-cleansing\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<DataCleansingService>(DataCleansingService)\r\n    cleansingQueue = module.get<Queue>(getQueueToken(\"data-cleansing\"))\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"cleanseData\", () => {\r\n    it(\"should remove nulls\", async () => {\r\n      const data = [\r\n        { id: 1, name: \"John\", email: \"john@example.com\" },\r\n        { id: 2, name: \"Jane\", email: null },\r\n        { id: 3, name: \"Bob\", email: \"bob@example.com\" },\r\n      ]\r\n\r\n      const rules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Remove Nulls\",\r\n          field: \"email\",\r\n          operation: \"remove_nulls\",\r\n        },\r\n      ]\r\n\r\n      const result = await service.cleanseData(data, rules)\r\n\r\n      expect(result.originalCount).toBe(3)\r\n      expect(result.cleanedCount).toBe(2)\r\n      expect(result.removedCount).toBe(1)\r\n      expect(result.cleanedData).toHaveLength(2)\r\n      expect(result.cleanedData.every((item) => item.email !== null)).toBe(true)\r\n    })\r\n\r\n    it(\"should trim whitespace\", async () => {\r\n      const data = [\r\n        { id: 1, name: \"  John  \" },\r\n        { id: 2, name: \"Jane\" },\r\n        { id: 3, name: \"  Bob  \" },\r\n      ]\r\n\r\n      const rules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Trim Whitespace\",\r\n          field: \"name\",\r\n          operation: \"trim_whitespace\",\r\n        },\r\n      ]\r\n\r\n      const result = await service.cleanseData(data, rules)\r\n\r\n      expect(result.modifiedCount).toBe(2)\r\n      expect(result.cleanedData[0].name).toBe(\"John\")\r\n      expect(result.cleanedData[1].name).toBe(\"Jane\")\r\n      expect(result.cleanedData[2].name).toBe(\"Bob\")\r\n    })\r\n\r\n    it(\"should remove duplicates\", async () => {\r\n      const data = [\r\n        { id: 1, email: \"john@example.com\" },\r\n        { id: 2, email: \"jane@example.com\" },\r\n        { id: 3, email: \"john@example.com\" },\r\n      ]\r\n\r\n      const rules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Remove Duplicates\",\r\n          field: \"email\",\r\n          operation: \"remove_duplicates\",\r\n        },\r\n      ]\r\n\r\n      const result = await service.cleanseData(data, rules)\r\n\r\n      expect(result.originalCount).toBe(3)\r\n      expect(result.cleanedCount).toBe(2)\r\n      expect(result.removedCount).toBe(1)\r\n      expect(result.cleanedData).toHaveLength(2)\r\n    })\r\n\r\n    it(\"should standardize email format\", async () => {\r\n      const data = [\r\n        { id: 1, email: \"JOHN@EXAMPLE.COM  \" },\r\n        { id: 2, email: \"  jane@example.com\" },\r\n      ]\r\n\r\n      const rules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Standardize Email\",\r\n          field: \"email\",\r\n          operation: \"standardize_format\",\r\n          parameters: { format: \"email\" },\r\n        },\r\n      ]\r\n\r\n      const result = await service.cleanseData(data, rules)\r\n\r\n      expect(result.modifiedCount).toBe(2)\r\n      expect(result.cleanedData[0].email).toBe(\"john@example.com\")\r\n      expect(result.cleanedData[1].email).toBe(\"jane@example.com\")\r\n    })\r\n  })\r\n})\r\n"],"version":3}