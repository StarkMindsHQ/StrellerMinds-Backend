f0eedee14cbb35c9dc070cbbc14bdec3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RealtimeAnalyticsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RealtimeAnalyticsService = void 0;
const common_1 = require("@nestjs/common");
const common_2 = require("@nestjs/common");
const cache_manager_1 = require("@nestjs/cache-manager");
const typeorm_1 = require("typeorm");
let RealtimeAnalyticsService = RealtimeAnalyticsService_1 = class RealtimeAnalyticsService {
    constructor(userInteractionRepository, courseRepository, userRepository, cacheManager) {
        this.userInteractionRepository = userInteractionRepository;
        this.courseRepository = courseRepository;
        this.userRepository = userRepository;
        this.cacheManager = cacheManager;
        this.logger = new common_1.Logger(RealtimeAnalyticsService_1.name);
        this.REALTIME_CACHE_TTL = 10; // seconds
    }
    async getRealtimeDashboardData() {
        const cacheKey = "realtime_dashboard_data";
        const cachedData = await this.cacheManager.get(cacheKey);
        if (cachedData) {
            return cachedData;
        }
        const now = new Date();
        const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000); // Last 5 minutes
        // Active users (simplified: users with recent interactions)
        const activeInteractions = await this.userInteractionRepository.find({
            where: {
                updatedAt: (0, typeorm_1.MoreThanOrEqual)(fiveMinutesAgo),
            },
            relations: ["user", "course"],
        });
        const activeUsersNow = new Set(activeInteractions.map((i) => i.userId)).size;
        // Courses being viewed
        const coursesBeingViewedMap = new Map();
        activeInteractions.forEach((interaction) => {
            if (interaction.course) {
                const courseEntry = coursesBeingViewedMap.get(interaction.courseId) || {
                    courseId: interaction.courseId,
                    title: interaction.course.title,
                    viewers: 0,
                };
                courseEntry.viewers++;
                coursesBeingViewedMap.set(interaction.courseId, courseEntry);
            }
        });
        const coursesBeingViewed = Array.from(coursesBeingViewedMap.values()).sort((a, b) => b.viewers - a.viewers);
        // Recent enrollments (last 5 minutes)
        const recentEnrollments = await this.userInteractionRepository.find({
            where: {
                createdAt: (0, typeorm_1.MoreThanOrEqual)(fiveMinutesAgo),
                progress: 0, // Assuming new enrollment starts at 0 progress
            },
            relations: ["user", "course"],
            order: { createdAt: "DESC" },
            take: 10,
        });
        const formattedRecentEnrollments = recentEnrollments.map((i) => ({
            userId: i.userId,
            courseId: i.courseId,
            timestamp: i.createdAt,
            userName: i.user?.username || "N/A",
            courseTitle: i.course?.title || "N/A",
        }));
        // Recent completions (last 5 minutes)
        const recentCompletions = await this.userInteractionRepository.find({
            where: {
                updatedAt: (0, typeorm_1.MoreThanOrEqual)(fiveMinutesAgo),
                completed: true,
            },
            relations: ["user", "course"],
            order: { updatedAt: "DESC" },
            take: 10,
        });
        const formattedRecentCompletions = recentCompletions.map((i) => ({
            userId: i.userId,
            courseId: i.courseId,
            timestamp: i.updatedAt,
            userName: i.user?.username || "N/A",
            courseTitle: i.course?.title || "N/A",
        }));
        // Overall activity rate (simplified: total interactions in last minute)
        const oneMinuteAgo = new Date(now.getTime() - 60 * 1000);
        const recentInteractionsCount = await this.userInteractionRepository.count({
            where: {
                updatedAt: (0, typeorm_1.MoreThanOrEqual)(oneMinuteAgo),
            },
        });
        const overallActivityRate = recentInteractionsCount / 60; // Interactions per second
        const data = {
            activeUsersNow,
            coursesBeingViewed,
            recentEnrollments: formattedRecentEnrollments,
            recentCompletions: formattedRecentCompletions,
            overallActivityRate,
        };
        await this.cacheManager.set(cacheKey, data, this.REALTIME_CACHE_TTL);
        return data;
    }
};
exports.RealtimeAnalyticsService = RealtimeAnalyticsService;
exports.RealtimeAnalyticsService = RealtimeAnalyticsService = RealtimeAnalyticsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(3, (0, common_2.Inject)(cache_manager_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], RealtimeAnalyticsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,