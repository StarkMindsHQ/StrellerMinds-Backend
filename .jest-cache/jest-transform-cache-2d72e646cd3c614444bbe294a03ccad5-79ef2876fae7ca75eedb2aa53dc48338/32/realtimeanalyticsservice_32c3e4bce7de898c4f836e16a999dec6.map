{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\services\\realtime-analytics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\services\\realtime-analytics.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { UserCourseInteraction } from \"../../users/entities/user-course-interaction.entity\"\r\nimport type { Course } from \"../../courses/entities/course.entity\"\r\nimport type { User } from \"../../users/entities/user.entity\"\r\nimport type { RealtimeDashboardData } from \"../interfaces/analytics.interface\"\r\nimport type { Cache } from \"cache-manager\"\r\nimport { Inject } from \"@nestjs/common\"\r\nimport { CACHE_MANAGER } from \"@nestjs/cache-manager\"\r\nimport { MoreThanOrEqual } from \"typeorm\"\r\n\r\n@Injectable()\r\nexport class RealtimeAnalyticsService {\r\n  private readonly logger = new Logger(RealtimeAnalyticsService.name)\r\n  private readonly REALTIME_CACHE_TTL = 10; // seconds\r\n\r\n  constructor(\r\n    private readonly userInteractionRepository: Repository<UserCourseInteraction>,\r\n    private readonly courseRepository: Repository<Course>,\r\n    private readonly userRepository: Repository<User>,\r\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\r\n  ) {}\r\n\r\n  async getRealtimeDashboardData(): Promise<RealtimeDashboardData> {\r\n    const cacheKey = \"realtime_dashboard_data\"\r\n    const cachedData = await this.cacheManager.get<RealtimeDashboardData>(cacheKey)\r\n    if (cachedData) {\r\n      return cachedData\r\n    }\r\n\r\n    const now = new Date()\r\n    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000) // Last 5 minutes\r\n\r\n    // Active users (simplified: users with recent interactions)\r\n    const activeInteractions = await this.userInteractionRepository.find({\r\n      where: {\r\n        updatedAt: MoreThanOrEqual(fiveMinutesAgo),\r\n      },\r\n      relations: [\"user\", \"course\"],\r\n    })\r\n    const activeUsersNow = new Set(activeInteractions.map((i) => i.userId)).size\r\n\r\n    // Courses being viewed\r\n    const coursesBeingViewedMap = new Map<string, { courseId: string; title: string; viewers: number }>()\r\n    activeInteractions.forEach((interaction) => {\r\n      if (interaction.course) {\r\n        const courseEntry = coursesBeingViewedMap.get(interaction.courseId) || {\r\n          courseId: interaction.courseId,\r\n          title: interaction.course.title,\r\n          viewers: 0,\r\n        }\r\n        courseEntry.viewers++\r\n        coursesBeingViewedMap.set(interaction.courseId, courseEntry)\r\n      }\r\n    })\r\n    const coursesBeingViewed = Array.from(coursesBeingViewedMap.values()).sort((a, b) => b.viewers - a.viewers)\r\n\r\n    // Recent enrollments (last 5 minutes)\r\n    const recentEnrollments = await this.userInteractionRepository.find({\r\n      where: {\r\n        createdAt: MoreThanOrEqual(fiveMinutesAgo),\r\n        progress: 0, // Assuming new enrollment starts at 0 progress\r\n      },\r\n      relations: [\"user\", \"course\"],\r\n      order: { createdAt: \"DESC\" },\r\n      take: 10,\r\n    })\r\n    const formattedRecentEnrollments = recentEnrollments.map((i) => ({\r\n      userId: i.userId,\r\n      courseId: i.courseId,\r\n      timestamp: i.createdAt,\r\n      userName: i.user?.username || \"N/A\",\r\n      courseTitle: i.course?.title || \"N/A\",\r\n    }))\r\n\r\n    // Recent completions (last 5 minutes)\r\n    const recentCompletions = await this.userInteractionRepository.find({\r\n      where: {\r\n        updatedAt: MoreThanOrEqual(fiveMinutesAgo),\r\n        completed: true,\r\n      },\r\n      relations: [\"user\", \"course\"],\r\n      order: { updatedAt: \"DESC\" },\r\n      take: 10,\r\n    })\r\n    const formattedRecentCompletions = recentCompletions.map((i) => ({\r\n      userId: i.userId,\r\n      courseId: i.courseId,\r\n      timestamp: i.updatedAt,\r\n      userName: i.user?.username || \"N/A\",\r\n      courseTitle: i.course?.title || \"N/A\",\r\n    }))\r\n\r\n    // Overall activity rate (simplified: total interactions in last minute)\r\n    const oneMinuteAgo = new Date(now.getTime() - 60 * 1000)\r\n    const recentInteractionsCount = await this.userInteractionRepository.count({\r\n      where: {\r\n        updatedAt: MoreThanOrEqual(oneMinuteAgo),\r\n      },\r\n    })\r\n    const overallActivityRate = recentInteractionsCount / 60 // Interactions per second\r\n\r\n    const data: RealtimeDashboardData = {\r\n      activeUsersNow,\r\n      coursesBeingViewed,\r\n      recentEnrollments: formattedRecentEnrollments,\r\n      recentCompletions: formattedRecentCompletions,\r\n      overallActivityRate,\r\n    }\r\n\r\n    await this.cacheManager.set(cacheKey, data, this.REALTIME_CACHE_TTL)\r\n    return data\r\n  }\r\n}\r\n"],"version":3}