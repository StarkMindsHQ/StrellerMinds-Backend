125743490115ca971f4ccd67f223a33c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataExportService = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const data_processing_log_entity_1 = require("./entities/data-processing-log.entity");
const data_export_dto_1 = require("./dto/data-export.dto");
let DataExportService = class DataExportService {
    constructor(logRepository) {
        this.logRepository = logRepository;
    }
    async exportUserData(userId, request, ipAddress, userAgent) {
        // Log the export request
        await this.logDataProcessing(userId, data_processing_log_entity_1.ProcessingActivity.DATA_EXPORT, 'User data export requested', {
            dataTypes: request.dataTypes,
            format: request.format,
            reason: request.reason,
        }, ipAddress, userAgent);
        // Collect user data from various sources
        const userData = await this.collectUserData(userId, request.dataTypes);
        // Format the data based on requested format
        const formattedData = await this.formatExportData(userData, request.format);
        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `user_data_export_${userId}_${timestamp}.${request.format}`;
        return {
            data: formattedData,
            filename,
        };
    }
    async collectUserData(userId, dataTypes) {
        const userData = {
            userId,
            exportDate: new Date().toISOString(),
            profile: {},
            preferences: {},
            consents: {},
            activityLogs: {},
        };
        // Collect profile data (implement based on your user model)
        if (!dataTypes || dataTypes.includes('profile')) {
            userData.profile = await this.getUserProfile(userId);
        }
        // Collect preferences
        if (!dataTypes || dataTypes.includes('preferences')) {
            userData.preferences = await this.getUserPreferences(userId);
        }
        // Collect consent records
        if (!dataTypes || dataTypes.includes('consents')) {
            userData.consents = await this.getUserConsents(userId);
        }
        // Collect activity logs
        if (!dataTypes || dataTypes.includes('activity')) {
            userData.activityLogs = await this.getUserActivityLogs(userId);
        }
        return userData;
    }
    async formatExportData(data, format) {
        switch (format) {
            case data_export_dto_1.ExportFormat.JSON:
                return JSON.stringify(data, null, 2);
            case data_export_dto_1.ExportFormat.CSV:
                return this.convertToCSV(data);
            case data_export_dto_1.ExportFormat.XML:
                return this.convertToXML(data);
            default:
                return data;
        }
    }
    convertToCSV(data) {
        // Implement CSV conversion logic
        const flattenedData = this.flattenObject(data);
        const headers = Object.keys(flattenedData).join(',');
        const values = Object.values(flattenedData).join(',');
        return `${headers}\n${values}`;
    }
    convertToXML(data) {
        // Implement XML conversion logic
        return `<?xml version="1.0" encoding="UTF-8"?>\n<userdata>${JSON.stringify(data)}</userdata>`;
    }
    flattenObject(obj, prefix = '') {
        const flattened = {};
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const newKey = prefix ? `${prefix}.${key}` : key;
                if (typeof obj[key] === 'object' && obj[key] !== null) {
                    Object.assign(flattened, this.flattenObject(obj[key], newKey));
                }
                else {
                    flattened[newKey] = obj[key];
                }
            }
        }
        return flattened;
    }
    async getUserProfile(userId) {
        // Implement based on your User entity
        return { message: 'Implement getUserProfile method' };
    }
    async getUserPreferences(userId) {
        // Implement based on your preferences system
        return { message: 'Implement getUserPreferences method' };
    }
    async getUserConsents(userId) {
        // Implement to get user consents
        return { message: 'Implement getUserConsents method' };
    }
    async getUserActivityLogs(userId) {
        return this.logRepository.find({
            where: { userId },
            order: { createdAt: 'DESC' },
            take: 1000, // Limit to recent activity
        });
    }
    async logDataProcessing(userId, activity, description, metadata, ipAddress, userAgent) {
        const log = this.logRepository.create({
            userId,
            activity,
            description,
            metadata,
            ipAddress,
            userAgent,
        });
        await this.logRepository.save(log);
    }
};
exports.DataExportService = DataExportService;
exports.DataExportService = DataExportService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(data_processing_log_entity_1.DataProcessingLog)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DataExportService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,