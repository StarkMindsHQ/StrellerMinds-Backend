{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\data-export.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,sDAAsD;AACtD,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,sFAG+C;AAC/C,2DAA2E;AAGpE,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEU,aAA4C;QAA5C,kBAAa,GAAb,aAAa,CAA+B;IACnD,CAAC;IAEJ,KAAK,CAAC,cAAc,CAClB,MAAc,EACd,OAA6B,EAC7B,SAAiB,EACjB,SAAiB;QAEjB,yBAAyB;QACzB,MAAM,IAAI,CAAC,iBAAiB,CAC1B,MAAM,EACN,+CAAkB,CAAC,WAAW,EAC9B,4BAA4B,EAC5B;YACE,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,EACD,SAAS,EACT,SAAS,CACV,CAAC;QAEF,yCAAyC;QACzC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAEvE,4CAA4C;QAC5C,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,oBAAoB,MAAM,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QAE7E,OAAO;YACL,IAAI,EAAE,aAAa;YACnB,QAAQ;SACT,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,MAAc,EACd,SAAoB;QAEpB,MAAM,QAAQ,GAAQ;YACpB,MAAM;YACN,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,OAAO,EAAE,EAAE;YACX,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;YACZ,YAAY,EAAE,EAAE;SACjB,CAAC;QAEF,4DAA4D;QAC5D,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YAChD,QAAQ,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC;QAED,sBAAsB;QACtB,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;YACpD,QAAQ,CAAC,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC;QAED,0BAA0B;QAC1B,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACjD,QAAQ,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC;QAED,wBAAwB;QACxB,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACjD,QAAQ,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACjE,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAC5B,IAAS,EACT,MAAoB;QAEpB,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,8BAAY,CAAC,IAAI;gBACpB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACvC,KAAK,8BAAY,CAAC,GAAG;gBACnB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACjC,KAAK,8BAAY,CAAC,GAAG;gBACnB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACjC;gBACE,OAAO,IAAI,CAAC;QAChB,CAAC;IACH,CAAC;IAEO,YAAY,CAAC,IAAS;QAC5B,iCAAiC;QACjC,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtD,OAAO,GAAG,OAAO,KAAK,MAAM,EAAE,CAAC;IACjC,CAAC;IAEO,YAAY,CAAC,IAAS;QAC5B,iCAAiC;QACjC,OAAO,qDAAqD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;IAChG,CAAC;IAEO,aAAa,CAAC,GAAQ,EAAE,MAAM,GAAG,EAAE;QACzC,MAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;YACtB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;gBACjD,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC;oBACtD,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;gBACjE,CAAC;qBAAM,CAAC;oBACN,SAAS,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,MAAc;QACzC,sCAAsC;QACtC,OAAO,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IACxD,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,MAAc;QAC7C,6CAA6C;QAC7C,OAAO,EAAE,OAAO,EAAE,qCAAqC,EAAE,CAAC;IAC5D,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,MAAc;QAC1C,iCAAiC;QACjC,OAAO,EAAE,OAAO,EAAE,kCAAkC,EAAE,CAAC;IACzD,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,MAAc;QAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YAC7B,KAAK,EAAE,EAAE,MAAM,EAAE;YACjB,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;YAC5B,IAAI,EAAE,IAAI,EAAE,2BAA2B;SACxC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,MAAc,EACd,QAA4B,EAC5B,WAAmB,EACnB,QAAa,EACb,SAAiB,EACjB,SAAiB;QAEjB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;YACpC,MAAM;YACN,QAAQ;YACR,WAAW;YACX,QAAQ;YACR,SAAS;YACT,SAAS;SACV,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;CACF,CAAA;AAnKY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8CAAiB,CAAC,CAAA;yDACb,oBAAU,oBAAV,oBAAU;GAHxB,iBAAiB,CAmK7B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\data-export.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport {\r\n  DataProcessingLog,\r\n  ProcessingActivity,\r\n} from './entities/data-processing-log.entity';\r\nimport { DataExportRequestDto, ExportFormat } from './dto/data-export.dto';\r\n\r\n@Injectable()\r\nexport class DataExportService {\r\n  constructor(\r\n    @InjectRepository(DataProcessingLog)\r\n    private logRepository: Repository<DataProcessingLog>,\r\n  ) {}\r\n\r\n  async exportUserData(\r\n    userId: string,\r\n    request: DataExportRequestDto,\r\n    ipAddress: string,\r\n    userAgent: string,\r\n  ): Promise<{ data: any; filename: string }> {\r\n    // Log the export request\r\n    await this.logDataProcessing(\r\n      userId,\r\n      ProcessingActivity.DATA_EXPORT,\r\n      'User data export requested',\r\n      {\r\n        dataTypes: request.dataTypes,\r\n        format: request.format,\r\n        reason: request.reason,\r\n      },\r\n      ipAddress,\r\n      userAgent,\r\n    );\r\n\r\n    // Collect user data from various sources\r\n    const userData = await this.collectUserData(userId, request.dataTypes);\r\n\r\n    // Format the data based on requested format\r\n    const formattedData = await this.formatExportData(userData, request.format);\r\n\r\n    const timestamp = new Date().toISOString().split('T')[0];\r\n    const filename = `user_data_export_${userId}_${timestamp}.${request.format}`;\r\n\r\n    return {\r\n      data: formattedData,\r\n      filename,\r\n    };\r\n  }\r\n\r\n  private async collectUserData(\r\n    userId: string,\r\n    dataTypes?: string[],\r\n  ): Promise<any> {\r\n    const userData: any = {\r\n      userId,\r\n      exportDate: new Date().toISOString(),\r\n      profile: {},\r\n      preferences: {},\r\n      consents: {},\r\n      activityLogs: {},\r\n    };\r\n\r\n    // Collect profile data (implement based on your user model)\r\n    if (!dataTypes || dataTypes.includes('profile')) {\r\n      userData.profile = await this.getUserProfile(userId);\r\n    }\r\n\r\n    // Collect preferences\r\n    if (!dataTypes || dataTypes.includes('preferences')) {\r\n      userData.preferences = await this.getUserPreferences(userId);\r\n    }\r\n\r\n    // Collect consent records\r\n    if (!dataTypes || dataTypes.includes('consents')) {\r\n      userData.consents = await this.getUserConsents(userId);\r\n    }\r\n\r\n    // Collect activity logs\r\n    if (!dataTypes || dataTypes.includes('activity')) {\r\n      userData.activityLogs = await this.getUserActivityLogs(userId);\r\n    }\r\n\r\n    return userData;\r\n  }\r\n\r\n  private async formatExportData(\r\n    data: any,\r\n    format: ExportFormat,\r\n  ): Promise<string | any> {\r\n    switch (format) {\r\n      case ExportFormat.JSON:\r\n        return JSON.stringify(data, null, 2);\r\n      case ExportFormat.CSV:\r\n        return this.convertToCSV(data);\r\n      case ExportFormat.XML:\r\n        return this.convertToXML(data);\r\n      default:\r\n        return data;\r\n    }\r\n  }\r\n\r\n  private convertToCSV(data: any): string {\r\n    // Implement CSV conversion logic\r\n    const flattenedData = this.flattenObject(data);\r\n    const headers = Object.keys(flattenedData).join(',');\r\n    const values = Object.values(flattenedData).join(',');\r\n    return `${headers}\\n${values}`;\r\n  }\r\n\r\n  private convertToXML(data: any): string {\r\n    // Implement XML conversion logic\r\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<userdata>${JSON.stringify(data)}</userdata>`;\r\n  }\r\n\r\n  private flattenObject(obj: any, prefix = ''): any {\r\n    const flattened: any = {};\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        const newKey = prefix ? `${prefix}.${key}` : key;\r\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n          Object.assign(flattened, this.flattenObject(obj[key], newKey));\r\n        } else {\r\n          flattened[newKey] = obj[key];\r\n        }\r\n      }\r\n    }\r\n    return flattened;\r\n  }\r\n\r\n  private async getUserProfile(userId: string): Promise<any> {\r\n    // Implement based on your User entity\r\n    return { message: 'Implement getUserProfile method' };\r\n  }\r\n\r\n  private async getUserPreferences(userId: string): Promise<any> {\r\n    // Implement based on your preferences system\r\n    return { message: 'Implement getUserPreferences method' };\r\n  }\r\n\r\n  private async getUserConsents(userId: string): Promise<any> {\r\n    // Implement to get user consents\r\n    return { message: 'Implement getUserConsents method' };\r\n  }\r\n\r\n  private async getUserActivityLogs(userId: string): Promise<any> {\r\n    return this.logRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 1000, // Limit to recent activity\r\n    });\r\n  }\r\n\r\n  private async logDataProcessing(\r\n    userId: string,\r\n    activity: ProcessingActivity,\r\n    description: string,\r\n    metadata: any,\r\n    ipAddress: string,\r\n    userAgent: string,\r\n  ): Promise<void> {\r\n    const log = this.logRepository.create({\r\n      userId,\r\n      activity,\r\n      description,\r\n      metadata,\r\n      ipAddress,\r\n      userAgent,\r\n    });\r\n\r\n    await this.logRepository.save(log);\r\n  }\r\n}\r\n"],"version":3}