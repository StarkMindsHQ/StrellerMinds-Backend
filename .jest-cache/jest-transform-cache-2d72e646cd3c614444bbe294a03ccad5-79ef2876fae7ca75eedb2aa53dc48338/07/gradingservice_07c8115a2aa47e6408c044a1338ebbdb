7a25da36b7a00ed3abfbdec90a23bb19
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GradingService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const grade_entity_1 = require("../entities/grade-entity");
/**
 * GradingService provides logic for grading assignments and updating grades.
 */
let GradingService = class GradingService {
    /**
     * Creates an instance of GradingService.
     * @param gradeRepository - The grade repository
     */
    constructor(gradeRepository) {
        this.gradeRepository = gradeRepository;
    }
    /**
     * Grade a student assignment.
     * @param mentor - Mentor user
     * @param studentId - Student ID
     * @param assignmentId - Assignment ID
     * @param dto - Grade data
     * @returns The created Grade entity
     */
    async gradeAssignment(mentor, studentId, assignmentId, dto) {
        const grade = this.gradeRepository.create({
            mentor,
            student: { id: studentId },
            assignment: { id: assignmentId },
            numericGrade: dto.numericGrade,
            feedback: dto.feedback,
        });
        return this.gradeRepository.save(grade);
    }
    /**
     * Update an existing grade.
     * @param mentor - Mentor user
     * @param gradeId - Grade ID
     * @param dto - Updated grade data
     * @returns The updated Grade entity
     */
    async updateGrade(mentor, gradeId, dto) {
        const grade = await this.gradeRepository.findOne({
            where: { id: gradeId },
            relations: ['mentor'],
        });
        if (!grade)
            throw new common_1.NotFoundException('Grade not found.');
        if (grade.mentor.id !== mentor.id)
            throw new common_1.ForbiddenException('You cannot update this grade.');
        Object.assign(grade, dto);
        return this.gradeRepository.save(grade);
    }
    /**
     * Get grading history for a mentor.
     * @param mentor - Mentor user
     * @returns Array of Grade entities
     */
    async getGradingHistory(mentor) {
        return this.gradeRepository.find({
            where: { mentor: { id: mentor.id } },
            relations: ['student', 'assignment'],
        });
    }
};
exports.GradingService = GradingService;
exports.GradingService = GradingService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(grade_entity_1.Grade)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GradingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxzZXJ2aWNlc1xcZ3JhZGluZy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FJd0I7QUFDeEIsNkNBQW1EO0FBQ25ELHFDQUFxQztBQUNyQywyREFBaUQ7QUFLakQ7O0dBRUc7QUFFSSxJQUFNLGNBQWMsR0FBcEIsTUFBTSxjQUFjO0lBQ3pCOzs7T0FHRztJQUNILFlBRW1CLGVBQWtDO1FBQWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtJQUNsRCxDQUFDO0lBRUo7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQ25CLE1BQVksRUFDWixTQUFpQixFQUNqQixZQUFvQixFQUNwQixHQUFtQjtRQUVuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztZQUN4QyxNQUFNO1lBQ04sT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBUztZQUNqQyxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFTO1lBQ3ZDLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWTtZQUM5QixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFZLEVBQUUsT0FBZSxFQUFFLEdBQW1CO1FBQ2xFLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDL0MsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRTtZQUN0QixTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksMEJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM1RCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSwyQkFBa0IsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBRWhFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBWTtRQUNsQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQy9CLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDcEMsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQztTQUNyQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTtBQWpFWSx3Q0FBYzt5QkFBZCxjQUFjO0lBRDFCLElBQUEsbUJBQVUsR0FBRTtJQU9SLFdBQUEsSUFBQSwwQkFBZ0IsRUFBQyxvQkFBSyxDQUFDLENBQUE7eURBQ1Usb0JBQVUsb0JBQVYsb0JBQVU7R0FQbkMsY0FBYyxDQWlFMUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxzZXJ2aWNlc1xcZ3JhZGluZy5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgSW5qZWN0YWJsZSxcclxuICBOb3RGb3VuZEV4Y2VwdGlvbixcclxuICBGb3JiaWRkZW5FeGNlcHRpb24sXHJcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RSZXBvc2l0b3J5IH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBHcmFkZSB9IGZyb20gJy4uL2VudGl0aWVzL2dyYWRlLWVudGl0eSc7XHJcbmltcG9ydCB7IENyZWF0ZUdyYWRlRHRvIH0gZnJvbSAnLi4vZHRvL2NyZWF0ZS1ncmFkZS5kdG8nO1xyXG5pbXBvcnQgeyBVcGRhdGVHcmFkZUR0byB9IGZyb20gJy4uL2R0by91cGRhdGUtZ3JhZGUuZHRvJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL3VzZXJzL2VudGl0aWVzL3VzZXIuZW50aXR5JztcclxuXHJcbi8qKlxyXG4gKiBHcmFkaW5nU2VydmljZSBwcm92aWRlcyBsb2dpYyBmb3IgZ3JhZGluZyBhc3NpZ25tZW50cyBhbmQgdXBkYXRpbmcgZ3JhZGVzLlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR3JhZGluZ1NlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgR3JhZGluZ1NlcnZpY2UuXHJcbiAgICogQHBhcmFtIGdyYWRlUmVwb3NpdG9yeSAtIFRoZSBncmFkZSByZXBvc2l0b3J5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShHcmFkZSlcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhZGVSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEdyYWRlPixcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdyYWRlIGEgc3R1ZGVudCBhc3NpZ25tZW50LlxyXG4gICAqIEBwYXJhbSBtZW50b3IgLSBNZW50b3IgdXNlclxyXG4gICAqIEBwYXJhbSBzdHVkZW50SWQgLSBTdHVkZW50IElEXHJcbiAgICogQHBhcmFtIGFzc2lnbm1lbnRJZCAtIEFzc2lnbm1lbnQgSURcclxuICAgKiBAcGFyYW0gZHRvIC0gR3JhZGUgZGF0YVxyXG4gICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIEdyYWRlIGVudGl0eVxyXG4gICAqL1xyXG4gIGFzeW5jIGdyYWRlQXNzaWdubWVudChcclxuICAgIG1lbnRvcjogVXNlcixcclxuICAgIHN0dWRlbnRJZDogbnVtYmVyLFxyXG4gICAgYXNzaWdubWVudElkOiBudW1iZXIsXHJcbiAgICBkdG86IENyZWF0ZUdyYWRlRHRvLFxyXG4gICkge1xyXG4gICAgY29uc3QgZ3JhZGUgPSB0aGlzLmdyYWRlUmVwb3NpdG9yeS5jcmVhdGUoe1xyXG4gICAgICBtZW50b3IsXHJcbiAgICAgIHN0dWRlbnQ6IHsgaWQ6IHN0dWRlbnRJZCB9IGFzIGFueSxcclxuICAgICAgYXNzaWdubWVudDogeyBpZDogYXNzaWdubWVudElkIH0gYXMgYW55LFxyXG4gICAgICBudW1lcmljR3JhZGU6IGR0by5udW1lcmljR3JhZGUsXHJcbiAgICAgIGZlZWRiYWNrOiBkdG8uZmVlZGJhY2ssXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmdyYWRlUmVwb3NpdG9yeS5zYXZlKGdyYWRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBncmFkZS5cclxuICAgKiBAcGFyYW0gbWVudG9yIC0gTWVudG9yIHVzZXJcclxuICAgKiBAcGFyYW0gZ3JhZGVJZCAtIEdyYWRlIElEXHJcbiAgICogQHBhcmFtIGR0byAtIFVwZGF0ZWQgZ3JhZGUgZGF0YVxyXG4gICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIEdyYWRlIGVudGl0eVxyXG4gICAqL1xyXG4gIGFzeW5jIHVwZGF0ZUdyYWRlKG1lbnRvcjogVXNlciwgZ3JhZGVJZDogbnVtYmVyLCBkdG86IFVwZGF0ZUdyYWRlRHRvKSB7XHJcbiAgICBjb25zdCBncmFkZSA9IGF3YWl0IHRoaXMuZ3JhZGVSZXBvc2l0b3J5LmZpbmRPbmUoe1xyXG4gICAgICB3aGVyZTogeyBpZDogZ3JhZGVJZCB9LFxyXG4gICAgICByZWxhdGlvbnM6IFsnbWVudG9yJ10sXHJcbiAgICB9KTtcclxuICAgIGlmICghZ3JhZGUpIHRocm93IG5ldyBOb3RGb3VuZEV4Y2VwdGlvbignR3JhZGUgbm90IGZvdW5kLicpO1xyXG4gICAgaWYgKGdyYWRlLm1lbnRvci5pZCAhPT0gbWVudG9yLmlkKVxyXG4gICAgICB0aHJvdyBuZXcgRm9yYmlkZGVuRXhjZXB0aW9uKCdZb3UgY2Fubm90IHVwZGF0ZSB0aGlzIGdyYWRlLicpO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oZ3JhZGUsIGR0byk7XHJcbiAgICByZXR1cm4gdGhpcy5ncmFkZVJlcG9zaXRvcnkuc2F2ZShncmFkZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgZ3JhZGluZyBoaXN0b3J5IGZvciBhIG1lbnRvci5cclxuICAgKiBAcGFyYW0gbWVudG9yIC0gTWVudG9yIHVzZXJcclxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBHcmFkZSBlbnRpdGllc1xyXG4gICAqL1xyXG4gIGFzeW5jIGdldEdyYWRpbmdIaXN0b3J5KG1lbnRvcjogVXNlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuZ3JhZGVSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICB3aGVyZTogeyBtZW50b3I6IHsgaWQ6IG1lbnRvci5pZCB9IH0sXHJcbiAgICAgIHJlbGF0aW9uczogWydzdHVkZW50JywgJ2Fzc2lnbm1lbnQnXSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=