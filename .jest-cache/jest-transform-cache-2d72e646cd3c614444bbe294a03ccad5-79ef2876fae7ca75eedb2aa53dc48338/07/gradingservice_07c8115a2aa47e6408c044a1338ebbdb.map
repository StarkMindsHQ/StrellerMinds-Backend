{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\grading\\services\\grading.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAIwB;AACxB,6CAAmD;AACnD,qCAAqC;AACrC,2DAAiD;AAKjD;;GAEG;AAEI,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB;;;OAGG;IACH,YAEmB,eAAkC;QAAlC,oBAAe,GAAf,eAAe,CAAmB;IAClD,CAAC;IAEJ;;;;;;;OAOG;IACH,KAAK,CAAC,eAAe,CACnB,MAAY,EACZ,SAAiB,EACjB,YAAoB,EACpB,GAAmB;QAEnB,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;YACxC,MAAM;YACN,OAAO,EAAE,EAAE,EAAE,EAAE,SAAS,EAAS;YACjC,UAAU,EAAE,EAAE,EAAE,EAAE,YAAY,EAAS;YACvC,YAAY,EAAE,GAAG,CAAC,YAAY;YAC9B,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,WAAW,CAAC,MAAY,EAAE,OAAe,EAAE,GAAmB;QAClE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE;YACtB,SAAS,EAAE,CAAC,QAAQ,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,0BAAiB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE;YAC/B,MAAM,IAAI,2BAAkB,CAAC,+BAA+B,CAAC,CAAC;QAEhE,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,MAAY;QAClC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YAC/B,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE;YACpC,SAAS,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;SACrC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjEY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAOR,WAAA,IAAA,0BAAgB,EAAC,oBAAK,CAAC,CAAA;yDACU,oBAAU,oBAAV,oBAAU;GAPnC,cAAc,CAiE1B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\grading\\services\\grading.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ForbiddenException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Grade } from '../entities/grade-entity';\r\nimport { CreateGradeDto } from '../dto/create-grade.dto';\r\nimport { UpdateGradeDto } from '../dto/update-grade.dto';\r\nimport { User } from '../../users/entities/user.entity';\r\n\r\n/**\r\n * GradingService provides logic for grading assignments and updating grades.\r\n */\r\n@Injectable()\r\nexport class GradingService {\r\n  /**\r\n   * Creates an instance of GradingService.\r\n   * @param gradeRepository - The grade repository\r\n   */\r\n  constructor(\r\n    @InjectRepository(Grade)\r\n    private readonly gradeRepository: Repository<Grade>,\r\n  ) {}\r\n\r\n  /**\r\n   * Grade a student assignment.\r\n   * @param mentor - Mentor user\r\n   * @param studentId - Student ID\r\n   * @param assignmentId - Assignment ID\r\n   * @param dto - Grade data\r\n   * @returns The created Grade entity\r\n   */\r\n  async gradeAssignment(\r\n    mentor: User,\r\n    studentId: number,\r\n    assignmentId: number,\r\n    dto: CreateGradeDto,\r\n  ) {\r\n    const grade = this.gradeRepository.create({\r\n      mentor,\r\n      student: { id: studentId } as any,\r\n      assignment: { id: assignmentId } as any,\r\n      numericGrade: dto.numericGrade,\r\n      feedback: dto.feedback,\r\n    });\r\n    return this.gradeRepository.save(grade);\r\n  }\r\n\r\n  /**\r\n   * Update an existing grade.\r\n   * @param mentor - Mentor user\r\n   * @param gradeId - Grade ID\r\n   * @param dto - Updated grade data\r\n   * @returns The updated Grade entity\r\n   */\r\n  async updateGrade(mentor: User, gradeId: number, dto: UpdateGradeDto) {\r\n    const grade = await this.gradeRepository.findOne({\r\n      where: { id: gradeId },\r\n      relations: ['mentor'],\r\n    });\r\n    if (!grade) throw new NotFoundException('Grade not found.');\r\n    if (grade.mentor.id !== mentor.id)\r\n      throw new ForbiddenException('You cannot update this grade.');\r\n\r\n    Object.assign(grade, dto);\r\n    return this.gradeRepository.save(grade);\r\n  }\r\n\r\n  /**\r\n   * Get grading history for a mentor.\r\n   * @param mentor - Mentor user\r\n   * @returns Array of Grade entities\r\n   */\r\n  async getGradingHistory(mentor: User) {\r\n    return this.gradeRepository.find({\r\n      where: { mentor: { id: mentor.id } },\r\n      relations: ['student', 'assignment'],\r\n    });\r\n  }\r\n}\r\n"],"version":3}