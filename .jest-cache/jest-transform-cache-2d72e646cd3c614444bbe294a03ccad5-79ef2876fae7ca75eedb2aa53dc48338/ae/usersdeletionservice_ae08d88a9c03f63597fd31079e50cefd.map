{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.deletion.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.deletion.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  Logger,\r\n  NotFoundException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, Connection } from 'typeorm';\r\nimport { User } from '../entities/user.entity';\r\nimport { WalletInfo } from '../entities/wallet-info.entity';\r\nimport { UserProgress } from '../entities/user-progress.entity';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AccountStatus } from '../enums/accountStatus.enum';\r\nimport { AuditLogService } from 'src/audit/services/audit.log.service';\r\nimport { AccountDeletionConfirmationService } from './account.deletion.confirmation.service';\r\n\r\n\r\n\r\n/**\r\n * Service responsible for handling user account deletion process\r\n */\r\n@Injectable()\r\nexport class UserDeletionService {\r\n  private readonly logger = new Logger(UserDeletionService.name);\r\n  private readonly dataRetentionPeriod: number;\r\n\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    @InjectRepository(WalletInfo)\r\n    private readonly walletInfoRepository: Repository<WalletInfo>,\r\n    @InjectRepository(UserProgress)\r\n    private readonly userProgressRepository: Repository<UserProgress>,\r\n    private readonly auditLogService: AuditLogService,\r\n    private readonly confirmationService: AccountDeletionConfirmationService,\r\n    private readonly connection: Connection,\r\n    private readonly configService: ConfigService,\r\n  ) {\r\n    // Get data retention period from config (days)\r\n    this.dataRetentionPeriod = this.configService.get<number>(\r\n      'DATA_RETENTION_PERIOD',\r\n      30,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deactivate a user account\r\n   * @param userId User ID to deactivate\r\n   * @param requestingUserId User ID requesting the deactivation\r\n   */\r\n  async deactivateAccount(\r\n    userId: string,\r\n    requestingUserId: string,\r\n  ): Promise<void> {\r\n    const user = await this.findUserOrFail(userId);\r\n\r\n    // Begin transaction\r\n    const queryRunner = this.connection.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      // Add status column to track account state\r\n      user['status'] = AccountStatus.DEACTIVATED;\r\n      user['deactivatedAt'] = new Date();\r\n\r\n      await queryRunner.manager.save(user);\r\n\r\n      // Log the deactivation\r\n      await this.auditLogService.createLog({\r\n        action: 'ACCOUNT_DEACTIVATION',\r\n        entityType: 'USER',\r\n        entityId: userId,\r\n        performedBy: requestingUserId,\r\n        details: {\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      });\r\n\r\n      await queryRunner.commitTransaction();\r\n      this.logger.log(`Account ${userId} has been deactivated`);\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      this.logger.error(`Failed to deactivate account ${userId}`, error.stack);\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request account deletion and start confirmation workflow\r\n   * @param userId User ID to delete\r\n   * @param requestingUserId User ID requesting the deletion\r\n   */\r\n  async requestAccountDeletion(\r\n    userId: string,\r\n    requestingUserId: string,\r\n  ): Promise<void> {\r\n    const user = await this.findUserOrFail(userId);\r\n\r\n    // Ensure user is authorized to delete this account\r\n    if (userId !== requestingUserId) {\r\n      const requestingUser = await this.findUserOrFail(requestingUserId);\r\n      if (requestingUser.role !== 'ADMIN') {\r\n        throw new BadRequestException(\r\n          'You are not authorized to delete this account',\r\n        );\r\n      }\r\n    }\r\n\r\n    // Mark account as pending deletion\r\n    user['status'] = AccountStatus.PENDING_DELETION;\r\n    user['deletionRequestedAt'] = new Date();\r\n    await this.userRepository.save(user);\r\n\r\n    // Start confirmation workflow\r\n    const confirmationUrl = `${this.configService.get<string>('FRONTEND_URL')}/confirm-deletion?userId=${user.id}`;\r\n    const unsubscribeUrl = `${this.configService.get<string>('FRONTEND_URL')}/preferences?email=${user.email}`;\r\n\r\n    await this.confirmationService.sendAccountDeletionEmail({\r\n      email: user.email,\r\n      firstName: user.firstName,\r\n      confirmationUrl,\r\n      unsubscribeUrl,\r\n    });\r\n\r\n    // Log deletion request\r\n    await this.auditLogService.createLog({\r\n      action: 'ACCOUNT_DELETION_REQUESTED',\r\n      entityType: 'USER',\r\n      entityId: userId,\r\n      performedBy: requestingUserId,\r\n      details: {\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n\r\n    this.logger.log(`Account deletion requested for user ${userId}`);\r\n  }\r\n\r\n  /**\r\n   * Confirm account deletion with token\r\n   * @param userId User ID to delete\r\n   * @param confirmationToken Confirmation token\r\n   */\r\n  async confirmAccountDeletion(\r\n    userId: string,\r\n    confirmationToken: string,\r\n  ): Promise<void> {\r\n    // Validate confirmation token\r\n    const isValid = await this.confirmationService.validateAndDeleteAccount(confirmationToken,\r\n    );\r\n\r\n    if (!isValid) {\r\n      throw new BadRequestException('Invalid or expired confirmation token');\r\n    }\r\n\r\n    await this.performAccountDeletion(userId, userId);\r\n  }\r\n\r\n  /**\r\n   * Perform the actual account deletion process\r\n   * @param userId User ID to delete\r\n   * @param requestingUserId User ID requesting the deletion\r\n   */\r\n  async performAccountDeletion(\r\n    userId: string,\r\n    requestingUserId: string,\r\n  ): Promise<void> {\r\n    const user = await this.findUserOrFail(userId);\r\n\r\n    // Begin transaction for atomic operations\r\n    const queryRunner = this.connection.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      // Scrub sensitive user data but preserve the record for soft deletion\r\n      await this.scrubUserData(userId, queryRunner);\r\n\r\n      // Preserve blockchain credentials but mark as orphaned\r\n      await this.preserveBlockchainCredentials(userId, queryRunner);\r\n\r\n      // Soft delete related entities\r\n      await queryRunner.manager.softDelete(UserProgress, {\r\n        user: { id: userId },\r\n      });\r\n\r\n      // Soft delete the user entity\r\n      user['status'] = AccountStatus.DELETED;\r\n      user['deletedAt'] = new Date();\r\n      await queryRunner.manager.save(user);\r\n\r\n      // Log the deletion\r\n      await this.auditLogService.createLog({\r\n        action: 'ACCOUNT_DELETED',\r\n        entityType: 'USER',\r\n        entityId: userId,\r\n        performedBy: requestingUserId,\r\n        details: {\r\n          timestamp: new Date().toISOString(),\r\n          retentionPeriod: this.dataRetentionPeriod,\r\n        },\r\n      });\r\n\r\n      await queryRunner.commitTransaction();\r\n      this.logger.log(`Account ${userId} has been deleted and data scrubbed`);\r\n\r\n      // Schedule final purge after retention period\r\n      this.scheduleDataPurge(userId);\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      this.logger.error(`Failed to delete account ${userId}`, error.stack);\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrub sensitive user data but preserve the record\r\n   * @param userId User ID to scrub\r\n   * @param queryRunner Transaction query runner\r\n   */\r\n  private async scrubUserData(userId: string, queryRunner: any): Promise<void> {\r\n    // Keep user ID but scrub personal information\r\n    await queryRunner.manager.update(User, userId, {\r\n      firstName: '[REDACTED]',\r\n      lastName: '[REDACTED]',\r\n      email: `deleted-${userId}@redacted.user`,\r\n      bio: null,\r\n      profilePicture: null,\r\n      // Don't delete password hash as it's needed for security audit purposes\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Preserve blockchain credentials for compliance and access purposes\r\n   * @param userId User ID\r\n   * @param queryRunner Transaction query runner\r\n   */\r\n  private async preserveBlockchainCredentials(\r\n    userId: string,\r\n    queryRunner: any,\r\n  ): Promise<void> {\r\n    const walletInfo = await this.walletInfoRepository.findOne({\r\n      where: { user: { id: userId } },\r\n    });\r\n\r\n    if (walletInfo) {\r\n      // Mark wallet as orphaned but preserve the blockchain data\r\n      await queryRunner.manager.update(WalletInfo, walletInfo.id, {\r\n        orphaned: true,\r\n        orphanedAt: new Date(),\r\n        // Keep blockchain credentials for compliance\r\n      });\r\n\r\n      this.logger.log(`Blockchain credentials preserved for user ${userId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule complete data purge after retention period\r\n   * @param userId User ID to purge\r\n   */\r\n  private scheduleDataPurge(userId: string): void {\r\n    const purgeDate = new Date();\r\n    purgeDate.setDate(purgeDate.getDate() + this.dataRetentionPeriod);\r\n\r\n    this.logger.log(\r\n      `Scheduling complete data purge for user ${userId} on ${purgeDate.toISOString()}`,\r\n    );\r\n\r\n    // For production, you might want to use a job scheduler like Bull\r\n    // This is a simplified version for demonstration\r\n    setTimeout(\r\n      async () => {\r\n        await this.purgeUserData(userId);\r\n      },\r\n      this.dataRetentionPeriod * 24 * 60 * 60 * 1000,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Completely purge user data after retention period\r\n   * @param userId User ID to purge\r\n   */\r\n  async purgeUserData(userId: string): Promise<void> {\r\n    const queryRunner = this.connection.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      // Hard delete related entities first\r\n      await queryRunner.manager.delete(UserProgress, { user: { id: userId } });\r\n\r\n      // Check if blockchain credentials should be permanently deleted\r\n      // This depends on your regulatory requirements\r\n      const walletInfo = await this.walletInfoRepository.findOne({\r\n        where: { user: { id: userId } },\r\n      });\r\n\r\n      if (walletInfo && this.shouldPurgeBlockchainData(walletInfo)) {\r\n        await queryRunner.manager.delete(WalletInfo, walletInfo.id);\r\n      }\r\n\r\n      // Finally hard delete the user\r\n      await queryRunner.manager.delete(User, userId);\r\n\r\n      await queryRunner.commitTransaction();\r\n\r\n      // Log the permanent deletion\r\n      await this.auditLogService.createLog({\r\n        action: 'ACCOUNT_PURGED',\r\n        entityType: 'USER',\r\n        entityId: userId,\r\n        performedBy: 'SYSTEM',\r\n        details: {\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      });\r\n\r\n      this.logger.log(`User data for ${userId} has been permanently purged`);\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      this.logger.error(`Failed to purge user data for ${userId}`, error.stack);\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if blockchain data should be purged based on regulations\r\n   * @param walletInfo Wallet information\r\n   */\r\n  private shouldPurgeBlockchainData(walletInfo: WalletInfo): boolean {\r\n    // This logic should be implemented based on your specific regulatory requirements\r\n    // For example, you might need to keep some data for tax purposes\r\n    // GDPR allows keeping data needed for legal obligations\r\n\r\n    // For demonstration, we're returning false to preserve blockchain data\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Utility method to find a user or throw exception\r\n   * @param userId User ID to find\r\n   */\r\n  private async findUserOrFail(userId: string): Promise<User> {\r\n    const user = await this.userRepository.findOne({\r\n      where: { id: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new NotFoundException(`User with ID ${userId} not found`);\r\n    }\r\n\r\n    return user;\r\n  }\r\n}\r\n"],"version":3}