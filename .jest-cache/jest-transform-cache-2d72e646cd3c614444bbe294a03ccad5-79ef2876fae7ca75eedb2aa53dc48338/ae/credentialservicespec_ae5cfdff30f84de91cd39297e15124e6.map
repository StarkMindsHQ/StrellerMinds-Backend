{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CredentialService } from './credential.service';\r\nimport { Credential } from './entities/credential.entity';\r\nimport { StellarService } from '../blockchain/stellar/stellar.service';\r\n\r\ndescribe('CredentialService.verifyCredential', () => {\r\n  let service: CredentialService;\r\n  let repo: jest.Mocked<Repository<Credential>>;\r\n  let stellar: { monitorTransaction: jest.Mock };\r\n\r\n  beforeEach(async () => {\r\n    repo = {\r\n      findOne: jest.fn(),\r\n      save: jest.fn(),\r\n    } as any;\r\n\r\n    stellar = { monitorTransaction: jest.fn() };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CredentialService,\r\n        { provide: getRepositoryToken(Credential), useValue: repo },\r\n        { provide: StellarService, useValue: stellar },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get(CredentialService);\r\n  });\r\n\r\n  it('verifies credential on Stellar and updates verificationStatus true when ledger matches blockHeight', async () => {\r\n    const credential: Partial<Credential> = {\r\n      id: 'cred-1',\r\n      userId: 'user-1',\r\n      txHash: 'tx-abc',\r\n      network: 'stellar',\r\n      blockHeight: 123,\r\n      verificationStatus: false,\r\n    };\r\n    repo.findOne.mockResolvedValue(credential as Credential);\r\n    stellar.monitorTransaction.mockResolvedValue({ ledger: 123 });\r\n    repo.save.mockImplementation(async (c: Credential) => c);\r\n\r\n    const result = await service.verifyCredential('user-1', 'cred-1');\r\n\r\n    expect(stellar.monitorTransaction).toHaveBeenCalledWith('tx-abc');\r\n    expect(repo.save).toHaveBeenCalled();\r\n    expect(result.verified).toBe(true);\r\n    expect(result.credential.verificationStatus).toBe(true);\r\n  });\r\n\r\n  it('returns verified false if transaction not found', async () => {\r\n    const credential: Partial<Credential> = {\r\n      id: 'cred-2',\r\n      userId: 'user-1',\r\n      txHash: 'tx-missing',\r\n      network: 'stellar',\r\n      blockHeight: 999,\r\n      verificationStatus: false,\r\n    };\r\n    repo.findOne.mockResolvedValue(credential as Credential);\r\n    stellar.monitorTransaction.mockResolvedValue(null);\r\n    repo.save.mockImplementation(async (c: Credential) => c);\r\n\r\n    const result = await service.verifyCredential('user-1', 'cred-2');\r\n\r\n    expect(result.verified).toBe(false);\r\n    expect(result.credential.verificationStatus).toBe(false);\r\n  });\r\n});\r\n\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CredentialService } from '../credential.service';\r\nimport { Credential } from '../entities/credential.entity';\r\nimport { BlockchainService } from '../../blockchain/blockchain.service';\r\nimport { CredentialStatus } from '../dto/credential-history-query.dto';\r\n\r\ndescribe('CredentialService', () => {\r\n  let service: CredentialService;\r\n  let repository: Repository<Credential>;\r\n  let blockchainService: BlockchainService;\r\n\r\n  const mockCredential = {\r\n    id: '123e4567-e89b-12d3-a456-426614174000',\r\n    userId: 'user-123',\r\n    type: 'academic',\r\n    name: 'Computer Science Degree',\r\n    metadata: { university: 'MIT', year: 2023 },\r\n    issuerId: 'issuer-123',\r\n    issuerName: 'MIT University',\r\n    issuedAt: new Date('2023-01-01'),\r\n    expiresAt: new Date('2028-01-01'),\r\n    status: 'VERIFIED',\r\n    txHash: 'abc123txhash',\r\n    network: 'stellar-testnet',\r\n    blockHeight: 12345,\r\n    verificationStatus: true,\r\n    updatedAt: new Date(),\r\n  };\r\n\r\n  const mockCredentialRepository = {\r\n    findAndCount: jest.fn(),\r\n    findOne: jest.fn(),\r\n    save: jest.fn(),\r\n  };\r\n\r\n  const mockBlockchainService = {\r\n    verifyTransaction: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CredentialService,\r\n        {\r\n          provide: getRepositoryToken(Credential),\r\n          useValue: mockCredentialRepository,\r\n        },\r\n        {\r\n          provide: BlockchainService,\r\n          useValue: mockBlockchainService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<CredentialService>(CredentialService);\r\n    repository = module.get<Repository<Credential>>(getRepositoryToken(Credential));\r\n    blockchainService = module.get<BlockchainService>(BlockchainService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('getUserCredentialHistory', () => {\r\n    it('should return paginated credential history for a user', async () => {\r\n      const queryParams = {\r\n        page: 1,\r\n        limit: 10,\r\n        status: CredentialStatus.ALL,\r\n      };\r\n\r\n      mockCredentialRepository.findAndCount.mockResolvedValue([[mockCredential], 1]);\r\n\r\n      const result = await service.getUserCredentialHistory('user-123', queryParams);\r\n\r\n      expect(mockCredentialRepository.findAndCount).toHaveBeenCalled();\r\n      expect(result).toHaveProperty('data');\r\n      expect(result).toHaveProperty('meta');\r\n      expect(result.meta).toEqual({\r\n        page: 1,\r\n        limit: 10,\r\n        totalItems: 1,\r\n        totalPages: 1,\r\n      });\r\n      expect(result.data).toHaveLength(1);\r\n      expect(result.data[0]).toHaveProperty('id', mockCredential.id);\r\n    });\r\n\r\n    it('should apply filters correctly when provided', async () => {\r\n      const queryParams = {\r\n        page: 1,\r\n        limit: 10,\r\n        credentialType: 'academic',\r\n        startDate: new Date('2022-01-01'),\r\n        endDate: new Date('2023-12-31'),\r\n        status: CredentialStatus.VERIFIED,\r\n      };\r\n\r\n      mockCredentialRepository.findAndCount.mockResolvedValue([[mockCredential], 1]);\r\n\r\n      await service.getUserCredentialHistory('user-123', queryParams);\r\n\r\n      expect(mockCredentialRepository.findAndCount).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          where: expect.objectContaining({\r\n            userId: 'user-123',\r\n            type: 'academic',\r\n            status: 'VERIFIED',\r\n          }),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('verifyCredential', () => {\r\n    it('should verify a credential and update its status', async () => {\r\n      mockCredentialRepository.findOne.mockResolvedValue(mockCredential);\r\n      mockBlockchainService.verifyTransaction.mockResolvedValue({ verified: true });\r\n      mockCredentialRepository.save.mockResolvedValue({\r\n        ...mockCredential,\r\n        verificationStatus: true,\r\n      });\r\n\r\n      const result = await service.verifyCredential('user-123', mockCredential.id);\r\n\r\n      expect(mockCredentialRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id: mockCredential.id, userId: 'user-123' },\r\n      });\r\n      expect(mockBlockchainService.verifyTransaction).toHaveBeenCalledWith(mockCredential.txHash);\r\n      expect(mockCredentialRepository.save).toHaveBeenCalled();\r\n      expect(result).toHaveProperty('verified', true);\r\n      expect(result).toHaveProperty('credential');\r\n    });\r\n\r\n    it('should throw an error when credential is not found', async () => {\r\n      mockCredentialRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.verifyCredential('user-123', 'non-existent-id')).rejects.toThrow();\r\n    });\r\n  });\r\n});"],"version":3}