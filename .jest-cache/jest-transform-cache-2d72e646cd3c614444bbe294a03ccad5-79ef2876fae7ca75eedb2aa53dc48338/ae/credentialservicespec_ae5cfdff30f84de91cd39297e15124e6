8fd952ce66366afa9af0c2d9e2db71a7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const credential_service_1 = require("./credential.service");
const credential_entity_1 = require("./entities/credential.entity");
const stellar_service_1 = require("../blockchain/stellar/stellar.service");
describe('CredentialService.verifyCredential', () => {
    let service;
    let repo;
    let stellar;
    beforeEach(async () => {
        repo = {
            findOne: jest.fn(),
            save: jest.fn(),
        };
        stellar = { monitorTransaction: jest.fn() };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                credential_service_1.CredentialService,
                { provide: (0, typeorm_1.getRepositoryToken)(credential_entity_1.Credential), useValue: repo },
                { provide: stellar_service_1.StellarService, useValue: stellar },
            ],
        }).compile();
        service = module.get(credential_service_1.CredentialService);
    });
    it('verifies credential on Stellar and updates verificationStatus true when ledger matches blockHeight', async () => {
        const credential = {
            id: 'cred-1',
            userId: 'user-1',
            txHash: 'tx-abc',
            network: 'stellar',
            blockHeight: 123,
            verificationStatus: false,
        };
        repo.findOne.mockResolvedValue(credential);
        stellar.monitorTransaction.mockResolvedValue({ ledger: 123 });
        repo.save.mockImplementation(async (c) => c);
        const result = await service.verifyCredential('user-1', 'cred-1');
        expect(stellar.monitorTransaction).toHaveBeenCalledWith('tx-abc');
        expect(repo.save).toHaveBeenCalled();
        expect(result.verified).toBe(true);
        expect(result.credential.verificationStatus).toBe(true);
    });
    it('returns verified false if transaction not found', async () => {
        const credential = {
            id: 'cred-2',
            userId: 'user-1',
            txHash: 'tx-missing',
            network: 'stellar',
            blockHeight: 999,
            verificationStatus: false,
        };
        repo.findOne.mockResolvedValue(credential);
        stellar.monitorTransaction.mockResolvedValue(null);
        repo.save.mockImplementation(async (c) => c);
        const result = await service.verifyCredential('user-1', 'cred-2');
        expect(result.verified).toBe(false);
        expect(result.credential.verificationStatus).toBe(false);
    });
});
const blockchain_service_1 = require("../../blockchain/blockchain.service");
const credential_history_query_dto_1 = require("../dto/credential-history-query.dto");
describe('CredentialService', () => {
    let service;
    let repository;
    let blockchainService;
    const mockCredential = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        userId: 'user-123',
        type: 'academic',
        name: 'Computer Science Degree',
        metadata: { university: 'MIT', year: 2023 },
        issuerId: 'issuer-123',
        issuerName: 'MIT University',
        issuedAt: new Date('2023-01-01'),
        expiresAt: new Date('2028-01-01'),
        status: 'VERIFIED',
        txHash: 'abc123txhash',
        network: 'stellar-testnet',
        blockHeight: 12345,
        verificationStatus: true,
        updatedAt: new Date(),
    };
    const mockCredentialRepository = {
        findAndCount: jest.fn(),
        findOne: jest.fn(),
        save: jest.fn(),
    };
    const mockBlockchainService = {
        verifyTransaction: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                credential_service_1.CredentialService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(credential_entity_1.Credential),
                    useValue: mockCredentialRepository,
                },
                {
                    provide: blockchain_service_1.BlockchainService,
                    useValue: mockBlockchainService,
                },
            ],
        }).compile();
        service = module.get(credential_service_1.CredentialService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(credential_entity_1.Credential));
        blockchainService = module.get(blockchain_service_1.BlockchainService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('getUserCredentialHistory', () => {
        it('should return paginated credential history for a user', async () => {
            const queryParams = {
                page: 1,
                limit: 10,
                status: credential_history_query_dto_1.CredentialStatus.ALL,
            };
            mockCredentialRepository.findAndCount.mockResolvedValue([[mockCredential], 1]);
            const result = await service.getUserCredentialHistory('user-123', queryParams);
            expect(mockCredentialRepository.findAndCount).toHaveBeenCalled();
            expect(result).toHaveProperty('data');
            expect(result).toHaveProperty('meta');
            expect(result.meta).toEqual({
                page: 1,
                limit: 10,
                totalItems: 1,
                totalPages: 1,
            });
            expect(result.data).toHaveLength(1);
            expect(result.data[0]).toHaveProperty('id', mockCredential.id);
        });
        it('should apply filters correctly when provided', async () => {
            const queryParams = {
                page: 1,
                limit: 10,
                credentialType: 'academic',
                startDate: new Date('2022-01-01'),
                endDate: new Date('2023-12-31'),
                status: credential_history_query_dto_1.CredentialStatus.VERIFIED,
            };
            mockCredentialRepository.findAndCount.mockResolvedValue([[mockCredential], 1]);
            await service.getUserCredentialHistory('user-123', queryParams);
            expect(mockCredentialRepository.findAndCount).toHaveBeenCalledWith(expect.objectContaining({
                where: expect.objectContaining({
                    userId: 'user-123',
                    type: 'academic',
                    status: 'VERIFIED',
                }),
            }));
        });
    });
    describe('verifyCredential', () => {
        it('should verify a credential and update its status', async () => {
            mockCredentialRepository.findOne.mockResolvedValue(mockCredential);
            mockBlockchainService.verifyTransaction.mockResolvedValue({ verified: true });
            mockCredentialRepository.save.mockResolvedValue({
                ...mockCredential,
                verificationStatus: true,
            });
            const result = await service.verifyCredential('user-123', mockCredential.id);
            expect(mockCredentialRepository.findOne).toHaveBeenCalledWith({
                where: { id: mockCredential.id, userId: 'user-123' },
            });
            expect(mockBlockchainService.verifyTransaction).toHaveBeenCalledWith(mockCredential.txHash);
            expect(mockCredentialRepository.save).toHaveBeenCalled();
            expect(result).toHaveProperty('verified', true);
            expect(result).toHaveProperty('credential');
        });
        it('should throw an error when credential is not found', async () => {
            mockCredentialRepository.findOne.mockResolvedValue(null);
            await expect(service.verifyCredential('user-123', 'non-existent-id')).rejects.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,