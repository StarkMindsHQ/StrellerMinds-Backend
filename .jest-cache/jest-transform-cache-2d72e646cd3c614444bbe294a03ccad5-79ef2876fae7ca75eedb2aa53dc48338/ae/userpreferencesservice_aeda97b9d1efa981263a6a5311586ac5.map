{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserPreferences } from './entities/user-preferences.entity';\r\nimport { NotificationSettings } from './entities/notification-settings.entity';\r\nimport { CreateUserPreferencesDto } from './dtos/create-user-preferences.dto';\r\nimport { CreateNotificationSettingsDto } from './dtos/create-notification-settings.dto';\r\nimport { User } from '../users/entities/user.entity';\r\n\r\n@Injectable()\r\nexport class UserPreferencesService {\r\n  constructor(\r\n    @InjectRepository(UserPreferences)\r\n    private readonly preferencesRepo: Repository<UserPreferences>,\r\n    @InjectRepository(NotificationSettings)\r\n    private readonly notificationRepo: Repository<NotificationSettings>,\r\n    @InjectRepository(User)\r\n    private readonly userRepo: Repository<User>,\r\n  ) {}\r\n\r\n  async create(userId: string, dto: CreateUserPreferencesDto): Promise<UserPreferences> {\r\n    const user = await this.userRepo.findOne({ where: { id: userId } });\r\n    if (!user) throw new NotFoundException('User not found');\r\n\r\n    let notificationSettings: NotificationSettings | undefined;\r\n    if (dto.notificationSettings) {\r\n      notificationSettings = this.notificationRepo.create(dto.notificationSettings);\r\n      await this.notificationRepo.save(notificationSettings);\r\n    }\r\n\r\n    const preferences = this.preferencesRepo.create({\r\n      user,\r\n      learningCustomization: dto.learningCustomization,\r\n      notificationSettings,\r\n      personalizationData: dto.personalizationData,\r\n      analytics: { lastUpdated: new Date(), usageStats: {} },\r\n    });\r\n    return this.preferencesRepo.save(preferences);\r\n  }\r\n\r\n  async findByUserId(userId: string): Promise<UserPreferences> {\r\n    const preferences = await this.preferencesRepo.findOne({\r\n      where: { user: { id: userId } },\r\n      relations: ['user', 'notificationSettings'],\r\n    });\r\n    if (!preferences) throw new NotFoundException('Preferences not found');\r\n    return preferences;\r\n  }\r\n\r\n  async update(userId: string, dto: CreateUserPreferencesDto): Promise<UserPreferences> {\r\n    const preferences = await this.findByUserId(userId);\r\n    if (!preferences) throw new NotFoundException('Preferences not found');\r\n\r\n    if (dto.notificationSettings) {\r\n      if (preferences.notificationSettings) {\r\n        this.notificationRepo.merge(preferences.notificationSettings, dto.notificationSettings);\r\n        await this.notificationRepo.save(preferences.notificationSettings);\r\n      } else {\r\n        const newSettings = this.notificationRepo.create(dto.notificationSettings);\r\n        await this.notificationRepo.save(newSettings);\r\n        preferences.notificationSettings = newSettings;\r\n      }\r\n    }\r\n\r\n    if (dto.learningCustomization) {\r\n      preferences.learningCustomization = dto.learningCustomization;\r\n    }\r\n    if (dto.personalizationData) {\r\n      preferences.personalizationData = dto.personalizationData;\r\n    }\r\n    preferences.analytics = { ...preferences.analytics, lastUpdated: new Date() };\r\n    return this.preferencesRepo.save(preferences);\r\n  }\r\n\r\n  // Example: Learning path customization logic\r\n  async getCustomizedLearningPath(userId: string): Promise<any> {\r\n    const preferences = await this.findByUserId(userId);\r\n    // Example logic: Suggest topics based on preferredTopics\r\n    return {\r\n      suggestedTopics: preferences.learningCustomization?.preferredTopics || [],\r\n      pace: preferences.learningCustomization?.learningPace || 'medium',\r\n      goals: preferences.learningCustomization?.learningGoals || '',\r\n    };\r\n  }\r\n\r\n  // Example: Notification rules engine\r\n  async shouldNotify(userId: string, eventType: string): Promise<boolean> {\r\n    const preferences = await this.findByUserId(userId);\r\n    const rules = preferences.notificationSettings?.rules || {};\r\n    // Example: Check if eventType is enabled in rules\r\n    return rules[eventType] !== false;\r\n  }\r\n\r\n  // Analytics tracking\r\n  async trackPreferenceUsage(userId: string, action: string): Promise<void> {\r\n    const preferences = await this.findByUserId(userId);\r\n    preferences.analytics = {\r\n      ...preferences.analytics,\r\n      usageStats: {\r\n        ...(preferences.analytics?.usageStats || {}),\r\n        [action]: ((preferences.analytics?.usageStats?.[action] || 0) + 1),\r\n      },\r\n      lastUpdated: new Date(),\r\n    };\r\n    await this.preferencesRepo.save(preferences);\r\n  }\r\n} "],"version":3}