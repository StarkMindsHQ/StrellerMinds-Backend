162a50ec6da9693c9c64d00e3356c8c9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPreferencesService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_preferences_entity_1 = require("./entities/user-preferences.entity");
const notification_settings_entity_1 = require("./entities/notification-settings.entity");
const user_entity_1 = require("../users/entities/user.entity");
let UserPreferencesService = class UserPreferencesService {
    constructor(preferencesRepo, notificationRepo, userRepo) {
        this.preferencesRepo = preferencesRepo;
        this.notificationRepo = notificationRepo;
        this.userRepo = userRepo;
    }
    async create(userId, dto) {
        const user = await this.userRepo.findOne({ where: { id: userId } });
        if (!user)
            throw new common_1.NotFoundException('User not found');
        let notificationSettings;
        if (dto.notificationSettings) {
            notificationSettings = this.notificationRepo.create(dto.notificationSettings);
            await this.notificationRepo.save(notificationSettings);
        }
        const preferences = this.preferencesRepo.create({
            user,
            learningCustomization: dto.learningCustomization,
            notificationSettings,
            personalizationData: dto.personalizationData,
            analytics: { lastUpdated: new Date(), usageStats: {} },
        });
        return this.preferencesRepo.save(preferences);
    }
    async findByUserId(userId) {
        const preferences = await this.preferencesRepo.findOne({
            where: { user: { id: userId } },
            relations: ['user', 'notificationSettings'],
        });
        if (!preferences)
            throw new common_1.NotFoundException('Preferences not found');
        return preferences;
    }
    async update(userId, dto) {
        const preferences = await this.findByUserId(userId);
        if (!preferences)
            throw new common_1.NotFoundException('Preferences not found');
        if (dto.notificationSettings) {
            if (preferences.notificationSettings) {
                this.notificationRepo.merge(preferences.notificationSettings, dto.notificationSettings);
                await this.notificationRepo.save(preferences.notificationSettings);
            }
            else {
                const newSettings = this.notificationRepo.create(dto.notificationSettings);
                await this.notificationRepo.save(newSettings);
                preferences.notificationSettings = newSettings;
            }
        }
        if (dto.learningCustomization) {
            preferences.learningCustomization = dto.learningCustomization;
        }
        if (dto.personalizationData) {
            preferences.personalizationData = dto.personalizationData;
        }
        preferences.analytics = { ...preferences.analytics, lastUpdated: new Date() };
        return this.preferencesRepo.save(preferences);
    }
    // Example: Learning path customization logic
    async getCustomizedLearningPath(userId) {
        const preferences = await this.findByUserId(userId);
        // Example logic: Suggest topics based on preferredTopics
        return {
            suggestedTopics: preferences.learningCustomization?.preferredTopics || [],
            pace: preferences.learningCustomization?.learningPace || 'medium',
            goals: preferences.learningCustomization?.learningGoals || '',
        };
    }
    // Example: Notification rules engine
    async shouldNotify(userId, eventType) {
        const preferences = await this.findByUserId(userId);
        const rules = preferences.notificationSettings?.rules || {};
        // Example: Check if eventType is enabled in rules
        return rules[eventType] !== false;
    }
    // Analytics tracking
    async trackPreferenceUsage(userId, action) {
        const preferences = await this.findByUserId(userId);
        preferences.analytics = {
            ...preferences.analytics,
            usageStats: {
                ...(preferences.analytics?.usageStats || {}),
                [action]: ((preferences.analytics?.usageStats?.[action] || 0) + 1),
            },
            lastUpdated: new Date(),
        };
        await this.preferencesRepo.save(preferences);
    }
};
exports.UserPreferencesService = UserPreferencesService;
exports.UserPreferencesService = UserPreferencesService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_preferences_entity_1.UserPreferences)),
    __param(1, (0, typeorm_1.InjectRepository)(notification_settings_entity_1.NotificationSettings)),
    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], UserPreferencesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,