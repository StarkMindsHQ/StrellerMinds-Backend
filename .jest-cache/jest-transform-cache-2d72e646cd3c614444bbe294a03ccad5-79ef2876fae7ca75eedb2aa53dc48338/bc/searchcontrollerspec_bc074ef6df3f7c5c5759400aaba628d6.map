{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\search.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\search.controller.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { SearchController } from \"./search.controller\"\r\nimport { SearchService } from \"./search.service\"\r\nimport type { SearchDto } from \"./dto/search.dto\"\r\nimport type { AdvancedFilterDto } from \"./dto/advanced-filter.dto\"\r\nimport type { SearchSuggestionDto } from \"./dto/search-suggestion.dto\"\r\nimport { BadRequestException } from \"@nestjs/common\"\r\nimport { jest } from \"@jest/globals\" // Import jest to declare it\r\n\r\ndescribe(\"SearchController\", () => {\r\n  let controller: SearchController\r\n  let searchService: SearchService\r\n\r\n  const mockSearchService = {\r\n    search: jest.fn(),\r\n    advancedSearch: jest.fn(),\r\n    getSuggestions: jest.fn(),\r\n    getSearchAnalytics: jest.fn(),\r\n    getPopularSearchTerms: jest.fn(),\r\n    trackSearchClick: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [SearchController],\r\n      providers: [\r\n        {\r\n          provide: SearchService,\r\n          useValue: mockSearchService,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    controller = module.get<SearchController>(SearchController)\r\n    searchService = module.get<SearchService>(SearchService)\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"search\", () => {\r\n    const searchDto: SearchDto = {\r\n      query: \"stellar blockchain\",\r\n      page: 1,\r\n      limit: 10,\r\n    }\r\n\r\n    const mockRequest = {\r\n      user: { id: \"user123\" },\r\n    }\r\n\r\n    it(\"should return search results\", async () => {\r\n      const mockResult = {\r\n        courses: [],\r\n        total: 0,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 0,\r\n        aggregations: {},\r\n      }\r\n\r\n      mockSearchService.search.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.search(searchDto, mockRequest)\r\n\r\n      expect(searchService.search).toHaveBeenCalledWith(searchDto, \"user123\")\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n\r\n    it(\"should handle search without authenticated user\", async () => {\r\n      const mockResult = {\r\n        courses: [],\r\n        total: 0,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 0,\r\n        aggregations: {},\r\n      }\r\n\r\n      mockSearchService.search.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.search(searchDto, { user: null })\r\n\r\n      expect(searchService.search).toHaveBeenCalledWith(searchDto, null)\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n  })\r\n\r\n  describe(\"advancedSearch\", () => {\r\n    const advancedFilterDto: AdvancedFilterDto = {\r\n      query: \"stellar\",\r\n      categories: [\"blockchain\"],\r\n      levels: [\"beginner\"],\r\n      priceRange: { min: 0, max: 100 },\r\n      page: 1,\r\n      limit: 10,\r\n    }\r\n\r\n    const mockRequest = {\r\n      user: { id: \"user123\" },\r\n    }\r\n\r\n    it(\"should return advanced search results\", async () => {\r\n      const mockResult = {\r\n        courses: [],\r\n        total: 0,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 0,\r\n        aggregations: {},\r\n      }\r\n\r\n      mockSearchService.advancedSearch.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.advancedSearch(advancedFilterDto, mockRequest)\r\n\r\n      expect(searchService.advancedSearch).toHaveBeenCalledWith(advancedFilterDto, \"user123\")\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n  })\r\n\r\n  describe(\"getSuggestions\", () => {\r\n    const suggestionDto: SearchSuggestionDto = {\r\n      query: \"stel\",\r\n      limit: 5,\r\n    }\r\n\r\n    it(\"should return search suggestions\", async () => {\r\n      const mockResult = {\r\n        suggestions: [{ text: \"stellar\", score: 1.0, source: \"title\" }],\r\n      }\r\n\r\n      mockSearchService.getSuggestions.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.getSuggestions(suggestionDto)\r\n\r\n      expect(searchService.getSuggestions).toHaveBeenCalledWith(suggestionDto)\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n  })\r\n\r\n  describe(\"getSearchAnalytics\", () => {\r\n    const mockRequest = {\r\n      user: { id: \"user123\" },\r\n    }\r\n\r\n    it(\"should return search analytics\", async () => {\r\n      const mockResult = {\r\n        recentSearches: [],\r\n        popularQueries: [],\r\n      }\r\n\r\n      mockSearchService.getSearchAnalytics.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.getSearchAnalytics(mockRequest, \"2024-01-01\", \"2024-01-31\")\r\n\r\n      expect(searchService.getSearchAnalytics).toHaveBeenCalledWith({\r\n        startDate: new Date(\"2024-01-01\"),\r\n        endDate: new Date(\"2024-01-31\"),\r\n        userId: \"user123\",\r\n      })\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n\r\n    it(\"should handle invalid date format\", async () => {\r\n      await expect(controller.getSearchAnalytics(mockRequest, \"invalid-date\", \"2024-01-31\")).rejects.toThrow(\r\n        BadRequestException,\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"getPopularSearchTerms\", () => {\r\n    it(\"should return popular search terms\", async () => {\r\n      const mockResult = [\r\n        { query: \"stellar\", searchCount: 15 },\r\n        { query: \"blockchain\", searchCount: 12 },\r\n      ]\r\n\r\n      mockSearchService.getPopularSearchTerms.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.getPopularSearchTerms(\"10\")\r\n\r\n      expect(searchService.getPopularSearchTerms).toHaveBeenCalledWith(10)\r\n      expect(result).toEqual(mockResult)\r\n    })\r\n\r\n    it(\"should use default limit when not provided\", async () => {\r\n      const mockResult = []\r\n      mockSearchService.getPopularSearchTerms.mockResolvedValue(mockResult)\r\n\r\n      await controller.getPopularSearchTerms()\r\n\r\n      expect(searchService.getPopularSearchTerms).toHaveBeenCalledWith(20)\r\n    })\r\n  })\r\n\r\n  describe(\"trackSearchClick\", () => {\r\n    const mockRequest = {\r\n      user: { id: \"user123\" },\r\n    }\r\n\r\n    it(\"should track search click\", async () => {\r\n      mockSearchService.trackSearchClick.mockResolvedValue(undefined)\r\n\r\n      const result = await controller.trackSearchClick(\"search123\", \"course456\", mockRequest)\r\n\r\n      expect(searchService.trackSearchClick).toHaveBeenCalledWith(\"search123\", \"course456\")\r\n      expect(result).toEqual({ success: true })\r\n    })\r\n\r\n    it(\"should handle tracking errors\", async () => {\r\n      mockSearchService.trackSearchClick.mockRejectedValue(new BadRequestException(\"Search not found\"))\r\n\r\n      await expect(controller.trackSearchClick(\"invalid\", \"course456\", mockRequest)).rejects.toThrow(\r\n        BadRequestException,\r\n      )\r\n    })\r\n  })\r\n})\r\n"],"version":3}