c43bd919825e1d616e31148fc4505330
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals"); // Import jest to declare it
const testing_1 = require("@nestjs/testing");
const search_controller_1 = require("./search.controller");
const search_service_1 = require("./search.service");
const common_1 = require("@nestjs/common");
describe("SearchController", () => {
    let controller;
    let searchService;
    const mockSearchService = {
        search: globals_1.jest.fn(),
        advancedSearch: globals_1.jest.fn(),
        getSuggestions: globals_1.jest.fn(),
        getSearchAnalytics: globals_1.jest.fn(),
        getPopularSearchTerms: globals_1.jest.fn(),
        trackSearchClick: globals_1.jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [search_controller_1.SearchController],
            providers: [
                {
                    provide: search_service_1.SearchService,
                    useValue: mockSearchService,
                },
            ],
        }).compile();
        controller = module.get(search_controller_1.SearchController);
        searchService = module.get(search_service_1.SearchService);
    });
    afterEach(() => {
        globals_1.jest.clearAllMocks();
    });
    describe("search", () => {
        const searchDto = {
            query: "stellar blockchain",
            page: 1,
            limit: 10,
        };
        const mockRequest = {
            user: { id: "user123" },
        };
        it("should return search results", async () => {
            const mockResult = {
                courses: [],
                total: 0,
                page: 1,
                limit: 10,
                totalPages: 0,
                aggregations: {},
            };
            mockSearchService.search.mockResolvedValue(mockResult);
            const result = await controller.search(searchDto, mockRequest);
            expect(searchService.search).toHaveBeenCalledWith(searchDto, "user123");
            expect(result).toEqual(mockResult);
        });
        it("should handle search without authenticated user", async () => {
            const mockResult = {
                courses: [],
                total: 0,
                page: 1,
                limit: 10,
                totalPages: 0,
                aggregations: {},
            };
            mockSearchService.search.mockResolvedValue(mockResult);
            const result = await controller.search(searchDto, { user: null });
            expect(searchService.search).toHaveBeenCalledWith(searchDto, null);
            expect(result).toEqual(mockResult);
        });
    });
    describe("advancedSearch", () => {
        const advancedFilterDto = {
            query: "stellar",
            categories: ["blockchain"],
            levels: ["beginner"],
            priceRange: { min: 0, max: 100 },
            page: 1,
            limit: 10,
        };
        const mockRequest = {
            user: { id: "user123" },
        };
        it("should return advanced search results", async () => {
            const mockResult = {
                courses: [],
                total: 0,
                page: 1,
                limit: 10,
                totalPages: 0,
                aggregations: {},
            };
            mockSearchService.advancedSearch.mockResolvedValue(mockResult);
            const result = await controller.advancedSearch(advancedFilterDto, mockRequest);
            expect(searchService.advancedSearch).toHaveBeenCalledWith(advancedFilterDto, "user123");
            expect(result).toEqual(mockResult);
        });
    });
    describe("getSuggestions", () => {
        const suggestionDto = {
            query: "stel",
            limit: 5,
        };
        it("should return search suggestions", async () => {
            const mockResult = {
                suggestions: [{ text: "stellar", score: 1.0, source: "title" }],
            };
            mockSearchService.getSuggestions.mockResolvedValue(mockResult);
            const result = await controller.getSuggestions(suggestionDto);
            expect(searchService.getSuggestions).toHaveBeenCalledWith(suggestionDto);
            expect(result).toEqual(mockResult);
        });
    });
    describe("getSearchAnalytics", () => {
        const mockRequest = {
            user: { id: "user123" },
        };
        it("should return search analytics", async () => {
            const mockResult = {
                recentSearches: [],
                popularQueries: [],
            };
            mockSearchService.getSearchAnalytics.mockResolvedValue(mockResult);
            const result = await controller.getSearchAnalytics(mockRequest, "2024-01-01", "2024-01-31");
            expect(searchService.getSearchAnalytics).toHaveBeenCalledWith({
                startDate: new Date("2024-01-01"),
                endDate: new Date("2024-01-31"),
                userId: "user123",
            });
            expect(result).toEqual(mockResult);
        });
        it("should handle invalid date format", async () => {
            await expect(controller.getSearchAnalytics(mockRequest, "invalid-date", "2024-01-31")).rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe("getPopularSearchTerms", () => {
        it("should return popular search terms", async () => {
            const mockResult = [
                { query: "stellar", searchCount: 15 },
                { query: "blockchain", searchCount: 12 },
            ];
            mockSearchService.getPopularSearchTerms.mockResolvedValue(mockResult);
            const result = await controller.getPopularSearchTerms("10");
            expect(searchService.getPopularSearchTerms).toHaveBeenCalledWith(10);
            expect(result).toEqual(mockResult);
        });
        it("should use default limit when not provided", async () => {
            const mockResult = [];
            mockSearchService.getPopularSearchTerms.mockResolvedValue(mockResult);
            await controller.getPopularSearchTerms();
            expect(searchService.getPopularSearchTerms).toHaveBeenCalledWith(20);
        });
    });
    describe("trackSearchClick", () => {
        const mockRequest = {
            user: { id: "user123" },
        };
        it("should track search click", async () => {
            mockSearchService.trackSearchClick.mockResolvedValue(undefined);
            const result = await controller.trackSearchClick("search123", "course456", mockRequest);
            expect(searchService.trackSearchClick).toHaveBeenCalledWith("search123", "course456");
            expect(result).toEqual({ success: true });
        });
        it("should handle tracking errors", async () => {
            mockSearchService.trackSearchClick.mockRejectedValue(new common_1.BadRequestException("Search not found"));
            await expect(controller.trackSearchClick("invalid", "course456", mockRequest)).rejects.toThrow(common_1.BadRequestException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,