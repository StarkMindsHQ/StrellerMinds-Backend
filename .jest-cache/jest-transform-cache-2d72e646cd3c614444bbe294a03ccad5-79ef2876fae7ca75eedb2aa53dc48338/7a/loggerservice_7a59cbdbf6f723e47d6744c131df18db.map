{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\logger.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\logger.service.ts"],"sourcesContent":["import { Injectable, Scope } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as winston from 'winston';\r\nimport { WinstonConfigService } from './winston.config';\r\n\r\nexport interface LogContext {\r\n  correlationId?: string;\r\n  userId?: string;\r\n  userEmail?: string;\r\n  requestId?: string;\r\n  method?: string;\r\n  url?: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  controller?: string;\r\n  handler?: string;\r\n  duration?: number;\r\n  statusCode?: number;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface ErrorLogContext extends LogContext {\r\n  errorCode?: string;\r\n  errorType?: string;\r\n  stack?: string;\r\n  originalError?: any;\r\n}\r\n\r\n@Injectable({ scope: Scope.TRANSIENT })\r\nexport class LoggerService {\r\n  private readonly logger: winston.Logger;\r\n  private context: string = 'Application';\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    const winstonConfig = new WinstonConfigService(configService);\r\n    this.logger = winstonConfig.createWinstonLogger();\r\n  }\r\n\r\n  setContext(context: string): void {\r\n    this.context = context;\r\n  }\r\n\r\n  debug(message: string, context?: LogContext): void {\r\n    this.log('debug', message, context);\r\n  }\r\n\r\n  info(message: string, context?: LogContext): void {\r\n    this.log('info', message, context);\r\n  }\r\n\r\n  warn(message: string, context?: LogContext): void {\r\n    this.log('warn', message, context);\r\n  }\r\n\r\n  error(message: string, context?: ErrorLogContext): void {\r\n    this.log('error', message, context);\r\n  }\r\n\r\n  fatal(message: string, context?: ErrorLogContext): void {\r\n    this.log('error', message, { ...context, severity: 'fatal' });\r\n  }\r\n\r\n  // Specialized logging methods\r\n  logRequest(message: string, context: LogContext): void {\r\n    this.info(message, {\r\n      ...context,\r\n      type: 'request',\r\n    });\r\n  }\r\n\r\n  logResponse(message: string, context: LogContext): void {\r\n    this.info(message, {\r\n      ...context,\r\n      type: 'response',\r\n    });\r\n  }\r\n\r\n  logError(error: Error, context?: ErrorLogContext): void {\r\n    const errorContext: ErrorLogContext = {\r\n      ...context,\r\n      type: 'error',\r\n      errorType: error.constructor.name,\r\n      stack: error.stack,\r\n      originalError: {\r\n        name: error.name,\r\n        message: error.message,\r\n      },\r\n    };\r\n\r\n    this.error(error.message, errorContext);\r\n  }\r\n\r\n  logBusinessEvent(event: string, context?: LogContext): void {\r\n    this.info(event, {\r\n      ...context,\r\n      type: 'business_event',\r\n    });\r\n  }\r\n\r\n  logSecurityEvent(event: string, context?: LogContext): void {\r\n    this.warn(event, {\r\n      ...context,\r\n      type: 'security_event',\r\n      severity: 'high',\r\n    });\r\n  }\r\n\r\n  logPerformance(message: string, context: LogContext & { duration: number }): void {\r\n    const level = context.duration > 5000 ? 'warn' : 'info';\r\n    this.log(level, message, {\r\n      ...context,\r\n      type: 'performance',\r\n    });\r\n  }\r\n\r\n  logDatabaseQuery(query: string, context: LogContext & { duration?: number }): void {\r\n    const level = context.duration && context.duration > 1000 ? 'warn' : 'debug';\r\n    this.log(level, 'Database Query', {\r\n      ...context,\r\n      type: 'database_query',\r\n      query: this.sanitizeQuery(query),\r\n    });\r\n  }\r\n\r\n  logExternalApiCall(message: string, context: LogContext): void {\r\n    this.info(message, {\r\n      ...context,\r\n      type: 'external_api_call',\r\n    });\r\n  }\r\n\r\n  private log(level: string, message: string, context?: LogContext): void {\r\n    const logData = {\r\n      message,\r\n      context: this.context,\r\n      timestamp: new Date().toISOString(),\r\n      environment: this.configService.get('NODE_ENV', 'development'),\r\n      service: this.configService.get('APP_NAME', 'strellerminds-backend'),\r\n      version: this.configService.get('APP_VERSION', '1.0.0'),\r\n      ...context,\r\n    };\r\n\r\n    this.logger.log(level, message, logData);\r\n  }\r\n\r\n  private sanitizeQuery(query: string): string {\r\n    // Remove sensitive data from queries\r\n    return query\r\n      .replace(/password\\s*=\\s*'[^']*'/gi, \"password='***'\")\r\n      .replace(/token\\s*=\\s*'[^']*'/gi, \"token='***'\")\r\n      .replace(/secret\\s*=\\s*'[^']*'/gi, \"secret='***'\");\r\n  }\r\n\r\n  // Method to create child logger with additional context\r\n  child(additionalContext: LogContext): LoggerService {\r\n    const childLogger = new LoggerService(this.configService);\r\n    childLogger.setContext(this.context);\r\n    \r\n    // Override the log method to include additional context\r\n    const originalLog = childLogger.log.bind(childLogger);\r\n    childLogger.log = (level: string, message: string, context?: LogContext) => {\r\n      originalLog(level, message, { ...additionalContext, ...context });\r\n    };\r\n\r\n    return childLogger;\r\n  }\r\n}\r\n"],"version":3}