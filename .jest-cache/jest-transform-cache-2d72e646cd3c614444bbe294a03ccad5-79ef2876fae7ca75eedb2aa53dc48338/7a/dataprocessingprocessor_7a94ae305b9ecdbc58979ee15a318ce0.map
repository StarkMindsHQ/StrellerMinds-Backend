{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\processors\\data-processing.processor.ts","mappings":";;;;;;;;;;;;;AAAA,uCAAiD;AAEjD,2CAAuC;AAKhC,IAAM,uBAAuB,+BAA7B,MAAM,uBAAuB;IAGlC,YAA6B,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAFtD,WAAM,GAAG,IAAI,eAAM,CAAC,yBAAuB,CAAC,IAAI,CAAC,CAAA;IAEQ,CAAC;IAGrE,AAAN,KAAK,CAAC,gBAAgB,CAAC,GAAiE;QACtF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QAE/D,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC5G,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oCAAoC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QAC7E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAA;YAC/E,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;CACF,CAAA;AAjBY,0DAAuB;AAM5B;IADL,IAAA,cAAO,EAAC,mBAAmB,CAAC;;;;+DAW5B;kCAhBU,uBAAuB;IADnC,IAAA,gBAAS,EAAC,iBAAiB,CAAC;;GAChB,uBAAuB,CAiBnC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\processors\\data-processing.processor.ts"],"sourcesContent":["import { Processor, Process } from \"@nestjs/bull\"\r\nimport type { Job } from \"bull\"\r\nimport { Logger } from \"@nestjs/common\"\r\n\r\nimport type { DataWarehouseService } from \"../services/data-warehouse.service\"\r\n\r\n@Processor(\"data-processing\")\r\nexport class DataProcessingProcessor {\r\n  private readonly logger = new Logger(DataProcessingProcessor.name)\r\n\r\n  constructor(private readonly dataWarehouseService: DataWarehouseService) {}\r\n\r\n  @Process(\"aggregate-metrics\")\r\n  async aggregateMetrics(job: Job<{ startTime: Date; endTime: Date; granularity: string }>) {\r\n    this.logger.log(`Aggregating metrics: ${job.data.granularity}`)\r\n\r\n    try {\r\n      await this.dataWarehouseService.aggregateMetrics(job.data.startTime, job.data.endTime, job.data.granularity)\r\n      this.logger.log(`Successfully aggregated metrics: ${job.data.granularity}`)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to aggregate metrics: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n"],"version":3}