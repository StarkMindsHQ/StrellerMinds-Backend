261fc7435b5f56be5b6f9edbd89059fc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var LoggerService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const winston_config_1 = require("./winston.config");
let LoggerService = LoggerService_1 = class LoggerService {
    constructor(configService) {
        this.configService = configService;
        this.context = 'Application';
        const winstonConfig = new winston_config_1.WinstonConfigService(configService);
        this.logger = winstonConfig.createWinstonLogger();
    }
    setContext(context) {
        this.context = context;
    }
    debug(message, context) {
        this.log('debug', message, context);
    }
    info(message, context) {
        this.log('info', message, context);
    }
    warn(message, context) {
        this.log('warn', message, context);
    }
    error(message, context) {
        this.log('error', message, context);
    }
    fatal(message, context) {
        this.log('error', message, { ...context, severity: 'fatal' });
    }
    // Specialized logging methods
    logRequest(message, context) {
        this.info(message, {
            ...context,
            type: 'request',
        });
    }
    logResponse(message, context) {
        this.info(message, {
            ...context,
            type: 'response',
        });
    }
    logError(error, context) {
        const errorContext = {
            ...context,
            type: 'error',
            errorType: error.constructor.name,
            stack: error.stack,
            originalError: {
                name: error.name,
                message: error.message,
            },
        };
        this.error(error.message, errorContext);
    }
    logBusinessEvent(event, context) {
        this.info(event, {
            ...context,
            type: 'business_event',
        });
    }
    logSecurityEvent(event, context) {
        this.warn(event, {
            ...context,
            type: 'security_event',
            severity: 'high',
        });
    }
    logPerformance(message, context) {
        const level = context.duration > 5000 ? 'warn' : 'info';
        this.log(level, message, {
            ...context,
            type: 'performance',
        });
    }
    logDatabaseQuery(query, context) {
        const level = context.duration && context.duration > 1000 ? 'warn' : 'debug';
        this.log(level, 'Database Query', {
            ...context,
            type: 'database_query',
            query: this.sanitizeQuery(query),
        });
    }
    logExternalApiCall(message, context) {
        this.info(message, {
            ...context,
            type: 'external_api_call',
        });
    }
    log(level, message, context) {
        const logData = {
            message,
            context: this.context,
            timestamp: new Date().toISOString(),
            environment: this.configService.get('NODE_ENV', 'development'),
            service: this.configService.get('APP_NAME', 'strellerminds-backend'),
            version: this.configService.get('APP_VERSION', '1.0.0'),
            ...context,
        };
        this.logger.log(level, message, logData);
    }
    sanitizeQuery(query) {
        // Remove sensitive data from queries
        return query
            .replace(/password\s*=\s*'[^']*'/gi, "password='***'")
            .replace(/token\s*=\s*'[^']*'/gi, "token='***'")
            .replace(/secret\s*=\s*'[^']*'/gi, "secret='***'");
    }
    // Method to create child logger with additional context
    child(additionalContext) {
        const childLogger = new LoggerService_1(this.configService);
        childLogger.setContext(this.context);
        // Override the log method to include additional context
        const originalLog = childLogger.log.bind(childLogger);
        childLogger.log = (level, message, context) => {
            originalLog(level, message, { ...additionalContext, ...context });
        };
        return childLogger;
    }
};
exports.LoggerService = LoggerService;
exports.LoggerService = LoggerService = LoggerService_1 = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.TRANSIENT }),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], LoggerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,