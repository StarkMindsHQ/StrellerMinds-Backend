{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\mentorship\\mentorship.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\mentorship\\mentorship.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Mentorship } from './entities/mentorship.entity';\r\nimport { MentorshipSession } from './entities/mentorship-session.entity';\r\nimport { User } from '../users/entities/user.entity';\r\n\r\n/**\r\n * Service for mentorship business logic: matching, creation, tracking, sessions, and analytics.\r\n */\r\n@Injectable()\r\nexport class MentorshipService {\r\n  constructor(\r\n    @InjectRepository(Mentorship)\r\n    private mentorshipRepo: Repository<Mentorship>,\r\n    @InjectRepository(MentorshipSession)\r\n    private sessionRepo: Repository<MentorshipSession>,\r\n    @InjectRepository(User)\r\n    private userRepo: Repository<User>,\r\n  ) {}\r\n\r\n  /**\r\n   * Match a mentee to potential mentors based on criteria.\r\n   * @param menteeId - The ID of the mentee.\r\n   * @param criteria - The criteria for matching, such as skills and interests.\r\n   * @returns An array of potential mentors.\r\n   */\r\n  async matchMentorMentee(menteeId: string, criteria: any): Promise<User[]> {\r\n    // Fetch mentee and optionally use preferences/criteria for matching\r\n    const mentee = await this.userRepo.findOne({ where: { id: menteeId } });\r\n    if (!mentee) return [];\r\n\r\n    const skills: string[] = (criteria?.skills || criteria?.interests || []).map((s: string) => s.toLowerCase());\r\n    const availability: string | undefined = criteria?.availability;\r\n\r\n    // Basic heuristic:\r\n    // - Prefer instructors (mentors) with higher reputation\r\n    // - Optional filter by availability if provided (assuming stored in settings.preferredLanguage as placeholder is not ideal)\r\n    // - Score overlap by tags/skills from learning paths or recommendations is not directly stored; use simple matching on username/bio as placeholder signal\r\n\r\n    const potentialMentors = await this.userRepo.find({ where: { isInstructor: true } });\r\n\r\n    const scored = potentialMentors\r\n      .map((mentor) => {\r\n        let score = 0;\r\n        // Reputation boost\r\n        if (typeof mentor.reputation === 'number') score += mentor.reputation;\r\n\r\n        // Simple textual signals using bio and username for provided skills/interests (fallback due to missing explicit fields)\r\n        const haystack = `${mentor.firstName} ${mentor.lastName} ${mentor.bio || ''} ${mentor.username}`.toLowerCase();\r\n        for (const s of skills) {\r\n          if (s && haystack.includes(s)) score += 10;\r\n        }\r\n\r\n        // Availability placeholder: if provided, lightly boost all mentors equally (no stored availability field)\r\n        if (availability) score += 1;\r\n\r\n        return { mentor, score };\r\n      })\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 10)\r\n      .map((s) => s.mentor);\r\n\r\n    return scored;\r\n  }\r\n\r\n  /**\r\n   * Create a mentorship relationship between a mentor and a mentee.\r\n   * @param mentorId - The ID of the mentor.\r\n   * @param menteeId - The ID of the mentee.\r\n   * @param goals - The goals of the mentorship.\r\n   * @returns The created mentorship entity.\r\n   */\r\n  async createMentorship(mentorId: string, menteeId: string, goals?: string) {\r\n    const mentor = await this.userRepo.findOne({ where: { id: mentorId } });\r\n    const mentee = await this.userRepo.findOne({ where: { id: menteeId } });\r\n    if (!mentor || !mentee) throw new Error('Mentor or mentee not found');\r\n    const mentorship = this.mentorshipRepo.create({ mentor, mentee, goals });\r\n    return this.mentorshipRepo.save(mentorship);\r\n  }\r\n\r\n  /**\r\n   * Track a mentorship by its ID, including sessions and participant details.\r\n   * @param mentorshipId - The ID of the mentorship.\r\n   * @returns The mentorship entity with related sessions, mentor, and mentee.\r\n   */\r\n  async trackMentorship(mentorshipId: string) {\r\n    return this.mentorshipRepo.findOne({ where: { id: mentorshipId }, relations: ['sessions', 'mentor', 'mentee'] });\r\n  }\r\n\r\n  /**\r\n   * Create a session for a mentorship.\r\n   * @param mentorshipId - The ID of the mentorship.\r\n   * @param scheduledAt - The scheduled date and time of the session.\r\n   * @param durationMinutes - The duration of the session in minutes.\r\n   * @param notes - Any notes for the session.\r\n   * @returns The created session entity.\r\n   */\r\n  async createSession(mentorshipId: string, scheduledAt: Date, durationMinutes = 60, notes?: string) {\r\n    const mentorship = await this.mentorshipRepo.findOne({ where: { id: mentorshipId } });\r\n    if (!mentorship) throw new Error('Mentorship not found');\r\n    const session = this.sessionRepo.create({ mentorship, scheduledAt, durationMinutes, notes });\r\n    return this.sessionRepo.save(session);\r\n  }\r\n\r\n  /**\r\n   * Get analytics for mentorships, such as total, active, and completed counts.\r\n   * @returns An object containing mentorship analytics.\r\n   */\r\n  async getMentorshipAnalytics() {\r\n    // Example: count active mentorships, completed, etc.\r\n    const total = await this.mentorshipRepo.count();\r\n    const active = await this.mentorshipRepo.count({ where: { status: 'active' } });\r\n    const completed = await this.mentorshipRepo.count({ where: { status: 'completed' } });\r\n    return { total, active, completed };\r\n  }\r\n}\r\n"],"version":3}