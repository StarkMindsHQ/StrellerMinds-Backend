380f072e3c85537da8faf50cbc1a5951
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MentorshipService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const mentorship_entity_1 = require("./entities/mentorship.entity");
const mentorship_session_entity_1 = require("./entities/mentorship-session.entity");
const user_entity_1 = require("../users/entities/user.entity");
/**
 * Service for mentorship business logic: matching, creation, tracking, sessions, and analytics.
 */
let MentorshipService = class MentorshipService {
    constructor(mentorshipRepo, sessionRepo, userRepo) {
        this.mentorshipRepo = mentorshipRepo;
        this.sessionRepo = sessionRepo;
        this.userRepo = userRepo;
    }
    /**
     * Match a mentee to potential mentors based on criteria.
     * @param menteeId - The ID of the mentee.
     * @param criteria - The criteria for matching, such as skills and interests.
     * @returns An array of potential mentors.
     */
    async matchMentorMentee(menteeId, criteria) {
        // Fetch mentee and optionally use preferences/criteria for matching
        const mentee = await this.userRepo.findOne({ where: { id: menteeId } });
        if (!mentee)
            return [];
        const skills = (criteria?.skills || criteria?.interests || []).map((s) => s.toLowerCase());
        const availability = criteria?.availability;
        // Basic heuristic:
        // - Prefer instructors (mentors) with higher reputation
        // - Optional filter by availability if provided (assuming stored in settings.preferredLanguage as placeholder is not ideal)
        // - Score overlap by tags/skills from learning paths or recommendations is not directly stored; use simple matching on username/bio as placeholder signal
        const potentialMentors = await this.userRepo.find({ where: { isInstructor: true } });
        const scored = potentialMentors
            .map((mentor) => {
            let score = 0;
            // Reputation boost
            if (typeof mentor.reputation === 'number')
                score += mentor.reputation;
            // Simple textual signals using bio and username for provided skills/interests (fallback due to missing explicit fields)
            const haystack = `${mentor.firstName} ${mentor.lastName} ${mentor.bio || ''} ${mentor.username}`.toLowerCase();
            for (const s of skills) {
                if (s && haystack.includes(s))
                    score += 10;
            }
            // Availability placeholder: if provided, lightly boost all mentors equally (no stored availability field)
            if (availability)
                score += 1;
            return { mentor, score };
        })
            .sort((a, b) => b.score - a.score)
            .slice(0, 10)
            .map((s) => s.mentor);
        return scored;
    }
    /**
     * Create a mentorship relationship between a mentor and a mentee.
     * @param mentorId - The ID of the mentor.
     * @param menteeId - The ID of the mentee.
     * @param goals - The goals of the mentorship.
     * @returns The created mentorship entity.
     */
    async createMentorship(mentorId, menteeId, goals) {
        const mentor = await this.userRepo.findOne({ where: { id: mentorId } });
        const mentee = await this.userRepo.findOne({ where: { id: menteeId } });
        if (!mentor || !mentee)
            throw new Error('Mentor or mentee not found');
        const mentorship = this.mentorshipRepo.create({ mentor, mentee, goals });
        return this.mentorshipRepo.save(mentorship);
    }
    /**
     * Track a mentorship by its ID, including sessions and participant details.
     * @param mentorshipId - The ID of the mentorship.
     * @returns The mentorship entity with related sessions, mentor, and mentee.
     */
    async trackMentorship(mentorshipId) {
        return this.mentorshipRepo.findOne({ where: { id: mentorshipId }, relations: ['sessions', 'mentor', 'mentee'] });
    }
    /**
     * Create a session for a mentorship.
     * @param mentorshipId - The ID of the mentorship.
     * @param scheduledAt - The scheduled date and time of the session.
     * @param durationMinutes - The duration of the session in minutes.
     * @param notes - Any notes for the session.
     * @returns The created session entity.
     */
    async createSession(mentorshipId, scheduledAt, durationMinutes = 60, notes) {
        const mentorship = await this.mentorshipRepo.findOne({ where: { id: mentorshipId } });
        if (!mentorship)
            throw new Error('Mentorship not found');
        const session = this.sessionRepo.create({ mentorship, scheduledAt, durationMinutes, notes });
        return this.sessionRepo.save(session);
    }
    /**
     * Get analytics for mentorships, such as total, active, and completed counts.
     * @returns An object containing mentorship analytics.
     */
    async getMentorshipAnalytics() {
        // Example: count active mentorships, completed, etc.
        const total = await this.mentorshipRepo.count();
        const active = await this.mentorshipRepo.count({ where: { status: 'active' } });
        const completed = await this.mentorshipRepo.count({ where: { status: 'completed' } });
        return { total, active, completed };
    }
};
exports.MentorshipService = MentorshipService;
exports.MentorshipService = MentorshipService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(mentorship_entity_1.Mentorship)),
    __param(1, (0, typeorm_1.InjectRepository)(mentorship_session_entity_1.MentorshipSession)),
    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], MentorshipService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,