{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\analytics.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\analytics.controller.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { AnalyticsController } from \"../controllers/analytics.controller\"\r\nimport { DataCollectionService } from \"../services/data-collection.service\"\r\nimport { BusinessIntelligenceService } from \"../services/business-intelligence.service\"\r\nimport { RealTimeAnalyticsService } from \"../services/real-time-analytics.service\"\r\nimport { EventType } from \"../entities/analytics-event.entity\"\r\n\r\ndescribe(\"AnalyticsController\", () => {\r\n  let controller: AnalyticsController\r\n  let dataCollectionService: jest.Mocked<DataCollectionService>\r\n  let businessIntelligenceService: jest.Mocked<BusinessIntelligenceService>\r\n  let realTimeAnalyticsService: jest.Mocked<RealTimeAnalyticsService>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [AnalyticsController],\r\n      providers: [\r\n        {\r\n          provide: DataCollectionService,\r\n          useValue: {\r\n            trackEvent: jest.fn(),\r\n            batchTrackEvents: jest.fn(),\r\n            getEvents: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: BusinessIntelligenceService,\r\n          useValue: {\r\n            executeQuery: jest.fn(),\r\n            getUserAnalytics: jest.fn(),\r\n            getTopMetrics: jest.fn(),\r\n            getFunnelAnalysis: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: RealTimeAnalyticsService,\r\n          useValue: {\r\n            getCurrentMetrics: jest.fn(),\r\n            getActiveUsers: jest.fn(),\r\n            getEventsPerSecond: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    controller = module.get<AnalyticsController>(AnalyticsController)\r\n    dataCollectionService = module.get(DataCollectionService)\r\n    businessIntelligenceService = module.get(BusinessIntelligenceService)\r\n    realTimeAnalyticsService = module.get(RealTimeAnalyticsService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(controller).toBeDefined()\r\n  })\r\n\r\n  describe(\"trackEvent\", () => {\r\n    it(\"should track an event successfully\", async () => {\r\n      const trackEventDto = {\r\n        eventType: EventType.USER_ACTION,\r\n        eventName: \"button_click\",\r\n        userId: \"user123\",\r\n        properties: { button: \"submit\" },\r\n      }\r\n\r\n      dataCollectionService.trackEvent.mockResolvedValue()\r\n\r\n      const result = await controller.trackEvent(trackEventDto)\r\n\r\n      expect(result).toEqual({\r\n        success: true,\r\n        message: \"Event tracked successfully\",\r\n      })\r\n      expect(dataCollectionService.trackEvent).toHaveBeenCalledWith(trackEventDto)\r\n    })\r\n  })\r\n\r\n  describe(\"executeQuery\", () => {\r\n    it(\"should execute analytics query\", async () => {\r\n      const queryDto = {\r\n        metrics: [\"event_count\"],\r\n        timeRange: {\r\n          start: \"2023-01-01T00:00:00Z\",\r\n          end: \"2023-01-02T00:00:00Z\",\r\n        },\r\n      }\r\n\r\n      const mockResult = {\r\n        data: [],\r\n        summary: {\r\n          totalRecords: 0,\r\n          timeRange: {\r\n            start: new Date(\"2023-01-01\"),\r\n            end: new Date(\"2023-01-02\"),\r\n          },\r\n          aggregations: {},\r\n        },\r\n      }\r\n\r\n      businessIntelligenceService.executeQuery.mockResolvedValue(mockResult)\r\n\r\n      const result = await controller.executeQuery(queryDto)\r\n\r\n      expect(result).toEqual(mockResult)\r\n      expect(businessIntelligenceService.executeQuery).toHaveBeenCalledWith(queryDto)\r\n    })\r\n  })\r\n\r\n  describe(\"getRealTimeMetrics\", () => {\r\n    it(\"should return real-time metrics\", async () => {\r\n      const mockMetrics = [\r\n        {\r\n          name: \"events_per_second\",\r\n          value: 10,\r\n          timestamp: new Date(),\r\n        },\r\n      ]\r\n\r\n      realTimeAnalyticsService.getCurrentMetrics.mockResolvedValue(mockMetrics)\r\n      realTimeAnalyticsService.getActiveUsers.mockResolvedValue(5)\r\n      realTimeAnalyticsService.getEventsPerSecond.mockResolvedValue(10)\r\n\r\n      const result = await controller.getRealTimeMetrics()\r\n\r\n      expect(result.metrics).toEqual(mockMetrics)\r\n      expect(result.summary.activeUsers).toBe(5)\r\n      expect(result.summary.eventsPerSecond).toBe(10)\r\n    })\r\n  })\r\n})\r\n"],"version":3}