bbf1adc9ef0a4ee5658c01544a19fb07
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const analytics_controller_1 = require("../controllers/analytics.controller");
const data_collection_service_1 = require("../services/data-collection.service");
const business_intelligence_service_1 = require("../services/business-intelligence.service");
const real_time_analytics_service_1 = require("../services/real-time-analytics.service");
const analytics_event_entity_1 = require("../entities/analytics-event.entity");
describe("AnalyticsController", () => {
    let controller;
    let dataCollectionService;
    let businessIntelligenceService;
    let realTimeAnalyticsService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [analytics_controller_1.AnalyticsController],
            providers: [
                {
                    provide: data_collection_service_1.DataCollectionService,
                    useValue: {
                        trackEvent: globals_1.jest.fn(),
                        batchTrackEvents: globals_1.jest.fn(),
                        getEvents: globals_1.jest.fn(),
                    },
                },
                {
                    provide: business_intelligence_service_1.BusinessIntelligenceService,
                    useValue: {
                        executeQuery: globals_1.jest.fn(),
                        getUserAnalytics: globals_1.jest.fn(),
                        getTopMetrics: globals_1.jest.fn(),
                        getFunnelAnalysis: globals_1.jest.fn(),
                    },
                },
                {
                    provide: real_time_analytics_service_1.RealTimeAnalyticsService,
                    useValue: {
                        getCurrentMetrics: globals_1.jest.fn(),
                        getActiveUsers: globals_1.jest.fn(),
                        getEventsPerSecond: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        controller = module.get(analytics_controller_1.AnalyticsController);
        dataCollectionService = module.get(data_collection_service_1.DataCollectionService);
        businessIntelligenceService = module.get(business_intelligence_service_1.BusinessIntelligenceService);
        realTimeAnalyticsService = module.get(real_time_analytics_service_1.RealTimeAnalyticsService);
    });
    it("should be defined", () => {
        expect(controller).toBeDefined();
    });
    describe("trackEvent", () => {
        it("should track an event successfully", async () => {
            const trackEventDto = {
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
                eventName: "button_click",
                userId: "user123",
                properties: { button: "submit" },
            };
            dataCollectionService.trackEvent.mockResolvedValue();
            const result = await controller.trackEvent(trackEventDto);
            expect(result).toEqual({
                success: true,
                message: "Event tracked successfully",
            });
            expect(dataCollectionService.trackEvent).toHaveBeenCalledWith(trackEventDto);
        });
    });
    describe("executeQuery", () => {
        it("should execute analytics query", async () => {
            const queryDto = {
                metrics: ["event_count"],
                timeRange: {
                    start: "2023-01-01T00:00:00Z",
                    end: "2023-01-02T00:00:00Z",
                },
            };
            const mockResult = {
                data: [],
                summary: {
                    totalRecords: 0,
                    timeRange: {
                        start: new Date("2023-01-01"),
                        end: new Date("2023-01-02"),
                    },
                    aggregations: {},
                },
            };
            businessIntelligenceService.executeQuery.mockResolvedValue(mockResult);
            const result = await controller.executeQuery(queryDto);
            expect(result).toEqual(mockResult);
            expect(businessIntelligenceService.executeQuery).toHaveBeenCalledWith(queryDto);
        });
    });
    describe("getRealTimeMetrics", () => {
        it("should return real-time metrics", async () => {
            const mockMetrics = [
                {
                    name: "events_per_second",
                    value: 10,
                    timestamp: new Date(),
                },
            ];
            realTimeAnalyticsService.getCurrentMetrics.mockResolvedValue(mockMetrics);
            realTimeAnalyticsService.getActiveUsers.mockResolvedValue(5);
            realTimeAnalyticsService.getEventsPerSecond.mockResolvedValue(10);
            const result = await controller.getRealTimeMetrics();
            expect(result.metrics).toEqual(mockMetrics);
            expect(result.summary.activeUsers).toBe(5);
            expect(result.summary.eventsPerSecond).toBe(10);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,