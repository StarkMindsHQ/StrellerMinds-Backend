{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\services\\search-indexing.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\search\\services\\search-indexing.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { ElasticsearchService } from \"@nestjs/elasticsearch\"\r\nimport type { ConfigService } from \"@nestjs/config\"\r\nimport type { Course } from \"../../courses/entities/course.entity\"\r\nimport { InjectRepository } from \"@nestjs/typeorm\"\r\nimport { Repository } from \"typeorm\"\r\nimport type { SearchMLService } from \"./search-ml.service\"\r\n\r\n@Injectable()\r\nexport class SearchIndexingService {\r\n  private readonly logger = new Logger(SearchIndexingService.name)\r\n  private readonly indexName = \"courses\"\r\n  private readonly batchSize: number\r\n\r\n  constructor(\r\n    private readonly elasticsearchService: ElasticsearchService,\r\n    private readonly configService: ConfigService,\r\n    private readonly searchMLService: SearchMLService,\r\n    @InjectRepository(Object as any) private readonly _unused?: any,\r\n    @InjectRepository((null as unknown) as Course) private readonly courseRepo?: Repository<Course>,\r\n  ) {\r\n    this.batchSize = this.configService.get<number>(\"INDEXING_BATCH_SIZE\", 100)\r\n  }\r\n\r\n  async bulkIndex(courses: Course[]): Promise<any> {\r\n    try {\r\n      const batches = this.chunkArray(courses, this.batchSize)\r\n      const results = []\r\n\r\n      for (const batch of batches) {\r\n        const batchResult = await this.indexBatch(batch)\r\n        results.push(batchResult)\r\n\r\n        // Add delay between batches to avoid overwhelming Elasticsearch\r\n        await this.delay(100)\r\n      }\r\n\r\n      return {\r\n        totalProcessed: courses.length,\r\n        batches: results.length,\r\n        errors: results.filter((r) => r.errors).length,\r\n        items: results.flatMap((r) => r.items),\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(\"Bulk index failed\", error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async indexBatch(courses: Course[]): Promise<any> {\r\n    try {\r\n      const body = []\r\n\r\n      for (const course of courses) {\r\n        // Generate embedding for semantic search\r\n        const embedding = await this.searchMLService.generateCourseEmbedding(course)\r\n\r\n        // Index operation\r\n        body.push({\r\n          index: {\r\n            _index: this.indexName,\r\n            _id: course.id,\r\n          },\r\n        })\r\n\r\n        // Document data\r\n        body.push({\r\n          title: course.title,\r\n          description: course.description,\r\n          content: course.content || \"\",\r\n          category: course.category,\r\n          subcategory: course.subcategory,\r\n          level: course.level,\r\n          duration: course.duration,\r\n          price: course.price,\r\n          instructor: course.instructor,\r\n          tags: course.tags || [],\r\n          skills: course.skills || [],\r\n          prerequisites: course.prerequisites || [],\r\n          language: course.language || \"en\",\r\n          rating: course.rating || 0,\r\n          enrollmentCount: course.enrollmentCount || 0,\r\n          completionRate: course.completionRate || 0,\r\n          difficulty: course.difficulty,\r\n          format: course.format,\r\n          certification: course.certification || false,\r\n          createdAt: course.createdAt,\r\n          updatedAt: course.updatedAt,\r\n          publishedAt: course.publishedAt,\r\n          isActive: course.isActive !== false,\r\n          vector_embedding: embedding,\r\n          location: course.location,\r\n        })\r\n      }\r\n\r\n      const response = await this.elasticsearchService.bulk({ body })\r\n\r\n      if (response.body.errors) {\r\n        this.logger.warn(\"Some documents failed to index\", {\r\n          errors: response.body.items.filter((item: any) => item.index.error),\r\n        })\r\n      }\r\n\r\n      return response.body\r\n    } catch (error) {\r\n      this.logger.error(\"Index batch failed\", error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async reindexAll(): Promise<void> {\r\n    try {\r\n      this.logger.log(\"Starting full reindex...\")\r\n\r\n      // Create new index with timestamp\r\n      const newIndexName = `${this.indexName}_${Date.now()}`\r\n      await this.createIndex(newIndexName)\r\n\r\n      // Fetch all courses from database and index them in batches\r\n      if (!this.courseRepo) {\r\n        throw new Error(\"Course repository not available for reindexing\")\r\n      }\r\n\r\n      const total = await this.courseRepo.count()\r\n      const pageSize = this.batchSize\r\n      for (let offset = 0; offset < total; offset += pageSize) {\r\n        const courses = await this.courseRepo.find({\r\n          skip: offset,\r\n          take: pageSize,\r\n          order: { createdAt: \"ASC\" as any },\r\n        })\r\n\r\n        if (courses.length === 0) break\r\n        await this.bulkIndex(courses)\r\n      }\r\n\r\n      // Switch alias to new index\r\n      await this.switchAlias(newIndexName)\r\n\r\n      // Delete old index\r\n      await this.deleteOldIndices()\r\n\r\n      this.logger.log(\"Full reindex completed successfully\")\r\n    } catch (error) {\r\n      this.logger.error(\"Full reindex failed\", error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async createIndex(indexName: string): Promise<void> {\r\n    const indexSettings = {\r\n      settings: {\r\n        number_of_shards: 2,\r\n        number_of_replicas: 1,\r\n        analysis: {\r\n          analyzer: {\r\n            course_analyzer: {\r\n              type: \"custom\",\r\n              tokenizer: \"standard\",\r\n              filter: [\"lowercase\", \"stop\", \"stemmer\", \"synonym_filter\"],\r\n            },\r\n            autocomplete_analyzer: {\r\n              type: \"custom\",\r\n              tokenizer: \"autocomplete_tokenizer\",\r\n              filter: [\"lowercase\"],\r\n            },\r\n          },\r\n          tokenizer: {\r\n            autocomplete_tokenizer: {\r\n              type: \"edge_ngram\",\r\n              min_gram: 2,\r\n              max_gram: 20,\r\n              token_chars: [\"letter\", \"digit\"],\r\n            },\r\n          },\r\n          filter: {\r\n            synonym_filter: {\r\n              type: \"synonym\",\r\n              synonyms: [\r\n                \"blockchain,distributed ledger\",\r\n                \"cryptocurrency,crypto,digital currency\",\r\n                \"smart contract,contract\",\r\n                \"stellar,xlm\",\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      },\r\n      mappings: {\r\n        properties: {\r\n          title: {\r\n            type: \"text\",\r\n            analyzer: \"course_analyzer\",\r\n            fields: {\r\n              suggest: {\r\n                type: \"completion\",\r\n                analyzer: \"autocomplete_analyzer\",\r\n              },\r\n              keyword: {\r\n                type: \"keyword\",\r\n              },\r\n            },\r\n          },\r\n          description: {\r\n            type: \"text\",\r\n            analyzer: \"course_analyzer\",\r\n            fields: {\r\n              suggest: {\r\n                type: \"completion\",\r\n                analyzer: \"autocomplete_analyzer\",\r\n              },\r\n            },\r\n          },\r\n          content: {\r\n            type: \"text\",\r\n            analyzer: \"course_analyzer\",\r\n          },\r\n          category: { type: \"keyword\" },\r\n          subcategory: { type: \"keyword\" },\r\n          level: { type: \"keyword\" },\r\n          duration: { type: \"integer\" },\r\n          price: { type: \"float\" },\r\n          instructor: {\r\n            type: \"text\",\r\n            fields: { keyword: { type: \"keyword\" } },\r\n          },\r\n          tags: { type: \"keyword\" },\r\n          skills: { type: \"keyword\" },\r\n          prerequisites: { type: \"keyword\" },\r\n          language: { type: \"keyword\" },\r\n          rating: { type: \"float\" },\r\n          enrollmentCount: { type: \"integer\" },\r\n          completionRate: { type: \"float\" },\r\n          difficulty: { type: \"keyword\" },\r\n          format: { type: \"keyword\" },\r\n          certification: { type: \"boolean\" },\r\n          createdAt: { type: \"date\" },\r\n          updatedAt: { type: \"date\" },\r\n          publishedAt: { type: \"date\" },\r\n          isActive: { type: \"boolean\" },\r\n          vector_embedding: {\r\n            type: \"dense_vector\",\r\n            dims: 384,\r\n          },\r\n          location: { type: \"geo_point\" },\r\n        },\r\n      },\r\n    }\r\n\r\n    await this.elasticsearchService.indices.create({\r\n      index: indexName,\r\n      body: indexSettings,\r\n    })\r\n  }\r\n\r\n  private async switchAlias(newIndexName: string): Promise<void> {\r\n    const aliasActions = {\r\n      actions: [\r\n        { remove: { index: \"*\", alias: this.indexName } },\r\n        { add: { index: newIndexName, alias: this.indexName } },\r\n      ],\r\n    }\r\n\r\n    await this.elasticsearchService.indices.updateAliases({\r\n      body: aliasActions,\r\n    })\r\n  }\r\n\r\n  private async deleteOldIndices(): Promise<void> {\r\n    try {\r\n      const indices = await this.elasticsearchService.indices.get({\r\n        index: `${this.indexName}_*`,\r\n      })\r\n\r\n      const indexNames = Object.keys(indices.body)\r\n      const cutoffTime = Date.now() - 7 * 24 * 60 * 60 * 1000 // 7 days ago\r\n\r\n      for (const indexName of indexNames) {\r\n        const timestamp = Number.parseInt(indexName.split(\"_\").pop() || \"0\")\r\n        if (timestamp < cutoffTime) {\r\n          await this.elasticsearchService.indices.delete({ index: indexName })\r\n          this.logger.log(`Deleted old index: ${indexName}`)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.warn(\"Failed to delete old indices\", error)\r\n    }\r\n  }\r\n\r\n  private chunkArray<T>(array: T[], size: number): T[][] {\r\n    const chunks = []\r\n    for (let i = 0; i < array.length; i += size) {\r\n      chunks.push(array.slice(i, i + size))\r\n    }\r\n    return chunks\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms))\r\n  }\r\n\r\n  async getIndexStats(): Promise<any> {\r\n    try {\r\n      const stats = await this.elasticsearchService.indices.stats({\r\n        index: this.indexName,\r\n      })\r\n\r\n      return {\r\n        indexName: this.indexName,\r\n        documentCount: stats.body._all.total.docs.count,\r\n        indexSize: stats.body._all.total.store.size_in_bytes,\r\n        shards: stats.body._shards,\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(\"Get index stats failed\", error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  async optimizeIndex(): Promise<void> {\r\n    try {\r\n      await this.elasticsearchService.indices.forcemerge({\r\n        index: this.indexName,\r\n        max_num_segments: 1,\r\n      })\r\n\r\n      this.logger.log(\"Index optimization completed\")\r\n    } catch (error) {\r\n      this.logger.error(\"Index optimization failed\", error)\r\n    }\r\n  }\r\n}\r\n"],"version":3}