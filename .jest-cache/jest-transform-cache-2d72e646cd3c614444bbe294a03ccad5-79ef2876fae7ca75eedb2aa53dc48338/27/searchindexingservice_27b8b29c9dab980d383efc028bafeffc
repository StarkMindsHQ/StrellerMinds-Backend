7c69e66f5a8f5d1262c9de85aed9e095
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var SearchIndexingService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchIndexingService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
let SearchIndexingService = SearchIndexingService_1 = class SearchIndexingService {
    constructor(elasticsearchService, configService, searchMLService, _unused, courseRepo) {
        this.elasticsearchService = elasticsearchService;
        this.configService = configService;
        this.searchMLService = searchMLService;
        this._unused = _unused;
        this.courseRepo = courseRepo;
        this.logger = new common_1.Logger(SearchIndexingService_1.name);
        this.indexName = "courses";
        this.batchSize = this.configService.get("INDEXING_BATCH_SIZE", 100);
    }
    async bulkIndex(courses) {
        try {
            const batches = this.chunkArray(courses, this.batchSize);
            const results = [];
            for (const batch of batches) {
                const batchResult = await this.indexBatch(batch);
                results.push(batchResult);
                // Add delay between batches to avoid overwhelming Elasticsearch
                await this.delay(100);
            }
            return {
                totalProcessed: courses.length,
                batches: results.length,
                errors: results.filter((r) => r.errors).length,
                items: results.flatMap((r) => r.items),
            };
        }
        catch (error) {
            this.logger.error("Bulk index failed", error);
            throw error;
        }
    }
    async indexBatch(courses) {
        try {
            const body = [];
            for (const course of courses) {
                // Generate embedding for semantic search
                const embedding = await this.searchMLService.generateCourseEmbedding(course);
                // Index operation
                body.push({
                    index: {
                        _index: this.indexName,
                        _id: course.id,
                    },
                });
                // Document data
                body.push({
                    title: course.title,
                    description: course.description,
                    content: course.content || "",
                    category: course.category,
                    subcategory: course.subcategory,
                    level: course.level,
                    duration: course.duration,
                    price: course.price,
                    instructor: course.instructor,
                    tags: course.tags || [],
                    skills: course.skills || [],
                    prerequisites: course.prerequisites || [],
                    language: course.language || "en",
                    rating: course.rating || 0,
                    enrollmentCount: course.enrollmentCount || 0,
                    completionRate: course.completionRate || 0,
                    difficulty: course.difficulty,
                    format: course.format,
                    certification: course.certification || false,
                    createdAt: course.createdAt,
                    updatedAt: course.updatedAt,
                    publishedAt: course.publishedAt,
                    isActive: course.isActive !== false,
                    vector_embedding: embedding,
                    location: course.location,
                });
            }
            const response = await this.elasticsearchService.bulk({ body });
            if (response.body.errors) {
                this.logger.warn("Some documents failed to index", {
                    errors: response.body.items.filter((item) => item.index.error),
                });
            }
            return response.body;
        }
        catch (error) {
            this.logger.error("Index batch failed", error);
            throw error;
        }
    }
    async reindexAll() {
        try {
            this.logger.log("Starting full reindex...");
            // Create new index with timestamp
            const newIndexName = `${this.indexName}_${Date.now()}`;
            await this.createIndex(newIndexName);
            // Fetch all courses from database and index them in batches
            if (!this.courseRepo) {
                throw new Error("Course repository not available for reindexing");
            }
            const total = await this.courseRepo.count();
            const pageSize = this.batchSize;
            for (let offset = 0; offset < total; offset += pageSize) {
                const courses = await this.courseRepo.find({
                    skip: offset,
                    take: pageSize,
                    order: { createdAt: "ASC" },
                });
                if (courses.length === 0)
                    break;
                await this.bulkIndex(courses);
            }
            // Switch alias to new index
            await this.switchAlias(newIndexName);
            // Delete old index
            await this.deleteOldIndices();
            this.logger.log("Full reindex completed successfully");
        }
        catch (error) {
            this.logger.error("Full reindex failed", error);
            throw error;
        }
    }
    async createIndex(indexName) {
        const indexSettings = {
            settings: {
                number_of_shards: 2,
                number_of_replicas: 1,
                analysis: {
                    analyzer: {
                        course_analyzer: {
                            type: "custom",
                            tokenizer: "standard",
                            filter: ["lowercase", "stop", "stemmer", "synonym_filter"],
                        },
                        autocomplete_analyzer: {
                            type: "custom",
                            tokenizer: "autocomplete_tokenizer",
                            filter: ["lowercase"],
                        },
                    },
                    tokenizer: {
                        autocomplete_tokenizer: {
                            type: "edge_ngram",
                            min_gram: 2,
                            max_gram: 20,
                            token_chars: ["letter", "digit"],
                        },
                    },
                    filter: {
                        synonym_filter: {
                            type: "synonym",
                            synonyms: [
                                "blockchain,distributed ledger",
                                "cryptocurrency,crypto,digital currency",
                                "smart contract,contract",
                                "stellar,xlm",
                            ],
                        },
                    },
                },
            },
            mappings: {
                properties: {
                    title: {
                        type: "text",
                        analyzer: "course_analyzer",
                        fields: {
                            suggest: {
                                type: "completion",
                                analyzer: "autocomplete_analyzer",
                            },
                            keyword: {
                                type: "keyword",
                            },
                        },
                    },
                    description: {
                        type: "text",
                        analyzer: "course_analyzer",
                        fields: {
                            suggest: {
                                type: "completion",
                                analyzer: "autocomplete_analyzer",
                            },
                        },
                    },
                    content: {
                        type: "text",
                        analyzer: "course_analyzer",
                    },
                    category: { type: "keyword" },
                    subcategory: { type: "keyword" },
                    level: { type: "keyword" },
                    duration: { type: "integer" },
                    price: { type: "float" },
                    instructor: {
                        type: "text",
                        fields: { keyword: { type: "keyword" } },
                    },
                    tags: { type: "keyword" },
                    skills: { type: "keyword" },
                    prerequisites: { type: "keyword" },
                    language: { type: "keyword" },
                    rating: { type: "float" },
                    enrollmentCount: { type: "integer" },
                    completionRate: { type: "float" },
                    difficulty: { type: "keyword" },
                    format: { type: "keyword" },
                    certification: { type: "boolean" },
                    createdAt: { type: "date" },
                    updatedAt: { type: "date" },
                    publishedAt: { type: "date" },
                    isActive: { type: "boolean" },
                    vector_embedding: {
                        type: "dense_vector",
                        dims: 384,
                    },
                    location: { type: "geo_point" },
                },
            },
        };
        await this.elasticsearchService.indices.create({
            index: indexName,
            body: indexSettings,
        });
    }
    async switchAlias(newIndexName) {
        const aliasActions = {
            actions: [
                { remove: { index: "*", alias: this.indexName } },
                { add: { index: newIndexName, alias: this.indexName } },
            ],
        };
        await this.elasticsearchService.indices.updateAliases({
            body: aliasActions,
        });
    }
    async deleteOldIndices() {
        try {
            const indices = await this.elasticsearchService.indices.get({
                index: `${this.indexName}_*`,
            });
            const indexNames = Object.keys(indices.body);
            const cutoffTime = Date.now() - 7 * 24 * 60 * 60 * 1000; // 7 days ago
            for (const indexName of indexNames) {
                const timestamp = Number.parseInt(indexName.split("_").pop() || "0");
                if (timestamp < cutoffTime) {
                    await this.elasticsearchService.indices.delete({ index: indexName });
                    this.logger.log(`Deleted old index: ${indexName}`);
                }
            }
        }
        catch (error) {
            this.logger.warn("Failed to delete old indices", error);
        }
    }
    chunkArray(array, size) {
        const chunks = [];
        for (let i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }
    delay(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    async getIndexStats() {
        try {
            const stats = await this.elasticsearchService.indices.stats({
                index: this.indexName,
            });
            return {
                indexName: this.indexName,
                documentCount: stats.body._all.total.docs.count,
                indexSize: stats.body._all.total.store.size_in_bytes,
                shards: stats.body._shards,
            };
        }
        catch (error) {
            this.logger.error("Get index stats failed", error);
            return null;
        }
    }
    async optimizeIndex() {
        try {
            await this.elasticsearchService.indices.forcemerge({
                index: this.indexName,
                max_num_segments: 1,
            });
            this.logger.log("Index optimization completed");
        }
        catch (error) {
            this.logger.error("Index optimization failed", error);
        }
    }
};
exports.SearchIndexingService = SearchIndexingService;
exports.SearchIndexingService = SearchIndexingService = SearchIndexingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(3, (0, typeorm_1.InjectRepository)(Object)),
    __param(4, (0, typeorm_1.InjectRepository)(null)),
    __metadata("design:paramtypes", [Object, Object, Object, Object, typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], SearchIndexingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,