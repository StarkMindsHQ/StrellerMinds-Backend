{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\cloudinary\\cloudinary.service.ts","mappings":";;;;;;;;;;;;AAAA,2CAA4C;AAC5C,2CAA8C;AAIvC,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B;QACE,eAAU,CAAC,MAAM,CAAC;YAChB,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;YAC7C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB;YACvC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;SAC9C,CAAC,CAAC;IACL,CAAC;IAED,0BAA0B;IACnB,KAAK,CAAC,WAAW,CACtB,IAAyB;QAEzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,eAAU,CAAC,QAAQ;iBAChB,aAAa,CACZ;gBACE,aAAa,EAAE,OAAO;gBACtB,cAAc,EAAE;oBACd,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,mDAAmD;iBAChG;aACF,EACD,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;gBAChB,IAAI,KAAK,EAAE,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,CACF;iBACA,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4BAA4B;IACrB,KAAK,CAAC,WAAW,CAAC,QAAgB;QACvC,OAAO,eAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,mBAAmB,CAC9B,QAAgB;QAEhB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,eAAU,CAAC,QAAQ,CAAC,MAAM,CACxB,QAAQ,EACR;gBACE,aAAa,EAAE,OAAO;gBACtB,6DAA6D;aAC9D,EACD,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;gBAChB,IAAI,KAAK,EAAE,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAhEY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;;GACA,iBAAiB,CAgE7B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\cloudinary\\cloudinary.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { v2 as cloudinary } from 'cloudinary';\r\nimport { UploadApiResponse } from 'cloudinary';\r\n\r\n@Injectable()\r\nexport class CloudinaryService {\r\n  constructor() {\r\n    cloudinary.config({\r\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n      api_key: process.env.CLOUDINARY_API_KEY,\r\n      api_secret: process.env.CLOUDINARY_API_SECRET,\r\n    });\r\n  }\r\n\r\n  //FN TO UPLOAD PROFILE IMG\r\n  public async uploadImage(\r\n    file: Express.Multer.File,\r\n  ): Promise<UploadApiResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      cloudinary.uploader\r\n        .upload_stream(\r\n          {\r\n            resource_type: 'image',\r\n            transformation: [\r\n              { width: 512, height: 512, crop: 'limit' }, // Resize to max 512x512 without distorting the img\r\n            ],\r\n          },\r\n          (error, result) => {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          },\r\n        )\r\n        .end(file.buffer);\r\n    });\r\n  }\r\n\r\n  //FN TO DELETE A PROFILE IMG\r\n  public async deleteImage(publicId: string): Promise<any> {\r\n    return cloudinary.uploader.destroy(publicId);\r\n  }\r\n\r\n  /**\r\n   * Uploads a video or generic file from a local file path to Cloudinary.\r\n   * @param filePath The path to the file on disk\r\n   * @returns The Cloudinary upload response\r\n   */\r\n  public async uploadVideoFromPath(\r\n    filePath: string,\r\n  ): Promise<UploadApiResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      cloudinary.uploader.upload(\r\n        filePath,\r\n        {\r\n          resource_type: 'video',\r\n          // You can add more transformations or options here if needed\r\n        },\r\n        (error, result) => {\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve(result);\r\n          }\r\n        },\r\n      );\r\n    });\r\n  }\r\n}\r\n"],"version":3}