a6af8251e36213418cf57304dc5c2901
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudinaryService = void 0;
const common_1 = require("@nestjs/common");
const cloudinary_1 = require("cloudinary");
let CloudinaryService = class CloudinaryService {
    constructor() {
        cloudinary_1.v2.config({
            cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
            api_key: process.env.CLOUDINARY_API_KEY,
            api_secret: process.env.CLOUDINARY_API_SECRET,
        });
    }
    //FN TO UPLOAD PROFILE IMG
    async uploadImage(file) {
        return new Promise((resolve, reject) => {
            cloudinary_1.v2.uploader
                .upload_stream({
                resource_type: 'image',
                transformation: [
                    { width: 512, height: 512, crop: 'limit' }, // Resize to max 512x512 without distorting the img
                ],
            }, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            })
                .end(file.buffer);
        });
    }
    //FN TO DELETE A PROFILE IMG
    async deleteImage(publicId) {
        return cloudinary_1.v2.uploader.destroy(publicId);
    }
    /**
     * Uploads a video or generic file from a local file path to Cloudinary.
     * @param filePath The path to the file on disk
     * @returns The Cloudinary upload response
     */
    async uploadVideoFromPath(filePath) {
        return new Promise((resolve, reject) => {
            cloudinary_1.v2.uploader.upload(filePath, {
                resource_type: 'video',
                // You can add more transformations or options here if needed
            }, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            });
        });
    }
};
exports.CloudinaryService = CloudinaryService;
exports.CloudinaryService = CloudinaryService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], CloudinaryService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjbG91ZGluYXJ5XFxjbG91ZGluYXJ5LnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTRDO0FBQzVDLDJDQUE4QztBQUl2QyxJQUFNLGlCQUFpQixHQUF2QixNQUFNLGlCQUFpQjtJQUM1QjtRQUNFLGVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDaEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCO1lBQzdDLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQjtZQUN2QyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUI7U0FDOUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDBCQUEwQjtJQUNuQixLQUFLLENBQUMsV0FBVyxDQUN0QixJQUF5QjtRQUV6QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLGVBQVUsQ0FBQyxRQUFRO2lCQUNoQixhQUFhLENBQ1o7Z0JBQ0UsYUFBYSxFQUFFLE9BQU87Z0JBQ3RCLGNBQWMsRUFBRTtvQkFDZCxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsbURBQW1EO2lCQUNoRzthQUNGLEVBQ0QsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ2hCLElBQUksS0FBSyxFQUFFLENBQUM7b0JBQ1YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoQixDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNsQixDQUFDO1lBQ0gsQ0FBQyxDQUNGO2lCQUNBLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNEJBQTRCO0lBQ3JCLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBZ0I7UUFDdkMsT0FBTyxlQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxtQkFBbUIsQ0FDOUIsUUFBZ0I7UUFFaEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxlQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDeEIsUUFBUSxFQUNSO2dCQUNFLGFBQWEsRUFBRSxPQUFPO2dCQUN0Qiw2REFBNkQ7YUFDOUQsRUFDRCxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDaEIsSUFBSSxLQUFLLEVBQUUsQ0FBQztvQkFDVixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLENBQUM7cUJBQU0sQ0FBQztvQkFDTixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xCLENBQUM7WUFDSCxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFoRVksOENBQWlCOzRCQUFqQixpQkFBaUI7SUFEN0IsSUFBQSxtQkFBVSxHQUFFOztHQUNBLGlCQUFpQixDQWdFN0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjbG91ZGluYXJ5XFxjbG91ZGluYXJ5LnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgdjIgYXMgY2xvdWRpbmFyeSB9IGZyb20gJ2Nsb3VkaW5hcnknO1xyXG5pbXBvcnQgeyBVcGxvYWRBcGlSZXNwb25zZSB9IGZyb20gJ2Nsb3VkaW5hcnknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2xvdWRpbmFyeVNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgY2xvdWRpbmFyeS5jb25maWcoe1xyXG4gICAgICBjbG91ZF9uYW1lOiBwcm9jZXNzLmVudi5DTE9VRElOQVJZX0NMT1VEX05BTUUsXHJcbiAgICAgIGFwaV9rZXk6IHByb2Nlc3MuZW52LkNMT1VESU5BUllfQVBJX0tFWSxcclxuICAgICAgYXBpX3NlY3JldDogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9BUElfU0VDUkVULFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvL0ZOIFRPIFVQTE9BRCBQUk9GSUxFIElNR1xyXG4gIHB1YmxpYyBhc3luYyB1cGxvYWRJbWFnZShcclxuICAgIGZpbGU6IEV4cHJlc3MuTXVsdGVyLkZpbGUsXHJcbiAgKTogUHJvbWlzZTxVcGxvYWRBcGlSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY2xvdWRpbmFyeS51cGxvYWRlclxyXG4gICAgICAgIC51cGxvYWRfc3RyZWFtKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICByZXNvdXJjZV90eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbjogW1xyXG4gICAgICAgICAgICAgIHsgd2lkdGg6IDUxMiwgaGVpZ2h0OiA1MTIsIGNyb3A6ICdsaW1pdCcgfSwgLy8gUmVzaXplIHRvIG1heCA1MTJ4NTEyIHdpdGhvdXQgZGlzdG9ydGluZyB0aGUgaW1nXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgKGVycm9yLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5lbmQoZmlsZS5idWZmZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvL0ZOIFRPIERFTEVURSBBIFBST0ZJTEUgSU1HXHJcbiAgcHVibGljIGFzeW5jIGRlbGV0ZUltYWdlKHB1YmxpY0lkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNsb3VkaW5hcnkudXBsb2FkZXIuZGVzdHJveShwdWJsaWNJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGxvYWRzIGEgdmlkZW8gb3IgZ2VuZXJpYyBmaWxlIGZyb20gYSBsb2NhbCBmaWxlIHBhdGggdG8gQ2xvdWRpbmFyeS5cclxuICAgKiBAcGFyYW0gZmlsZVBhdGggVGhlIHBhdGggdG8gdGhlIGZpbGUgb24gZGlza1xyXG4gICAqIEByZXR1cm5zIFRoZSBDbG91ZGluYXJ5IHVwbG9hZCByZXNwb25zZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyB1cGxvYWRWaWRlb0Zyb21QYXRoKFxyXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcclxuICApOiBQcm9taXNlPFVwbG9hZEFwaVJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjbG91ZGluYXJ5LnVwbG9hZGVyLnVwbG9hZChcclxuICAgICAgICBmaWxlUGF0aCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZXNvdXJjZV90eXBlOiAndmlkZW8nLFxyXG4gICAgICAgICAgLy8gWW91IGNhbiBhZGQgbW9yZSB0cmFuc2Zvcm1hdGlvbnMgb3Igb3B0aW9ucyBoZXJlIGlmIG5lZWRlZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGVycm9yLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9