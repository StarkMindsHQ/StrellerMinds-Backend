{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,6DAAyD;AACzD,+CAA6C;AAE7C,qFAAyE;AACzE,6CAA8E;AAO9E;;GAEG;AAII,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAA6B,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAG,CAAC;IAErE;;OAEG;IAMG,AAAN,KAAK,CAAC,mBAAmB,CACf,SAA8B,EAC/B,GAAyB;QAEhC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,sBAAsB;QACtE,CAAC;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAC/C,SAAS,CAAC,MAAM,EAChB,SAAS,CAAC,UAAU,EACpB,SAAS,CAAC,QAAQ,EAClB,GAAG,CAAC,IAAI,CAAC,EAAE,CACZ,CAAC;IACJ,CAAC;CACF,CAAA;AA1BY,oDAAoB;AAWzB;IALL,IAAA,aAAI,EAAC,KAAK,CAAC;IACX,IAAA,kBAAS,EAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;;IAC/C,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,WAAW,EAAE,oDAAoD,EAAE,CAAC;IACrH,IAAA,iBAAO,EAAC,EAAE,IAAI,EAAE,kDAAmB,EAAE,CAAC;IACtC,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,aAAI,GAAE,CAAA;IACN,WAAA,IAAA,YAAG,GAAE,CAAA;;yDADa,kDAAmB,oBAAnB,kDAAmB;;+DAavC;+BAzBU,oBAAoB;IAHhC,IAAA,iBAAO,EAAC,YAAY,CAAC;IACtB,wBAAwB;;IACvB,IAAA,mBAAU,EAAC,YAAY,CAAC;yDAEyB,sCAAiB,oBAAjB,sCAAiB;GADtD,oBAAoB,CA0BhC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.controller.ts"],"sourcesContent":["import { Body, Controller, Post, UseGuards, Req } from '@nestjs/common';\r\nimport { ModerationService } from './moderation.service';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { Request } from 'express';\r\nimport { ModerationActionDto } from './dto/create-moderation-action.dto';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\r\n\r\n// Define custom request type\r\ninterface AuthenticatedRequest extends Request {\r\n  user?: { id: string }; // Ensure TypeScript recognizes 'user'\r\n}\r\n\r\n/**\r\n * Controller for moderation actions and logging.\r\n */\r\n@ApiTags('Moderation')\r\n// Moderation Controller\r\n@Controller('moderation')\r\nexport class ModerationController {\r\n  constructor(private readonly moderationService: ModerationService) {}\r\n\r\n  /**\r\n   * Log a moderation action performed by a moderator.\r\n   */\r\n  @Post('log')\r\n  @UseGuards(AuthGuard('jwt')) // Specify strategy\r\n  @ApiOperation({ summary: 'Log moderation action', description: 'Logs a moderation action performed by a moderator.' })\r\n  @ApiBody({ type: ModerationActionDto })\r\n  @ApiResponse({ status: 201, description: 'Moderation action logged.' })\r\n  async logModerationAction(\r\n    @Body() actionDto: ModerationActionDto,\r\n    @Req() req: AuthenticatedRequest, // Use the custom request type\r\n  ) {\r\n    if (!req.user) {\r\n      throw new Error('User not found in request'); // Handle missing user\r\n    }\r\n\r\n    return this.moderationService.logModerationAction(\r\n      actionDto.action,\r\n      actionDto.entityType,\r\n      actionDto.entityId,\r\n      req.user.id, // Now TypeScript will not complain\r\n    );\r\n  }\r\n}\r\n"],"version":3}