{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,yDAAqD;AACrD,mDAA+C;AAE/C,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,UAA2B,CAAC;IAChC,IAAI,WAAkC,CAAC;IAEvC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,WAAW,GAAG;YACZ,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;YAChC,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;YAChC,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE;SAC9B,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,kCAAe,CAAC;YAC9B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,4BAAY,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;SAC9D,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QAC5D,WAAW,CAAC,qBAAmC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAEzE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,gBAAgB,CAAC;YAC/C,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,UAAU;SAClB,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,GAAG,GAAG,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;QACpF,MAAM,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAC5D,kBAAkB,EAClB,oBAAoB,EACpB,IAAI,CACL,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,KAAK,GAAG,kBAAkB,CAAC;QACjC,MAAM,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { EmailController } from './email.controller';\r\nimport { EmailService } from './email.service';\r\n\r\ndescribe('EmailController', () => {\r\n  let controller: EmailController;\r\n  let mockService: Partial<EmailService>;\r\n\r\n  beforeEach(async () => {\r\n    mockService = {\r\n      sendVerificationEmail: jest.fn(),\r\n      updateEmailPreference: jest.fn(),\r\n      getUserPreferences: jest.fn(),\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [EmailController],\r\n      providers: [{ provide: EmailService, useValue: mockService }],\r\n    }).compile();\r\n\r\n    controller = module.get<EmailController>(EmailController);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n\r\n  it('should send verification email', async () => {\r\n    const mockUser = { email: 'user@example.com', name: 'User' };\r\n    (mockService.sendVerificationEmail as jest.Mock).mockResolvedValue(true);\r\n\r\n    const result = await controller.sendVerification({\r\n      user: mockUser,\r\n      code: '1234',\r\n      token: 'token123',\r\n    });\r\n\r\n    expect(result).toBe(true);\r\n    expect(mockService.sendVerificationEmail).toHaveBeenCalledWith(mockUser, '1234', 'token123');\r\n  });\r\n\r\n  it('should update email preference', async () => {\r\n    const dto = { email: 'user@example.com', type: 'email-verification', optOut: true };\r\n    await controller.updatePreference(dto);\r\n    expect(mockService.updateEmailPreference).toHaveBeenCalledWith(\r\n      'user@example.com',\r\n      'email-verification',\r\n      true,\r\n    );\r\n  });\r\n\r\n  it('should get user preferences', async () => {\r\n    const email = 'user@example.com';\r\n    await controller.getPreferences(email);\r\n    expect(mockService.getUserPreferences).toHaveBeenCalledWith(email);\r\n  });\r\n});\r\n"],"version":3}