{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\services\\aws-cloudfront.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\services\\aws-cloudfront.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport {\r\n  S3Client,\r\n  PutObjectCommand,\r\n  GetObjectCommand,\r\n  DeleteObjectCommand,\r\n  HeadObjectCommand,\r\n} from '@aws-sdk/client-s3';\r\nimport {\r\n  CloudFrontClient,\r\n  CreateInvalidationCommand,\r\n  GetDistributionCommand,\r\n} from '@aws-sdk/client-cloudfront';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport * as crypto from 'crypto';\r\n\r\nexport interface CloudFrontConfig {\r\n  distributionId: string;\r\n  distributionDomain: string;\r\n  s3Bucket: string;\r\n  s3Region: string;\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n  signedUrlExpiry: number;\r\n  privateKeyId: string;\r\n  privateKey: string;\r\n}\r\n\r\nexport interface UploadResult {\r\n  key: string;\r\n  url: string;\r\n  cdnUrl: string;\r\n  etag: string;\r\n  size: number;\r\n}\r\n\r\nexport interface SignedUrlOptions {\r\n  expiresIn?: number;\r\n  ipAddress?: string;\r\n  userAgent?: string;\r\n  policy?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class AwsCloudFrontService {\r\n  private readonly logger = new Logger(AwsCloudFrontService.name);\r\n  private readonly s3Client: S3Client;\r\n  private readonly cloudFrontClient: CloudFrontClient;\r\n  private readonly config: CloudFrontConfig;\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    this.config = {\r\n      distributionId: this.configService.get<string>('AWS_CLOUDFRONT_DISTRIBUTION_ID'),\r\n      distributionDomain: this.configService.get<string>('AWS_CLOUDFRONT_DOMAIN'),\r\n      s3Bucket: this.configService.get<string>('AWS_S3_BUCKET'),\r\n      s3Region: this.configService.get<string>('AWS_S3_REGION', 'us-east-1'),\r\n      accessKeyId: this.configService.get<string>('AWS_ACCESS_KEY_ID'),\r\n      secretAccessKey: this.configService.get<string>('AWS_SECRET_ACCESS_KEY'),\r\n      signedUrlExpiry: this.configService.get<number>('AWS_SIGNED_URL_EXPIRY', 3600),\r\n      privateKeyId: this.configService.get<string>('AWS_CLOUDFRONT_PRIVATE_KEY_ID'),\r\n      privateKey: this.configService.get<string>('AWS_CLOUDFRONT_PRIVATE_KEY'),\r\n    };\r\n\r\n    this.s3Client = new S3Client({\r\n      region: this.config.s3Region,\r\n      credentials: {\r\n        accessKeyId: this.config.accessKeyId,\r\n        secretAccessKey: this.config.secretAccessKey,\r\n      },\r\n    });\r\n\r\n    this.cloudFrontClient = new CloudFrontClient({\r\n      region: this.config.s3Region,\r\n      credentials: {\r\n        accessKeyId: this.config.accessKeyId,\r\n        secretAccessKey: this.config.secretAccessKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  async uploadVideo(\r\n    buffer: Buffer,\r\n    key: string,\r\n    contentType: string = 'video/mp4',\r\n    metadata?: Record<string, string>,\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      this.logger.debug(`Uploading video to S3: ${key}`);\r\n\r\n      const command = new PutObjectCommand({\r\n        Bucket: this.config.s3Bucket,\r\n        Key: key,\r\n        Body: buffer,\r\n        ContentType: contentType,\r\n        Metadata: metadata,\r\n        ServerSideEncryption: 'AES256',\r\n        CacheControl: 'max-age=31536000', // 1 year\r\n      });\r\n\r\n      const result = await this.s3Client.send(command);\r\n      const s3Url = `https://${this.config.s3Bucket}.s3.${this.config.s3Region}.amazonaws.com/${key}`;\r\n      const cdnUrl = `https://${this.config.distributionDomain}/${key}`;\r\n\r\n      this.logger.debug(`Video uploaded successfully: ${key}`);\r\n\r\n      return {\r\n        key,\r\n        url: s3Url,\r\n        cdnUrl,\r\n        etag: result.ETag?.replace(/\"/g, '') || '',\r\n        size: buffer.length,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Failed to upload video: ${key}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async uploadVideoStream(\r\n    stream: NodeJS.ReadableStream,\r\n    key: string,\r\n    contentType: string = 'video/mp4',\r\n    contentLength?: number,\r\n    metadata?: Record<string, string>,\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      this.logger.debug(`Uploading video stream to S3: ${key}`);\r\n\r\n      const command = new PutObjectCommand({\r\n        Bucket: this.config.s3Bucket,\r\n        Key: key,\r\n        Body: stream,\r\n        ContentType: contentType,\r\n        ContentLength: contentLength,\r\n        Metadata: metadata,\r\n        ServerSideEncryption: 'AES256',\r\n        CacheControl: 'max-age=31536000',\r\n      });\r\n\r\n      const result = await this.s3Client.send(command);\r\n      const s3Url = `https://${this.config.s3Bucket}.s3.${this.config.s3Region}.amazonaws.com/${key}`;\r\n      const cdnUrl = `https://${this.config.distributionDomain}/${key}`;\r\n\r\n      this.logger.debug(`Video stream uploaded successfully: ${key}`);\r\n\r\n      return {\r\n        key,\r\n        url: s3Url,\r\n        cdnUrl,\r\n        etag: result.ETag?.replace(/\"/g, '') || '',\r\n        size: contentLength || 0,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Failed to upload video stream: ${key}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteVideo(key: string): Promise<void> {\r\n    try {\r\n      this.logger.debug(`Deleting video from S3: ${key}`);\r\n\r\n      const command = new DeleteObjectCommand({\r\n        Bucket: this.config.s3Bucket,\r\n        Key: key,\r\n      });\r\n\r\n      await this.s3Client.send(command);\r\n\r\n      // Invalidate CloudFront cache\r\n      await this.invalidateCache([key]);\r\n\r\n      this.logger.debug(`Video deleted successfully: ${key}`);\r\n    } catch (error) {\r\n      this.logger.error(`Failed to delete video: ${key}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVideoMetadata(key: string): Promise<{\r\n    contentLength: number;\r\n    contentType: string;\r\n    lastModified: Date;\r\n    etag: string;\r\n    metadata: Record<string, string>;\r\n  }> {\r\n    try {\r\n      const command = new HeadObjectCommand({\r\n        Bucket: this.config.s3Bucket,\r\n        Key: key,\r\n      });\r\n\r\n      const result = await this.s3Client.send(command);\r\n\r\n      return {\r\n        contentLength: result.ContentLength || 0,\r\n        contentType: result.ContentType || '',\r\n        lastModified: result.LastModified || new Date(),\r\n        etag: result.ETag?.replace(/\"/g, '') || '',\r\n        metadata: result.Metadata || {},\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Failed to get video metadata: ${key}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async generateSignedUrl(\r\n    key: string,\r\n    options: SignedUrlOptions = {},\r\n  ): Promise<string> {\r\n    try {\r\n      const expiresIn = options.expiresIn || this.config.signedUrlExpiry;\r\n\r\n      if (this.config.privateKey && this.config.privateKeyId) {\r\n        // Use CloudFront signed URLs for better security\r\n        return this.generateCloudFrontSignedUrl(key, expiresIn, options);\r\n      } else {\r\n        // Fallback to S3 signed URLs\r\n        return this.generateS3SignedUrl(key, expiresIn);\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(`Failed to generate signed URL: ${key}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async generateS3SignedUrl(key: string, expiresIn: number): Promise<string> {\r\n    const command = new GetObjectCommand({\r\n      Bucket: this.config.s3Bucket,\r\n      Key: key,\r\n    });\r\n\r\n    return getSignedUrl(this.s3Client, command, { expiresIn });\r\n  }\r\n\r\n  private generateCloudFrontSignedUrl(\r\n    key: string,\r\n    expiresIn: number,\r\n    options: SignedUrlOptions,\r\n  ): string {\r\n    const url = `https://${this.config.distributionDomain}/${key}`;\r\n    const expiration = Math.floor(Date.now() / 1000) + expiresIn;\r\n\r\n    // Create policy\r\n    const policy = options.policy || {\r\n      Statement: [\r\n        {\r\n          Resource: url,\r\n          Condition: {\r\n            DateLessThan: {\r\n              'AWS:EpochTime': expiration,\r\n            },\r\n            ...(options.ipAddress && {\r\n              IpAddress: {\r\n                'AWS:SourceIp': options.ipAddress,\r\n              },\r\n            }),\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n    const policyString = JSON.stringify(policy);\r\n    const policyBase64 = Buffer.from(policyString).toString('base64');\r\n\r\n    // Create signature\r\n    const signature = crypto\r\n      .createSign('RSA-SHA1')\r\n      .update(policyString)\r\n      .sign(this.config.privateKey, 'base64');\r\n\r\n    // URL-safe base64 encoding\r\n    const urlSafePolicy = policyBase64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n    const urlSafeSignature = signature.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n\r\n    return `${url}?Policy=${urlSafePolicy}&Signature=${urlSafeSignature}&Key-Pair-Id=${this.config.privateKeyId}`;\r\n  }\r\n\r\n  async invalidateCache(paths: string[]): Promise<void> {\r\n    try {\r\n      if (!this.config.distributionId) {\r\n        this.logger.warn('CloudFront distribution ID not configured, skipping cache invalidation');\r\n        return;\r\n      }\r\n\r\n      this.logger.debug(`Invalidating CloudFront cache for paths: ${paths.join(', ')}`);\r\n\r\n      const command = new CreateInvalidationCommand({\r\n        DistributionId: this.config.distributionId,\r\n        InvalidationBatch: {\r\n          Paths: {\r\n            Quantity: paths.length,\r\n            Items: paths.map(path => `/${path}`),\r\n          },\r\n          CallerReference: `invalidation-${Date.now()}`,\r\n        },\r\n      });\r\n\r\n      const result = await this.cloudFrontClient.send(command);\r\n\r\n      this.logger.debug(`Cache invalidation created: ${result.Invalidation?.Id}`);\r\n    } catch (error) {\r\n      this.logger.error('Failed to invalidate CloudFront cache', error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getDistributionInfo(): Promise<any> {\r\n    try {\r\n      if (!this.config.distributionId) {\r\n        throw new Error('CloudFront distribution ID not configured');\r\n      }\r\n\r\n      const command = new GetDistributionCommand({\r\n        Id: this.config.distributionId,\r\n      });\r\n\r\n      const result = await this.cloudFrontClient.send(command);\r\n      return result.Distribution;\r\n    } catch (error) {\r\n      this.logger.error('Failed to get distribution info', error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  generateVideoKey(\r\n    videoId: string,\r\n    quality?: string,\r\n    format: string = 'mp4',\r\n  ): string {\r\n    const timestamp = Date.now();\r\n    const qualityPrefix = quality ? `${quality}/` : '';\r\n    return `videos/${videoId}/${qualityPrefix}${timestamp}.${format}`;\r\n  }\r\n\r\n  generateThumbnailKey(videoId: string, index: number = 0): string {\r\n    return `videos/${videoId}/thumbnails/thumb_${index.toString().padStart(3, '0')}.jpg`;\r\n  }\r\n\r\n  generateManifestKey(videoId: string, type: 'hls' | 'dash'): string {\r\n    const extension = type === 'hls' ? 'm3u8' : 'mpd';\r\n    return `videos/${videoId}/manifests/playlist.${extension}`;\r\n  }\r\n\r\n  isConfigured(): boolean {\r\n    return !!(\r\n      this.config.distributionDomain &&\r\n      this.config.s3Bucket &&\r\n      this.config.accessKeyId &&\r\n      this.config.secretAccessKey\r\n    );\r\n  }\r\n}\r\n"],"version":3}