d8f94618e09524cd771c403c3efef918
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataQualitySeverity = exports.DataQualityRuleType = exports.DATA_QUALITY_ENTITY_KEY = exports.DATA_QUALITY_RULES_KEY = void 0;
exports.DataQualityRule = DataQualityRule;
exports.DataQualityEntity = DataQualityEntity;
exports.RequiredField = RequiredField;
exports.OptionalField = OptionalField;
exports.ValidEmail = ValidEmail;
exports.ValidString = ValidString;
exports.ValidNumber = ValidNumber;
exports.ValidDate = ValidDate;
exports.ValidUUID = ValidUUID;
exports.ValidBoolean = ValidBoolean;
exports.ValidPattern = ValidPattern;
exports.ValidEnum = ValidEnum;
exports.UniqueField = UniqueField;
exports.TimelyField = TimelyField;
exports.ConsistentWith = ConsistentWith;
exports.ValidNested = ValidNested;
exports.ValidPhoneNumber = ValidPhoneNumber;
exports.ValidURL = ValidURL;
exports.ValidCreditCard = ValidCreditCard;
exports.ValidSSN = ValidSSN;
exports.ValidIPAddress = ValidIPAddress;
const common_1 = require("@nestjs/common");
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
// Metadata keys for data quality rules
exports.DATA_QUALITY_RULES_KEY = 'data_quality_rules';
exports.DATA_QUALITY_ENTITY_KEY = 'data_quality_entity';
// Data quality rule types
var DataQualityRuleType;
(function (DataQualityRuleType) {
    DataQualityRuleType["COMPLETENESS"] = "completeness";
    DataQualityRuleType["ACCURACY"] = "accuracy";
    DataQualityRuleType["CONSISTENCY"] = "consistency";
    DataQualityRuleType["VALIDITY"] = "validity";
    DataQualityRuleType["UNIQUENESS"] = "uniqueness";
    DataQualityRuleType["TIMELINESS"] = "timeliness";
    DataQualityRuleType["CONFORMITY"] = "conformity";
})(DataQualityRuleType || (exports.DataQualityRuleType = DataQualityRuleType = {}));
// Data quality severity levels
var DataQualitySeverity;
(function (DataQualitySeverity) {
    DataQualitySeverity["LOW"] = "low";
    DataQualitySeverity["MEDIUM"] = "medium";
    DataQualitySeverity["HIGH"] = "high";
    DataQualitySeverity["CRITICAL"] = "critical";
})(DataQualitySeverity || (exports.DataQualitySeverity = DataQualitySeverity = {}));
// Base decorator for data quality rules
function DataQualityRule(metadata) {
    return (0, common_1.SetMetadata)(exports.DATA_QUALITY_RULES_KEY, metadata);
}
// Mark entity for data quality monitoring
function DataQualityEntity(entityType) {
    return (0, common_1.SetMetadata)(exports.DATA_QUALITY_ENTITY_KEY, entityType);
}
// Completeness decorators
function RequiredField(message, severity = DataQualitySeverity.HIGH) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsNotEmpty)({ message: message || 'Field is required' }), DataQualityRule({
        ruleType: DataQualityRuleType.COMPLETENESS,
        severity,
        threshold: 100,
        message: message || 'Field must not be empty',
    }));
}
function OptionalField() {
    return (0, class_validator_1.IsOptional)();
}
// Accuracy decorators
function ValidEmail(severity = DataQualitySeverity.HIGH) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsEmail)({}, { message: 'Must be a valid email address' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'Email format is invalid',
    }));
}
function ValidString(minLength, maxLength, severity = DataQualitySeverity.MEDIUM) {
    const decorators = [
        (0, class_validator_1.IsString)({ message: 'Must be a string' }),
        DataQualityRule({
            ruleType: DataQualityRuleType.ACCURACY,
            severity,
            threshold: 100,
            message: 'String format is invalid',
        })
    ];
    if (minLength !== undefined || maxLength !== undefined) {
        decorators.push((0, class_validator_1.Length)(minLength || 0, maxLength || 1000, {
            message: `String length must be between ${minLength || 0} and ${maxLength || 1000} characters`
        }));
    }
    return (0, common_1.applyDecorators)(...decorators);
}
function ValidNumber(min, max, severity = DataQualitySeverity.MEDIUM) {
    const decorators = [
        (0, class_validator_1.IsNumber)({}, { message: 'Must be a number' }),
        DataQualityRule({
            ruleType: DataQualityRuleType.ACCURACY,
            severity,
            threshold: 100,
            message: 'Number format is invalid',
        })
    ];
    if (min !== undefined) {
        decorators.push((0, class_validator_1.Min)(min, { message: `Number must be at least ${min}` }));
    }
    if (max !== undefined) {
        decorators.push((0, class_validator_1.Max)(max, { message: `Number must not exceed ${max}` }));
    }
    return (0, common_1.applyDecorators)(...decorators);
}
function ValidDate(severity = DataQualitySeverity.MEDIUM) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsDate)({ message: 'Must be a valid date' }), (0, class_transformer_1.Type)(() => Date), (0, class_transformer_1.Transform)(({ value }) => value instanceof Date ? value : new Date(value)), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'Date format is invalid',
    }));
}
function ValidUUID(severity = DataQualitySeverity.HIGH) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsUUID)('4', { message: 'Must be a valid UUID' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'UUID format is invalid',
    }));
}
function ValidBoolean(severity = DataQualitySeverity.LOW) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsBoolean)({ message: 'Must be a boolean value' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'Boolean format is invalid',
    }));
}
// Pattern matching decorator
function ValidPattern(pattern, message, severity = DataQualitySeverity.MEDIUM) {
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(pattern, { message: message || 'Does not match required pattern' }), DataQualityRule({
        ruleType: DataQualityRuleType.CONFORMITY,
        severity,
        threshold: 100,
        message: message || 'Pattern validation failed',
        conditions: { pattern: pattern.source },
    }));
}
// Enum validation decorator
function ValidEnum(enumObject, severity = DataQualitySeverity.MEDIUM) {
    return (0, common_1.applyDecorators)((0, class_validator_1.IsEnum)(enumObject, { message: 'Must be a valid enum value' }), DataQualityRule({
        ruleType: DataQualityRuleType.VALIDITY,
        severity,
        threshold: 100,
        message: 'Enum validation failed',
        conditions: { allowedValues: Object.values(enumObject) },
    }));
}
// Uniqueness decorator (for use with custom validation)
function UniqueField(scope, severity = DataQualitySeverity.HIGH) {
    return DataQualityRule({
        ruleType: DataQualityRuleType.UNIQUENESS,
        severity,
        threshold: 100,
        message: 'Field value must be unique',
        conditions: { scope: scope || [] },
    });
}
// Timeliness decorator
function TimelyField(maxAgeHours, severity = DataQualitySeverity.MEDIUM) {
    return DataQualityRule({
        ruleType: DataQualityRuleType.TIMELINESS,
        severity,
        threshold: 100,
        message: `Field value is too old (max age: ${maxAgeHours} hours)`,
        conditions: { maxAge: maxAgeHours },
    });
}
// Consistency decorators
function ConsistentWith(relatedField, operator = 'equals', severity = DataQualitySeverity.MEDIUM) {
    return DataQualityRule({
        ruleType: DataQualityRuleType.CONSISTENCY,
        severity,
        threshold: 100,
        message: `Field must be consistent with ${relatedField}`,
        conditions: {
            rules: [{
                    field1: 'current_field',
                    field2: relatedField,
                    operator,
                }],
        },
    });
}
// Nested object validation
function ValidNested(severity = DataQualitySeverity.MEDIUM) {
    return (0, common_1.applyDecorators)((0, class_validator_1.ValidateNested)(), DataQualityRule({
        ruleType: DataQualityRuleType.CONFORMITY,
        severity,
        threshold: 100,
        message: 'Nested object validation failed',
    }));
}
// Phone number validation
function ValidPhoneNumber(severity = DataQualitySeverity.MEDIUM) {
    const phonePattern = /^[\+]?[1-9][\d]{0,15}$/;
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(phonePattern, { message: 'Must be a valid phone number' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'Phone number format is invalid',
        conditions: { pattern: phonePattern.source },
    }));
}
// URL validation
function ValidURL(severity = DataQualitySeverity.MEDIUM) {
    const urlPattern = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/;
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(urlPattern, { message: 'Must be a valid URL' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'URL format is invalid',
        conditions: { pattern: urlPattern.source },
    }));
}
// Credit card validation
function ValidCreditCard(severity = DataQualitySeverity.HIGH) {
    const ccPattern = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3[0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})$/;
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(ccPattern, { message: 'Must be a valid credit card number' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'Credit card format is invalid',
        conditions: { pattern: ccPattern.source },
    }));
}
// Social Security Number validation (US format)
function ValidSSN(severity = DataQualitySeverity.CRITICAL) {
    const ssnPattern = /^(?!666|000|9\\d{2})\\d{3}-(?!00)\\d{2}-(?!0{4})\\d{4}$/;
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(ssnPattern, { message: 'Must be a valid SSN format (XXX-XX-XXXX)' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'SSN format is invalid',
        conditions: { pattern: ssnPattern.source },
    }));
}
// IP Address validation
function ValidIPAddress(severity = DataQualitySeverity.MEDIUM) {
    const ipPattern = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return (0, common_1.applyDecorators)((0, class_validator_1.Matches)(ipPattern, { message: 'Must be a valid IP address' }), DataQualityRule({
        ruleType: DataQualityRuleType.ACCURACY,
        severity,
        threshold: 100,
        message: 'IP address format is invalid',
        conditions: { pattern: ipPattern.source },
    }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,