{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email-verification\\email-verification.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email-verification\\email-verification.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\r\nimport { EmailVerificationService } from './email-verification.service';\r\nimport { User } from '../entities/user.entity';\r\nimport { EmailService } from '../email/email.service';\r\n\r\ndescribe('EmailVerificationService', () => {\r\n  let service: EmailVerificationService;\r\n  let userRepository: Repository<User>;\r\n  let emailService: EmailService;\r\n\r\n  const mockUser = {\r\n    id: '123',\r\n    email: 'test@example.com',\r\n    isEmailVerified: false,\r\n    emailVerificationToken: null,\r\n    emailVerificationTokenExpiry: null,\r\n  };\r\n\r\n  const mockUserRepository = {\r\n    findOne: jest.fn(),\r\n    update: jest.fn(),\r\n  };\r\n\r\n  const mockEmailService = {\r\n    sendVerificationEmail: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        EmailVerificationService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: mockUserRepository,\r\n        },\r\n        {\r\n          provide: EmailService,\r\n          useValue: mockEmailService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<EmailVerificationService>(EmailVerificationService);\r\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\r\n    emailService = module.get<EmailService>(EmailService);\r\n  });\r\n\r\n  describe('sendVerificationEmail', () => {\r\n    it('should send verification email for valid user', async () => {\r\n      mockUserRepository.findOne.mockResolvedValue(mockUser);\r\n      mockUserRepository.update.mockResolvedValue({});\r\n      mockEmailService.sendVerificationEmail.mockResolvedValue(undefined);\r\n\r\n      const result = await service.sendVerificationEmail('test@example.com');\r\n\r\n      expect(result.message).toBe('Verification email sent successfully');\r\n      expect(mockEmailService.sendVerificationEmail).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException for non-existent user', async () => {\r\n      mockUserRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.sendVerificationEmail('test@example.com'))\r\n        .rejects.toThrow(NotFoundException);\r\n    });\r\n\r\n    it('should throw BadRequestException for already verified email', async () => {\r\n      mockUserRepository.findOne.mockResolvedValue({\r\n        ...mockUser,\r\n        isEmailVerified: true,\r\n      });\r\n\r\n      await expect(service.sendVerificationEmail('test@example.com'))\r\n        .rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('verifyEmail', () => {\r\n    it('should verify email with valid token', async () => {\r\n      const mockUserWithToken = {\r\n        ...mockUser,\r\n        emailVerificationToken: 'valid-token',\r\n        emailVerificationTokenExpiry: new Date(Date.now() + 24 * 60 * 60 * 1000),\r\n      };\r\n\r\n      mockUserRepository.findOne.mockResolvedValue(mockUserWithToken);\r\n      mockUserRepository.update.mockResolvedValue({});\r\n\r\n      const result = await service.verifyEmail('valid-token');\r\n\r\n      expect(result.message).toBe('Email verified successfully');\r\n      expect(result.user.isEmailVerified).toBe(true);\r\n    });\r\n\r\n    it('should throw BadRequestException for invalid token', async () => {\r\n      mockUserRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.verifyEmail('invalid-token'))\r\n        .rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw BadRequestException for expired token', async () => {\r\n      const mockUserWithExpiredToken = {\r\n        ...mockUser,\r\n        emailVerificationToken: 'expired-token',\r\n        emailVerificationTokenExpiry: new Date(Date.now() - 1000),\r\n      };\r\n\r\n      mockUserRepository.findOne.mockResolvedValue(mockUserWithExpiredToken);\r\n\r\n      await expect(service.verifyEmail('expired-token'))\r\n        .rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n});\r\n"],"version":3}