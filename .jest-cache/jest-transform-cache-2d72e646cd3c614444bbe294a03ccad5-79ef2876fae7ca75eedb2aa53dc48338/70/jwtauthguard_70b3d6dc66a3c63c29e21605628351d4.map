{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\guards\\jwt-auth.guard.ts","mappings":";;;;;;;;;;;;;AAAA,sCAAsC;AACtC,2CAAqF;AACrF,+CAA6C;AAC7C,qCAAyC;AACzC,uCAAyC;AACzC,qEAA+D;AAC/D,qEAAiE;AAG1D,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,IAAA,oBAAS,EAAC,KAAK,CAAC;IAChD,YACU,UAAsB,EACtB,SAAoB,EACpB,YAA0B;QAElC,KAAK,EAAE,CAAC;QAJA,eAAU,GAAV,UAAU,CAAY;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,iBAAY,GAAZ,YAAY,CAAc;IAGpC,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAyB;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAU,gCAAa,EAAE;YACxE,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,CAAC;QAEH,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,6BAA6B;QAC7B,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,UAAU,GAAG,OAAO,EAAE,OAAO,EAAE,aAAa,CAAC;QACnD,MAAM,KAAK,GAAG,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,KAAK,IAAI,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/D,MAAM,IAAI,8BAAqB,CAAC,sBAAsB,CAAC,CAAC;QAC1D,CAAC;QAED,uCAAuC;QACvC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,aAAa,CAAC,GAAQ,EAAE,IAAS,EAAE,IAAS;QAC1C,IAAI,IAAI,EAAE,IAAI,KAAK,mBAAmB,EAAE,CAAC;YACvC,MAAM,IAAI,8BAAqB,CAAC,mBAAmB,CAAC,CAAC;QACvD,CAAC;QACD,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,IAAI,8BAAqB,CAAC,eAAe,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAzCY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;yDAGW,gBAAU,oBAAV,gBAAU,oDACX,gBAAS,oBAAT,gBAAS,oDACN,4BAAY,oBAAZ,4BAAY;GAJzB,YAAY,CAyCxB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\guards\\jwt-auth.guard.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, ExecutionContext, UnauthorizedException } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\r\nimport { RedisService } from 'src/shared/services/redis.service';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private reflector: Reflector,\r\n    private redisService: RedisService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n\r\n    if (isPublic) {\r\n      return true;\r\n    }\r\n\r\n    // Extract token from request\r\n    const request = context.switchToHttp().getRequest();\r\n    const authHeader = request?.headers?.authorization;\r\n    const token = authHeader?.split(' ')[1];\r\n    if (token && await this.redisService.isTokenBlacklisted(token)) {\r\n      throw new UnauthorizedException('Token is blacklisted');\r\n    }\r\n\r\n    // Await and cast the result to boolean\r\n    const result = await super.canActivate(context);\r\n    return !!result;\r\n  }\r\n\r\n  handleRequest(err: any, user: any, info: any) {\r\n    if (info?.name === 'TokenExpiredError') {\r\n      throw new UnauthorizedException('Token has expired');\r\n    }\r\n    if (err || !user) {\r\n      throw new UnauthorizedException('Invalid token');\r\n    }\r\n    return user;\r\n  }\r\n}\r\n"],"version":3}