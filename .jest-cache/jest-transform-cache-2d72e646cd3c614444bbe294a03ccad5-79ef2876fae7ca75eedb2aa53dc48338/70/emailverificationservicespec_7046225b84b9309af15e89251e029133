3581ffa254c0877c9bdbd4cee56c7096
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const common_1 = require("@nestjs/common");
const email_verification_service_1 = require("./email-verification.service");
const user_entity_1 = require("../entities/user.entity");
const email_service_1 = require("../email/email.service");
describe('EmailVerificationService', () => {
    let service;
    let userRepository;
    let emailService;
    const mockUser = {
        id: '123',
        email: 'test@example.com',
        isEmailVerified: false,
        emailVerificationToken: null,
        emailVerificationTokenExpiry: null,
    };
    const mockUserRepository = {
        findOne: jest.fn(),
        update: jest.fn(),
    };
    const mockEmailService = {
        sendVerificationEmail: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_verification_service_1.EmailVerificationService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: mockUserRepository,
                },
                {
                    provide: email_service_1.EmailService,
                    useValue: mockEmailService,
                },
            ],
        }).compile();
        service = module.get(email_verification_service_1.EmailVerificationService);
        userRepository = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
        emailService = module.get(email_service_1.EmailService);
    });
    describe('sendVerificationEmail', () => {
        it('should send verification email for valid user', async () => {
            mockUserRepository.findOne.mockResolvedValue(mockUser);
            mockUserRepository.update.mockResolvedValue({});
            mockEmailService.sendVerificationEmail.mockResolvedValue(undefined);
            const result = await service.sendVerificationEmail('test@example.com');
            expect(result.message).toBe('Verification email sent successfully');
            expect(mockEmailService.sendVerificationEmail).toHaveBeenCalled();
        });
        it('should throw NotFoundException for non-existent user', async () => {
            mockUserRepository.findOne.mockResolvedValue(null);
            await expect(service.sendVerificationEmail('test@example.com'))
                .rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw BadRequestException for already verified email', async () => {
            mockUserRepository.findOne.mockResolvedValue({
                ...mockUser,
                isEmailVerified: true,
            });
            await expect(service.sendVerificationEmail('test@example.com'))
                .rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('verifyEmail', () => {
        it('should verify email with valid token', async () => {
            const mockUserWithToken = {
                ...mockUser,
                emailVerificationToken: 'valid-token',
                emailVerificationTokenExpiry: new Date(Date.now() + 24 * 60 * 60 * 1000),
            };
            mockUserRepository.findOne.mockResolvedValue(mockUserWithToken);
            mockUserRepository.update.mockResolvedValue({});
            const result = await service.verifyEmail('valid-token');
            expect(result.message).toBe('Email verified successfully');
            expect(result.user.isEmailVerified).toBe(true);
        });
        it('should throw BadRequestException for invalid token', async () => {
            mockUserRepository.findOne.mockResolvedValue(null);
            await expect(service.verifyEmail('invalid-token'))
                .rejects.toThrow(common_1.BadRequestException);
        });
        it('should throw BadRequestException for expired token', async () => {
            const mockUserWithExpiredToken = {
                ...mockUser,
                emailVerificationToken: 'expired-token',
                emailVerificationTokenExpiry: new Date(Date.now() - 1000),
            };
            mockUserRepository.findOne.mockResolvedValue(mockUserWithExpiredToken);
            await expect(service.verifyEmail('expired-token'))
                .rejects.toThrow(common_1.BadRequestException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,