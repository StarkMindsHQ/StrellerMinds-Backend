e607c034a376f9133f5795490750fdc5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../auth/guards/jwt-auth.guard");
const optional_jwt_auth_guard_1 = require("../auth/guards/optional-jwt-auth.guard");
const roles_guard_1 = require("../auth/guards/roles.guard");
const roles_decorator_1 = require("../auth/decorators/roles.decorator");
const search_analytics_interceptor_1 = require("./interceptors/search-analytics.interceptor");
const cache_manager_1 = require("@nestjs/cache-manager");
let SearchController = class SearchController {
    constructor(searchService) {
        this.searchService = searchService;
    }
    async search(searchDto, req) {
        const userId = req.user?.["id"];
        return this.searchService.search(searchDto, userId);
    }
    async advancedSearch(filterDto, req) {
        const userId = req.user?.["id"];
        return this.searchService.advancedSearch(filterDto, userId);
    }
    async facetedSearch(facetDto, req) {
        const userId = req.user?.["id"];
        return this.searchService.facetedSearch(facetDto, userId);
    }
    async semanticSearch(semanticDto, req) {
        const userId = req.user?.["id"];
        return this.searchService.semanticSearch(semanticDto, userId);
    }
    async getSuggestions(suggestionDto) {
        return this.searchService.getSuggestions(suggestionDto);
    }
    async getRecommendations(recommendationDto, req) {
        const userId = req.user["id"];
        return this.searchService.getRecommendations(recommendationDto, userId);
    }
    async exportSearchResults(exportDto, req) {
        const userId = req.user["id"];
        return this.searchService.exportSearchResults(exportDto, userId);
    }
    async saveSearchFilter(saveFilterDto, req) {
        const userId = req.user["id"];
        return this.searchService.saveSearchFilter(userId, saveFilterDto.name, saveFilterDto.filterData);
    }
    async getUserSearchFilters(req) {
        const userId = req.user["id"];
        return this.searchService.getUserSearchFilters(userId);
    }
    async deleteSearchFilter(filterId, req) {
        // Implementation would be added to service
        return { success: true };
    }
    async getSearchAnalytics(req, startDate, endDate, userId) {
        const params = {};
        if (startDate) {
            const parsedStartDate = new Date(startDate);
            if (isNaN(parsedStartDate.getTime())) {
                throw new common_1.BadRequestException("Invalid start date format");
            }
            params.startDate = parsedStartDate;
        }
        if (endDate) {
            const parsedEndDate = new Date(endDate);
            if (isNaN(parsedEndDate.getTime())) {
                throw new common_1.BadRequestException("Invalid end date format");
            }
            params.endDate = parsedEndDate;
        }
        if (userId) {
            params.userId = userId;
        }
        return this.searchService.getSearchAnalytics(params);
    }
    async getPopularSearchTerms(limit) {
        return this.searchService.getPopularSearchTerms(limit);
    }
    async trackSearchClick(searchId, courseId, req) {
        await this.searchService.trackSearchClick(searchId, courseId);
        return { success: true };
    }
    async getTrendingTopics() {
        // Implementation would analyze recent search patterns
        return { trending: [] };
    }
    async getAutocomplete(query) {
        return this.searchService.getSuggestions({ query, limit: 10 });
    }
    async submitSearchFeedback(feedbackDto, req) {
        // Implementation would save feedback for search improvement
        return { success: true };
    }
    async getSearchHistory(req) {
        const userId = req.user["id"];
        return this.searchService.getSearchAnalytics({ userId, limit: 50 });
    }
    async clearSearchHistory(req) {
        // Implementation would clear user's search history
        return { success: true };
    }
};
exports.SearchController = SearchController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(optional_jwt_auth_guard_1.OptionalJwtAuthGuard),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Perform full-text search" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Search results returned successfully" }),
    (0, swagger_1.ApiResponse)({ status: 400, description: "Invalid search parameters" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], SearchController.prototype, "search", null);
__decorate([
    (0, common_1.Post)("advanced"),
    (0, common_1.UseGuards)(optional_jwt_auth_guard_1.OptionalJwtAuthGuard),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Perform advanced search with filters" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Advanced search results returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], SearchController.prototype, "advancedSearch", null);
__decorate([
    (0, common_1.Post)("faceted"),
    (0, common_1.UseGuards)(optional_jwt_auth_guard_1.OptionalJwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Perform faceted search" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Faceted search results returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "facetedSearch", null);
__decorate([
    (0, common_1.Post)("semantic"),
    (0, common_1.UseGuards)(optional_jwt_auth_guard_1.OptionalJwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Perform semantic search using AI embeddings" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Semantic search results returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], SearchController.prototype, "semanticSearch", null);
__decorate([
    (0, common_1.Get)("suggestions"),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Get search suggestions" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Search suggestions returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], SearchController.prototype, "getSuggestions", null);
__decorate([
    (0, common_1.Post)("recommendations"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Get personalized course recommendations" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Recommendations returned successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], SearchController.prototype, "getRecommendations", null);
__decorate([
    (0, common_1.Post)("export"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Export search results" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Export initiated successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], SearchController.prototype, "exportSearchResults", null);
__decorate([
    (0, common_1.Post)("filters"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Save search filter" }),
    (0, swagger_1.ApiResponse)({ status: 201, description: "Filter saved successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "saveSearchFilter", null);
__decorate([
    (0, common_1.Get)("filters"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Get user saved filters" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Filters returned successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "getUserSearchFilters", null);
__decorate([
    (0, common_1.Delete)("filters/:filterId"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Delete saved filter" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Filter deleted successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "deleteSearchFilter", null);
__decorate([
    (0, common_1.Get)("analytics"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)("admin", "instructor"),
    (0, swagger_1.ApiOperation)({ summary: "Get search analytics" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Analytics returned successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiQuery)({ name: "startDate", required: false, type: String }),
    (0, swagger_1.ApiQuery)({ name: "endDate", required: false, type: String }),
    (0, swagger_1.ApiQuery)({ name: "userId", required: false, type: String }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, String, String]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], SearchController.prototype, "getSearchAnalytics", null);
__decorate([
    (0, common_1.Get)("popular-terms"),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Get popular search terms" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Popular terms returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "getPopularSearchTerms", null);
__decorate([
    (0, common_1.Post)("track-click"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Track search result click" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Click tracked successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "trackSearchClick", null);
__decorate([
    (0, common_1.Get)("trending"),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Get trending search topics" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Trending topics returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "getTrendingTopics", null);
__decorate([
    (0, common_1.Get)("autocomplete/:query"),
    (0, common_1.UseInterceptors)(cache_manager_1.CacheInterceptor),
    (0, swagger_1.ApiOperation)({ summary: "Get autocomplete suggestions" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Autocomplete suggestions returned successfully" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "getAutocomplete", null);
__decorate([
    (0, common_1.Post)("feedback"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Submit search feedback" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Feedback submitted successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "submitSearchFeedback", null);
__decorate([
    (0, common_1.Get)("history"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Get user search history" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Search history returned successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "getSearchHistory", null);
__decorate([
    (0, common_1.Delete)("history"),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: "Clear user search history" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Search history cleared successfully" }),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SearchController.prototype, "clearSearchHistory", null);
exports.SearchController = SearchController = __decorate([
    (0, swagger_1.ApiTags)("Search"),
    (0, common_1.Controller)("search"),
    (0, common_1.UseInterceptors)(search_analytics_interceptor_1.SearchAnalyticsInterceptor),
    __metadata("design:paramtypes", [Object])
], SearchController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzZWFyY2hcXHNlYXJjaC5jb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBK0c7QUFDL0csNkNBQTZGO0FBRTdGLGtFQUE0RDtBQUM1RCxvRkFBNkU7QUFDN0UsNERBQXVEO0FBQ3ZELHdFQUEwRDtBQUMxRCw4RkFBd0Y7QUFDeEYseURBQXdEO0FBZWpELElBQU0sZ0JBQWdCLEdBQXRCLE1BQU0sZ0JBQWdCO0lBQzNCLFlBQTZCLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQVF2RCxBQUFOLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBb0IsRUFBRSxHQUFZO1FBQzdDLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBT0ssQUFBTixLQUFLLENBQUMsY0FBYyxDQUFDLFNBQTRCLEVBQUUsR0FBWTtRQUM3RCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQU1LLEFBQU4sS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUEwQixFQUFFLEdBQVk7UUFDMUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNELENBQUM7SUFNSyxBQUFOLEtBQUssQ0FBQyxjQUFjLENBQUMsV0FB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Q3RELElBQUEscUJBQVcsRUFBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLHFDQUFxQyxFQUFFLENBQUM7SUFDaEYsSUFBQSx1QkFBYSxHQUFFOzs7OzBEQUlmOzJCQTNNVSxnQkFBZ0I7SUFINUIsSUFBQSxpQkFBTyxFQUFDLFFBQVEsQ0FBQztJQUNqQixJQUFBLG1CQUFVLEVBQUMsUUFBUSxDQUFDO0lBQ3BCLElBQUEsd0JBQWUsRUFBQyx5REFBMEIsQ0FBQzs7R0FDL0IsZ0JBQWdCLENBNE01QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXHNlYXJjaFxcc2VhcmNoLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbGxlciwgR2V0LCBQb3N0LCBEZWxldGUsIFVzZUd1YXJkcywgVXNlSW50ZXJjZXB0b3JzLCBCYWRSZXF1ZXN0RXhjZXB0aW9uIH0gZnJvbSBcIkBuZXN0anMvY29tbW9uXCJcclxuaW1wb3J0IHsgQXBpVGFncywgQXBpT3BlcmF0aW9uLCBBcGlSZXNwb25zZSwgQXBpQmVhcmVyQXV0aCwgQXBpUXVlcnkgfSBmcm9tIFwiQG5lc3Rqcy9zd2FnZ2VyXCJcclxuaW1wb3J0IHR5cGUgeyBSZXF1ZXN0IH0gZnJvbSBcImV4cHJlc3NcIlxyXG5pbXBvcnQgeyBKd3RBdXRoR3VhcmQgfSBmcm9tIFwiLi4vYXV0aC9ndWFyZHMvand0LWF1dGguZ3VhcmRcIlxyXG5pbXBvcnQgeyBPcHRpb25hbEp3dEF1dGhHdWFyZCB9IGZyb20gXCIuLi9hdXRoL2d1YXJkcy9vcHRpb25hbC1qd3QtYXV0aC5ndWFyZFwiXHJcbmltcG9ydCB7IFJvbGVzR3VhcmQgfSBmcm9tIFwiLi4vYXV0aC9ndWFyZHMvcm9sZXMuZ3VhcmRcIlxyXG5pbXBvcnQgeyBSb2xlcyB9IGZyb20gXCIuLi9hdXRoL2RlY29yYXRvcnMvcm9sZXMuZGVjb3JhdG9yXCJcclxuaW1wb3J0IHsgU2VhcmNoQW5hbHl0aWNzSW50ZXJjZXB0b3IgfSBmcm9tIFwiLi9pbnRlcmNlcHRvcnMvc2VhcmNoLWFuYWx5dGljcy5pbnRlcmNlcHRvclwiXHJcbmltcG9ydCB7IENhY2hlSW50ZXJjZXB0b3IgfSBmcm9tIFwiQG5lc3Rqcy9jYWNoZS1tYW5hZ2VyXCJcclxuaW1wb3J0IHR5cGUgeyBTZWFyY2hTZXJ2aWNlIH0gZnJvbSBcIi4vc2VhcmNoLnNlcnZpY2VcIlxyXG5pbXBvcnQgdHlwZSB7IFNlYXJjaER0byB9IGZyb20gXCIuL2R0by9zZWFyY2guZHRvXCJcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZEZpbHRlckR0byB9IGZyb20gXCIuL2R0by9hZHZhbmNlZC1maWx0ZXIuZHRvXCJcclxuaW1wb3J0IHR5cGUgeyBTZWFyY2hTdWdnZXN0aW9uRHRvIH0gZnJvbSBcIi4vZHRvL3NlYXJjaC1zdWdnZXN0aW9uLmR0b1wiXHJcbmltcG9ydCB0eXBlIHsgRmFjZXRlZFNlYXJjaER0byB9IGZyb20gXCIuL2R0by9mYWNldGVkLXNlYXJjaC5kdG9cIlxyXG5pbXBvcnQgdHlwZSB7IFNlbWFudGljU2VhcmNoRHRvIH0gZnJvbSBcIi4vZHRvL3NlbWFudGljLXNlYXJjaC5kdG9cIlxyXG5pbXBvcnQgdHlwZSB7IFNlYXJjaEV4cG9ydER0byB9IGZyb20gXCIuL2R0by9zZWFyY2gtZXhwb3J0LmR0b1wiXHJcbmltcG9ydCB0eXBlIHsgU2VhcmNoUmVjb21tZW5kYXRpb25EdG8gfSBmcm9tIFwiLi9kdG8vc2VhcmNoLXJlY29tbWVuZGF0aW9uLmR0b1wiXHJcbmltcG9ydCB0eXBlIHsgU2F2ZUZpbHRlckR0byB9IGZyb20gXCIuL2R0by9zYXZlLWZpbHRlci5kdG9cIlxyXG5pbXBvcnQgdHlwZSB7IFNlYXJjaFJlc3VsdCwgU2VhcmNoU3VnZ2VzdGlvbiwgU2VhcmNoQW5hbHl0aWNzUmVzdWx0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9zZWFyY2guaW50ZXJmYWNlXCJcclxuXHJcbkBBcGlUYWdzKFwiU2VhcmNoXCIpXHJcbkBDb250cm9sbGVyKFwic2VhcmNoXCIpXHJcbkBVc2VJbnRlcmNlcHRvcnMoU2VhcmNoQW5hbHl0aWNzSW50ZXJjZXB0b3IpXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UpIHt9XHJcblxyXG4gIEBQb3N0KClcclxuICBAVXNlR3VhcmRzKE9wdGlvbmFsSnd0QXV0aEd1YXJkKVxyXG4gIEBVc2VJbnRlcmNlcHRvcnMoQ2FjaGVJbnRlcmNlcHRvcilcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJQZXJmb3JtIGZ1bGwtdGV4dCBzZWFyY2hcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJTZWFyY2ggcmVzdWx0cyByZXR1cm5lZCBzdWNjZXNzZnVsbHlcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDAwLCBkZXNjcmlwdGlvbjogXCJJbnZhbGlkIHNlYXJjaCBwYXJhbWV0ZXJzXCIgfSlcclxuICBhc3luYyBzZWFyY2goc2VhcmNoRHRvOiBTZWFyY2hEdG8sIHJlcTogUmVxdWVzdCk6IFByb21pc2U8U2VhcmNoUmVzdWx0PiB7XHJcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uW1wiaWRcIl1cclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoKHNlYXJjaER0bywgdXNlcklkKVxyXG4gIH1cclxuXHJcbiAgQFBvc3QoXCJhZHZhbmNlZFwiKVxyXG4gIEBVc2VHdWFyZHMoT3B0aW9uYWxKd3RBdXRoR3VhcmQpXHJcbiAgQFVzZUludGVyY2VwdG9ycyhDYWNoZUludGVyY2VwdG9yKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIlBlcmZvcm0gYWR2YW5jZWQgc2VhcmNoIHdpdGggZmlsdGVyc1wiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIkFkdmFuY2VkIHNlYXJjaCByZXN1bHRzIHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgYXN5bmMgYWR2YW5jZWRTZWFyY2goZmlsdGVyRHRvOiBBZHZhbmNlZEZpbHRlckR0bywgcmVxOiBSZXF1ZXN0KTogUHJvbWlzZTxTZWFyY2hSZXN1bHQ+IHtcclxuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5bXCJpZFwiXVxyXG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5hZHZhbmNlZFNlYXJjaChmaWx0ZXJEdG8sIHVzZXJJZClcclxuICB9XHJcblxyXG4gIEBQb3N0KFwiZmFjZXRlZFwiKVxyXG4gIEBVc2VHdWFyZHMoT3B0aW9uYWxKd3RBdXRoR3VhcmQpXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6IFwiUGVyZm9ybSBmYWNldGVkIHNlYXJjaFwiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIkZhY2V0ZWQgc2VhcmNoIHJlc3VsdHMgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBhc3luYyBmYWNldGVkU2VhcmNoKGZhY2V0RHRvOiBGYWNldGVkU2VhcmNoRHRvLCByZXE6IFJlcXVlc3QpIHtcclxuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5bXCJpZFwiXVxyXG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5mYWNldGVkU2VhcmNoKGZhY2V0RHRvLCB1c2VySWQpXHJcbiAgfVxyXG5cclxuICBAUG9zdChcInNlbWFudGljXCIpXHJcbiAgQFVzZUd1YXJkcyhPcHRpb25hbEp3dEF1dGhHdWFyZClcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJQZXJmb3JtIHNlbWFudGljIHNlYXJjaCB1c2luZyBBSSBlbWJlZGRpbmdzXCIgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246IFwiU2VtYW50aWMgc2VhcmNoIHJlc3VsdHMgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBhc3luYyBzZW1hbnRpY1NlYXJjaChzZW1hbnRpY0R0bzogU2VtYW50aWNTZWFyY2hEdG8sIHJlcTogUmVxdWVzdCk6IFByb21pc2U8U2VhcmNoUmVzdWx0PiB7XHJcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uW1wiaWRcIl1cclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VtYW50aWNTZWFyY2goc2VtYW50aWNEdG8sIHVzZXJJZClcclxuICB9XHJcblxyXG4gIEBHZXQoXCJzdWdnZXN0aW9uc1wiKVxyXG4gIEBVc2VJbnRlcmNlcHRvcnMoQ2FjaGVJbnRlcmNlcHRvcilcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJHZXQgc2VhcmNoIHN1Z2dlc3Rpb25zXCIgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246IFwiU2VhcmNoIHN1Z2dlc3Rpb25zIHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgYXN5bmMgZ2V0U3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbkR0bzogU2VhcmNoU3VnZ2VzdGlvbkR0byk6IFByb21pc2U8eyBzdWdnZXN0aW9uczogU2VhcmNoU3VnZ2VzdGlvbltdIH0+IHtcclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2UuZ2V0U3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbkR0bylcclxuICB9XHJcblxyXG4gIEBQb3N0KFwicmVjb21tZW5kYXRpb25zXCIpXHJcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQpXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6IFwiR2V0IHBlcnNvbmFsaXplZCBjb3Vyc2UgcmVjb21tZW5kYXRpb25zXCIgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246IFwiUmVjb21tZW5kYXRpb25zIHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIGdldFJlY29tbWVuZGF0aW9ucyhyZWNvbW1lbmRhdGlvbkR0bzogU2VhcmNoUmVjb21tZW5kYXRpb25EdG8sIHJlcTogUmVxdWVzdCk6IFByb21pc2U8U2VhcmNoUmVzdWx0PiB7XHJcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcltcImlkXCJdXHJcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFJlY29tbWVuZGF0aW9ucyhyZWNvbW1lbmRhdGlvbkR0bywgdXNlcklkKVxyXG4gIH1cclxuXHJcbiAgQFBvc3QoXCJleHBvcnRcIilcclxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJFeHBvcnQgc2VhcmNoIHJlc3VsdHNcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJFeHBvcnQgaW5pdGlhdGVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIGV4cG9ydFNlYXJjaFJlc3VsdHMoZXhwb3J0RHRvOiBTZWFyY2hFeHBvcnREdG8sIHJlcTogUmVxdWVzdCk6IFByb21pc2U8eyBkb3dubG9hZFVybDogc3RyaW5nIH0+IHtcclxuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyW1wiaWRcIl1cclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2UuZXhwb3J0U2VhcmNoUmVzdWx0cyhleHBvcnREdG8sIHVzZXJJZClcclxuICB9XHJcblxyXG4gIEBQb3N0KFwiZmlsdGVyc1wiKVxyXG4gIEBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIlNhdmUgc2VhcmNoIGZpbHRlclwiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDEsIGRlc2NyaXB0aW9uOiBcIkZpbHRlciBzYXZlZCBzdWNjZXNzZnVsbHlcIiB9KVxyXG4gIEBBcGlCZWFyZXJBdXRoKClcclxuICBhc3luYyBzYXZlU2VhcmNoRmlsdGVyKHNhdmVGaWx0ZXJEdG86IFNhdmVGaWx0ZXJEdG8sIHJlcTogUmVxdWVzdCkge1xyXG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXJbXCJpZFwiXVxyXG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5zYXZlU2VhcmNoRmlsdGVyKHVzZXJJZCwgc2F2ZUZpbHRlckR0by5uYW1lLCBzYXZlRmlsdGVyRHRvLmZpbHRlckRhdGEpXHJcbiAgfVxyXG5cclxuICBAR2V0KFwiZmlsdGVyc1wiKVxyXG4gIEBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIkdldCB1c2VyIHNhdmVkIGZpbHRlcnNcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJGaWx0ZXJzIHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIGdldFVzZXJTZWFyY2hGaWx0ZXJzKHJlcTogUmVxdWVzdCkge1xyXG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXJbXCJpZFwiXVxyXG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5nZXRVc2VyU2VhcmNoRmlsdGVycyh1c2VySWQpXHJcbiAgfVxyXG5cclxuICBARGVsZXRlKFwiZmlsdGVycy86ZmlsdGVySWRcIilcclxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJEZWxldGUgc2F2ZWQgZmlsdGVyXCIgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246IFwiRmlsdGVyIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBAQXBpQmVhcmVyQXV0aCgpXHJcbiAgYXN5bmMgZGVsZXRlU2VhcmNoRmlsdGVyKGZpbHRlcklkOiBzdHJpbmcsIHJlcTogUmVxdWVzdCkge1xyXG4gICAgLy8gSW1wbGVtZW50YXRpb24gd291bGQgYmUgYWRkZWQgdG8gc2VydmljZVxyXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XHJcbiAgfVxyXG5cclxuICBAR2V0KFwiYW5hbHl0aWNzXCIpXHJcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQsIFJvbGVzR3VhcmQpXHJcbiAgQFJvbGVzKFwiYWRtaW5cIiwgXCJpbnN0cnVjdG9yXCIpXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6IFwiR2V0IHNlYXJjaCBhbmFseXRpY3NcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJBbmFseXRpY3MgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBAQXBpQmVhcmVyQXV0aCgpXHJcbiAgQEFwaVF1ZXJ5KHsgbmFtZTogXCJzdGFydERhdGVcIiwgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiBTdHJpbmcgfSlcclxuICBAQXBpUXVlcnkoeyBuYW1lOiBcImVuZERhdGVcIiwgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiBTdHJpbmcgfSlcclxuICBAQXBpUXVlcnkoeyBuYW1lOiBcInVzZXJJZFwiLCByZXF1aXJlZDogZmFsc2UsIHR5cGU6IFN0cmluZyB9KVxyXG4gIGFzeW5jIGdldFNlYXJjaEFuYWx5dGljcyhcclxuICAgIHJlcTogUmVxdWVzdCxcclxuICAgIHN0YXJ0RGF0ZT86IHN0cmluZyxcclxuICAgIGVuZERhdGU/OiBzdHJpbmcsXHJcbiAgICB1c2VySWQ/OiBzdHJpbmcsXHJcbiAgKTogUHJvbWlzZTxTZWFyY2hBbmFseXRpY3NSZXN1bHQ+IHtcclxuICAgIGNvbnN0IHBhcmFtczogYW55ID0ge31cclxuXHJcbiAgICBpZiAoc3RhcnREYXRlKSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlZFN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSlcclxuICAgICAgaWYgKGlzTmFOKHBhcnNlZFN0YXJ0RGF0ZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oXCJJbnZhbGlkIHN0YXJ0IGRhdGUgZm9ybWF0XCIpXHJcbiAgICAgIH1cclxuICAgICAgcGFyYW1zLnN0YXJ0RGF0ZSA9IHBhcnNlZFN0YXJ0RGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbmREYXRlKSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlZEVuZERhdGUgPSBuZXcgRGF0ZShlbmREYXRlKVxyXG4gICAgICBpZiAoaXNOYU4ocGFyc2VkRW5kRGF0ZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oXCJJbnZhbGlkIGVuZCBkYXRlIGZvcm1hdFwiKVxyXG4gICAgICB9XHJcbiAgICAgIHBhcmFtcy5lbmREYXRlID0gcGFyc2VkRW5kRGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1c2VySWQpIHtcclxuICAgICAgcGFyYW1zLnVzZXJJZCA9IHVzZXJJZFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2UuZ2V0U2VhcmNoQW5hbHl0aWNzKHBhcmFtcylcclxuICB9XHJcblxyXG4gIEBHZXQoXCJwb3B1bGFyLXRlcm1zXCIpXHJcbiAgQFVzZUludGVyY2VwdG9ycyhDYWNoZUludGVyY2VwdG9yKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIkdldCBwb3B1bGFyIHNlYXJjaCB0ZXJtc1wiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIlBvcHVsYXIgdGVybXMgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBhc3luYyBnZXRQb3B1bGFyU2VhcmNoVGVybXMobGltaXQ/OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2UuZ2V0UG9wdWxhclNlYXJjaFRlcm1zKGxpbWl0KVxyXG4gIH1cclxuXHJcbiAgQFBvc3QoXCJ0cmFjay1jbGlja1wiKVxyXG4gIEBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIlRyYWNrIHNlYXJjaCByZXN1bHQgY2xpY2tcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJDbGljayB0cmFja2VkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIHRyYWNrU2VhcmNoQ2xpY2soc2VhcmNoSWQ6IHN0cmluZywgY291cnNlSWQ6IHN0cmluZywgcmVxOiBSZXF1ZXN0KSB7XHJcbiAgICBhd2FpdCB0aGlzLnNlYXJjaFNlcnZpY2UudHJhY2tTZWFyY2hDbGljayhzZWFyY2hJZCwgY291cnNlSWQpXHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH1cclxuICB9XHJcblxyXG4gIEBHZXQoXCJ0cmVuZGluZ1wiKVxyXG4gIEBVc2VJbnRlcmNlcHRvcnMoQ2FjaGVJbnRlcmNlcHRvcilcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJHZXQgdHJlbmRpbmcgc2VhcmNoIHRvcGljc1wiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIlRyZW5kaW5nIHRvcGljcyByZXR1cm5lZCBzdWNjZXNzZnVsbHlcIiB9KVxyXG4gIGFzeW5jIGdldFRyZW5kaW5nVG9waWNzKCkge1xyXG4gICAgLy8gSW1wbGVtZW50YXRpb24gd291bGQgYW5hbHl6ZSByZWNlbnQgc2VhcmNoIHBhdHRlcm5zXHJcbiAgICByZXR1cm4geyB0cmVuZGluZzogW10gfVxyXG4gIH1cclxuXHJcbiAgQEdldChcImF1dG9jb21wbGV0ZS86cXVlcnlcIilcclxuICBAVXNlSW50ZXJjZXB0b3JzKENhY2hlSW50ZXJjZXB0b3IpXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6IFwiR2V0IGF1dG9jb21wbGV0ZSBzdWdnZXN0aW9uc1wiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIkF1dG9jb21wbGV0ZSBzdWdnZXN0aW9ucyByZXR1cm5lZCBzdWNjZXNzZnVsbHlcIiB9KVxyXG4gIGFzeW5jIGdldEF1dG9jb21wbGV0ZShxdWVyeTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFN1Z2dlc3Rpb25zKHsgcXVlcnksIGxpbWl0OiAxMCB9KVxyXG4gIH1cclxuXHJcbiAgQFBvc3QoXCJmZWVkYmFja1wiKVxyXG4gIEBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIlN1Ym1pdCBzZWFyY2ggZmVlZGJhY2tcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJGZWVkYmFjayBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5XCIgfSlcclxuICBAQXBpQmVhcmVyQXV0aCgpXHJcbiAgYXN5bmMgc3VibWl0U2VhcmNoRmVlZGJhY2soZmVlZGJhY2tEdG86IHsgc2VhcmNoSWQ6IHN0cmluZzsgcmF0aW5nOiBudW1iZXI7IGNvbW1lbnQ/OiBzdHJpbmcgfSwgcmVxOiBSZXF1ZXN0KSB7XHJcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiB3b3VsZCBzYXZlIGZlZWRiYWNrIGZvciBzZWFyY2ggaW1wcm92ZW1lbnRcclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxyXG4gIH1cclxuXHJcbiAgQEdldChcImhpc3RvcnlcIilcclxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogXCJHZXQgdXNlciBzZWFyY2ggaGlzdG9yeVwiIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiBcIlNlYXJjaCBoaXN0b3J5IHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIGdldFNlYXJjaEhpc3RvcnkocmVxOiBSZXF1ZXN0KSB7XHJcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcltcImlkXCJdXHJcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFNlYXJjaEFuYWx5dGljcyh7IHVzZXJJZCwgbGltaXQ6IDUwIH0pXHJcbiAgfVxyXG5cclxuICBARGVsZXRlKFwiaGlzdG9yeVwiKVxyXG4gIEBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiBcIkNsZWFyIHVzZXIgc2VhcmNoIGhpc3RvcnlcIiB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogXCJTZWFyY2ggaGlzdG9yeSBjbGVhcmVkIHN1Y2Nlc3NmdWxseVwiIH0pXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIGFzeW5jIGNsZWFyU2VhcmNoSGlzdG9yeShyZXE6IFJlcXVlc3QpIHtcclxuICAgIC8vIEltcGxlbWVudGF0aW9uIHdvdWxkIGNsZWFyIHVzZXIncyBzZWFyY2ggaGlzdG9yeVxyXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==