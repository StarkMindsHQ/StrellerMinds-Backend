{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\wallet-integration\\tests\\wallet.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\wallet-integration\\tests\\wallet.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { WalletService } from '../src/wallet/services/wallet.service';\r\nimport { Wallet, WalletType } from '../src/wallet/entities/wallet.entity';\r\nimport { Credential } from '../src/wallet/entities/credential.entity';\r\nimport { EthereumWalletProvider } from '../src/wallet/providers/ethereum-wallet.provider';\r\n\r\ndescribe('WalletService', () => {\r\n  let service: WalletService;\r\n  let walletRepository: any;\r\n  let credentialRepository: any;\r\n  let jwtService: JwtService;\r\n\r\n  const mockWalletRepository = {\r\n    findOne: jest.fn(),\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n  };\r\n\r\n  const mockCredentialRepository = {\r\n    find: jest.fn(),\r\n    findOne: jest.fn(),\r\n    save: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  };\r\n\r\n  const mockJwtService = {\r\n    sign: jest.fn(),\r\n  };\r\n\r\n  const mockEthereumProvider = {\r\n    verifySignature: jest.fn(),\r\n    generateNonce: jest.fn(),\r\n    formatMessage: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        WalletService,\r\n        {\r\n          provide: getRepositoryToken(Wallet),\r\n          useValue: mockWalletRepository,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(Credential),\r\n          useValue: mockCredentialRepository,\r\n        },\r\n        {\r\n          provide: JwtService,\r\n          useValue: mockJwtService,\r\n        },\r\n        {\r\n          provide: EthereumWalletProvider,\r\n          useValue: mockEthereumProvider,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<WalletService>(WalletService);\r\n    walletRepository = module.get(getRepositoryToken(Wallet));\r\n    credentialRepository = module.get(getRepositoryToken(Credential));\r\n    jwtService = module.get<JwtService>(JwtService);\r\n  });\r\n\r\n  describe('connectWallet', () => {\r\n    it('should connect a new wallet successfully', async () => {\r\n      const connectDto = {\r\n        address: '0x1234567890123456789012345678901234567890',\r\n        type: WalletType.METAMASK,\r\n        signature: 'mock-signature',\r\n        message: 'mock-message',\r\n      };\r\n\r\n      mockEthereumProvider.verifySignature.mockResolvedValue(true);\r\n      mockWalletRepository.findOne.mockResolvedValue(null);\r\n      mockWalletRepository.create.mockReturnValue({\r\n        id: 'wallet-id',\r\n        address: connectDto.address.toLowerCase(),\r\n        type: connectDto.type,\r\n      });\r\n      mockWalletRepository.save.mockResolvedValue({\r\n        id: 'wallet-id',\r\n        address: connectDto.address.toLowerCase(),\r\n        type: connectDto.type,\r\n      });\r\n      mockJwtService.sign.mockReturnValue('jwt-token');\r\n\r\n      const result = await service.connectWallet(connectDto);\r\n\r\n      expect(result.isNewWallet).toBe(true);\r\n      expect(result.accessToken).toBe('jwt-token');\r\n      expect(mockEthereumProvider.verifySignature).toHaveBeenCalledWith(\r\n        connectDto.address,\r\n        connectDto.message,\r\n        connectDto.signature\r\n      );\r\n    });\r\n\r\n    it('should throw UnauthorizedException for invalid signature', async () => {\r\n      const connectDto = {\r\n        address: '0x1234567890123456789012345678901234567890',\r\n        type: WalletType.METAMASK,\r\n        signature: 'invalid-signature',\r\n        message: 'mock-message',\r\n      };\r\n\r\n      mockEthereumProvider.verifySignature.mockResolvedValue(false);\r\n\r\n      await expect(service.connectWallet(connectDto)).rejects.toThrow(\r\n        'Invalid wallet signature'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('shareCredentials', () => {\r\n    it('should share credentials successfully', async () => {\r\n      const walletId = 'wallet-id';\r\n      const shareDto = {\r\n        credentialIds: ['cred-1', 'cred-2'],\r\n        recipientAddress: '0x9876543210987654321098765432109876543210',\r\n      };\r\n\r\n      const mockCredentials = [\r\n        { id: 'cred-1', walletId },\r\n        { id: 'cred-2', walletId },\r\n      ];\r\n\r\n      mockCredentialRepository.find.mockResolvedValue(mockCredentials);\r\n      mockCredentialRepository.save.mockResolvedValue({});\r\n\r\n      const result = await service.shareCredentials(walletId, shareDto);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.sharedCredentials).toEqual(['cred-1', 'cred-2']);\r\n      expect(mockCredentialRepository.save).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n});\r\n"],"version":3}