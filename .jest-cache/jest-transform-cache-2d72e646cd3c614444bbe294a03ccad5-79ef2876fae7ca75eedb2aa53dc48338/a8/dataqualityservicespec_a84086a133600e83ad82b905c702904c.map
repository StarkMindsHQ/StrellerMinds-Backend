{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { DataQualityService } from \"../services/data-quality.service\"\r\nimport { DataValidationService } from \"../services/data-validation.service\"\r\nimport { DataQualityMonitoringService } from \"../services/data-quality-monitoring.service\"\r\nimport { DataQualityRule } from \"../entities/data-quality-rule.entity\"\r\nimport { DataQualityMetric } from \"../entities/data-quality-metric.entity\"\r\nimport { DataQualityIssue } from \"../entities/data-quality-issue.entity\"\r\n\r\ndescribe(\"DataQualityService\", () => {\r\n  let service: DataQualityService\r\n  let ruleRepository: Repository<DataQualityRule>\r\n  let metricRepository: Repository<DataQualityMetric>\r\n  let issueRepository: Repository<DataQualityIssue>\r\n  let dataQualityQueue: Queue\r\n  let validationService: DataValidationService\r\n  let monitoringService: DataQualityMonitoringService\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataQualityService,\r\n        {\r\n          provide: getRepositoryToken(DataQualityRule),\r\n          useValue: {\r\n            find: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            update: jest.fn(),\r\n            findOne: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityMetric),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataQualityIssue),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-quality\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: DataValidationService,\r\n          useValue: {\r\n            checkCompleteness: jest.fn(),\r\n            checkAccuracy: jest.fn(),\r\n            checkConsistency: jest.fn(),\r\n            checkValidity: jest.fn(),\r\n            checkUniqueness: jest.fn(),\r\n            checkTimeliness: jest.fn(),\r\n            checkConformity: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: DataQualityMonitoringService,\r\n          useValue: {\r\n            getDashboard: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<DataQualityService>(DataQualityService)\r\n    ruleRepository = module.get<Repository<DataQualityRule>>(getRepositoryToken(DataQualityRule))\r\n    metricRepository = module.get<Repository<DataQualityMetric>>(getRepositoryToken(DataQualityMetric))\r\n    issueRepository = module.get<Repository<DataQualityIssue>>(getRepositoryToken(DataQualityIssue))\r\n    dataQualityQueue = module.get<Queue>(getQueueToken(\"data-quality\"))\r\n    validationService = module.get<DataValidationService>(DataValidationService)\r\n    monitoringService = module.get<DataQualityMonitoringService>(DataQualityMonitoringService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"checkDataQuality\", () => {\r\n    it(\"should check data quality and return results\", async () => {\r\n      const mockRules = [\r\n        {\r\n          id: \"rule1\",\r\n          name: \"Test Rule\",\r\n          ruleType: \"completeness\",\r\n          severity: \"medium\",\r\n          threshold: 90,\r\n          errorMessage: \"Test error\",\r\n        },\r\n      ]\r\n\r\n      const mockData = [\r\n        { id: 1, name: \"John\", email: \"john@example.com\" },\r\n        { id: 2, name: \"Jane\", email: null },\r\n      ]\r\n\r\n      jest.spyOn(service, \"getActiveRules\").mockResolvedValue(mockRules as any)\r\n      jest.spyOn(validationService, \"checkCompleteness\").mockResolvedValue({\r\n        passed: false,\r\n        score: 75,\r\n        failedData: [{ id: 2, name: \"Jane\", email: null }],\r\n      })\r\n      jest.spyOn(metricRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(metricRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(issueRepository, \"findOne\").mockResolvedValue(null)\r\n      jest.spyOn(issueRepository, \"create\").mockReturnValue({} as any)\r\n      jest.spyOn(issueRepository, \"save\").mockResolvedValue({} as any)\r\n      jest.spyOn(dataQualityQueue, \"add\").mockResolvedValue({} as any)\r\n\r\n      const result = await service.checkDataQuality(\"user\", mockData)\r\n\r\n      expect(result.passed).toBe(false)\r\n      expect(result.score).toBe(75)\r\n      expect(result.issues).toHaveLength(1)\r\n      expect(result.metrics).toHaveLength(1)\r\n    })\r\n  })\r\n\r\n  describe(\"createRule\", () => {\r\n    it(\"should create a new data quality rule\", async () => {\r\n      const ruleData = {\r\n        name: \"Test Rule\",\r\n        description: \"Test description\",\r\n        ruleType: \"completeness\",\r\n        entityType: \"user\",\r\n        conditions: { field: \"email\" },\r\n      }\r\n\r\n      const mockRule = { id: \"rule1\", ...ruleData }\r\n\r\n      jest.spyOn(ruleRepository, \"create\").mockReturnValue(mockRule as any)\r\n      jest.spyOn(ruleRepository, \"save\").mockResolvedValue(mockRule as any)\r\n\r\n      const result = await service.createRule(ruleData)\r\n\r\n      expect(result).toEqual(mockRule)\r\n      expect(ruleRepository.create).toHaveBeenCalledWith(ruleData)\r\n      expect(ruleRepository.save).toHaveBeenCalledWith(mockRule)\r\n    })\r\n  })\r\n\r\n  describe(\"getActiveRules\", () => {\r\n    it(\"should return active rules for entity type\", async () => {\r\n      const mockRules = [\r\n        { id: \"rule1\", name: \"Rule 1\", entityType: \"user\", status: \"active\" },\r\n        { id: \"rule2\", name: \"Rule 2\", entityType: \"user\", status: \"active\" },\r\n      ]\r\n\r\n      jest.spyOn(ruleRepository, \"find\").mockResolvedValue(mockRules as any)\r\n\r\n      const result = await service.getActiveRules(\"user\")\r\n\r\n      expect(result).toEqual(mockRules)\r\n      expect(ruleRepository.find).toHaveBeenCalledWith({\r\n        where: {\r\n          entityType: \"user\",\r\n          status: \"active\",\r\n        },\r\n        order: {\r\n          severity: \"DESC\",\r\n          createdAt: \"ASC\",\r\n        },\r\n      })\r\n    })\r\n  })\r\n})\r\n"],"version":3}