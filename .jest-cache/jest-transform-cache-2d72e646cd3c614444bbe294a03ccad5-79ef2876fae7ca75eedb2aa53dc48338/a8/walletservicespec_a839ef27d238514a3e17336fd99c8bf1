44531dee21dfa10c3aed7e171ec25b19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const jwt_1 = require("@nestjs/jwt");
const wallet_service_1 = require("../src/wallet/services/wallet.service");
const wallet_entity_1 = require("../src/wallet/entities/wallet.entity");
const credential_entity_1 = require("../src/wallet/entities/credential.entity");
const ethereum_wallet_provider_1 = require("../src/wallet/providers/ethereum-wallet.provider");
describe('WalletService', () => {
    let service;
    let walletRepository;
    let credentialRepository;
    let jwtService;
    const mockWalletRepository = {
        findOne: jest.fn(),
        create: jest.fn(),
        save: jest.fn(),
    };
    const mockCredentialRepository = {
        find: jest.fn(),
        findOne: jest.fn(),
        save: jest.fn(),
        createQueryBuilder: jest.fn(),
    };
    const mockJwtService = {
        sign: jest.fn(),
    };
    const mockEthereumProvider = {
        verifySignature: jest.fn(),
        generateNonce: jest.fn(),
        formatMessage: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                wallet_service_1.WalletService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(wallet_entity_1.Wallet),
                    useValue: mockWalletRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(credential_entity_1.Credential),
                    useValue: mockCredentialRepository,
                },
                {
                    provide: jwt_1.JwtService,
                    useValue: mockJwtService,
                },
                {
                    provide: ethereum_wallet_provider_1.EthereumWalletProvider,
                    useValue: mockEthereumProvider,
                },
            ],
        }).compile();
        service = module.get(wallet_service_1.WalletService);
        walletRepository = module.get((0, typeorm_1.getRepositoryToken)(wallet_entity_1.Wallet));
        credentialRepository = module.get((0, typeorm_1.getRepositoryToken)(credential_entity_1.Credential));
        jwtService = module.get(jwt_1.JwtService);
    });
    describe('connectWallet', () => {
        it('should connect a new wallet successfully', async () => {
            const connectDto = {
                address: '0x1234567890123456789012345678901234567890',
                type: wallet_entity_1.WalletType.METAMASK,
                signature: 'mock-signature',
                message: 'mock-message',
            };
            mockEthereumProvider.verifySignature.mockResolvedValue(true);
            mockWalletRepository.findOne.mockResolvedValue(null);
            mockWalletRepository.create.mockReturnValue({
                id: 'wallet-id',
                address: connectDto.address.toLowerCase(),
                type: connectDto.type,
            });
            mockWalletRepository.save.mockResolvedValue({
                id: 'wallet-id',
                address: connectDto.address.toLowerCase(),
                type: connectDto.type,
            });
            mockJwtService.sign.mockReturnValue('jwt-token');
            const result = await service.connectWallet(connectDto);
            expect(result.isNewWallet).toBe(true);
            expect(result.accessToken).toBe('jwt-token');
            expect(mockEthereumProvider.verifySignature).toHaveBeenCalledWith(connectDto.address, connectDto.message, connectDto.signature);
        });
        it('should throw UnauthorizedException for invalid signature', async () => {
            const connectDto = {
                address: '0x1234567890123456789012345678901234567890',
                type: wallet_entity_1.WalletType.METAMASK,
                signature: 'invalid-signature',
                message: 'mock-message',
            };
            mockEthereumProvider.verifySignature.mockResolvedValue(false);
            await expect(service.connectWallet(connectDto)).rejects.toThrow('Invalid wallet signature');
        });
    });
    describe('shareCredentials', () => {
        it('should share credentials successfully', async () => {
            const walletId = 'wallet-id';
            const shareDto = {
                credentialIds: ['cred-1', 'cred-2'],
                recipientAddress: '0x9876543210987654321098765432109876543210',
            };
            const mockCredentials = [
                { id: 'cred-1', walletId },
                { id: 'cred-2', walletId },
            ];
            mockCredentialRepository.find.mockResolvedValue(mockCredentials);
            mockCredentialRepository.save.mockResolvedValue({});
            const result = await service.shareCredentials(walletId, shareDto);
            expect(result.success).toBe(true);
            expect(result.sharedCredentials).toEqual(['cred-1', 'cred-2']);
            expect(mockCredentialRepository.save).toHaveBeenCalledTimes(2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,