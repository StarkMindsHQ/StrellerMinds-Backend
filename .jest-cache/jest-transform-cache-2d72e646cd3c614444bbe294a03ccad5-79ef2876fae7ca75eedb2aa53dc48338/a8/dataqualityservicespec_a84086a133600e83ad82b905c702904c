84f5520f347e3e91dbcf9a84185a568b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const data_quality_service_1 = require("../services/data-quality.service");
const data_validation_service_1 = require("../services/data-validation.service");
const data_quality_monitoring_service_1 = require("../services/data-quality-monitoring.service");
const data_quality_rule_entity_1 = require("../entities/data-quality-rule.entity");
const data_quality_metric_entity_1 = require("../entities/data-quality-metric.entity");
const data_quality_issue_entity_1 = require("../entities/data-quality-issue.entity");
describe("DataQualityService", () => {
    let service;
    let ruleRepository;
    let metricRepository;
    let issueRepository;
    let dataQualityQueue;
    let validationService;
    let monitoringService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                data_quality_service_1.DataQualityService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(data_quality_rule_entity_1.DataQualityRule),
                    useValue: {
                        find: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                        findOne: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(data_quality_metric_entity_1.DataQualityMetric),
                    useValue: {
                        create: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(data_quality_issue_entity_1.DataQualityIssue),
                    useValue: {
                        findOne: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(),
                    },
                },
                {
                    provide: (0, bull_1.getQueueToken)("data-quality"),
                    useValue: {
                        add: globals_1.jest.fn(),
                    },
                },
                {
                    provide: data_validation_service_1.DataValidationService,
                    useValue: {
                        checkCompleteness: globals_1.jest.fn(),
                        checkAccuracy: globals_1.jest.fn(),
                        checkConsistency: globals_1.jest.fn(),
                        checkValidity: globals_1.jest.fn(),
                        checkUniqueness: globals_1.jest.fn(),
                        checkTimeliness: globals_1.jest.fn(),
                        checkConformity: globals_1.jest.fn(),
                    },
                },
                {
                    provide: data_quality_monitoring_service_1.DataQualityMonitoringService,
                    useValue: {
                        getDashboard: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(data_quality_service_1.DataQualityService);
        ruleRepository = module.get((0, typeorm_1.getRepositoryToken)(data_quality_rule_entity_1.DataQualityRule));
        metricRepository = module.get((0, typeorm_1.getRepositoryToken)(data_quality_metric_entity_1.DataQualityMetric));
        issueRepository = module.get((0, typeorm_1.getRepositoryToken)(data_quality_issue_entity_1.DataQualityIssue));
        dataQualityQueue = module.get((0, bull_1.getQueueToken)("data-quality"));
        validationService = module.get(data_validation_service_1.DataValidationService);
        monitoringService = module.get(data_quality_monitoring_service_1.DataQualityMonitoringService);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("checkDataQuality", () => {
        it("should check data quality and return results", async () => {
            const mockRules = [
                {
                    id: "rule1",
                    name: "Test Rule",
                    ruleType: "completeness",
                    severity: "medium",
                    threshold: 90,
                    errorMessage: "Test error",
                },
            ];
            const mockData = [
                { id: 1, name: "John", email: "john@example.com" },
                { id: 2, name: "Jane", email: null },
            ];
            globals_1.jest.spyOn(service, "getActiveRules").mockResolvedValue(mockRules);
            globals_1.jest.spyOn(validationService, "checkCompleteness").mockResolvedValue({
                passed: false,
                score: 75,
                failedData: [{ id: 2, name: "Jane", email: null }],
            });
            globals_1.jest.spyOn(metricRepository, "create").mockReturnValue({});
            globals_1.jest.spyOn(metricRepository, "save").mockResolvedValue({});
            globals_1.jest.spyOn(issueRepository, "findOne").mockResolvedValue(null);
            globals_1.jest.spyOn(issueRepository, "create").mockReturnValue({});
            globals_1.jest.spyOn(issueRepository, "save").mockResolvedValue({});
            globals_1.jest.spyOn(dataQualityQueue, "add").mockResolvedValue({});
            const result = await service.checkDataQuality("user", mockData);
            expect(result.passed).toBe(false);
            expect(result.score).toBe(75);
            expect(result.issues).toHaveLength(1);
            expect(result.metrics).toHaveLength(1);
        });
    });
    describe("createRule", () => {
        it("should create a new data quality rule", async () => {
            const ruleData = {
                name: "Test Rule",
                description: "Test description",
                ruleType: "completeness",
                entityType: "user",
                conditions: { field: "email" },
            };
            const mockRule = { id: "rule1", ...ruleData };
            globals_1.jest.spyOn(ruleRepository, "create").mockReturnValue(mockRule);
            globals_1.jest.spyOn(ruleRepository, "save").mockResolvedValue(mockRule);
            const result = await service.createRule(ruleData);
            expect(result).toEqual(mockRule);
            expect(ruleRepository.create).toHaveBeenCalledWith(ruleData);
            expect(ruleRepository.save).toHaveBeenCalledWith(mockRule);
        });
    });
    describe("getActiveRules", () => {
        it("should return active rules for entity type", async () => {
            const mockRules = [
                { id: "rule1", name: "Rule 1", entityType: "user", status: "active" },
                { id: "rule2", name: "Rule 2", entityType: "user", status: "active" },
            ];
            globals_1.jest.spyOn(ruleRepository, "find").mockResolvedValue(mockRules);
            const result = await service.getActiveRules("user");
            expect(result).toEqual(mockRules);
            expect(ruleRepository.find).toHaveBeenCalledWith({
                where: {
                    entityType: "user",
                    status: "active",
                },
                order: {
                    severity: "DESC",
                    createdAt: "ASC",
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,