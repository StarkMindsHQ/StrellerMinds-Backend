{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\test\\verification.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\test\\verification.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { VerificationService } from '../verification.service';\r\nimport { EthSignatureStrategy } from '../strategies/eth-signature.strategy';\r\nimport { JwtStrategy } from '../strategies/jwt.strategy';\r\nimport { IpfsProofStrategy } from '../strategies/ipfs-proof.strategy';\r\n\r\ndescribe('VerificationService', () => {\r\n  let service: VerificationService;\r\n  let ethMock: EthSignatureStrategy;\r\n  let jwtMock: JwtStrategy;\r\n  let ipfsMock: IpfsProofStrategy;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        VerificationService,\r\n        EthSignatureStrategy,\r\n        JwtStrategy,\r\n        IpfsProofStrategy,\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<VerificationService>(VerificationService);\r\n    ethMock = module.get<EthSignatureStrategy>(EthSignatureStrategy);\r\n    jwtMock = module.get<JwtStrategy>(JwtStrategy);\r\n    ipfsMock = module.get<IpfsProofStrategy>(IpfsProofStrategy);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  it('should call eth_signature strategy', async () => {\r\n    const spy = jest.spyOn(ethMock, 'verify').mockResolvedValue({ verified: true });\r\n    const result = await service.verify({ credentialHash: 'signature', method: 'eth_signature' });\r\n    expect(spy).toHaveBeenCalled();\r\n    expect(result.verified).toBe(true);\r\n  });\r\n\r\n  it('should call jwt strategy', async () => {\r\n    const spy = jest.spyOn(jwtMock, 'verify').mockResolvedValue({ verified: true });\r\n    const result = await service.verify({ credentialHash: 'token', method: 'jwt' });\r\n    expect(spy).toHaveBeenCalled();\r\n    expect(result.verified).toBe(true);\r\n  });\r\n\r\n  it('should call ipfs strategy', async () => {\r\n    const spy = jest.spyOn(ipfsMock, 'verify').mockResolvedValue({ verified: true });\r\n    const result = await service.verify({ credentialHash: 'cid', method: 'ipfs_proof' });\r\n    expect(spy).toHaveBeenCalled();\r\n    expect(result.verified).toBe(true);\r\n  });\r\n\r\n  it('should throw error for unsupported method', async () => {\r\n    await expect(service.verify({ credentialHash: 'x', method: 'unknown' })).rejects.toThrow('Unsupported verification method');\r\n  });\r\n});\r\n"],"version":3}