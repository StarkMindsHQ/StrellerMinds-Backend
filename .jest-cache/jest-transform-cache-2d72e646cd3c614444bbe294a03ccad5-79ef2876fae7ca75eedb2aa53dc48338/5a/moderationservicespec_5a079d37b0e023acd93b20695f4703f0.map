{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.service.spec.ts","mappings":";;AAAA,sCAAsC;AACtC,6CAAsD;AACtD,6DAAyD;AACzD,6CAAqD;AACrD,0FAAwE;AAGxE,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,OAA0B,CAAC;IAC/B,IAAI,IAA+B,CAAC;IAEpC,MAAM,OAAO,GAAG;QACd,EAAE,EAAE,QAAQ;QACZ,MAAM,EAAE,SAAS;QACjB,UAAU,EAAE,MAAM;QAClB,QAAQ,EAAE,WAAW;QACrB,SAAS,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE;QACjC,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,MAAM,QAAQ,GAAG;QACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC;QAC1C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC;KAC3C,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,sCAAiB;gBACjB;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,4CAAa,CAAC;oBAC1C,QAAQ,EAAE,QAAQ;iBACnB;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;QAC3D,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,4CAAa,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAC9C,SAAS,EACT,MAAM,EACN,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC;YACvC,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE;SAClC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.service.spec.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { ModerationService } from './moderation.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { ModerationLog } from './entities/forum-moderation-logs.entity';\r\nimport { Repository } from 'typeorm';\r\n\r\ndescribe('ModerationService', () => {\r\n  let service: ModerationService;\r\n  let repo: Repository<ModerationLog>;\r\n\r\n  const mockLog = {\r\n    id: 'log-id',\r\n    action: 'approve',\r\n    entityType: 'post',\r\n    entityId: 'entity-id',\r\n    moderator: { id: 'moderator-id' },\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  const mockRepo = {\r\n    create: jest.fn().mockReturnValue(mockLog),\r\n    save: jest.fn().mockResolvedValue(mockLog),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ModerationService,\r\n        {\r\n          provide: getRepositoryToken(ModerationLog),\r\n          useValue: mockRepo,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<ModerationService>(ModerationService);\r\n    repo = module.get(getRepositoryToken(ModerationLog));\r\n  });\r\n\r\n  it('should log a moderation action', async () => {\r\n    const result = await service.logModerationAction(\r\n      'approve',\r\n      'post',\r\n      'entity-id',\r\n      'moderator-id',\r\n    );\r\n    expect(repo.create).toHaveBeenCalledWith({\r\n      action: 'approve',\r\n      entityType: 'post',\r\n      entityId: 'entity-id',\r\n      moderator: { id: 'moderator-id' },\r\n    });\r\n    expect(repo.save).toHaveBeenCalledWith(mockLog);\r\n    expect(result).toEqual(mockLog);\r\n  });\r\n});\r\n"],"version":3}