d2c4f970c9ab252b4e9d86312739e165
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable prettier/prettier */
const testing_1 = require("@nestjs/testing");
const moderation_service_1 = require("./moderation.service");
const typeorm_1 = require("@nestjs/typeorm");
const forum_moderation_logs_entity_1 = require("./entities/forum-moderation-logs.entity");
describe('ModerationService', () => {
    let service;
    let repo;
    const mockLog = {
        id: 'log-id',
        action: 'approve',
        entityType: 'post',
        entityId: 'entity-id',
        moderator: { id: 'moderator-id' },
        createdAt: new Date(),
    };
    const mockRepo = {
        create: jest.fn().mockReturnValue(mockLog),
        save: jest.fn().mockResolvedValue(mockLog),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                moderation_service_1.ModerationService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(forum_moderation_logs_entity_1.ModerationLog),
                    useValue: mockRepo,
                },
            ],
        }).compile();
        service = module.get(moderation_service_1.ModerationService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(forum_moderation_logs_entity_1.ModerationLog));
    });
    it('should log a moderation action', async () => {
        const result = await service.logModerationAction('approve', 'post', 'entity-id', 'moderator-id');
        expect(repo.create).toHaveBeenCalledWith({
            action: 'approve',
            entityType: 'post',
            entityId: 'entity-id',
            moderator: { id: 'moderator-id' },
        });
        expect(repo.save).toHaveBeenCalledWith(mockLog);
        expect(result).toEqual(mockLog);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxtb2RlcmF0aW9uXFxtb2RlcmF0aW9uLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFzQztBQUN0Qyw2Q0FBc0Q7QUFDdEQsNkRBQXlEO0FBQ3pELDZDQUFxRDtBQUNyRCwwRkFBd0U7QUFHeEUsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLE9BQTBCLENBQUM7SUFDL0IsSUFBSSxJQUErQixDQUFDO0lBRXBDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsRUFBRSxFQUFFLFFBQVE7UUFDWixNQUFNLEVBQUUsU0FBUztRQUNqQixVQUFVLEVBQUUsTUFBTTtRQUNsQixRQUFRLEVBQUUsV0FBVztRQUNyQixTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFO1FBQ2pDLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtLQUN0QixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUc7UUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDMUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7S0FDM0MsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsU0FBUyxFQUFFO2dCQUNULHNDQUFpQjtnQkFDakI7b0JBQ0UsT0FBTyxFQUFFLElBQUEsNEJBQWtCLEVBQUMsNENBQWEsQ0FBQztvQkFDMUMsUUFBUSxFQUFFLFFBQVE7aUJBQ25CO2FBQ0Y7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFYixPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBb0Isc0NBQWlCLENBQUMsQ0FBQztRQUMzRCxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFBLDRCQUFrQixFQUFDLDRDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLG1CQUFtQixDQUM5QyxTQUFTLEVBQ1QsTUFBTSxFQUNOLFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUM7WUFDdkMsTUFBTSxFQUFFLFNBQVM7WUFDakIsVUFBVSxFQUFFLE1BQU07WUFDbEIsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRTtTQUNsQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXG1vZGVyYXRpb25cXG1vZGVyYXRpb24uc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyICovXHJcbmltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBNb2RlcmF0aW9uU2VydmljZSB9IGZyb20gJy4vbW9kZXJhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgZ2V0UmVwb3NpdG9yeVRva2VuIH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgTW9kZXJhdGlvbkxvZyB9IGZyb20gJy4vZW50aXRpZXMvZm9ydW0tbW9kZXJhdGlvbi1sb2dzLmVudGl0eSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmRlc2NyaWJlKCdNb2RlcmF0aW9uU2VydmljZScsICgpID0+IHtcclxuICBsZXQgc2VydmljZTogTW9kZXJhdGlvblNlcnZpY2U7XHJcbiAgbGV0IHJlcG86IFJlcG9zaXRvcnk8TW9kZXJhdGlvbkxvZz47XHJcblxyXG4gIGNvbnN0IG1vY2tMb2cgPSB7XHJcbiAgICBpZDogJ2xvZy1pZCcsXHJcbiAgICBhY3Rpb246ICdhcHByb3ZlJyxcclxuICAgIGVudGl0eVR5cGU6ICdwb3N0JyxcclxuICAgIGVudGl0eUlkOiAnZW50aXR5LWlkJyxcclxuICAgIG1vZGVyYXRvcjogeyBpZDogJ21vZGVyYXRvci1pZCcgfSxcclxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICB9O1xyXG5cclxuICBjb25zdCBtb2NrUmVwbyA9IHtcclxuICAgIGNyZWF0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShtb2NrTG9nKSxcclxuICAgIHNhdmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrTG9nKSxcclxuICB9O1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIE1vZGVyYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IGdldFJlcG9zaXRvcnlUb2tlbihNb2RlcmF0aW9uTG9nKSxcclxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrUmVwbyxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZSgpO1xyXG5cclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PE1vZGVyYXRpb25TZXJ2aWNlPihNb2RlcmF0aW9uU2VydmljZSk7XHJcbiAgICByZXBvID0gbW9kdWxlLmdldChnZXRSZXBvc2l0b3J5VG9rZW4oTW9kZXJhdGlvbkxvZykpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGxvZyBhIG1vZGVyYXRpb24gYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5sb2dNb2RlcmF0aW9uQWN0aW9uKFxyXG4gICAgICAnYXBwcm92ZScsXHJcbiAgICAgICdwb3N0JyxcclxuICAgICAgJ2VudGl0eS1pZCcsXHJcbiAgICAgICdtb2RlcmF0b3ItaWQnLFxyXG4gICAgKTtcclxuICAgIGV4cGVjdChyZXBvLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICBhY3Rpb246ICdhcHByb3ZlJyxcclxuICAgICAgZW50aXR5VHlwZTogJ3Bvc3QnLFxyXG4gICAgICBlbnRpdHlJZDogJ2VudGl0eS1pZCcsXHJcbiAgICAgIG1vZGVyYXRvcjogeyBpZDogJ21vZGVyYXRvci1pZCcgfSxcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlcG8uc2F2ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0xvZyk7XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tMb2cpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9