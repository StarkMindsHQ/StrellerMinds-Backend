{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\admin.users.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmI;AACnI,6CAAuG;AACvG,4DAAwD;AACxD,8DAAyD;AACzD,8DAAyD;AACzD,6DAAgD;AAChD,qDAAiD;AACjD,mDAA0C;AAC1C,2EAAsE;AACtE,yDAAiD;AACjD,mEAA2D;AAE3D;;GAEG;AAMI,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YACmB,YAA0B,EAC1B,eAAgC;QADhC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;IAChD,CAAC;IAEJ;;;;;OAKG;IAKG,AAAN,KAAK,CAAC,MAAM,CAAS,GAAmB,EAAmB,OAAe;QACxE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjD,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;YACnC,MAAM,EAAE,aAAa;YACrB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,IAAI,CAAC,EAAE;YACjB,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IAIG,AAAN,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IACrC,CAAC;IAED;;;;OAIG;IAKG,AAAN,KAAK,CAAC,OAAO,CAA6B,EAAU;QAClD,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;OAMG;IAMG,AAAN,KAAK,CAAC,MAAM,CAA6B,EAAU,EAAU,GAAmB,EAAmB,OAAe;QAChH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACrD,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;YACnC,MAAM,EAAE,aAAa;YACrB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IAMG,AAAN,KAAK,CAAC,MAAM,CAA6B,EAAU,EAAmB,OAAe;QACnF,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACnC,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;YACnC,MAAM,EAAE,aAAa;YACrB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IAED;;;;;;OAMG;IAMG,AAAN,KAAK,CAAC,UAAU,CACc,EAAU,EACxB,IAAc,EACX,OAAe;QAEhC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;YACnC,MAAM,EAAE,aAAa;YACrB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IAMG,AAAN,KAAK,CAAC,YAAY,CACY,EAAU,EACtB,MAAqB,EACpB,OAAe;QAEhC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAC5D,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;YACnC,MAAM,EAAE,eAAe;YACvB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;SAC/B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IAKG,AAAN,KAAK,CAAC,gBAAgB,CAA6B,EAAU;QAC3D,gEAAgE;QAChE,yCAAyC;QACzC,OAAO,EAAE,OAAO,EAAE,6CAA6C,EAAE,CAAC;IACpE,CAAC;CACF,CAAA;AAxKY,oDAAoB;AAgBzB;IAJL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC3D,IAAA,iBAAO,EAAC,EAAE,IAAI,EAAE,iCAAc,EAAE,CAAC;IACjC,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;IAC1D,IAAA,aAAI,GAAE;IACO,WAAA,IAAA,aAAI,GAAE,CAAA;IAAuB,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;yDAAhC,iCAAc,oBAAd,iCAAc;;kDAUvC;AASK;IAHL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IAC1C,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;IAC3D,IAAA,YAAG,GAAE;;;;mDAGL;AAWK;IAJL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;IAC3C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;IACxD,IAAA,YAAG,EAAC,KAAK,CAAC;IACI,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;;;;mDAExC;AAcK;IALL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC9C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,iBAAO,EAAC,EAAE,IAAI,EAAE,iCAAc,EAAE,CAAC;IACjC,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;IAC1D,IAAA,cAAK,EAAC,KAAK,CAAC;IACC,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAAc,WAAA,IAAA,aAAI,GAAE,CAAA;IAAuB,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;iEAAhC,iCAAc,oBAAd,iCAAc;;kDAU/E;AAYK;IALL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC9C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;IAC1D,IAAA,eAAM,EAAC,KAAK,CAAC;IACb,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAClB,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAAc,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;;;kDAUpE;AAcK;IALL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC7C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,iBAAO,EAAC,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,wBAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9G,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;IAC/D,IAAA,cAAK,EAAC,UAAU,CAAC;IAEf,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAC1B,WAAA,IAAA,aAAI,EAAC,MAAM,CAAC,CAAA;IACZ,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;iEADI,wBAAQ,oBAAR,wBAAQ;;sDAY7B;AAcK;IALL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IACvD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,iBAAO,EAAC,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,kCAAa,EAAE,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC;IACrH,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IACjE,IAAA,cAAK,EAAC,YAAY,CAAC;IAEjB,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAC1B,WAAA,IAAA,aAAI,EAAC,QAAQ,CAAC,CAAA;IACd,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;iEADQ,kCAAa,oBAAb,kCAAa;;wDAYtC;AAWK;IAJL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;IAC/C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;IAChE,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,iBAAiB,EAAE,CAAC;IAC5D,IAAA,YAAG,EAAC,eAAe,CAAC;IACG,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;;;;4DAIjD;+BAvKU,oBAAoB;IALhC,IAAA,iBAAO,EAAC,aAAa,CAAC;IACtB,IAAA,uBAAa,GAAE;IACf,IAAA,mBAAU,EAAC,aAAa,CAAC;IACzB,IAAA,kBAAS,EAAC,wBAAU,CAAC;IACrB,IAAA,uBAAK,EAAC,iBAAI,CAAC,KAAK,CAAC;yDAGiB,4BAAY,oBAAZ,4BAAY,oDACT,mCAAe,oBAAf,mCAAe;GAHxC,oBAAoB,CAwKhC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\admin.users.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Patch, Delete, Param, Body, UseGuards, ParseUUIDPipe, HttpCode, HttpStatus } from '@nestjs/common';\r\nimport { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\r\nimport { UsersService } from './services/users.service';\r\nimport { CreateUsersDto } from './dtos/create.users.dto';\r\nimport { updateUsersDto } from './dtos/update.users.dto';\r\nimport { Roles } from '../role/roles.decorator';\r\nimport { RolesGuard } from '../role/roles.guard';\r\nimport { Role } from '../role/roles.enum';\r\nimport { AuditLogService } from '../audit/services/audit.log.service';\r\nimport { UserRole } from './enums/userRole.enum';\r\nimport { AccountStatus } from './enums/accountStatus.enum';\r\n\r\n/**\r\n * AdminUsersController handles admin-level user management operations.\r\n */\r\n@ApiTags('Admin Users')\r\n@ApiBearerAuth()\r\n@Controller('admin/users')\r\n@UseGuards(RolesGuard)\r\n@Roles(Role.Admin)\r\nexport class AdminUsersController {\r\n  constructor(\r\n    private readonly usersService: UsersService,\r\n    private readonly auditLogService: AuditLogService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new user (admin only)\r\n   * @param dto User creation data\r\n   * @param adminId ID of the admin performing the action\r\n   * @returns Created user data\r\n   */\r\n  @ApiOperation({ summary: 'Create a new user (admin only)' })\r\n  @ApiBody({ type: CreateUsersDto })\r\n  @ApiResponse({ status: 201, description: 'User created.' })\r\n  @Post()\r\n  async create(@Body() dto: CreateUsersDto, @Body('adminId') adminId: string) {\r\n    const user = await this.usersService.create(dto);\r\n    await this.auditLogService.createLog({\r\n      action: 'CREATE_USER',\r\n      entityType: 'User',\r\n      entityId: user.id,\r\n      performedBy: adminId,\r\n      details: { created: true },\r\n    });\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Get all users\r\n   * @returns List of users\r\n   */\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  @ApiResponse({ status: 200, description: 'List of users.' })\r\n  @Get()\r\n  async findAll() {\r\n    return this.usersService.findAll();\r\n  }\r\n\r\n  /**\r\n   * Get user by ID\r\n   * @param id User ID\r\n   * @returns User data\r\n   */\r\n  @ApiOperation({ summary: 'Get user by ID' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 200, description: 'User found.' })\r\n  @Get(':id')\r\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\r\n    return this.usersService.findOne(id);\r\n  }\r\n\r\n  /**\r\n   * Update user by ID\r\n   * @param id User ID\r\n   * @param dto User update data\r\n   * @param adminId ID of the admin performing the action\r\n   * @returns Updated user data\r\n   */\r\n  @ApiOperation({ summary: 'Update user by ID' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiBody({ type: updateUsersDto })\r\n  @ApiResponse({ status: 200, description: 'User updated.' })\r\n  @Patch(':id')\r\n  async update(@Param('id', ParseUUIDPipe) id: string, @Body() dto: updateUsersDto, @Body('adminId') adminId: string) {\r\n    const user = await this.usersService.update(id, dto);\r\n    await this.auditLogService.createLog({\r\n      action: 'UPDATE_USER',\r\n      entityType: 'User',\r\n      entityId: id,\r\n      performedBy: adminId,\r\n      details: { updated: true },\r\n    });\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Delete user by ID\r\n   * @param id User ID\r\n   * @param adminId ID of the admin performing the action\r\n   */\r\n  @ApiOperation({ summary: 'Delete user by ID' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 204, description: 'User deleted.' })\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  async delete(@Param('id', ParseUUIDPipe) id: string, @Body('adminId') adminId: string) {\r\n    await this.usersService.delete(id);\r\n    await this.auditLogService.createLog({\r\n      action: 'DELETE_USER',\r\n      entityType: 'User',\r\n      entityId: id,\r\n      performedBy: adminId,\r\n      details: { deleted: true },\r\n    });\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Update user role\r\n   * @param id User ID\r\n   * @param role New role for the user\r\n   * @param adminId ID of the admin performing the action\r\n   * @returns Updated user data\r\n   */\r\n  @ApiOperation({ summary: 'Update user role' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiBody({ schema: { properties: { role: { type: 'string', enum: UserRole }, adminId: { type: 'string' } } } })\r\n  @ApiResponse({ status: 200, description: 'User role updated.' })\r\n  @Patch(':id/role')\r\n  async updateRole(\r\n    @Param('id', ParseUUIDPipe) id: string,\r\n    @Body('role') role: UserRole,\r\n    @Body('adminId') adminId: string\r\n  ) {\r\n    const user = await this.usersService.update(id, { role });\r\n    await this.auditLogService.createLog({\r\n      action: 'UPDATE_ROLE',\r\n      entityType: 'User',\r\n      entityId: id,\r\n      performedBy: adminId,\r\n      details: { newRole: role },\r\n    });\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Update user account status\r\n   * @param id User ID\r\n   * @param status New status for the user\r\n   * @param adminId ID of the admin performing the action\r\n   * @returns Updated user data\r\n   */\r\n  @ApiOperation({ summary: 'Update user account status' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiBody({ schema: { properties: { status: { type: 'string', enum: AccountStatus }, adminId: { type: 'string' } } } })\r\n  @ApiResponse({ status: 200, description: 'User status updated.' })\r\n  @Patch(':id/status')\r\n  async updateStatus(\r\n    @Param('id', ParseUUIDPipe) id: string,\r\n    @Body('status') status: AccountStatus,\r\n    @Body('adminId') adminId: string\r\n  ) {\r\n    const user = await this.usersService.update(id, { status });\r\n    await this.auditLogService.createLog({\r\n      action: 'UPDATE_STATUS',\r\n      entityType: 'User',\r\n      entityId: id,\r\n      performedBy: adminId,\r\n      details: { newStatus: status },\r\n    });\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Get user analytics\r\n   * @param id User ID\r\n   * @returns User analytics data\r\n   */\r\n  @ApiOperation({ summary: 'Get user analytics' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 200, description: 'User analytics.' })\r\n  @Get(':id/analytics')\r\n  async getUserAnalytics(@Param('id', ParseUUIDPipe) id: string) {\r\n    // This should call analyticsService for user-specific analytics\r\n    // Placeholder: return basic info for now\r\n    return { message: 'User analytics endpoint (to be implemented)' };\r\n  }\r\n}\r\n"],"version":3}