83b40a6fc3f9eaa8e7063bbe8c65c95b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminUsersController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const users_service_1 = require("./services/users.service");
const create_users_dto_1 = require("./dtos/create.users.dto");
const update_users_dto_1 = require("./dtos/update.users.dto");
const roles_decorator_1 = require("../role/roles.decorator");
const roles_guard_1 = require("../role/roles.guard");
const roles_enum_1 = require("../role/roles.enum");
const audit_log_service_1 = require("../audit/services/audit.log.service");
const userRole_enum_1 = require("./enums/userRole.enum");
const accountStatus_enum_1 = require("./enums/accountStatus.enum");
/**
 * AdminUsersController handles admin-level user management operations.
 */
let AdminUsersController = class AdminUsersController {
    constructor(usersService, auditLogService) {
        this.usersService = usersService;
        this.auditLogService = auditLogService;
    }
    /**
     * Create a new user (admin only)
     * @param dto User creation data
     * @param adminId ID of the admin performing the action
     * @returns Created user data
     */
    async create(dto, adminId) {
        const user = await this.usersService.create(dto);
        await this.auditLogService.createLog({
            action: 'CREATE_USER',
            entityType: 'User',
            entityId: user.id,
            performedBy: adminId,
            details: { created: true },
        });
        return user;
    }
    /**
     * Get all users
     * @returns List of users
     */
    async findAll() {
        return this.usersService.findAll();
    }
    /**
     * Get user by ID
     * @param id User ID
     * @returns User data
     */
    async findOne(id) {
        return this.usersService.findOne(id);
    }
    /**
     * Update user by ID
     * @param id User ID
     * @param dto User update data
     * @param adminId ID of the admin performing the action
     * @returns Updated user data
     */
    async update(id, dto, adminId) {
        const user = await this.usersService.update(id, dto);
        await this.auditLogService.createLog({
            action: 'UPDATE_USER',
            entityType: 'User',
            entityId: id,
            performedBy: adminId,
            details: { updated: true },
        });
        return user;
    }
    /**
     * Delete user by ID
     * @param id User ID
     * @param adminId ID of the admin performing the action
     */
    async delete(id, adminId) {
        await this.usersService.delete(id);
        await this.auditLogService.createLog({
            action: 'DELETE_USER',
            entityType: 'User',
            entityId: id,
            performedBy: adminId,
            details: { deleted: true },
        });
        return;
    }
    /**
     * Update user role
     * @param id User ID
     * @param role New role for the user
     * @param adminId ID of the admin performing the action
     * @returns Updated user data
     */
    async updateRole(id, role, adminId) {
        const user = await this.usersService.update(id, { role });
        await this.auditLogService.createLog({
            action: 'UPDATE_ROLE',
            entityType: 'User',
            entityId: id,
            performedBy: adminId,
            details: { newRole: role },
        });
        return user;
    }
    /**
     * Update user account status
     * @param id User ID
     * @param status New status for the user
     * @param adminId ID of the admin performing the action
     * @returns Updated user data
     */
    async updateStatus(id, status, adminId) {
        const user = await this.usersService.update(id, { status });
        await this.auditLogService.createLog({
            action: 'UPDATE_STATUS',
            entityType: 'User',
            entityId: id,
            performedBy: adminId,
            details: { newStatus: status },
        });
        return user;
    }
    /**
     * Get user analytics
     * @param id User ID
     * @returns User analytics data
     */
    async getUserAnalytics(id) {
        // This should call analyticsService for user-specific analytics
        // Placeholder: return basic info for now
        return { message: 'User analytics endpoint (to be implemented)' };
    }
};
exports.AdminUsersController = AdminUsersController;
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Create a new user (admin only)' }),
    (0, swagger_1.ApiBody)({ type: create_users_dto_1.CreateUsersDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'User created.' }),
    (0, common_1.Post)(),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Body)('adminId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof create_users_dto_1.CreateUsersDto !== "undefined" && create_users_dto_1.CreateUsersDto) === "function" ? _c : Object, String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "create", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get all users' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of users.' }),
    (0, common_1.Get)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "findAll", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get user by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User found.' }),
    (0, common_1.Get)(':id'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "findOne", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update user by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: update_users_dto_1.updateUsersDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User updated.' }),
    (0, common_1.Patch)(':id'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Body)('adminId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof update_users_dto_1.updateUsersDto !== "undefined" && update_users_dto_1.updateUsersDto) === "function" ? _d : Object, String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "update", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Delete user by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'User deleted.' }),
    (0, common_1.Delete)(':id'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('adminId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "delete", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update user role' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { role: { type: 'string', enum: userRole_enum_1.UserRole }, adminId: { type: 'string' } } } }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User role updated.' }),
    (0, common_1.Patch)(':id/role'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('role')),
    __param(2, (0, common_1.Body)('adminId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof userRole_enum_1.UserRole !== "undefined" && userRole_enum_1.UserRole) === "function" ? _e : Object, String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "updateRole", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update user account status' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { status: { type: 'string', enum: accountStatus_enum_1.AccountStatus }, adminId: { type: 'string' } } } }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User status updated.' }),
    (0, common_1.Patch)(':id/status'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('status')),
    __param(2, (0, common_1.Body)('adminId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof accountStatus_enum_1.AccountStatus !== "undefined" && accountStatus_enum_1.AccountStatus) === "function" ? _f : Object, String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "updateStatus", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get user analytics' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User analytics.' }),
    (0, common_1.Get)(':id/analytics'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AdminUsersController.prototype, "getUserAnalytics", null);
exports.AdminUsersController = AdminUsersController = __decorate([
    (0, swagger_1.ApiTags)('Admin Users'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('admin/users'),
    (0, common_1.UseGuards)(roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(roles_enum_1.Role.Admin),
    __metadata("design:paramtypes", [typeof (_a = typeof users_service_1.UsersService !== "undefined" && users_service_1.UsersService) === "function" ? _a : Object, typeof (_b = typeof audit_log_service_1.AuditLogService !== "undefined" && audit_log_service_1.AuditLogService) === "function" ? _b : Object])
], AdminUsersController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,