6f503cc6435e3062be84905043a604c3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video = exports.VideoFormat = exports.VideoVisibility = exports.VideoStatus = void 0;
const typeorm_1 = require("typeorm");
const swagger_1 = require("@nestjs/swagger");
const user_entity_1 = require("../../users/entities/user.entity");
const lesson_entity_1 = require("../../lesson/entity/lesson.entity");
const video_quality_entity_1 = require("./video-quality.entity");
const video_analytics_entity_1 = require("./video-analytics.entity");
var VideoStatus;
(function (VideoStatus) {
    VideoStatus["UPLOADING"] = "uploading";
    VideoStatus["PROCESSING"] = "processing";
    VideoStatus["READY"] = "ready";
    VideoStatus["FAILED"] = "failed";
    VideoStatus["ARCHIVED"] = "archived";
})(VideoStatus || (exports.VideoStatus = VideoStatus = {}));
var VideoVisibility;
(function (VideoVisibility) {
    VideoVisibility["PUBLIC"] = "public";
    VideoVisibility["PRIVATE"] = "private";
    VideoVisibility["UNLISTED"] = "unlisted";
    VideoVisibility["COURSE_ONLY"] = "course_only";
})(VideoVisibility || (exports.VideoVisibility = VideoVisibility = {}));
var VideoFormat;
(function (VideoFormat) {
    VideoFormat["MP4"] = "mp4";
    VideoFormat["WEBM"] = "webm";
    VideoFormat["HLS"] = "hls";
    VideoFormat["DASH"] = "dash";
})(VideoFormat || (exports.VideoFormat = VideoFormat = {}));
let Video = class Video {
    // Computed properties
    get isProcessed() {
        return this.status === VideoStatus.READY;
    }
    get hasAdaptiveStreaming() {
        return !!(this.hlsUrl || this.dashUrl);
    }
    get aspectRatio() {
        if (this.width && this.height) {
            return this.width / this.height;
        }
        return null;
    }
    get formattedDuration() {
        if (!this.duration)
            return '0:00';
        const hours = Math.floor(this.duration / 3600);
        const minutes = Math.floor((this.duration % 3600) / 60);
        const seconds = this.duration % 60;
        if (hours > 0) {
            return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    get formattedFileSize() {
        if (!this.fileSize)
            return '0 B';
        const units = ['B', 'KB', 'MB', 'GB', 'TB'];
        let size = Number(this.fileSize);
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        return `${size.toFixed(1)} ${units[unitIndex]}`;
    }
};
exports.Video = Video;
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video ID' }),
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], Video.prototype, "id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video title' }),
    (0, typeorm_1.Column)({ length: 255 }),
    __metadata("design:type", String)
], Video.prototype, "title", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video description' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "description", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Original filename' }),
    (0, typeorm_1.Column)({ length: 255 }),
    __metadata("design:type", String)
], Video.prototype, "originalFilename", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video status', enum: VideoStatus }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: VideoStatus,
        default: VideoStatus.UPLOADING,
    }),
    __metadata("design:type", String)
], Video.prototype, "status", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video visibility', enum: VideoVisibility }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: VideoVisibility,
        default: VideoVisibility.PRIVATE,
    }),
    __metadata("design:type", String)
], Video.prototype, "visibility", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video duration in seconds' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "duration", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video file size in bytes' }),
    (0, typeorm_1.Column)({ type: 'bigint', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "fileSize", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video width in pixels' }),
    (0, typeorm_1.Column)({ type: 'int', nullable: true }),
    __metadata("design:type", Number)
], Video.prototype, "width", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video height in pixels' }),
    (0, typeorm_1.Column)({ type: 'int', nullable: true }),
    __metadata("design:type", Number)
], Video.prototype, "height", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video frame rate' }),
    (0, typeorm_1.Column)({ type: 'float', nullable: true }),
    __metadata("design:type", Number)
], Video.prototype, "frameRate", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video bitrate in kbps' }),
    (0, typeorm_1.Column)({ type: 'int', nullable: true }),
    __metadata("design:type", Number)
], Video.prototype, "bitrate", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video codec' }),
    (0, typeorm_1.Column)({ length: 50, nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "codec", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Audio codec' }),
    (0, typeorm_1.Column)({ length: 50, nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "audioCodec", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Primary streaming URL' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "streamingUrl", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'HLS manifest URL' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "hlsUrl", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'DASH manifest URL' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "dashUrl", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Thumbnail URL' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "thumbnailUrl", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Preview GIF URL' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "previewUrl", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'CloudFront distribution domain' }),
    (0, typeorm_1.Column)({ length: 255, nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "cdnDomain", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'S3 bucket name' }),
    (0, typeorm_1.Column)({ length: 255, nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "s3Bucket", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'S3 object key' }),
    (0, typeorm_1.Column)({ length: 500, nullable: true }),
    __metadata("design:type", String)
], Video.prototype, "s3Key", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video metadata' }),
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], Video.prototype, "metadata", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Security settings' }),
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], Video.prototype, "securitySettings", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Processing settings' }),
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], Video.prototype, "processingSettings", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'View count' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "viewCount", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Like count' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "likeCount", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Share count' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "shareCount", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Average rating' }),
    (0, typeorm_1.Column)({ type: 'decimal', precision: 3, scale: 2, default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "averageRating", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Total rating count' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], Video.prototype, "ratingCount", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'User who uploaded the video' }),
    (0, typeorm_1.ManyToOne)(() => user_entity_1.User, { nullable: false }),
    (0, typeorm_1.JoinColumn)({ name: 'uploaded_by' }),
    __metadata("design:type", typeof (_a = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _a : Object)
], Video.prototype, "uploadedBy", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Associated lesson' }),
    (0, typeorm_1.ManyToOne)(() => lesson_entity_1.Lesson, (lesson) => lesson.videoUrl, { nullable: true }),
    __metadata("design:type", typeof (_b = typeof lesson_entity_1.Lesson !== "undefined" && lesson_entity_1.Lesson) === "function" ? _b : Object)
], Video.prototype, "lesson", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video quality variants' }),
    (0, typeorm_1.OneToMany)(() => video_quality_entity_1.VideoQuality, (quality) => quality.video, { cascade: true }),
    __metadata("design:type", Array)
], Video.prototype, "qualityVariants", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video analytics' }),
    (0, typeorm_1.OneToMany)(() => video_analytics_entity_1.VideoAnalytics, (analytics) => analytics.video, { cascade: true }),
    __metadata("design:type", Array)
], Video.prototype, "analytics", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Creation date' }),
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], Video.prototype, "createdAt", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Last update date' }),
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], Video.prototype, "updatedAt", void 0);
exports.Video = Video = __decorate([
    (0, typeorm_1.Entity)('videos'),
    (0, typeorm_1.Index)(['status']),
    (0, typeorm_1.Index)(['visibility']),
    (0, typeorm_1.Index)(['uploadedBy']),
    (0, typeorm_1.Index)(['createdAt'])
], Video);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,