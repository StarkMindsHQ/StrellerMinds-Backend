{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\gateways\\analytics.gateway.ts","mappings":";;;;;;;;;;;;;AAAA,mDAK2B;AAE3B,2CAAuC;AAqBhC,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IAAtB;QAIY,WAAM,GAAG,IAAI,eAAM,CAAC,kBAAgB,CAAC,IAAI,CAAC,CAAA;QACnD,qBAAgB,GAAG,IAAI,GAAG,EAAU,CAAA;IAsD9C,CAAC;IApDC,gBAAgB,CAAC,MAAc;QAC7B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACpC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA;QAEjD,uCAAuC;QACvC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;YACvB,OAAO,EAAE,uCAAuC;YAChD,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAA;IACJ,CAAC;IAED,gBAAgB,CAAC,MAAc;QAC7B,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAED,wBAAwB,CAAC,MAAc,EAAE,IAA6B;QACpE,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,EAAE,4BAA4B,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QAElF,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE;YACpC,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAA;IACJ,CAAC;IAED,0BAA0B,CAAC,MAAc,EAAE,IAA6B;QACtE,MAAM,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QAC7C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,EAAE,gCAAgC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;IACxF,CAAC;IAED,iBAAiB,CAAC,KAAoB;QACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAC5C,CAAC;IAED,mBAAmB,CAAC,OAAyB;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACpC,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAA;IACJ,CAAC;IAED,eAAe,CAAC,WAAmB,EAAE,KAAa,EAAE,IAAS;QAC3D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE;YACrD,GAAG,IAAI;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAA;IACJ,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAA;IACnC,CAAC;CACF,CAAA;AA3DY,4CAAgB;AAE3B;IADC,IAAA,4BAAe,GAAE;;gDACJ;2BAFH,gBAAgB;IAN5B,IAAA,6BAAgB,EAAC;QAChB,IAAI,EAAE;YACJ,MAAM,EAAE,GAAG;SACZ;QACD,SAAS,EAAE,YAAY;KACxB,CAAC;GACW,gBAAgB,CA2D5B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\gateways\\analytics.gateway.ts"],"sourcesContent":["import {\r\n  WebSocketGateway,\r\n  WebSocketServer,\r\n  type OnGatewayConnection,\r\n  type OnGatewayDisconnect,\r\n} from \"@nestjs/websockets\"\r\nimport type { Server, Socket } from \"socket.io\"\r\nimport { Logger } from \"@nestjs/common\"\r\n\r\ninterface RealTimeEvent {\r\n  type: string\r\n  data: any\r\n  timestamp: Date\r\n}\r\n\r\ninterface RealTimeMetric {\r\n  name: string\r\n  value: number\r\n  timestamp: Date\r\n  dimensions?: Record<string, string>\r\n}\r\n\r\n@WebSocketGateway({\r\n  cors: {\r\n    origin: \"*\",\r\n  },\r\n  namespace: \"/analytics\",\r\n})\r\nexport class AnalyticsGateway implements OnGatewayConnection, OnGatewayDisconnect {\r\n  @WebSocketServer()\r\n  server: Server\r\n\r\n  private readonly logger = new Logger(AnalyticsGateway.name)\r\n  private connectedClients = new Set<string>()\r\n\r\n  handleConnection(client: Socket) {\r\n    this.connectedClients.add(client.id)\r\n    this.logger.log(`Client connected: ${client.id}`)\r\n\r\n    // Send initial connection confirmation\r\n    client.emit(\"connected\", {\r\n      message: \"Connected to analytics real-time feed\",\r\n      timestamp: new Date(),\r\n    })\r\n  }\r\n\r\n  handleDisconnect(client: Socket) {\r\n    this.connectedClients.delete(client.id)\r\n    this.logger.log(`Client disconnected: ${client.id}`)\r\n  }\r\n\r\n  handleSubscribeDashboard(client: Socket, data: { dashboardId: string }) {\r\n    client.join(`dashboard-${data.dashboardId}`)\r\n    this.logger.log(`Client ${client.id} subscribed to dashboard ${data.dashboardId}`)\r\n\r\n    client.emit(\"subscription-confirmed\", {\r\n      dashboardId: data.dashboardId,\r\n      timestamp: new Date(),\r\n    })\r\n  }\r\n\r\n  handleUnsubscribeDashboard(client: Socket, data: { dashboardId: string }) {\r\n    client.leave(`dashboard-${data.dashboardId}`)\r\n    this.logger.log(`Client ${client.id} unsubscribed from dashboard ${data.dashboardId}`)\r\n  }\r\n\r\n  emitRealTimeEvent(event: RealTimeEvent): void {\r\n    this.server.emit(\"real-time-event\", event)\r\n  }\r\n\r\n  emitRealTimeMetrics(metrics: RealTimeMetric[]): void {\r\n    this.server.emit(\"real-time-metrics\", {\r\n      metrics,\r\n      timestamp: new Date(),\r\n    })\r\n  }\r\n\r\n  emitToDashboard(dashboardId: string, event: string, data: any): void {\r\n    this.server.to(`dashboard-${dashboardId}`).emit(event, {\r\n      ...data,\r\n      timestamp: new Date(),\r\n    })\r\n  }\r\n\r\n  getConnectedClientsCount(): number {\r\n    return this.connectedClients.size\r\n  }\r\n}\r\n"],"version":3}