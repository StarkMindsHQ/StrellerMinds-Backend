e6e0b8784eda5d1e8d89cf1c02daca11
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AnalyticsGateway_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsGateway = void 0;
const websockets_1 = require("@nestjs/websockets");
const common_1 = require("@nestjs/common");
let AnalyticsGateway = AnalyticsGateway_1 = class AnalyticsGateway {
    constructor() {
        this.logger = new common_1.Logger(AnalyticsGateway_1.name);
        this.connectedClients = new Set();
    }
    handleConnection(client) {
        this.connectedClients.add(client.id);
        this.logger.log(`Client connected: ${client.id}`);
        // Send initial connection confirmation
        client.emit("connected", {
            message: "Connected to analytics real-time feed",
            timestamp: new Date(),
        });
    }
    handleDisconnect(client) {
        this.connectedClients.delete(client.id);
        this.logger.log(`Client disconnected: ${client.id}`);
    }
    handleSubscribeDashboard(client, data) {
        client.join(`dashboard-${data.dashboardId}`);
        this.logger.log(`Client ${client.id} subscribed to dashboard ${data.dashboardId}`);
        client.emit("subscription-confirmed", {
            dashboardId: data.dashboardId,
            timestamp: new Date(),
        });
    }
    handleUnsubscribeDashboard(client, data) {
        client.leave(`dashboard-${data.dashboardId}`);
        this.logger.log(`Client ${client.id} unsubscribed from dashboard ${data.dashboardId}`);
    }
    emitRealTimeEvent(event) {
        this.server.emit("real-time-event", event);
    }
    emitRealTimeMetrics(metrics) {
        this.server.emit("real-time-metrics", {
            metrics,
            timestamp: new Date(),
        });
    }
    emitToDashboard(dashboardId, event, data) {
        this.server.to(`dashboard-${dashboardId}`).emit(event, {
            ...data,
            timestamp: new Date(),
        });
    }
    getConnectedClientsCount() {
        return this.connectedClients.size;
    }
};
exports.AnalyticsGateway = AnalyticsGateway;
__decorate([
    (0, websockets_1.WebSocketServer)(),
    __metadata("design:type", Object)
], AnalyticsGateway.prototype, "server", void 0);
exports.AnalyticsGateway = AnalyticsGateway = AnalyticsGateway_1 = __decorate([
    (0, websockets_1.WebSocketGateway)({
        cors: {
            origin: "*",
        },
        namespace: "/analytics",
    })
], AnalyticsGateway);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhbmFseXRpY1xcZ2F0ZXdheXNcXGFuYWx5dGljcy5nYXRld2F5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxtREFLMkI7QUFFM0IsMkNBQXVDO0FBcUJoQyxJQUFNLGdCQUFnQix3QkFBdEIsTUFBTSxnQkFBZ0I7SUFBdEI7UUFJWSxXQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsa0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbkQscUJBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQTtJQXNEOUMsQ0FBQztJQXBEQyxnQkFBZ0IsQ0FBQyxNQUFjO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFxQixNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUVqRCx1Q0FBdUM7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkIsT0FBTyxFQUFFLHVDQUF1QztZQUNoRCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDdEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQWM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3RELENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxNQUFjLEVBQUUsSUFBNkI7UUFDcEUsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsTUFBTSxDQUFDLEVBQUUsNEJBQTRCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBRWxGLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7WUFDcEMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtTQUN0QixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsMEJBQTBCLENBQUMsTUFBYyxFQUFFLElBQTZCO1FBQ3RFLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxFQUFFLGdDQUFnQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUN4RixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBb0I7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVELG1CQUFtQixDQUFDLE9BQXlCO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQ3BDLE9BQU87WUFDUCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDdEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUFtQixFQUFFLEtBQWEsRUFBRSxJQUFTO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3JELEdBQUcsSUFBSTtZQUNQLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtTQUN0QixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsd0JBQXdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQTtJQUNuQyxDQUFDO0NBQ0YsQ0FBQTtBQTNEWSw0Q0FBZ0I7QUFFM0I7SUFEQyxJQUFBLDRCQUFlLEdBQUU7O2dEQUNKOzJCQUZILGdCQUFnQjtJQU41QixJQUFBLDZCQUFnQixFQUFDO1FBQ2hCLElBQUksRUFBRTtZQUNKLE1BQU0sRUFBRSxHQUFHO1NBQ1o7UUFDRCxTQUFTLEVBQUUsWUFBWTtLQUN4QixDQUFDO0dBQ1csZ0JBQWdCLENBMkQ1QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGFuYWx5dGljXFxnYXRld2F5c1xcYW5hbHl0aWNzLmdhdGV3YXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBXZWJTb2NrZXRHYXRld2F5LFxyXG4gIFdlYlNvY2tldFNlcnZlcixcclxuICB0eXBlIE9uR2F0ZXdheUNvbm5lY3Rpb24sXHJcbiAgdHlwZSBPbkdhdGV3YXlEaXNjb25uZWN0LFxyXG59IGZyb20gXCJAbmVzdGpzL3dlYnNvY2tldHNcIlxyXG5pbXBvcnQgdHlwZSB7IFNlcnZlciwgU29ja2V0IH0gZnJvbSBcInNvY2tldC5pb1wiXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAbmVzdGpzL2NvbW1vblwiXHJcblxyXG5pbnRlcmZhY2UgUmVhbFRpbWVFdmVudCB7XHJcbiAgdHlwZTogc3RyaW5nXHJcbiAgZGF0YTogYW55XHJcbiAgdGltZXN0YW1wOiBEYXRlXHJcbn1cclxuXHJcbmludGVyZmFjZSBSZWFsVGltZU1ldHJpYyB7XHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgdmFsdWU6IG51bWJlclxyXG4gIHRpbWVzdGFtcDogRGF0ZVxyXG4gIGRpbWVuc2lvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbn1cclxuXHJcbkBXZWJTb2NrZXRHYXRld2F5KHtcclxuICBjb3JzOiB7XHJcbiAgICBvcmlnaW46IFwiKlwiLFxyXG4gIH0sXHJcbiAgbmFtZXNwYWNlOiBcIi9hbmFseXRpY3NcIixcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0dhdGV3YXkgaW1wbGVtZW50cyBPbkdhdGV3YXlDb25uZWN0aW9uLCBPbkdhdGV3YXlEaXNjb25uZWN0IHtcclxuICBAV2ViU29ja2V0U2VydmVyKClcclxuICBzZXJ2ZXI6IFNlcnZlclxyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlciA9IG5ldyBMb2dnZXIoQW5hbHl0aWNzR2F0ZXdheS5uYW1lKVxyXG4gIHByaXZhdGUgY29ubmVjdGVkQ2xpZW50cyA9IG5ldyBTZXQ8c3RyaW5nPigpXHJcblxyXG4gIGhhbmRsZUNvbm5lY3Rpb24oY2xpZW50OiBTb2NrZXQpIHtcclxuICAgIHRoaXMuY29ubmVjdGVkQ2xpZW50cy5hZGQoY2xpZW50LmlkKVxyXG4gICAgdGhpcy5sb2dnZXIubG9nKGBDbGllbnQgY29ubmVjdGVkOiAke2NsaWVudC5pZH1gKVxyXG5cclxuICAgIC8vIFNlbmQgaW5pdGlhbCBjb25uZWN0aW9uIGNvbmZpcm1hdGlvblxyXG4gICAgY2xpZW50LmVtaXQoXCJjb25uZWN0ZWRcIiwge1xyXG4gICAgICBtZXNzYWdlOiBcIkNvbm5lY3RlZCB0byBhbmFseXRpY3MgcmVhbC10aW1lIGZlZWRcIixcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhhbmRsZURpc2Nvbm5lY3QoY2xpZW50OiBTb2NrZXQpIHtcclxuICAgIHRoaXMuY29ubmVjdGVkQ2xpZW50cy5kZWxldGUoY2xpZW50LmlkKVxyXG4gICAgdGhpcy5sb2dnZXIubG9nKGBDbGllbnQgZGlzY29ubmVjdGVkOiAke2NsaWVudC5pZH1gKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlU3Vic2NyaWJlRGFzaGJvYXJkKGNsaWVudDogU29ja2V0LCBkYXRhOiB7IGRhc2hib2FyZElkOiBzdHJpbmcgfSkge1xyXG4gICAgY2xpZW50LmpvaW4oYGRhc2hib2FyZC0ke2RhdGEuZGFzaGJvYXJkSWR9YClcclxuICAgIHRoaXMubG9nZ2VyLmxvZyhgQ2xpZW50ICR7Y2xpZW50LmlkfSBzdWJzY3JpYmVkIHRvIGRhc2hib2FyZCAke2RhdGEuZGFzaGJvYXJkSWR9YClcclxuXHJcbiAgICBjbGllbnQuZW1pdChcInN1YnNjcmlwdGlvbi1jb25maXJtZWRcIiwge1xyXG4gICAgICBkYXNoYm9hcmRJZDogZGF0YS5kYXNoYm9hcmRJZCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhhbmRsZVVuc3Vic2NyaWJlRGFzaGJvYXJkKGNsaWVudDogU29ja2V0LCBkYXRhOiB7IGRhc2hib2FyZElkOiBzdHJpbmcgfSkge1xyXG4gICAgY2xpZW50LmxlYXZlKGBkYXNoYm9hcmQtJHtkYXRhLmRhc2hib2FyZElkfWApXHJcbiAgICB0aGlzLmxvZ2dlci5sb2coYENsaWVudCAke2NsaWVudC5pZH0gdW5zdWJzY3JpYmVkIGZyb20gZGFzaGJvYXJkICR7ZGF0YS5kYXNoYm9hcmRJZH1gKVxyXG4gIH1cclxuXHJcbiAgZW1pdFJlYWxUaW1lRXZlbnQoZXZlbnQ6IFJlYWxUaW1lRXZlbnQpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VydmVyLmVtaXQoXCJyZWFsLXRpbWUtZXZlbnRcIiwgZXZlbnQpXHJcbiAgfVxyXG5cclxuICBlbWl0UmVhbFRpbWVNZXRyaWNzKG1ldHJpY3M6IFJlYWxUaW1lTWV0cmljW10pOiB2b2lkIHtcclxuICAgIHRoaXMuc2VydmVyLmVtaXQoXCJyZWFsLXRpbWUtbWV0cmljc1wiLCB7XHJcbiAgICAgIG1ldHJpY3MsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBlbWl0VG9EYXNoYm9hcmQoZGFzaGJvYXJkSWQ6IHN0cmluZywgZXZlbnQ6IHN0cmluZywgZGF0YTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLnNlcnZlci50byhgZGFzaGJvYXJkLSR7ZGFzaGJvYXJkSWR9YCkuZW1pdChldmVudCwge1xyXG4gICAgICAuLi5kYXRhLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0Q29ubmVjdGVkQ2xpZW50c0NvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWRDbGllbnRzLnNpemVcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9