{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\winston.config.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\logging\\winston.config.ts"],"sourcesContent":["import * as winston from 'winston';\r\nimport * as DailyRotateFile from 'winston-daily-rotate-file';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\nexport interface LoggingConfig {\r\n  level: string;\r\n  format: 'json' | 'text';\r\n  file: {\r\n    enabled: boolean;\r\n    path: string;\r\n    maxSize: string;\r\n    maxFiles: number;\r\n  };\r\n  console: {\r\n    enabled: boolean;\r\n    colorize: boolean;\r\n  };\r\n  errorFile: {\r\n    enabled: boolean;\r\n    path: string;\r\n    maxSize: string;\r\n    maxFiles: number;\r\n  };\r\n}\r\n\r\nexport class WinstonConfigService {\r\n  private readonly config: LoggingConfig;\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    this.config = {\r\n      level: this.configService.get<string>('LOG_LEVEL', 'info'),\r\n      format: this.configService.get<'json' | 'text'>('LOG_FORMAT', 'json'),\r\n      file: {\r\n        enabled: this.configService.get<boolean>('LOG_FILE_ENABLED', true),\r\n        path: this.configService.get<string>('LOG_FILE_PATH', 'logs/app-%DATE%.log'),\r\n        maxSize: this.configService.get<string>('LOG_FILE_MAX_SIZE', '20m'),\r\n        maxFiles: this.configService.get<number>('LOG_FILE_MAX_FILES', 14),\r\n      },\r\n      console: {\r\n        enabled: this.configService.get<boolean>('LOG_CONSOLE_ENABLED', true),\r\n        colorize: this.configService.get<boolean>('LOG_CONSOLE_COLORIZE', true),\r\n      },\r\n      errorFile: {\r\n        enabled: this.configService.get<boolean>('LOG_ERROR_FILE_ENABLED', true),\r\n        path: this.configService.get<string>('LOG_ERROR_FILE_PATH', 'logs/error-%DATE%.log'),\r\n        maxSize: this.configService.get<string>('LOG_ERROR_FILE_MAX_SIZE', '20m'),\r\n        maxFiles: this.configService.get<number>('LOG_ERROR_FILE_MAX_FILES', 30),\r\n      },\r\n    };\r\n  }\r\n\r\n  createWinstonLogger(): winston.Logger {\r\n    const transports: winston.transport[] = [];\r\n\r\n    // Console transport\r\n    if (this.config.console.enabled) {\r\n      transports.push(\r\n        new winston.transports.Console({\r\n          level: this.config.level,\r\n          format: this.getConsoleFormat(),\r\n        }),\r\n      );\r\n    }\r\n\r\n    // File transport for all logs\r\n    if (this.config.file.enabled) {\r\n      transports.push(\r\n        new DailyRotateFile({\r\n          level: this.config.level,\r\n          filename: this.config.file.path,\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: this.config.file.maxSize,\r\n          maxFiles: this.config.file.maxFiles,\r\n          format: this.getFileFormat(),\r\n          auditFile: 'logs/audit.json',\r\n        }),\r\n      );\r\n    }\r\n\r\n    // Error file transport (only errors and above)\r\n    if (this.config.errorFile.enabled) {\r\n      transports.push(\r\n        new DailyRotateFile({\r\n          level: 'error',\r\n          filename: this.config.errorFile.path,\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: this.config.errorFile.maxSize,\r\n          maxFiles: this.config.errorFile.maxFiles,\r\n          format: this.getFileFormat(),\r\n          auditFile: 'logs/error-audit.json',\r\n        }),\r\n      );\r\n    }\r\n\r\n    return winston.createLogger({\r\n      level: this.config.level,\r\n      format: this.getBaseFormat(),\r\n      transports,\r\n      exitOnError: false,\r\n      handleExceptions: true,\r\n      handleRejections: true,\r\n    });\r\n  }\r\n\r\n  private getBaseFormat(): winston.Logform.Format {\r\n    return winston.format.combine(\r\n      winston.format.timestamp({\r\n        format: 'YYYY-MM-DD HH:mm:ss.SSS',\r\n      }),\r\n      winston.format.errors({ stack: true }),\r\n      winston.format.metadata({\r\n        fillExcept: ['message', 'level', 'timestamp', 'label'],\r\n      }),\r\n    );\r\n  }\r\n\r\n  private getConsoleFormat(): winston.Logform.Format {\r\n    const formats = [this.getBaseFormat()];\r\n\r\n    if (this.config.console.colorize) {\r\n      formats.push(winston.format.colorize({ all: true }));\r\n    }\r\n\r\n    if (this.config.format === 'json') {\r\n      formats.push(winston.format.json());\r\n    } else {\r\n      formats.push(\r\n        winston.format.printf(({ timestamp, level, message, metadata, stack }) => {\r\n          let log = `${timestamp} [${level}] ${message}`;\r\n          \r\n          if (metadata && Object.keys(metadata).length > 0) {\r\n            log += ` ${JSON.stringify(metadata)}`;\r\n          }\r\n          \r\n          if (stack) {\r\n            log += `\\n${stack}`;\r\n          }\r\n          \r\n          return log;\r\n        }),\r\n      );\r\n    }\r\n\r\n    return winston.format.combine(...formats);\r\n  }\r\n\r\n  private getFileFormat(): winston.Logform.Format {\r\n    return winston.format.combine(\r\n      this.getBaseFormat(),\r\n      winston.format.json(),\r\n    );\r\n  }\r\n}\r\n"],"version":3}