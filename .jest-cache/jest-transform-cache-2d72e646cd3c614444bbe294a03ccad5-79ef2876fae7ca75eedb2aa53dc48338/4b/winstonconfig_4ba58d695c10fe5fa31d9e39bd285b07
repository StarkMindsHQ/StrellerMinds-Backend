bddc9b67ecf31936948e4e371a43cf99
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WinstonConfigService = void 0;
const winston = __importStar(require("winston"));
const DailyRotateFile = __importStar(require("winston-daily-rotate-file"));
class WinstonConfigService {
    constructor(configService) {
        this.configService = configService;
        this.config = {
            level: this.configService.get('LOG_LEVEL', 'info'),
            format: this.configService.get('LOG_FORMAT', 'json'),
            file: {
                enabled: this.configService.get('LOG_FILE_ENABLED', true),
                path: this.configService.get('LOG_FILE_PATH', 'logs/app-%DATE%.log'),
                maxSize: this.configService.get('LOG_FILE_MAX_SIZE', '20m'),
                maxFiles: this.configService.get('LOG_FILE_MAX_FILES', 14),
            },
            console: {
                enabled: this.configService.get('LOG_CONSOLE_ENABLED', true),
                colorize: this.configService.get('LOG_CONSOLE_COLORIZE', true),
            },
            errorFile: {
                enabled: this.configService.get('LOG_ERROR_FILE_ENABLED', true),
                path: this.configService.get('LOG_ERROR_FILE_PATH', 'logs/error-%DATE%.log'),
                maxSize: this.configService.get('LOG_ERROR_FILE_MAX_SIZE', '20m'),
                maxFiles: this.configService.get('LOG_ERROR_FILE_MAX_FILES', 30),
            },
        };
    }
    createWinstonLogger() {
        const transports = [];
        // Console transport
        if (this.config.console.enabled) {
            transports.push(new winston.transports.Console({
                level: this.config.level,
                format: this.getConsoleFormat(),
            }));
        }
        // File transport for all logs
        if (this.config.file.enabled) {
            transports.push(new DailyRotateFile({
                level: this.config.level,
                filename: this.config.file.path,
                datePattern: 'YYYY-MM-DD',
                maxSize: this.config.file.maxSize,
                maxFiles: this.config.file.maxFiles,
                format: this.getFileFormat(),
                auditFile: 'logs/audit.json',
            }));
        }
        // Error file transport (only errors and above)
        if (this.config.errorFile.enabled) {
            transports.push(new DailyRotateFile({
                level: 'error',
                filename: this.config.errorFile.path,
                datePattern: 'YYYY-MM-DD',
                maxSize: this.config.errorFile.maxSize,
                maxFiles: this.config.errorFile.maxFiles,
                format: this.getFileFormat(),
                auditFile: 'logs/error-audit.json',
            }));
        }
        return winston.createLogger({
            level: this.config.level,
            format: this.getBaseFormat(),
            transports,
            exitOnError: false,
            handleExceptions: true,
            handleRejections: true,
        });
    }
    getBaseFormat() {
        return winston.format.combine(winston.format.timestamp({
            format: 'YYYY-MM-DD HH:mm:ss.SSS',
        }), winston.format.errors({ stack: true }), winston.format.metadata({
            fillExcept: ['message', 'level', 'timestamp', 'label'],
        }));
    }
    getConsoleFormat() {
        const formats = [this.getBaseFormat()];
        if (this.config.console.colorize) {
            formats.push(winston.format.colorize({ all: true }));
        }
        if (this.config.format === 'json') {
            formats.push(winston.format.json());
        }
        else {
            formats.push(winston.format.printf(({ timestamp, level, message, metadata, stack }) => {
                let log = `${timestamp} [${level}] ${message}`;
                if (metadata && Object.keys(metadata).length > 0) {
                    log += ` ${JSON.stringify(metadata)}`;
                }
                if (stack) {
                    log += `\n${stack}`;
                }
                return log;
            }));
        }
        return winston.format.combine(...formats);
    }
    getFileFormat() {
        return winston.format.combine(this.getBaseFormat(), winston.format.json());
    }
}
exports.WinstonConfigService = WinstonConfigService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,