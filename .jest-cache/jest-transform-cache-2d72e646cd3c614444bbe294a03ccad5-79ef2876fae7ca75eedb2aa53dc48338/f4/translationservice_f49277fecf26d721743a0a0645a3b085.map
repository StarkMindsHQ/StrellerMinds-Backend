{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\translation.service.ts","mappings":";;;;;;;;;;;;;AAAA,2CAAsE;AAGtE,uEAAuG;AA+BhG,IAAM,kBAAkB,0BAAxB,MAAM,kBAAkB;IAG7B,YACmB,qBAA8C,EAC9C,UAAsB;QADtB,0BAAqB,GAArB,qBAAqB,CAAyB;QAC9C,eAAU,GAAV,UAAU,CAAY;QAJxB,WAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAA;IAK1D,CAAC;IAEJ,KAAK,CAAC,iBAAiB,CAAC,GAAyB;QAC/C,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;YACnE,KAAK,EAAE;gBACL,GAAG,EAAE,GAAG,CAAC,GAAG;gBACZ,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB;SACF,CAAC,CAAA;QAEF,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,CAAC,GAAG,aAAa,GAAG,CAAC,MAAM,EAAE,CAAC,CAAA;QAC1F,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC;YACpD,GAAG,GAAG;YACN,MAAM,EAAE,sCAAiB,CAAC,KAAK;YAC/B,MAAM,EAAE,sCAAiB,CAAC,MAAM;YAChC,OAAO,EAAE,CAAC;SACX,CAAC,CAAA;QAEF,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IACrD,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,EAAU,EAAE,GAAyB;QAC3D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;QAC/E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAA;QACpE,CAAC;QAED,sCAAsC;QACtC,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE,CAAC;YACjD,WAAW,CAAC,OAAO,IAAI,CAAC,CAAA;YACxB,WAAW,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAA;QACvC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAA;QAC/B,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IACrD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,UAA8B,EAAE;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAA;QAE1E,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,KAAK,CAAC,QAAQ,CAAC,8BAA8B,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;QAC5E,CAAC;QAED,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACtB,KAAK,CAAC,QAAQ,CAAC,oCAAoC,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAA;QACxF,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,KAAK,CAAC,QAAQ,CAAC,8BAA8B,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;QAC5E,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,KAAK,CAAC,QAAQ,CAAC,8BAA8B,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;QAC5E,CAAC;QAED,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5C,KAAK,CAAC,QAAQ,CAAC,+BAA+B,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;QACzE,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,KAAK,CAAC,QAAQ,CACZ,6GAA6G,EAC7G,EAAE,MAAM,EAAE,IAAI,OAAO,CAAC,MAAM,GAAG,EAAE,CAClC,CAAA;QACH,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC,UAAU,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,CAAA;IACrG,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,EAAU;QACjC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;QAC/E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAA;QACpE,CAAC;QACD,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,EAAU;QAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAC1D,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAA;QACpE,CAAC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,YAAoC;QAC/D,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CACxC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC;YAChC,GAAG,GAAG;YACN,MAAM,EAAE,sCAAiB,CAAC,KAAK;YAC/B,MAAM,EAAE,sCAAiB,CAAC,MAAM;YAChC,OAAO,EAAE,CAAC;SACX,CAAC,CACH,CAAA;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAClD,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,GAAa,EAAE,MAAyB;QAC7D,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,EAAE;YAC3C,MAAM;YACN,GAAG,CAAC,MAAM,KAAK,sCAAiB,CAAC,SAAS,IAAI,EAAE,WAAW,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;SAC3E,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAe;QAMvC,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAA;QAE1E,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,KAAK,CAAC,8BAA8B,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;QACzD,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAA;QAE1C,MAAM,KAAK,GAAG;YACZ,KAAK,EAAE,YAAY,CAAC,MAAM;YAC1B,QAAQ,EAAE,EAAuC;YACjD,WAAW,EAAE,EAA4B;YACzC,oBAAoB,EAAE,CAAC;SACxB,CAAA;QAED,2BAA2B;QAC3B,MAAM,CAAC,MAAM,CAAC,sCAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAClD,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAA;QAEF,gCAAgC;QAChC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAA;YACpC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAChG,CAAC;QAED,kCAAkC;QAClC,MAAM,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,sCAAiB,CAAC,SAAS,CAAC,CAAA;QAClE,KAAK,CAAC,oBAAoB,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAEnG,OAAO,KAAK,CAAA;IACd,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,SAAkB;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,6CAA6C,MAAM,EAAE,CAAC,CAAA;QAEtE,IAAI,CAAC;YACH,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;YAEhF,KAAK,MAAM,cAAc,IAAI,eAAe,EAAE,CAAC;gBAC7C,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;oBACnE,KAAK,EAAE;wBACL,GAAG,EAAE,cAAc,CAAC,GAAG;wBACvB,MAAM,EAAE,cAAc,CAAC,MAAM;wBAC7B,SAAS,EAAE,cAAc,CAAC,SAAS;qBACpC;iBACF,CAAC,CAAA;gBAEF,IAAI,mBAAmB,EAAE,CAAC;oBACxB,IAAI,mBAAmB,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,EAAE,CAAC;wBACvD,MAAM,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,EAAE;4BACnD,KAAK,EAAE,cAAc,CAAC,KAAK;4BAC3B,MAAM,EAAE,sCAAiB,CAAC,QAAQ;yBACnC,CAAC,CAAA;oBACJ,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,CAAC,iBAAiB,CAAC;wBAC3B,GAAG,cAAc;wBACjB,MAAM,EAAE,sCAAiB,CAAC,GAAG;qBAC9B,CAAC,CAAA;gBACJ,CAAC;YACH,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kCAAkC,MAAM,EAAE,CAAC,CAAA;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,MAAM,EAAE,EAAE,KAAK,CAAC,CAAA;YACjE,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,SAAkB;QACzD,MAAM,OAAO,GAAuB;YAClC,MAAM;YACN,MAAM,EAAE,sCAAiB,CAAC,SAAS;SACpC,CAAA;QAED,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,CAAC,SAAS,GAAG,SAAS,CAAA;QAC/B,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;QAExD,MAAM,MAAM,GAA2B,EAAE,CAAA;QACzC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE,CAAA;YACvF,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,KAAK,CAAA;QACjC,CAAC;QAED,OAAO,MAAM,CAAA;IACf,CAAC;CACF,CAAA;AAnNY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;;GACA,kBAAkB,CAmN9B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\translation.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\n\r\nimport { type Translation, TranslationStatus, TranslationSource } from \"../entities/translation.entity\"\r\nimport type { TmsService } from \"./tms.service\"\r\n\r\nexport interface CreateTranslationDto {\r\n  key: string\r\n  locale: string\r\n  namespace: string\r\n  value: string\r\n  description?: string\r\n  context?: string\r\n  metadata?: any\r\n}\r\n\r\nexport interface UpdateTranslationDto {\r\n  value?: string\r\n  description?: string\r\n  context?: string\r\n  status?: TranslationStatus\r\n  metadata?: any\r\n}\r\n\r\nexport interface TranslationFilters {\r\n  locale?: string\r\n  namespace?: string\r\n  status?: TranslationStatus\r\n  source?: TranslationSource\r\n  search?: string\r\n  keys?: string[]\r\n}\r\n\r\n@Injectable()\r\nexport class TranslationService {\r\n  private readonly logger = new Logger(TranslationService.name)\r\n\r\n  constructor(\r\n    private readonly translationRepository: Repository<Translation>,\r\n    private readonly tmsService: TmsService,\r\n  ) {}\r\n\r\n  async createTranslation(dto: CreateTranslationDto): Promise<Translation> {\r\n    const existingTranslation = await this.translationRepository.findOne({\r\n      where: {\r\n        key: dto.key,\r\n        locale: dto.locale,\r\n        namespace: dto.namespace,\r\n      },\r\n    })\r\n\r\n    if (existingTranslation) {\r\n      throw new Error(`Translation already exists for key: ${dto.key}, locale: ${dto.locale}`)\r\n    }\r\n\r\n    const translation = this.translationRepository.create({\r\n      ...dto,\r\n      status: TranslationStatus.DRAFT,\r\n      source: TranslationSource.MANUAL,\r\n      version: 1,\r\n    })\r\n\r\n    return this.translationRepository.save(translation)\r\n  }\r\n\r\n  async updateTranslation(id: string, dto: UpdateTranslationDto): Promise<Translation> {\r\n    const translation = await this.translationRepository.findOne({ where: { id } })\r\n    if (!translation) {\r\n      throw new NotFoundException(`Translation with ID ${id} not found`)\r\n    }\r\n\r\n    // Create new version if value changed\r\n    if (dto.value && dto.value !== translation.value) {\r\n      translation.version += 1\r\n      translation.translatedAt = new Date()\r\n    }\r\n\r\n    Object.assign(translation, dto)\r\n    return this.translationRepository.save(translation)\r\n  }\r\n\r\n  async getTranslations(filters: TranslationFilters = {}): Promise<Translation[]> {\r\n    const query = this.translationRepository.createQueryBuilder(\"translation\")\r\n\r\n    if (filters.locale) {\r\n      query.andWhere(\"translation.locale = :locale\", { locale: filters.locale })\r\n    }\r\n\r\n    if (filters.namespace) {\r\n      query.andWhere(\"translation.namespace = :namespace\", { namespace: filters.namespace })\r\n    }\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"translation.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.source) {\r\n      query.andWhere(\"translation.source = :source\", { source: filters.source })\r\n    }\r\n\r\n    if (filters.keys && filters.keys.length > 0) {\r\n      query.andWhere(\"translation.key IN (:...keys)\", { keys: filters.keys })\r\n    }\r\n\r\n    if (filters.search) {\r\n      query.andWhere(\r\n        \"(translation.key ILIKE :search OR translation.value ILIKE :search OR translation.description ILIKE :search)\",\r\n        { search: `%${filters.search}%` },\r\n      )\r\n    }\r\n\r\n    return query.orderBy(\"translation.namespace\", \"ASC\").addOrderBy(\"translation.key\", \"ASC\").getMany()\r\n  }\r\n\r\n  async getTranslationById(id: string): Promise<Translation> {\r\n    const translation = await this.translationRepository.findOne({ where: { id } })\r\n    if (!translation) {\r\n      throw new NotFoundException(`Translation with ID ${id} not found`)\r\n    }\r\n    return translation\r\n  }\r\n\r\n  async deleteTranslation(id: string): Promise<void> {\r\n    const result = await this.translationRepository.delete(id)\r\n    if (result.affected === 0) {\r\n      throw new NotFoundException(`Translation with ID ${id} not found`)\r\n    }\r\n  }\r\n\r\n  async bulkCreateTranslations(translations: CreateTranslationDto[]): Promise<Translation[]> {\r\n    const entities = translations.map((dto) =>\r\n      this.translationRepository.create({\r\n        ...dto,\r\n        status: TranslationStatus.DRAFT,\r\n        source: TranslationSource.IMPORT,\r\n        version: 1,\r\n      }),\r\n    )\r\n\r\n    return this.translationRepository.save(entities)\r\n  }\r\n\r\n  async bulkUpdateStatus(ids: string[], status: TranslationStatus): Promise<void> {\r\n    await this.translationRepository.update(ids, {\r\n      status,\r\n      ...(status === TranslationStatus.PUBLISHED && { publishedAt: new Date() }),\r\n    })\r\n  }\r\n\r\n  async getTranslationStats(locale?: string): Promise<{\r\n    total: number\r\n    byStatus: Record<TranslationStatus, number>\r\n    byNamespace: Record<string, number>\r\n    completionPercentage: number\r\n  }> {\r\n    const query = this.translationRepository.createQueryBuilder(\"translation\")\r\n\r\n    if (locale) {\r\n      query.where(\"translation.locale = :locale\", { locale })\r\n    }\r\n\r\n    const translations = await query.getMany()\r\n\r\n    const stats = {\r\n      total: translations.length,\r\n      byStatus: {} as Record<TranslationStatus, number>,\r\n      byNamespace: {} as Record<string, number>,\r\n      completionPercentage: 0,\r\n    }\r\n\r\n    // Initialize status counts\r\n    Object.values(TranslationStatus).forEach((status) => {\r\n      stats.byStatus[status] = 0\r\n    })\r\n\r\n    // Count by status and namespace\r\n    for (const translation of translations) {\r\n      stats.byStatus[translation.status]++\r\n      stats.byNamespace[translation.namespace] = (stats.byNamespace[translation.namespace] || 0) + 1\r\n    }\r\n\r\n    // Calculate completion percentage\r\n    const publishedCount = stats.byStatus[TranslationStatus.PUBLISHED]\r\n    stats.completionPercentage = stats.total > 0 ? Math.round((publishedCount / stats.total) * 100) : 0\r\n\r\n    return stats\r\n  }\r\n\r\n  async syncWithTms(locale: string, namespace?: string): Promise<void> {\r\n    this.logger.log(`Syncing translations with TMS for locale: ${locale}`)\r\n\r\n    try {\r\n      const tmsTranslations = await this.tmsService.getTranslations(locale, namespace)\r\n\r\n      for (const tmsTranslation of tmsTranslations) {\r\n        const existingTranslation = await this.translationRepository.findOne({\r\n          where: {\r\n            key: tmsTranslation.key,\r\n            locale: tmsTranslation.locale,\r\n            namespace: tmsTranslation.namespace,\r\n          },\r\n        })\r\n\r\n        if (existingTranslation) {\r\n          if (existingTranslation.value !== tmsTranslation.value) {\r\n            await this.updateTranslation(existingTranslation.id, {\r\n              value: tmsTranslation.value,\r\n              status: TranslationStatus.APPROVED,\r\n            })\r\n          }\r\n        } else {\r\n          await this.createTranslation({\r\n            ...tmsTranslation,\r\n            source: TranslationSource.TMS,\r\n          })\r\n        }\r\n      }\r\n\r\n      this.logger.log(`TMS sync completed for locale: ${locale}`)\r\n    } catch (error) {\r\n      this.logger.error(`TMS sync failed for locale: ${locale}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async exportTranslations(locale: string, namespace?: string): Promise<Record<string, string>> {\r\n    const filters: TranslationFilters = {\r\n      locale,\r\n      status: TranslationStatus.PUBLISHED,\r\n    }\r\n\r\n    if (namespace) {\r\n      filters.namespace = namespace\r\n    }\r\n\r\n    const translations = await this.getTranslations(filters)\r\n\r\n    const result: Record<string, string> = {}\r\n    for (const translation of translations) {\r\n      const key = namespace ? translation.key : `${translation.namespace}.${translation.key}`\r\n      result[key] = translation.value\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n"],"version":3}