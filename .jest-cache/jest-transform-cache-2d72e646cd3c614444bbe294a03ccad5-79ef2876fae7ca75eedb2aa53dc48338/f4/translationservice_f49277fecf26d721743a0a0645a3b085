28d17869232f12a3ddfc131f1ab48934
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TranslationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationService = void 0;
const common_1 = require("@nestjs/common");
const translation_entity_1 = require("../entities/translation.entity");
let TranslationService = TranslationService_1 = class TranslationService {
    constructor(translationRepository, tmsService) {
        this.translationRepository = translationRepository;
        this.tmsService = tmsService;
        this.logger = new common_1.Logger(TranslationService_1.name);
    }
    async createTranslation(dto) {
        const existingTranslation = await this.translationRepository.findOne({
            where: {
                key: dto.key,
                locale: dto.locale,
                namespace: dto.namespace,
            },
        });
        if (existingTranslation) {
            throw new Error(`Translation already exists for key: ${dto.key}, locale: ${dto.locale}`);
        }
        const translation = this.translationRepository.create({
            ...dto,
            status: translation_entity_1.TranslationStatus.DRAFT,
            source: translation_entity_1.TranslationSource.MANUAL,
            version: 1,
        });
        return this.translationRepository.save(translation);
    }
    async updateTranslation(id, dto) {
        const translation = await this.translationRepository.findOne({ where: { id } });
        if (!translation) {
            throw new common_1.NotFoundException(`Translation with ID ${id} not found`);
        }
        // Create new version if value changed
        if (dto.value && dto.value !== translation.value) {
            translation.version += 1;
            translation.translatedAt = new Date();
        }
        Object.assign(translation, dto);
        return this.translationRepository.save(translation);
    }
    async getTranslations(filters = {}) {
        const query = this.translationRepository.createQueryBuilder("translation");
        if (filters.locale) {
            query.andWhere("translation.locale = :locale", { locale: filters.locale });
        }
        if (filters.namespace) {
            query.andWhere("translation.namespace = :namespace", { namespace: filters.namespace });
        }
        if (filters.status) {
            query.andWhere("translation.status = :status", { status: filters.status });
        }
        if (filters.source) {
            query.andWhere("translation.source = :source", { source: filters.source });
        }
        if (filters.keys && filters.keys.length > 0) {
            query.andWhere("translation.key IN (:...keys)", { keys: filters.keys });
        }
        if (filters.search) {
            query.andWhere("(translation.key ILIKE :search OR translation.value ILIKE :search OR translation.description ILIKE :search)", { search: `%${filters.search}%` });
        }
        return query.orderBy("translation.namespace", "ASC").addOrderBy("translation.key", "ASC").getMany();
    }
    async getTranslationById(id) {
        const translation = await this.translationRepository.findOne({ where: { id } });
        if (!translation) {
            throw new common_1.NotFoundException(`Translation with ID ${id} not found`);
        }
        return translation;
    }
    async deleteTranslation(id) {
        const result = await this.translationRepository.delete(id);
        if (result.affected === 0) {
            throw new common_1.NotFoundException(`Translation with ID ${id} not found`);
        }
    }
    async bulkCreateTranslations(translations) {
        const entities = translations.map((dto) => this.translationRepository.create({
            ...dto,
            status: translation_entity_1.TranslationStatus.DRAFT,
            source: translation_entity_1.TranslationSource.IMPORT,
            version: 1,
        }));
        return this.translationRepository.save(entities);
    }
    async bulkUpdateStatus(ids, status) {
        await this.translationRepository.update(ids, {
            status,
            ...(status === translation_entity_1.TranslationStatus.PUBLISHED && { publishedAt: new Date() }),
        });
    }
    async getTranslationStats(locale) {
        const query = this.translationRepository.createQueryBuilder("translation");
        if (locale) {
            query.where("translation.locale = :locale", { locale });
        }
        const translations = await query.getMany();
        const stats = {
            total: translations.length,
            byStatus: {},
            byNamespace: {},
            completionPercentage: 0,
        };
        // Initialize status counts
        Object.values(translation_entity_1.TranslationStatus).forEach((status) => {
            stats.byStatus[status] = 0;
        });
        // Count by status and namespace
        for (const translation of translations) {
            stats.byStatus[translation.status]++;
            stats.byNamespace[translation.namespace] = (stats.byNamespace[translation.namespace] || 0) + 1;
        }
        // Calculate completion percentage
        const publishedCount = stats.byStatus[translation_entity_1.TranslationStatus.PUBLISHED];
        stats.completionPercentage = stats.total > 0 ? Math.round((publishedCount / stats.total) * 100) : 0;
        return stats;
    }
    async syncWithTms(locale, namespace) {
        this.logger.log(`Syncing translations with TMS for locale: ${locale}`);
        try {
            const tmsTranslations = await this.tmsService.getTranslations(locale, namespace);
            for (const tmsTranslation of tmsTranslations) {
                const existingTranslation = await this.translationRepository.findOne({
                    where: {
                        key: tmsTranslation.key,
                        locale: tmsTranslation.locale,
                        namespace: tmsTranslation.namespace,
                    },
                });
                if (existingTranslation) {
                    if (existingTranslation.value !== tmsTranslation.value) {
                        await this.updateTranslation(existingTranslation.id, {
                            value: tmsTranslation.value,
                            status: translation_entity_1.TranslationStatus.APPROVED,
                        });
                    }
                }
                else {
                    await this.createTranslation({
                        ...tmsTranslation,
                        source: translation_entity_1.TranslationSource.TMS,
                    });
                }
            }
            this.logger.log(`TMS sync completed for locale: ${locale}`);
        }
        catch (error) {
            this.logger.error(`TMS sync failed for locale: ${locale}`, error);
            throw error;
        }
    }
    async exportTranslations(locale, namespace) {
        const filters = {
            locale,
            status: translation_entity_1.TranslationStatus.PUBLISHED,
        };
        if (namespace) {
            filters.namespace = namespace;
        }
        const translations = await this.getTranslations(filters);
        const result = {};
        for (const translation of translations) {
            const key = namespace ? translation.key : `${translation.namespace}.${translation.key}`;
            result[key] = translation.value;
        }
        return result;
    }
};
exports.TranslationService = TranslationService;
exports.TranslationService = TranslationService = TranslationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], TranslationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,