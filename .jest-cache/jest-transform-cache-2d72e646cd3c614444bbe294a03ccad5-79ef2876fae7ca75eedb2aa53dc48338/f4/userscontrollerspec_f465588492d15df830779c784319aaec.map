{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,yDAAqD;AACrD,mDAA+C;AAG/C,MAAM,QAAQ,GAAG;IACf,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,kBAAkB;IACzB,SAAS,EAAE,MAAM;IACjB,QAAQ,EAAE,MAAM;IAChB,eAAe,EAAE,WAAW;CAC7B,CAAC;AAEF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,UAA2B,CAAC;IAChC,IAAI,OAAqB,CAAC;IAE1B,MAAM,gBAAgB,GAAG;QACvB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;KAClB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,kCAAe,CAAC;YAC9B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,4BAAY;oBACrB,QAAQ,EAAE,gBAAgB;iBAC3B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;QAC1D,OAAO,GAAG,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,GAAG,GAAmB;gBAC1B,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;aACjB,CAAC;YACF,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,WAAW,EAAyB,CAAC;YAE1D,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAElD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { UsersController } from './users.controller';\r\nimport { UsersService } from './users.service';\r\nimport { CreateUsersDto } from './dto/create-users.dto';\r\n\r\nconst mockUser = {\r\n  id: '1',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  profileImageUrl: 'image.jpg',\r\n};\r\n\r\ndescribe('UsersController', () => {\r\n  let controller: UsersController;\r\n  let service: UsersService;\r\n\r\n  const mockUsersService = {\r\n    create: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [UsersController],\r\n      providers: [\r\n        {\r\n          provide: UsersService,\r\n          useValue: mockUsersService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<UsersController>(UsersController);\r\n    service = module.get<UsersService>(UsersService);\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should return created user from service', async () => {\r\n      const dto: CreateUsersDto = {\r\n        email: 'test@example.com',\r\n        firstName: 'Test',\r\n        lastName: 'User',\r\n      };\r\n      const file = { path: 'image.jpg' } as Express.Multer.File;\r\n\r\n      mockUsersService.create.mockResolvedValue(mockUser);\r\n\r\n      const result = await controller.create(dto, file);\r\n\r\n      expect(mockUsersService.create).toHaveBeenCalledWith(dto, file);\r\n      expect(result).toEqual(mockUser);\r\n    });\r\n  });\r\n});\r\n"],"version":3}