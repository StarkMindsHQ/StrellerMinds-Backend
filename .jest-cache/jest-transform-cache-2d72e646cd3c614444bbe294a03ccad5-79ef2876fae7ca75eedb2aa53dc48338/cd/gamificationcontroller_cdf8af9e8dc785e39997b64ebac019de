f7800ba4b8bbeefc451a85c7262e499b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GamificationController = void 0;
const common_1 = require("@nestjs/common");
const achievement_service_1 = require("../services/achievement.service");
const reward_service_1 = require("../services/reward.service");
const leaderboard_service_1 = require("../services/leaderboard.service");
const gamification_event_service_1 = require("../services/gamification-event.service");
const leaderboard_query_dto_1 = require("../dto/leaderboard-query.dto");
let GamificationController = class GamificationController {
    constructor(achievementService, rewardService, leaderboardService, eventService) {
        this.achievementService = achievementService;
        this.rewardService = rewardService;
        this.leaderboardService = leaderboardService;
        this.eventService = eventService;
    }
    async getAchievements() {
        try {
            return await this.achievementService.getAllAchievements();
        }
        catch (error) {
            throw new common_1.HttpException('Failed to fetch achievements', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getRewards() {
        try {
            return await this.rewardService.getAllRewards();
        }
        catch (error) {
            throw new common_1.HttpException('Failed to fetch rewards', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getLeaderboard(query) {
        try {
            return await this.leaderboardService.getLeaderboard(query.period, query.limit);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to fetch leaderboard', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getEvents(eventType) {
        try {
            return await this.eventService.getEvents(eventType);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to fetch events', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
};
exports.GamificationController = GamificationController;
__decorate([
    (0, common_1.Get)('achievements'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], GamificationController.prototype, "getAchievements", null);
__decorate([
    (0, common_1.Get)('rewards'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], GamificationController.prototype, "getRewards", null);
__decorate([
    (0, common_1.Get)('leaderboard'),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof leaderboard_query_dto_1.LeaderboardQueryDto !== "undefined" && leaderboard_query_dto_1.LeaderboardQueryDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], GamificationController.prototype, "getLeaderboard", null);
__decorate([
    (0, common_1.Get)('analytics/events'),
    __param(0, (0, common_1.Query)('eventType')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], GamificationController.prototype, "getEvents", null);
exports.GamificationController = GamificationController = __decorate([
    (0, common_1.Controller)('gamification'),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ whitelist: true, forbidNonWhitelisted: true })),
    __metadata("design:paramtypes", [typeof (_a = typeof achievement_service_1.AchievementService !== "undefined" && achievement_service_1.AchievementService) === "function" ? _a : Object, typeof (_b = typeof reward_service_1.RewardService !== "undefined" && reward_service_1.RewardService) === "function" ? _b : Object, typeof (_c = typeof leaderboard_service_1.LeaderboardService !== "undefined" && leaderboard_service_1.LeaderboardService) === "function" ? _c : Object, typeof (_d = typeof gamification_event_service_1.GamificationEventService !== "undefined" && gamification_event_service_1.GamificationEventService) === "function" ? _d : Object])
], GamificationController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxnYW1pZmljYXRpb25cXGNvbnRyb2xsZXJzXFxnYW1pZmljYXRpb24uY29udHJvbGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQXlIO0FBQ3pILHlFQUFxRTtBQUNyRSwrREFBMkQ7QUFDM0QseUVBQXFFO0FBQ3JFLHVGQUFrRjtBQUNsRix3RUFBbUU7QUFJNUQsSUFBTSxzQkFBc0IsR0FBNUIsTUFBTSxzQkFBc0I7SUFDakMsWUFDbUIsa0JBQXNDLEVBQ3RDLGFBQTRCLEVBQzVCLGtCQUFzQyxFQUN0QyxZQUFzQztRQUh0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQTBCO0lBQ3RELENBQUM7SUFHRSxBQUFOLEtBQUssQ0FBQyxlQUFlO1FBQ25CLElBQUksQ0FBQztZQUNILE9BQU8sTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM1RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxzQkFBYSxDQUFDLDhCQUE4QixFQUFFLG1CQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1RixDQUFDO0lBQ0gsQ0FBQztJQUdLLEFBQU4sS0FBSyxDQUFDLFVBQVU7UUFDZCxJQUFJLENBQUM7WUFDSCxPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNsRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxzQkFBYSxDQUFDLHlCQUF5QixFQUFFLG1CQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2RixDQUFDO0lBQ0gsQ0FBQztJQUdLLEFBQU4sS0FBSyxDQUFDLGNBQWMsQ0FBVSxLQUEwQjtRQUN0RCxJQUFJLENBQUM7WUFDSCxPQUFPLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxzQkFBYSxDQUFDLDZCQUE2QixFQUFFLG1CQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMzRixDQUFDO0lBQ0gsQ0FBQztJQUdLLEFBQU4sS0FBSyxDQUFDLFNBQVMsQ0FBcUIsU0FBa0I7UUFDcEQsSUFBSSxDQUFDO1lBQ0gsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLHNCQUFhLENBQUMsd0JBQXdCLEVBQUUsbUJBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3RGLENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTNDWSx3REFBc0I7QUFTM0I7SUFETCxJQUFBLFlBQUcsRUFBQyxjQUFjLENBQUM7Ozs7NkRBT25CO0FBR0s7SUFETCxJQUFBLFlBQUcsRUFBQyxTQUFTLENBQUM7Ozs7d0RBT2Q7QUFHSztJQURMLElBQUEsWUFBRyxFQUFDLGFBQWEsQ0FBQztJQUNHLFdBQUEsSUFBQSxjQUFLLEdBQUUsQ0FBQTs7eURBQVEsMkNBQW1CLG9CQUFuQiwyQ0FBbUI7OzREQU12RDtBQUdLO0lBREwsSUFBQSxZQUFHLEVBQUMsa0JBQWtCLENBQUM7SUFDUCxXQUFBLElBQUEsY0FBSyxFQUFDLFdBQVcsQ0FBQyxDQUFBOzs7O3VEQU1sQztpQ0ExQ1Usc0JBQXNCO0lBRmxDLElBQUEsbUJBQVUsRUFBQyxjQUFjLENBQUM7SUFDMUIsSUFBQSxpQkFBUSxFQUFDLElBQUksdUJBQWMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzt5REFHckMsd0NBQWtCLG9CQUFsQix3Q0FBa0Isb0RBQ3ZCLDhCQUFhLG9CQUFiLDhCQUFhLG9EQUNSLHdDQUFrQixvQkFBbEIsd0NBQWtCLG9EQUN4QixxREFBd0Isb0JBQXhCLHFEQUF3QjtHQUw5QyxzQkFBc0IsQ0EyQ2xDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcZ2FtaWZpY2F0aW9uXFxjb250cm9sbGVyc1xcZ2FtaWZpY2F0aW9uLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbGxlciwgR2V0LCBRdWVyeSwgUGFyYW0sIFJlcSwgVXNlUGlwZXMsIFZhbGlkYXRpb25QaXBlLCBIdHRwRXhjZXB0aW9uLCBIdHRwU3RhdHVzIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBBY2hpZXZlbWVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hY2hpZXZlbWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmV3YXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Jld2FyZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGVhZGVyYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbGVhZGVyYm9hcmQuc2VydmljZSc7XHJcbmltcG9ydCB7IEdhbWlmaWNhdGlvbkV2ZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2dhbWlmaWNhdGlvbi1ldmVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGVhZGVyYm9hcmRRdWVyeUR0byB9IGZyb20gJy4uL2R0by9sZWFkZXJib2FyZC1xdWVyeS5kdG8nO1xyXG5cclxuQENvbnRyb2xsZXIoJ2dhbWlmaWNhdGlvbicpXHJcbkBVc2VQaXBlcyhuZXcgVmFsaWRhdGlvblBpcGUoeyB3aGl0ZWxpc3Q6IHRydWUsIGZvcmJpZE5vbldoaXRlbGlzdGVkOiB0cnVlIH0pKVxyXG5leHBvcnQgY2xhc3MgR2FtaWZpY2F0aW9uQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjaGlldmVtZW50U2VydmljZTogQWNoaWV2ZW1lbnRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXdhcmRTZXJ2aWNlOiBSZXdhcmRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsZWFkZXJib2FyZFNlcnZpY2U6IExlYWRlcmJvYXJkU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRTZXJ2aWNlOiBHYW1pZmljYXRpb25FdmVudFNlcnZpY2UsXHJcbiAgKSB7fVxyXG5cclxuICBAR2V0KCdhY2hpZXZlbWVudHMnKVxyXG4gIGFzeW5jIGdldEFjaGlldmVtZW50cygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFjaGlldmVtZW50U2VydmljZS5nZXRBbGxBY2hpZXZlbWVudHMoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKCdGYWlsZWQgdG8gZmV0Y2ggYWNoaWV2ZW1lbnRzJywgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEdldCgncmV3YXJkcycpXHJcbiAgYXN5bmMgZ2V0UmV3YXJkcygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJld2FyZFNlcnZpY2UuZ2V0QWxsUmV3YXJkcygpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oJ0ZhaWxlZCB0byBmZXRjaCByZXdhcmRzJywgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEdldCgnbGVhZGVyYm9hcmQnKVxyXG4gIGFzeW5jIGdldExlYWRlcmJvYXJkKEBRdWVyeSgpIHF1ZXJ5OiBMZWFkZXJib2FyZFF1ZXJ5RHRvKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5sZWFkZXJib2FyZFNlcnZpY2UuZ2V0TGVhZGVyYm9hcmQocXVlcnkucGVyaW9kLCBxdWVyeS5saW1pdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbignRmFpbGVkIHRvIGZldGNoIGxlYWRlcmJvYXJkJywgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEdldCgnYW5hbHl0aWNzL2V2ZW50cycpXHJcbiAgYXN5bmMgZ2V0RXZlbnRzKEBRdWVyeSgnZXZlbnRUeXBlJykgZXZlbnRUeXBlPzogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5ldmVudFNlcnZpY2UuZ2V0RXZlbnRzKGV2ZW50VHlwZSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbignRmFpbGVkIHRvIGZldGNoIGV2ZW50cycsIEh0dHBTdGF0dXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKTtcclxuICAgIH1cclxuICB9XHJcbn0gIl0sInZlcnNpb24iOjN9