{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.controller.ts"],"sourcesContent":["/**\r\n * AuthController handles authentication and authorization endpoints.\r\n */\r\nimport {\r\n  Controller,\r\n  Post,\r\n  Get,\r\n  Query,\r\n  Body,\r\n  UnauthorizedException,\r\n  UseGuards,\r\n  Request,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Injectable,\r\n  BadRequestException,\r\n  Req,\r\n  HttpException,\r\n} from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n// import { AuthService } from './auth.service';\r\n\r\nimport { LoginDto } from './dto/login.dto';\r\nimport { RegisterDto } from './dto/register.dto';\r\nimport { ResetPasswordDto } from './dto/reset-password.dto';\r\nimport { PasswordValidationService } from './password-validation.service';\r\nimport { PasswordRequirementsDto } from './dto/password-requirements.dto';\r\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\r\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBody,\r\n} from '@nestjs/swagger';\r\nimport { UsersService } from 'src/users/services/users.service';\r\nimport { RateLimitGuard } from 'src/common/guards/rate-limiter.guard';\r\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\r\nimport { JwtLocalStrategy } from './strategies/jwt-local.strategy';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { AuthService } from './auth.service';\r\n\r\n@ApiTags('Authentication')\r\n@ApiBearerAuth()\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(\r\n    private readonly jwtLocalStrategy: JwtLocalStrategy,\r\n    private readonly usersService: UsersService,\r\n    private readonly passwordValidationService: PasswordValidationService,\r\n    private readonly authService: AuthService,\r\n  ) {}\r\n\r\n  @UseGuards(RateLimitGuard)\r\n  @Post('login')\r\n  @ApiOperation({ summary: 'User login' })\r\n  @ApiBody({ type: LoginDto })\r\n  @ApiResponse({ status: 200, description: 'Login successful.' })\r\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\r\n  @HttpCode(HttpStatus.OK)\r\n  async login(@Body() body: LoginDto) {\r\n    const user = await this.jwtLocalStrategy.validateUser(\r\n      body.email,\r\n      body.password,\r\n    );\r\n    if (!user) {\r\n      throw new UnauthorizedException('Invalid credentials');\r\n    }\r\n    return this.jwtLocalStrategy.login(user);\r\n  }\r\n\r\n  @Post('register')\r\n  @ApiOperation({ summary: 'User registration' })\r\n  @ApiBody({ type: RegisterDto })\r\n  @ApiResponse({ status: 201, description: 'Registration successful.' })\r\n  async register(@Body() registerDto: RegisterDto) {\r\n    try {\r\n      const { email, password, ...userData } = registerDto;\r\n      return await this.jwtLocalStrategy.register(registerDto);\r\n    } catch (error) {\r\n      if (error instanceof BadRequestException) {\r\n        throw error;\r\n      }\r\n      throw new BadRequestException('Registration failed');\r\n    }\r\n  }\r\n\r\n  @Get('password-requirements')\r\n  @ApiOperation({ summary: 'Get password requirements' })\r\n  @ApiResponse({ status: 200, description: 'Password requirements retrieved' })\r\n  getPasswordRequirements(): PasswordRequirementsDto {\r\n    return {\r\n      requirements: this.passwordValidationService.getPasswordRequirements(),\r\n    };\r\n  }\r\n\r\n  @Post('refresh')\r\n  @ApiOperation({ summary: 'Refresh access token' })\r\n  @ApiResponse({ status: 200, description: 'Token refresh successful' })\r\n  @ApiResponse({ status: 401, description: 'Invalid refresh token' })\r\n  @HttpCode(HttpStatus.OK)\r\n  async refresh(@Body() body: RefreshTokenDto) {\r\n    if (!body.userId || !body.refreshToken) {\r\n      throw new UnauthorizedException('Missing credentials');\r\n    }\r\n    return this.jwtLocalStrategy.refreshToken(body.userId, body.refreshToken);\r\n  }\r\n\r\n  @Post('forgot-password')\r\n  @ApiOperation({ summary: 'Request password reset' })\r\n  @ApiResponse({ status: 200, description: 'Password reset requested' })\r\n  async forgotPassword(@Body('email') email: string) {\r\n    return this.jwtLocalStrategy.requestPasswordReset(email);\r\n  }\r\n\r\n  @Get('validate-reset-token')\r\n  @ApiOperation({ summary: 'Validate password reset token' })\r\n  @ApiResponse({ status: 200, description: 'Token is valid' })\r\n  @ApiResponse({ status: 400, description: 'Invalid or expired token' })\r\n  async validateToken(@Query('token') token: string) {\r\n    await this.jwtLocalStrategy.validateResetToken(token);\r\n    return { message: 'Token is valid' };\r\n  }\r\n\r\n  @Post('reset-password')\r\n  @ApiOperation({ summary: 'Reset password' })\r\n  @ApiResponse({ status: 200, description: 'Password reset successful' })\r\n  async resetPassword(@Body() resetDto: ResetPasswordDto) {\r\n    return this.jwtLocalStrategy.resetPassword(\r\n      resetDto.token,\r\n      resetDto.newPassword,\r\n    );\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post('change-password')\r\n  @ApiOperation({ summary: 'Change password' })\r\n  @ApiResponse({ status: 200, description: 'Password changed successfully' })\r\n  async changePassword(\r\n    @Request() req,\r\n    @Body() body: { currentPassword: string; newPassword: string },\r\n  ) {\r\n    const userId = req.user.id;\r\n    const { currentPassword, newPassword } = body;\r\n\r\n    if (!currentPassword || !newPassword) {\r\n      throw new BadRequestException(\r\n        'Current password and new password are required',\r\n      );\r\n    }\r\n\r\n    return this.jwtLocalStrategy.changePassword(\r\n      userId,\r\n      currentPassword,\r\n      newPassword,\r\n    );\r\n  }\r\n\r\n  @Post('logout')\r\n  @UseGuards(JwtAuthGuard)\r\n  @ApiBearerAuth()\r\n  @ApiOperation({ summary: 'User logout' })\r\n  @ApiResponse({ status: 200, description: 'Logout successful' })\r\n  @HttpCode(HttpStatus.OK)\r\n  async logout(@Request() req) {\r\n    await this.jwtLocalStrategy.logout(req.user.userId);\r\n    return { message: 'Logout successful' };\r\n  }\r\n\r\n  // Redirect to Google\r\n  @Get('google')\r\n  @UseGuards(AuthGuard('google'))\r\n  async googleLogin() {\r\n    return { msg: 'Redirecting to Google OAuth' };\r\n  }\r\n\r\n  // Google callback\r\n  @Get('google/callback')\r\n  @UseGuards(AuthGuard('google'))\r\n  async googleCallback(@Req() req) {\r\n    return this.authService.login('google', req.user);\r\n  }\r\n\r\n  @Get('facebook')\r\n  @UseGuards(AuthGuard('facebook'))\r\n  async facebookLogin() {\r\n    return { msg: 'Redirecting to Facebook OAuth' };\r\n  }\r\n\r\n  @Get('facebook/callback')\r\n  @UseGuards(AuthGuard('facebook'))\r\n  async facebookCallback(@Req() req) {\r\n    return this.authService.login('facebook', req.user);\r\n  }\r\n\r\n  @Get('apple')\r\n  @UseGuards(AuthGuard('apple'))\r\n  async appleLogin() {\r\n    return { msg: 'Redirecting to Apple Sign-In' };\r\n  }\r\n\r\n  @Post('apple/callback') // Apple uses POST with redirect_uri\r\n  @UseGuards(AuthGuard('apple'))\r\n  async appleCallback(@Req() req) {\r\n    return this.authService.login('apple', req.user);\r\n  }\r\n\r\n  // Account linking (example)\r\n  @Post('link')\r\n  async linkAccount(\r\n    @Query('provider') provider: string,\r\n    @Body() credentials: any,\r\n  ) {\r\n    try {\r\n      return await this.authService.register(provider, credentials);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class JwtAuthStrategy extends JwtStrategy {\r\n  constructor(configService: ConfigService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      secretOrKey: configService.get<string>('JWT_SECRET'),\r\n    });\r\n  }\r\n\r\n  async validate(payload: any) {\r\n    return { userId: payload.sub };\r\n  }\r\n}\r\n"],"version":3}