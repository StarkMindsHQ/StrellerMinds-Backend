7fb0391fd9f115fc5019a226cd915719
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtAuthStrategy = exports.AuthController = void 0;
/**
 * AuthController handles authentication and authorization endpoints.
 */
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
// import { AuthService } from './auth.service';
const login_dto_1 = require("./dto/login.dto");
const register_dto_1 = require("./dto/register.dto");
const reset_password_dto_1 = require("./dto/reset-password.dto");
const password_validation_service_1 = require("./password-validation.service");
const password_requirements_dto_1 = require("./dto/password-requirements.dto");
const jwt_auth_guard_1 = require("./guards/jwt-auth.guard");
const refresh_token_dto_1 = require("./dto/refresh-token.dto");
const swagger_1 = require("@nestjs/swagger");
const users_service_1 = require("src/users/services/users.service");
const rate_limiter_guard_1 = require("src/common/guards/rate-limiter.guard");
const passport_jwt_1 = require("passport-jwt");
const jwt_local_strategy_1 = require("./strategies/jwt-local.strategy");
const passport_1 = require("@nestjs/passport");
const auth_service_1 = require("./auth.service");
let AuthController = class AuthController {
    constructor(jwtLocalStrategy, usersService, passwordValidationService, authService) {
        this.jwtLocalStrategy = jwtLocalStrategy;
        this.usersService = usersService;
        this.passwordValidationService = passwordValidationService;
        this.authService = authService;
    }
    async login(body) {
        const user = await this.jwtLocalStrategy.validateUser(body.email, body.password);
        if (!user) {
            throw new common_1.UnauthorizedException('Invalid credentials');
        }
        return this.jwtLocalStrategy.login(user);
    }
    async register(registerDto) {
        try {
            const { email, password, ...userData } = registerDto;
            return await this.jwtLocalStrategy.register(registerDto);
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException) {
                throw error;
            }
            throw new common_1.BadRequestException('Registration failed');
        }
    }
    getPasswordRequirements() {
        return {
            requirements: this.passwordValidationService.getPasswordRequirements(),
        };
    }
    async refresh(body) {
        if (!body.userId || !body.refreshToken) {
            throw new common_1.UnauthorizedException('Missing credentials');
        }
        return this.jwtLocalStrategy.refreshToken(body.userId, body.refreshToken);
    }
    async forgotPassword(email) {
        return this.jwtLocalStrategy.requestPasswordReset(email);
    }
    async validateToken(token) {
        await this.jwtLocalStrategy.validateResetToken(token);
        return { message: 'Token is valid' };
    }
    async resetPassword(resetDto) {
        return this.jwtLocalStrategy.resetPassword(resetDto.token, resetDto.newPassword);
    }
    async changePassword(req, body) {
        const userId = req.user.id;
        const { currentPassword, newPassword } = body;
        if (!currentPassword || !newPassword) {
            throw new common_1.BadRequestException('Current password and new password are required');
        }
        return this.jwtLocalStrategy.changePassword(userId, currentPassword, newPassword);
    }
    async logout(req) {
        await this.jwtLocalStrategy.logout(req.user.userId);
        return { message: 'Logout successful' };
    }
    // Redirect to Google
    async googleLogin() {
        return { msg: 'Redirecting to Google OAuth' };
    }
    // Google callback
    async googleCallback(req) {
        return this.authService.login('google', req.user);
    }
    async facebookLogin() {
        return { msg: 'Redirecting to Facebook OAuth' };
    }
    async facebookCallback(req) {
        return this.authService.login('facebook', req.user);
    }
    async appleLogin() {
        return { msg: 'Redirecting to Apple Sign-In' };
    }
    async appleCallback(req) {
        return this.authService.login('apple', req.user);
    }
    // Account linking (example)
    async linkAccount(provider, credentials) {
        try {
            return await this.authService.register(provider, credentials);
        }
        catch (error) {
            throw new common_1.HttpException(error.message, common_1.HttpStatus.BAD_REQUEST);
        }
    }
};
exports.AuthController = AuthController;
__decorate([
    (0, common_1.UseGuards)(rate_limiter_guard_1.RateLimitGuard),
    (0, common_1.Post)('login'),
    (0, swagger_1.ApiOperation)({ summary: 'User login' }),
    (0, swagger_1.ApiBody)({ type: login_dto_1.LoginDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Login successful.' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Invalid credentials' }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof login_dto_1.LoginDto !== "undefined" && login_dto_1.LoginDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "login", null);
__decorate([
    (0, common_1.Post)('register'),
    (0, swagger_1.ApiOperation)({ summary: 'User registration' }),
    (0, swagger_1.ApiBody)({ type: register_dto_1.RegisterDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Registration successful.' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof register_dto_1.RegisterDto !== "undefined" && register_dto_1.RegisterDto) === "function" ? _f : Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "register", null);
__decorate([
    (0, common_1.Get)('password-requirements'),
    (0, swagger_1.ApiOperation)({ summary: 'Get password requirements' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Password requirements retrieved' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_g = typeof password_requirements_dto_1.PasswordRequirementsDto !== "undefined" && password_requirements_dto_1.PasswordRequirementsDto) === "function" ? _g : Object)
], AuthController.prototype, "getPasswordRequirements", null);
__decorate([
    (0, common_1.Post)('refresh'),
    (0, swagger_1.ApiOperation)({ summary: 'Refresh access token' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Token refresh successful' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Invalid refresh token' }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_h = typeof refresh_token_dto_1.RefreshTokenDto !== "undefined" && refresh_token_dto_1.RefreshTokenDto) === "function" ? _h : Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "refresh", null);
__decorate([
    (0, common_1.Post)('forgot-password'),
    (0, swagger_1.ApiOperation)({ summary: 'Request password reset' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Password reset requested' }),
    __param(0, (0, common_1.Body)('email')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "forgotPassword", null);
__decorate([
    (0, common_1.Get)('validate-reset-token'),
    (0, swagger_1.ApiOperation)({ summary: 'Validate password reset token' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Token is valid' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Invalid or expired token' }),
    __param(0, (0, common_1.Query)('token')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "validateToken", null);
__decorate([
    (0, common_1.Post)('reset-password'),
    (0, swagger_1.ApiOperation)({ summary: 'Reset password' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Password reset successful' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_j = typeof reset_password_dto_1.ResetPasswordDto !== "undefined" && reset_password_dto_1.ResetPasswordDto) === "function" ? _j : Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "resetPassword", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Post)('change-password'),
    (0, swagger_1.ApiOperation)({ summary: 'Change password' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Password changed successfully' }),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "changePassword", null);
__decorate([
    (0, common_1.Post)('logout'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'User logout' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Logout successful' }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "logout", null);
__decorate([
    (0, common_1.Get)('google'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('google')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "googleLogin", null);
__decorate([
    (0, common_1.Get)('google/callback'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('google')),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "googleCallback", null);
__decorate([
    (0, common_1.Get)('facebook'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('facebook')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "facebookLogin", null);
__decorate([
    (0, common_1.Get)('facebook/callback'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('facebook')),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "facebookCallback", null);
__decorate([
    (0, common_1.Get)('apple'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('apple')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "appleLogin", null);
__decorate([
    (0, common_1.Post)('apple/callback') // Apple uses POST with redirect_uri
    ,
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)('apple')),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "appleCallback", null);
__decorate([
    (0, common_1.Post)('link'),
    __param(0, (0, common_1.Query)('provider')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "linkAccount", null);
exports.AuthController = AuthController = __decorate([
    (0, swagger_1.ApiTags)('Authentication'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('auth'),
    __metadata("design:paramtypes", [typeof (_a = typeof jwt_local_strategy_1.JwtLocalStrategy !== "undefined" && jwt_local_strategy_1.JwtLocalStrategy) === "function" ? _a : Object, typeof (_b = typeof users_service_1.UsersService !== "undefined" && users_service_1.UsersService) === "function" ? _b : Object, typeof (_c = typeof password_validation_service_1.PasswordValidationService !== "undefined" && password_validation_service_1.PasswordValidationService) === "function" ? _c : Object, typeof (_d = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _d : Object])
], AuthController);
let JwtAuthStrategy = class JwtAuthStrategy extends passport_jwt_1.Strategy {
    constructor(configService) {
        super({
            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),
            secretOrKey: configService.get('JWT_SECRET'),
        });
    }
    async validate(payload) {
        return { userId: payload.sub };
    }
};
exports.JwtAuthStrategy = JwtAuthStrategy;
exports.JwtAuthStrategy = JwtAuthStrategy = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_k = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _k : Object])
], JwtAuthStrategy);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,