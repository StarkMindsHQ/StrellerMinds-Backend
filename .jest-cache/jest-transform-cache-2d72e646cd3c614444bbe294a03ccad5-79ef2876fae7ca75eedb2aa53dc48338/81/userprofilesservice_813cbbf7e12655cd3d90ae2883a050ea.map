{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-profiles\\user-profiles.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-profiles\\user-profiles.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ForbiddenException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserProfile } from './entities/user-profile.entity';\r\nimport { CreateUserProfileDto } from './dto/create-user-profile.dto';\r\nimport { UpdateUserProfileDto } from './dto/update-user-profile.dto';\r\nimport { User } from '../users/entities/user.entity';\r\n\r\n@Injectable()\r\nexport class UserProfilesService {\r\n  constructor(\r\n    @InjectRepository(UserProfile)\r\n    private readonly userProfileRepository: Repository<UserProfile>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n  ) {}\r\n\r\n  async create(\r\n    userId: string,\r\n    createUserProfileDto: CreateUserProfileDto,\r\n  ): Promise<UserProfile> {\r\n    const user = await this.userRepository.findOne({ where: { id: userId } });\r\n\r\n    if (!user) {\r\n      throw new NotFoundException(`User with ID ${userId} not found`);\r\n    }\r\n\r\n    // Check if profile already exists\r\n    const existingProfile = await this.userProfileRepository.findOne({\r\n      where: { userId },\r\n    });\r\n\r\n    if (existingProfile) {\r\n      throw new ForbiddenException('User profile already exists');\r\n    }\r\n\r\n    const newProfile = this.userProfileRepository.create({\r\n      ...createUserProfileDto,\r\n      userId,\r\n    });\r\n\r\n    return this.userProfileRepository.save(newProfile);\r\n  }\r\n\r\n  async findAll(): Promise<UserProfile[]> {\r\n    return this.userProfileRepository.find({\r\n      where: { isPublic: true },\r\n      select: [\r\n        'id',\r\n        'firstName',\r\n        'lastName',\r\n        'bio',\r\n        'avatarUrl',\r\n        'createdAt',\r\n        'updatedAt',\r\n      ],\r\n    });\r\n  }\r\n\r\n  async findOne(id: string): Promise<UserProfile> {\r\n    const profile = await this.userProfileRepository.findOne({ where: { id } });\r\n\r\n    if (!profile) {\r\n      throw new NotFoundException(`Profile with ID ${id} not found`);\r\n    }\r\n\r\n    return profile;\r\n  }\r\n\r\n  async findByUserId(\r\n    userId: string,\r\n    requestingUserId: string,\r\n  ): Promise<UserProfile> {\r\n    const profile = await this.userProfileRepository.findOne({\r\n      where: { userId },\r\n    });\r\n\r\n    if (!profile) {\r\n      throw new NotFoundException(\r\n        `Profile for user with ID ${userId} not found`,\r\n      );\r\n    }\r\n\r\n    // If profile is not public and the requesting user is not the owner\r\n    if (!profile.isPublic && userId !== requestingUserId) {\r\n      throw new ForbiddenException(\r\n        'You do not have permission to view this profile',\r\n      );\r\n    }\r\n\r\n    return profile;\r\n  }\r\n\r\n  async update(\r\n    id: string,\r\n    userId: string,\r\n    updateUserProfileDto: UpdateUserProfileDto,\r\n  ): Promise<UserProfile> {\r\n    const profile = await this.userProfileRepository.findOne({ where: { id } });\r\n\r\n    if (!profile) {\r\n      throw new NotFoundException(`Profile with ID ${id} not found`);\r\n    }\r\n\r\n    // Check if the user is the owner of the profile\r\n    if (profile.userId !== userId) {\r\n      throw new ForbiddenException(\r\n        'You do not have permission to update this profile',\r\n      );\r\n    }\r\n\r\n    await this.userProfileRepository.update(id, updateUserProfileDto);\r\n\r\n    return this.userProfileRepository.findOne({ where: { id } });\r\n  }\r\n\r\n  async patch(\r\n    id: string,\r\n    userId: string,\r\n    updateUserProfileDto: UpdateUserProfileDto,\r\n  ): Promise<UserProfile> {\r\n    // Reusing the update method since both PUT and PATCH do the same in this case\r\n    // TypeORM's update method only updates the fields that are provided\r\n    return this.update(id, userId, updateUserProfileDto);\r\n  }\r\n\r\n  async remove(id: string, userId: string): Promise<void> {\r\n    const profile = await this.userProfileRepository.findOne({ where: { id } });\r\n\r\n    if (!profile) {\r\n      throw new NotFoundException(`Profile with ID ${id} not found`);\r\n    }\r\n\r\n    // Check if the user is the owner of the profile\r\n    if (profile.userId !== userId) {\r\n      throw new ForbiddenException(\r\n        'You do not have permission to delete this profile',\r\n      );\r\n    }\r\n\r\n    await this.userProfileRepository.delete(id);\r\n  }\r\n\r\n  async setPreferredLanguage(userId: string, lang: string): Promise<void> {\r\n    const profile = await this.userProfileRepository.findOne({ where: { userId } });\r\n    if (!profile) {\r\n      throw new NotFoundException(`Profile for user ${userId} not found`);\r\n    }\r\n  \r\n    profile.preferredLanguage = lang;\r\n    await this.userProfileRepository.save(profile);\r\n  }\r\n\r\n  \r\n}\r\n"],"version":3}