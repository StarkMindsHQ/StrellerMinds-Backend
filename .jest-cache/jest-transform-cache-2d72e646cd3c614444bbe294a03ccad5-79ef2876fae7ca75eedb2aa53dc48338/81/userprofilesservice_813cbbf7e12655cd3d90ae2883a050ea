1fcc259aaaa4358b78df815327cc961c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProfilesService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_profile_entity_1 = require("./entities/user-profile.entity");
const user_entity_1 = require("../users/entities/user.entity");
let UserProfilesService = class UserProfilesService {
    constructor(userProfileRepository, userRepository) {
        this.userProfileRepository = userProfileRepository;
        this.userRepository = userRepository;
    }
    async create(userId, createUserProfileDto) {
        const user = await this.userRepository.findOne({ where: { id: userId } });
        if (!user) {
            throw new common_1.NotFoundException(`User with ID ${userId} not found`);
        }
        // Check if profile already exists
        const existingProfile = await this.userProfileRepository.findOne({
            where: { userId },
        });
        if (existingProfile) {
            throw new common_1.ForbiddenException('User profile already exists');
        }
        const newProfile = this.userProfileRepository.create({
            ...createUserProfileDto,
            userId,
        });
        return this.userProfileRepository.save(newProfile);
    }
    async findAll() {
        return this.userProfileRepository.find({
            where: { isPublic: true },
            select: [
                'id',
                'firstName',
                'lastName',
                'bio',
                'avatarUrl',
                'createdAt',
                'updatedAt',
            ],
        });
    }
    async findOne(id) {
        const profile = await this.userProfileRepository.findOne({ where: { id } });
        if (!profile) {
            throw new common_1.NotFoundException(`Profile with ID ${id} not found`);
        }
        return profile;
    }
    async findByUserId(userId, requestingUserId) {
        const profile = await this.userProfileRepository.findOne({
            where: { userId },
        });
        if (!profile) {
            throw new common_1.NotFoundException(`Profile for user with ID ${userId} not found`);
        }
        // If profile is not public and the requesting user is not the owner
        if (!profile.isPublic && userId !== requestingUserId) {
            throw new common_1.ForbiddenException('You do not have permission to view this profile');
        }
        return profile;
    }
    async update(id, userId, updateUserProfileDto) {
        const profile = await this.userProfileRepository.findOne({ where: { id } });
        if (!profile) {
            throw new common_1.NotFoundException(`Profile with ID ${id} not found`);
        }
        // Check if the user is the owner of the profile
        if (profile.userId !== userId) {
            throw new common_1.ForbiddenException('You do not have permission to update this profile');
        }
        await this.userProfileRepository.update(id, updateUserProfileDto);
        return this.userProfileRepository.findOne({ where: { id } });
    }
    async patch(id, userId, updateUserProfileDto) {
        // Reusing the update method since both PUT and PATCH do the same in this case
        // TypeORM's update method only updates the fields that are provided
        return this.update(id, userId, updateUserProfileDto);
    }
    async remove(id, userId) {
        const profile = await this.userProfileRepository.findOne({ where: { id } });
        if (!profile) {
            throw new common_1.NotFoundException(`Profile with ID ${id} not found`);
        }
        // Check if the user is the owner of the profile
        if (profile.userId !== userId) {
            throw new common_1.ForbiddenException('You do not have permission to delete this profile');
        }
        await this.userProfileRepository.delete(id);
    }
    async setPreferredLanguage(userId, lang) {
        const profile = await this.userProfileRepository.findOne({ where: { userId } });
        if (!profile) {
            throw new common_1.NotFoundException(`Profile for user ${userId} not found`);
        }
        profile.preferredLanguage = lang;
        await this.userProfileRepository.save(profile);
    }
};
exports.UserProfilesService = UserProfilesService;
exports.UserProfilesService = UserProfilesService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_profile_entity_1.UserProfile)),
    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], UserProfilesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,