a4a1d59e39d319511d3fece12c8de68c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var UserDeletionService_1;
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDeletionService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_entity_1 = require("../entities/user.entity");
const wallet_info_entity_1 = require("../entities/wallet-info.entity");
const user_progress_entity_1 = require("../entities/user-progress.entity");
const config_1 = require("@nestjs/config");
const accountStatus_enum_1 = require("../enums/accountStatus.enum");
const audit_log_service_1 = require("src/audit/services/audit.log.service");
const account_deletion_confirmation_service_1 = require("./account.deletion.confirmation.service");
/**
 * Service responsible for handling user account deletion process
 */
let UserDeletionService = UserDeletionService_1 = class UserDeletionService {
    constructor(userRepository, walletInfoRepository, userProgressRepository, auditLogService, confirmationService, connection, configService) {
        this.userRepository = userRepository;
        this.walletInfoRepository = walletInfoRepository;
        this.userProgressRepository = userProgressRepository;
        this.auditLogService = auditLogService;
        this.confirmationService = confirmationService;
        this.connection = connection;
        this.configService = configService;
        this.logger = new common_1.Logger(UserDeletionService_1.name);
        // Get data retention period from config (days)
        this.dataRetentionPeriod = this.configService.get('DATA_RETENTION_PERIOD', 30);
    }
    /**
     * Deactivate a user account
     * @param userId User ID to deactivate
     * @param requestingUserId User ID requesting the deactivation
     */
    async deactivateAccount(userId, requestingUserId) {
        const user = await this.findUserOrFail(userId);
        // Begin transaction
        const queryRunner = this.connection.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Add status column to track account state
            user['status'] = accountStatus_enum_1.AccountStatus.DEACTIVATED;
            user['deactivatedAt'] = new Date();
            await queryRunner.manager.save(user);
            // Log the deactivation
            await this.auditLogService.createLog({
                action: 'ACCOUNT_DEACTIVATION',
                entityType: 'USER',
                entityId: userId,
                performedBy: requestingUserId,
                details: {
                    timestamp: new Date().toISOString(),
                },
            });
            await queryRunner.commitTransaction();
            this.logger.log(`Account ${userId} has been deactivated`);
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            this.logger.error(`Failed to deactivate account ${userId}`, error.stack);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Request account deletion and start confirmation workflow
     * @param userId User ID to delete
     * @param requestingUserId User ID requesting the deletion
     */
    async requestAccountDeletion(userId, requestingUserId) {
        const user = await this.findUserOrFail(userId);
        // Ensure user is authorized to delete this account
        if (userId !== requestingUserId) {
            const requestingUser = await this.findUserOrFail(requestingUserId);
            if (requestingUser.role !== 'ADMIN') {
                throw new common_1.BadRequestException('You are not authorized to delete this account');
            }
        }
        // Mark account as pending deletion
        user['status'] = accountStatus_enum_1.AccountStatus.PENDING_DELETION;
        user['deletionRequestedAt'] = new Date();
        await this.userRepository.save(user);
        // Start confirmation workflow
        const confirmationUrl = `${this.configService.get('FRONTEND_URL')}/confirm-deletion?userId=${user.id}`;
        const unsubscribeUrl = `${this.configService.get('FRONTEND_URL')}/preferences?email=${user.email}`;
        await this.confirmationService.sendAccountDeletionEmail({
            email: user.email,
            firstName: user.firstName,
            confirmationUrl,
            unsubscribeUrl,
        });
        // Log deletion request
        await this.auditLogService.createLog({
            action: 'ACCOUNT_DELETION_REQUESTED',
            entityType: 'USER',
            entityId: userId,
            performedBy: requestingUserId,
            details: {
                timestamp: new Date().toISOString(),
            },
        });
        this.logger.log(`Account deletion requested for user ${userId}`);
    }
    /**
     * Confirm account deletion with token
     * @param userId User ID to delete
     * @param confirmationToken Confirmation token
     */
    async confirmAccountDeletion(userId, confirmationToken) {
        // Validate confirmation token
        const isValid = await this.confirmationService.validateAndDeleteAccount(confirmationToken);
        if (!isValid) {
            throw new common_1.BadRequestException('Invalid or expired confirmation token');
        }
        await this.performAccountDeletion(userId, userId);
    }
    /**
     * Perform the actual account deletion process
     * @param userId User ID to delete
     * @param requestingUserId User ID requesting the deletion
     */
    async performAccountDeletion(userId, requestingUserId) {
        const user = await this.findUserOrFail(userId);
        // Begin transaction for atomic operations
        const queryRunner = this.connection.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Scrub sensitive user data but preserve the record for soft deletion
            await this.scrubUserData(userId, queryRunner);
            // Preserve blockchain credentials but mark as orphaned
            await this.preserveBlockchainCredentials(userId, queryRunner);
            // Soft delete related entities
            await queryRunner.manager.softDelete(user_progress_entity_1.UserProgress, {
                user: { id: userId },
            });
            // Soft delete the user entity
            user['status'] = accountStatus_enum_1.AccountStatus.DELETED;
            user['deletedAt'] = new Date();
            await queryRunner.manager.save(user);
            // Log the deletion
            await this.auditLogService.createLog({
                action: 'ACCOUNT_DELETED',
                entityType: 'USER',
                entityId: userId,
                performedBy: requestingUserId,
                details: {
                    timestamp: new Date().toISOString(),
                    retentionPeriod: this.dataRetentionPeriod,
                },
            });
            await queryRunner.commitTransaction();
            this.logger.log(`Account ${userId} has been deleted and data scrubbed`);
            // Schedule final purge after retention period
            this.scheduleDataPurge(userId);
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            this.logger.error(`Failed to delete account ${userId}`, error.stack);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Scrub sensitive user data but preserve the record
     * @param userId User ID to scrub
     * @param queryRunner Transaction query runner
     */
    async scrubUserData(userId, queryRunner) {
        // Keep user ID but scrub personal information
        await queryRunner.manager.update(user_entity_1.User, userId, {
            firstName: '[REDACTED]',
            lastName: '[REDACTED]',
            email: `deleted-${userId}@redacted.user`,
            bio: null,
            profilePicture: null,
            // Don't delete password hash as it's needed for security audit purposes
        });
    }
    /**
     * Preserve blockchain credentials for compliance and access purposes
     * @param userId User ID
     * @param queryRunner Transaction query runner
     */
    async preserveBlockchainCredentials(userId, queryRunner) {
        const walletInfo = await this.walletInfoRepository.findOne({
            where: { user: { id: userId } },
        });
        if (walletInfo) {
            // Mark wallet as orphaned but preserve the blockchain data
            await queryRunner.manager.update(wallet_info_entity_1.WalletInfo, walletInfo.id, {
                orphaned: true,
                orphanedAt: new Date(),
                // Keep blockchain credentials for compliance
            });
            this.logger.log(`Blockchain credentials preserved for user ${userId}`);
        }
    }
    /**
     * Schedule complete data purge after retention period
     * @param userId User ID to purge
     */
    scheduleDataPurge(userId) {
        const purgeDate = new Date();
        purgeDate.setDate(purgeDate.getDate() + this.dataRetentionPeriod);
        this.logger.log(`Scheduling complete data purge for user ${userId} on ${purgeDate.toISOString()}`);
        // For production, you might want to use a job scheduler like Bull
        // This is a simplified version for demonstration
        setTimeout(async () => {
            await this.purgeUserData(userId);
        }, this.dataRetentionPeriod * 24 * 60 * 60 * 1000);
    }
    /**
     * Completely purge user data after retention period
     * @param userId User ID to purge
     */
    async purgeUserData(userId) {
        const queryRunner = this.connection.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Hard delete related entities first
            await queryRunner.manager.delete(user_progress_entity_1.UserProgress, { user: { id: userId } });
            // Check if blockchain credentials should be permanently deleted
            // This depends on your regulatory requirements
            const walletInfo = await this.walletInfoRepository.findOne({
                where: { user: { id: userId } },
            });
            if (walletInfo && this.shouldPurgeBlockchainData(walletInfo)) {
                await queryRunner.manager.delete(wallet_info_entity_1.WalletInfo, walletInfo.id);
            }
            // Finally hard delete the user
            await queryRunner.manager.delete(user_entity_1.User, userId);
            await queryRunner.commitTransaction();
            // Log the permanent deletion
            await this.auditLogService.createLog({
                action: 'ACCOUNT_PURGED',
                entityType: 'USER',
                entityId: userId,
                performedBy: 'SYSTEM',
                details: {
                    timestamp: new Date().toISOString(),
                },
            });
            this.logger.log(`User data for ${userId} has been permanently purged`);
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            this.logger.error(`Failed to purge user data for ${userId}`, error.stack);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Determine if blockchain data should be purged based on regulations
     * @param walletInfo Wallet information
     */
    shouldPurgeBlockchainData(walletInfo) {
        // This logic should be implemented based on your specific regulatory requirements
        // For example, you might need to keep some data for tax purposes
        // GDPR allows keeping data needed for legal obligations
        // For demonstration, we're returning false to preserve blockchain data
        return false;
    }
    /**
     * Utility method to find a user or throw exception
     * @param userId User ID to find
     */
    async findUserOrFail(userId) {
        const user = await this.userRepository.findOne({
            where: { id: userId },
        });
        if (!user) {
            throw new common_1.NotFoundException(`User with ID ${userId} not found`);
        }
        return user;
    }
};
exports.UserDeletionService = UserDeletionService;
exports.UserDeletionService = UserDeletionService = UserDeletionService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __param(1, (0, typeorm_1.InjectRepository)(wallet_info_entity_1.WalletInfo)),
    __param(2, (0, typeorm_1.InjectRepository)(user_progress_entity_1.UserProgress)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof audit_log_service_1.AuditLogService !== "undefined" && audit_log_service_1.AuditLogService) === "function" ? _d : Object, typeof (_e = typeof account_deletion_confirmation_service_1.AccountDeletionConfirmationService !== "undefined" && account_deletion_confirmation_service_1.AccountDeletionConfirmationService) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.Connection !== "undefined" && typeorm_2.Connection) === "function" ? _f : Object, typeof (_g = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _g : Object])
], UserDeletionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,