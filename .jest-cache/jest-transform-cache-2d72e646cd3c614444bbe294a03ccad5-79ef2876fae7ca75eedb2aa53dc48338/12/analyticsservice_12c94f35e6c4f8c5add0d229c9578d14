c37d394dfa1a79342830e5e928c2e598
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const json2csv_1 = require("json2csv");
const analytics_entity_1 = require("./entities/analytics.entity");
/**
 * AnalyticsService provides analytics data and reporting logic.
 */
let AnalyticsService = class AnalyticsService {
    constructor(analyticsRepository) {
        this.analyticsRepository = analyticsRepository;
    }
    /**
     * Get all analytics records.
     */
    async getAllAnalytics() {
        return await this.analyticsRepository.find();
    }
    /**
     * Convert analytics data to CSV format.
     */
    convertToCSV(data) {
        const fields = ['id', 'eventType', 'userId', 'courseId', 'additionalData', 'createdAt'];
        return (0, json2csv_1.parse)(data, { fields });
    }
    /**
     * Get user engagement trends.
     */
    async getUserEngagementTrends() {
        const rawData = await this.analyticsRepository.find();
        // Group events by date
        const trends = rawData.reduce((acc, entry) => {
            const dateKey = entry.createdAt.toISOString().split('T')[0]; // Extract YYYY-MM-DD
            acc[dateKey] = acc[dateKey] || { date: dateKey, count: 0 };
            acc[dateKey].count += 1;
            return acc;
        }, {});
        return Object.values(trends);
    }
    /**
     * Get credential issuance analytics.
     */
    async getCredentialIssuance() {
        // Simulate query or on-chain fetch
        return { totalIssued: 512, byDate: { '2025-05-01': 32 } };
    }
    async getTransactionVolumes() {
        return {
            daily: [120, 100, 89, 132],
            monthly: [3000, 2800, 3400],
        };
    }
    async getCostAnalysis() {
        return {
            averageGasCost: 0.012,
            totalSpent: 35.6,
        };
    }
    async getUsageReports() {
        return {
            totalUsers: 1240,
            activeUsers: 410,
            reportDate: new Date().toISOString(),
        };
    }
};
exports.AnalyticsService = AnalyticsService;
exports.AnalyticsService = AnalyticsService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(analytics_entity_1.Analytics)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], AnalyticsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhbmFseXRpY3NcXGFuYWx5dGljcy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNEM7QUFDNUMsNkNBQW1EO0FBQ25ELHFDQUFxQztBQUNyQyx1Q0FBaUM7QUFDakMsa0VBQXdEO0FBRXhEOztHQUVHO0FBRUksSUFBTSxnQkFBZ0IsR0FBdEIsTUFBTSxnQkFBZ0I7SUFDM0IsWUFFbUIsbUJBQTBDO1FBQTFDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBdUI7SUFDMUQsQ0FBQztJQUVKOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGVBQWU7UUFDbkIsT0FBTyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxZQUFZLENBQUMsSUFBaUI7UUFDNUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEYsT0FBTyxJQUFBLGdCQUFLLEVBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsdUJBQXVCO1FBQzNCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDO1FBRXRELHVCQUF1QjtRQUN2QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzNDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCO1lBQ2xGLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMzRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUN4QixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMscUJBQXFCO1FBQ3pCLG1DQUFtQztRQUNuQyxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsS0FBSyxDQUFDLHFCQUFxQjtRQUN6QixPQUFPO1lBQ0wsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO1lBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWU7UUFDbkIsT0FBTztZQUNMLGNBQWMsRUFBRSxLQUFLO1lBQ3JCLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWU7UUFDbkIsT0FBTztZQUNMLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFVBQVUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtTQUNyQyxDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUFuRVksNENBQWdCOzJCQUFoQixnQkFBZ0I7SUFENUIsSUFBQSxtQkFBVSxHQUFFO0lBR1IsV0FBQSxJQUFBLDBCQUFnQixFQUFDLDRCQUFTLENBQUMsQ0FBQTt5REFDVSxvQkFBVSxvQkFBVixvQkFBVTtHQUh2QyxnQkFBZ0IsQ0FtRTVCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcYW5hbHl0aWNzXFxhbmFseXRpY3Muc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RSZXBvc2l0b3J5IH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ2pzb24yY3N2JzsgXHJcbmltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJy4vZW50aXRpZXMvYW5hbHl0aWNzLmVudGl0eSc7XHJcblxyXG4vKipcclxuICogQW5hbHl0aWNzU2VydmljZSBwcm92aWRlcyBhbmFseXRpY3MgZGF0YSBhbmQgcmVwb3J0aW5nIGxvZ2ljLlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQW5hbHl0aWNzU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShBbmFseXRpY3MpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFuYWx5dGljc1JlcG9zaXRvcnk6IFJlcG9zaXRvcnk8QW5hbHl0aWNzPixcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhbGwgYW5hbHl0aWNzIHJlY29yZHMuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWxsQW5hbHl0aWNzKCk6IFByb21pc2U8QW5hbHl0aWNzW10+IHtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLmFuYWx5dGljc1JlcG9zaXRvcnkuZmluZCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBhbmFseXRpY3MgZGF0YSB0byBDU1YgZm9ybWF0LlxyXG4gICAqL1xyXG4gIGNvbnZlcnRUb0NTVihkYXRhOiBBbmFseXRpY3NbXSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBbJ2lkJywgJ2V2ZW50VHlwZScsICd1c2VySWQnLCAnY291cnNlSWQnLCAnYWRkaXRpb25hbERhdGEnLCAnY3JlYXRlZEF0J107XHJcbiAgICByZXR1cm4gcGFyc2UoZGF0YSwgeyBmaWVsZHMgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdXNlciBlbmdhZ2VtZW50IHRyZW5kcy5cclxuICAgKi9cclxuICBhc3luYyBnZXRVc2VyRW5nYWdlbWVudFRyZW5kcygpIHtcclxuICAgIGNvbnN0IHJhd0RhdGEgPSBhd2FpdCB0aGlzLmFuYWx5dGljc1JlcG9zaXRvcnkuZmluZCgpO1xyXG5cclxuICAgIC8vIEdyb3VwIGV2ZW50cyBieSBkYXRlXHJcbiAgICBjb25zdCB0cmVuZHMgPSByYXdEYXRhLnJlZHVjZSgoYWNjLCBlbnRyeSkgPT4ge1xyXG4gICAgICBjb25zdCBkYXRlS2V5ID0gZW50cnkuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTsgLy8gRXh0cmFjdCBZWVlZLU1NLUREXHJcbiAgICAgIGFjY1tkYXRlS2V5XSA9IGFjY1tkYXRlS2V5XSB8fCB7IGRhdGU6IGRhdGVLZXksIGNvdW50OiAwIH07XHJcbiAgICAgIGFjY1tkYXRlS2V5XS5jb3VudCArPSAxO1xyXG4gICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwge30pO1xyXG5cclxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRyZW5kcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgY3JlZGVudGlhbCBpc3N1YW5jZSBhbmFseXRpY3MuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0Q3JlZGVudGlhbElzc3VhbmNlKCkge1xyXG4gICAgLy8gU2ltdWxhdGUgcXVlcnkgb3Igb24tY2hhaW4gZmV0Y2hcclxuICAgIHJldHVybiB7IHRvdGFsSXNzdWVkOiA1MTIsIGJ5RGF0ZTogeyAnMjAyNS0wNS0wMSc6IDMyIH0gfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uVm9sdW1lcygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhaWx5OiBbMTIwLCAxMDAsIDg5LCAxMzJdLFxyXG4gICAgICBtb250aGx5OiBbMzAwMCwgMjgwMCwgMzQwMF0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0Q29zdEFuYWx5c2lzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXZlcmFnZUdhc0Nvc3Q6IDAuMDEyLFxyXG4gICAgICB0b3RhbFNwZW50OiAzNS42LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFVzYWdlUmVwb3J0cygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvdGFsVXNlcnM6IDEyNDAsXHJcbiAgICAgIGFjdGl2ZVVzZXJzOiA0MTAsXHJcbiAgICAgIHJlcG9ydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==