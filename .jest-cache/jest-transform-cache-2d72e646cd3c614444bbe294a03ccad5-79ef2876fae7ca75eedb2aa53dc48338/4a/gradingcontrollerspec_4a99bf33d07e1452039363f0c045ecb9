d7e45a0a80aba0a82746cfa4a65109d2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const grading_controller_1 = require("./grading.controller");
const grading_service_1 = require("../services/grading.service");
describe('GradingController', () => {
    let controller;
    let service;
    const mockService = {
        gradeAssignment: jest.fn(),
        updateGrade: jest.fn(),
        getGradingHistory: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [grading_controller_1.GradingController],
            providers: [
                { provide: grading_service_1.GradingService, useValue: mockService },
            ],
        }).compile();
        controller = module.get(grading_controller_1.GradingController);
        service = module.get(grading_service_1.GradingService);
    });
    it('should call gradingService.gradeAssignment', async () => {
        const dto = { numericGrade: 85, feedback: 'Good work' };
        const req = { user: { id: 1 } };
        await controller.gradeAssignment(2, 5, dto, req);
        expect(service.gradeAssignment).toHaveBeenCalledWith(req.user, 2, 5, dto);
    });
    it('should call gradingService.updateGrade', async () => {
        const dto = { feedback: 'Updated' };
        const req = { user: { id: 1 } };
        await controller.updateGrade(1, dto, req);
        expect(service.updateGrade).toHaveBeenCalledWith(req.user, 1, dto);
    });
    it('should call gradingService.getGradingHistory', async () => {
        const req = { user: { id: 1 } };
        await controller.getGradingHistory(req);
        expect(service.getGradingHistory).toHaveBeenCalledWith(req.user);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxjb250cm9sbGVyXFxncmFkaW5nLmNvbnRyb2xsZXIuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCw2REFBeUQ7QUFDekQsaUVBQTZEO0FBSTdELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxVQUE2QixDQUFDO0lBQ2xDLElBQUksT0FBdUIsQ0FBQztJQUU1QixNQUFNLFdBQVcsR0FBRztRQUNsQixlQUFlLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUMxQixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN0QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQzdCLENBQUM7SUFFRixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFdBQVcsRUFBRSxDQUFDLHNDQUFpQixDQUFDO1lBQ2hDLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxnQ0FBYyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUU7YUFDbkQ7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFYixVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBb0Isc0NBQWlCLENBQUMsQ0FBQztRQUM5RCxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBaUIsZ0NBQWMsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFELE1BQU0sR0FBRyxHQUFtQixFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ3hFLE1BQU0sR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFaEMsTUFBTSxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RELE1BQU0sR0FBRyxHQUFtQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztRQUNwRCxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBRWhDLE1BQU0sVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNoQyxNQUFNLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxncmFkaW5nXFxjb250cm9sbGVyXFxncmFkaW5nLmNvbnRyb2xsZXIuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcclxuaW1wb3J0IHsgR3JhZGluZ0NvbnRyb2xsZXIgfSBmcm9tICcuL2dyYWRpbmcuY29udHJvbGxlcic7XHJcbmltcG9ydCB7IEdyYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZ3JhZGluZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3JlYXRlR3JhZGVEdG8gfSBmcm9tICcuLi9kdG8vY3JlYXRlLWdyYWRlLmR0byc7XHJcbmltcG9ydCB7IFVwZGF0ZUdyYWRlRHRvIH0gZnJvbSAnLi4vZHRvL3VwZGF0ZS1ncmFkZS5kdG8nO1xyXG5cclxuZGVzY3JpYmUoJ0dyYWRpbmdDb250cm9sbGVyJywgKCkgPT4ge1xyXG4gIGxldCBjb250cm9sbGVyOiBHcmFkaW5nQ29udHJvbGxlcjtcclxuICBsZXQgc2VydmljZTogR3JhZGluZ1NlcnZpY2U7XHJcblxyXG4gIGNvbnN0IG1vY2tTZXJ2aWNlID0ge1xyXG4gICAgZ3JhZGVBc3NpZ25tZW50OiBqZXN0LmZuKCksXHJcbiAgICB1cGRhdGVHcmFkZTogamVzdC5mbigpLFxyXG4gICAgZ2V0R3JhZGluZ0hpc3Rvcnk6IGplc3QuZm4oKSxcclxuICB9O1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGNvbnRyb2xsZXJzOiBbR3JhZGluZ0NvbnRyb2xsZXJdLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IEdyYWRpbmdTZXJ2aWNlLCB1c2VWYWx1ZTogbW9ja1NlcnZpY2UgfSxcclxuICAgICAgXSxcclxuICAgIH0pLmNvbXBpbGUoKTtcclxuXHJcbiAgICBjb250cm9sbGVyID0gbW9kdWxlLmdldDxHcmFkaW5nQ29udHJvbGxlcj4oR3JhZGluZ0NvbnRyb2xsZXIpO1xyXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8R3JhZGluZ1NlcnZpY2U+KEdyYWRpbmdTZXJ2aWNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjYWxsIGdyYWRpbmdTZXJ2aWNlLmdyYWRlQXNzaWdubWVudCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGR0bzogQ3JlYXRlR3JhZGVEdG8gPSB7IG51bWVyaWNHcmFkZTogODUsIGZlZWRiYWNrOiAnR29vZCB3b3JrJyB9O1xyXG4gICAgY29uc3QgcmVxID0geyB1c2VyOiB7IGlkOiAxIH0gfTtcclxuXHJcbiAgICBhd2FpdCBjb250cm9sbGVyLmdyYWRlQXNzaWdubWVudCgyLCA1LCBkdG8sIHJlcSk7XHJcbiAgICBleHBlY3Qoc2VydmljZS5ncmFkZUFzc2lnbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJlcS51c2VyLCAyLCA1LCBkdG8pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNhbGwgZ3JhZGluZ1NlcnZpY2UudXBkYXRlR3JhZGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBkdG86IFVwZGF0ZUdyYWRlRHRvID0geyBmZWVkYmFjazogJ1VwZGF0ZWQnIH07XHJcbiAgICBjb25zdCByZXEgPSB7IHVzZXI6IHsgaWQ6IDEgfSB9O1xyXG5cclxuICAgIGF3YWl0IGNvbnRyb2xsZXIudXBkYXRlR3JhZGUoMSwgZHRvLCByZXEpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UudXBkYXRlR3JhZGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJlcS51c2VyLCAxLCBkdG8pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNhbGwgZ3JhZGluZ1NlcnZpY2UuZ2V0R3JhZGluZ0hpc3RvcnknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXEgPSB7IHVzZXI6IHsgaWQ6IDEgfSB9O1xyXG4gICAgYXdhaXQgY29udHJvbGxlci5nZXRHcmFkaW5nSGlzdG9yeShyZXEpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UuZ2V0R3JhZGluZ0hpc3RvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJlcS51c2VyKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==