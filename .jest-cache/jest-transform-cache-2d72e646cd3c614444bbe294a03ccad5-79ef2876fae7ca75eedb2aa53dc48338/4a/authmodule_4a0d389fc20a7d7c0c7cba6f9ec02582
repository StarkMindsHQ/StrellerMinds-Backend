77dc474aa33c4bf2344ffdc32ffade0b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthModule = void 0;
/**
 * AuthModule provides authentication and authorization features.
 *
 * @module Auth
 */
const common_1 = require("@nestjs/common");
const jwt_1 = require("@nestjs/jwt");
const passport_1 = require("@nestjs/passport");
const config_1 = require("@nestjs/config");
const users_module_1 = require("../users/users.module");
const typeorm_1 = require("@nestjs/typeorm");
const auth_controller_1 = require("./auth.controller");
const auth_service_1 = require("./auth.service");
const jwt_strategy_1 = require("./jwt.strategy");
const auth_token_entity_1 = require("./entities/auth-token.entity");
const refresh_token_entity_1 = require("./entities/refresh-token.entity");
const email_module_1 = require("src/email/email.module");
const password_validation_service_1 = require("./password-validation.service");
const core_1 = require("@nestjs/core");
const jwt_auth_guard_1 = require("./guards/jwt-auth.guard");
const roles_guard_1 = require("./guards/roles.guard");
const jwt_local_strategy_1 = require("./strategies/jwt-local.strategy");
const google_strategy_adapter_1 = require("./adapters/google.strategy.adapter");
const facebook_strategy_adapter_1 = require("./adapters/facebook.strategy.adapter");
const apple_strategy_adapter_1 = require("./adapters/apple.strategy.adapter");
const shared_module_1 = require("../shared/shared.module");
let AuthModule = class AuthModule {
};
exports.AuthModule = AuthModule;
exports.AuthModule = AuthModule = __decorate([
    (0, common_1.Module)({
        imports: [
            email_module_1.EmailModule,
            users_module_1.UsersModule, // This imports the UsersModule which exports UsersService
            passport_1.PassportModule,
            typeorm_1.TypeOrmModule.forFeature([auth_token_entity_1.AuthToken, refresh_token_entity_1.RefreshToken]),
            jwt_1.JwtModule.registerAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: async (configService) => ({
                    secret: configService.get('JWT_SECRET'),
                    signOptions: {
                        expiresIn: '1h',
                    },
                }),
            }),
            shared_module_1.SharedModule,
        ],
        controllers: [auth_controller_1.AuthController],
        providers: [
            auth_service_1.AuthService,
            jwt_strategy_1.JwtStrategy,
            password_validation_service_1.PasswordValidationService,
            jwt_local_strategy_1.JwtLocalStrategy,
            google_strategy_adapter_1.GoogleOAuthAdapter,
            facebook_strategy_adapter_1.FacebookOAuthAdapter,
            apple_strategy_adapter_1.AppleOAuthAdapter,
            {
                provide: 'AUTH_STRATEGY',
                useExisting: jwt_local_strategy_1.JwtLocalStrategy, // Use the JwtLocalStrategy as the default auth strategy
            },
            {
                provide: 'AUTH_STRATEGIES',
                useFactory: (jwtLocalStrategy, google, facebook, apple) => [jwtLocalStrategy, google, facebook, apple],
                inject: [
                    jwt_local_strategy_1.JwtLocalStrategy,
                    google_strategy_adapter_1.GoogleOAuthAdapter,
                    facebook_strategy_adapter_1.FacebookOAuthAdapter,
                    apple_strategy_adapter_1.AppleOAuthAdapter,
                ],
            },
            {
                provide: core_1.APP_GUARD,
                useClass: jwt_auth_guard_1.JwtAuthGuard,
            },
            {
                provide: core_1.APP_GUARD,
                useClass: roles_guard_1.RolesGuard,
            },
        ],
        exports: [auth_service_1.AuthService],
    })
], AuthModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhdXRoXFxhdXRoLm1vZHVsZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztHQUlHO0FBQ0gsMkNBQXdDO0FBQ3hDLHFDQUF3QztBQUN4QywrQ0FBa0Q7QUFDbEQsMkNBQTZEO0FBQzdELHdEQUFvRDtBQUNwRCw2Q0FBZ0Q7QUFDaEQsdURBQW1EO0FBQ25ELGlEQUE2QztBQUM3QyxpREFBNkM7QUFDN0Msb0VBQXlEO0FBQ3pELDBFQUErRDtBQUMvRCx5REFBcUQ7QUFDckQsK0VBQTBFO0FBQzFFLHVDQUF5QztBQUN6Qyw0REFBdUQ7QUFDdkQsc0RBQWtEO0FBRWxELHdFQUFtRTtBQUVuRSxnRkFBd0U7QUFDeEUsb0ZBQTRFO0FBQzVFLDhFQUFzRTtBQUN0RSwyREFBdUQ7QUEyRGhELElBQU0sVUFBVSxHQUFoQixNQUFNLFVBQVU7Q0FBRyxDQUFBO0FBQWIsZ0NBQVU7cUJBQVYsVUFBVTtJQXpEdEIsSUFBQSxlQUFNLEVBQUM7UUFDTixPQUFPLEVBQUU7WUFDUCwwQkFBVztZQUNYLDBCQUFXLEVBQUUsMERBQTBEO1lBQ3ZFLHlCQUFjO1lBQ2QsdUJBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyw2QkFBUyxFQUFFLG1DQUFZLENBQUMsQ0FBQztZQUNuRCxlQUFTLENBQUMsYUFBYSxDQUFDO2dCQUN0QixPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDO2dCQUN2QixNQUFNLEVBQUUsQ0FBQyxzQkFBYSxDQUFDO2dCQUN2QixVQUFVLEVBQUUsS0FBSyxFQUFFLGFBQTRCLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ25ELE1BQU0sRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLFlBQVksQ0FBQztvQkFDL0MsV0FBVyxFQUFFO3dCQUNYLFNBQVMsRUFBRSxJQUFJO3FCQUNoQjtpQkFDRixDQUFDO2FBQ0gsQ0FBQztZQUNGLDRCQUFZO1NBQ2I7UUFDRCxXQUFXLEVBQUUsQ0FBQyxnQ0FBYyxDQUFDO1FBQzdCLFNBQVMsRUFBRTtZQUNULDBCQUFXO1lBQ1gsMEJBQVc7WUFDWCx1REFBeUI7WUFDekIscUNBQWdCO1lBQ2hCLDRDQUFrQjtZQUNsQixnREFBb0I7WUFDcEIsMENBQWlCO1lBQ2pCO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixXQUFXLEVBQUUscUNBQWdCLEVBQUUsd0RBQXdEO2FBQ3hGO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsVUFBVSxFQUFFLENBQ1YsZ0JBQWtDLEVBQ2xDLE1BQTBCLEVBQzFCLFFBQThCLEVBQzlCLEtBQXdCLEVBQ1AsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUM7Z0JBQ2pFLE1BQU0sRUFBRTtvQkFDTixxQ0FBZ0I7b0JBQ2hCLDRDQUFrQjtvQkFDbEIsZ0RBQW9CO29CQUNwQiwwQ0FBaUI7aUJBQ2xCO2FBQ0Y7WUFDRDtnQkFDRSxPQUFPLEVBQUUsZ0JBQVM7Z0JBQ2xCLFFBQVEsRUFBRSw2QkFBWTthQUN2QjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxnQkFBUztnQkFDbEIsUUFBUSxFQUFFLHdCQUFVO2FBQ3JCO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsQ0FBQywwQkFBVyxDQUFDO0tBQ3ZCLENBQUM7R0FDVyxVQUFVLENBQUciLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhdXRoXFxhdXRoLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQXV0aE1vZHVsZSBwcm92aWRlcyBhdXRoZW50aWNhdGlvbiBhbmQgYXV0aG9yaXphdGlvbiBmZWF0dXJlcy5cclxuICpcclxuICogQG1vZHVsZSBBdXRoXHJcbiAqL1xyXG5pbXBvcnQgeyBNb2R1bGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEp3dE1vZHVsZSB9IGZyb20gJ0BuZXN0anMvand0JztcclxuaW1wb3J0IHsgUGFzc3BvcnRNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Bhc3Nwb3J0JztcclxuaW1wb3J0IHsgQ29uZmlnTW9kdWxlLCBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xyXG5pbXBvcnQgeyBVc2Vyc01vZHVsZSB9IGZyb20gJy4uL3VzZXJzL3VzZXJzLm1vZHVsZSc7XHJcbmltcG9ydCB7IFR5cGVPcm1Nb2R1bGUgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBBdXRoQ29udHJvbGxlciB9IGZyb20gJy4vYXV0aC5jb250cm9sbGVyJztcclxuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IEp3dFN0cmF0ZWd5IH0gZnJvbSAnLi9qd3Quc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBBdXRoVG9rZW4gfSBmcm9tICcuL2VudGl0aWVzL2F1dGgtdG9rZW4uZW50aXR5JztcclxuaW1wb3J0IHsgUmVmcmVzaFRva2VuIH0gZnJvbSAnLi9lbnRpdGllcy9yZWZyZXNoLXRva2VuLmVudGl0eSc7XHJcbmltcG9ydCB7IEVtYWlsTW9kdWxlIH0gZnJvbSAnc3JjL2VtYWlsL2VtYWlsLm1vZHVsZSc7XHJcbmltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLXZhbGlkYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IEFQUF9HVUFSRCB9IGZyb20gJ0BuZXN0anMvY29yZSc7XHJcbmltcG9ydCB7IEp3dEF1dGhHdWFyZCB9IGZyb20gJy4vZ3VhcmRzL2p3dC1hdXRoLmd1YXJkJztcclxuaW1wb3J0IHsgUm9sZXNHdWFyZCB9IGZyb20gJy4vZ3VhcmRzL3JvbGVzLmd1YXJkJztcclxuXHJcbmltcG9ydCB7IEp3dExvY2FsU3RyYXRlZ3kgfSBmcm9tICcuL3N0cmF0ZWdpZXMvand0LWxvY2FsLnN0cmF0ZWd5JztcclxuaW1wb3J0IHsgSUF1dGhTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ2llcy9hdXRoLXN0cmF0ZWd5LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEdvb2dsZU9BdXRoQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcnMvZ29vZ2xlLnN0cmF0ZWd5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBGYWNlYm9va09BdXRoQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcnMvZmFjZWJvb2suc3RyYXRlZ3kuYWRhcHRlcic7XHJcbmltcG9ydCB7IEFwcGxlT0F1dGhBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVycy9hcHBsZS5zdHJhdGVneS5hZGFwdGVyJztcclxuaW1wb3J0IHsgU2hhcmVkTW9kdWxlIH0gZnJvbSAnLi4vc2hhcmVkL3NoYXJlZC5tb2R1bGUnO1xyXG5cclxuQE1vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgRW1haWxNb2R1bGUsXHJcbiAgICBVc2Vyc01vZHVsZSwgLy8gVGhpcyBpbXBvcnRzIHRoZSBVc2Vyc01vZHVsZSB3aGljaCBleHBvcnRzIFVzZXJzU2VydmljZVxyXG4gICAgUGFzc3BvcnRNb2R1bGUsXHJcbiAgICBUeXBlT3JtTW9kdWxlLmZvckZlYXR1cmUoW0F1dGhUb2tlbiwgUmVmcmVzaFRva2VuXSksXHJcbiAgICBKd3RNb2R1bGUucmVnaXN0ZXJBc3luYyh7XHJcbiAgICAgIGltcG9ydHM6IFtDb25maWdNb2R1bGVdLFxyXG4gICAgICBpbmplY3Q6IFtDb25maWdTZXJ2aWNlXSxcclxuICAgICAgdXNlRmFjdG9yeTogYXN5bmMgKGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UpID0+ICh7XHJcbiAgICAgICAgc2VjcmV0OiBjb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdKV1RfU0VDUkVUJyksXHJcbiAgICAgICAgc2lnbk9wdGlvbnM6IHtcclxuICAgICAgICAgIGV4cGlyZXNJbjogJzFoJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9KSxcclxuICAgIH0pLFxyXG4gICAgU2hhcmVkTW9kdWxlLFxyXG4gIF0sXHJcbiAgY29udHJvbGxlcnM6IFtBdXRoQ29udHJvbGxlcl0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBBdXRoU2VydmljZSxcclxuICAgIEp3dFN0cmF0ZWd5LFxyXG4gICAgUGFzc3dvcmRWYWxpZGF0aW9uU2VydmljZSxcclxuICAgIEp3dExvY2FsU3RyYXRlZ3ksXHJcbiAgICBHb29nbGVPQXV0aEFkYXB0ZXIsXHJcbiAgICBGYWNlYm9va09BdXRoQWRhcHRlcixcclxuICAgIEFwcGxlT0F1dGhBZGFwdGVyLFxyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiAnQVVUSF9TVFJBVEVHWScsXHJcbiAgICAgIHVzZUV4aXN0aW5nOiBKd3RMb2NhbFN0cmF0ZWd5LCAvLyBVc2UgdGhlIEp3dExvY2FsU3RyYXRlZ3kgYXMgdGhlIGRlZmF1bHQgYXV0aCBzdHJhdGVneVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogJ0FVVEhfU1RSQVRFR0lFUycsXHJcbiAgICAgIHVzZUZhY3Rvcnk6IChcclxuICAgICAgICBqd3RMb2NhbFN0cmF0ZWd5OiBKd3RMb2NhbFN0cmF0ZWd5LFxyXG4gICAgICAgIGdvb2dsZTogR29vZ2xlT0F1dGhBZGFwdGVyLFxyXG4gICAgICAgIGZhY2Vib29rOiBGYWNlYm9va09BdXRoQWRhcHRlcixcclxuICAgICAgICBhcHBsZTogQXBwbGVPQXV0aEFkYXB0ZXIsXHJcbiAgICAgICk6IElBdXRoU3RyYXRlZ3lbXSA9PiBband0TG9jYWxTdHJhdGVneSwgZ29vZ2xlLCBmYWNlYm9vaywgYXBwbGVdLFxyXG4gICAgICBpbmplY3Q6IFtcclxuICAgICAgICBKd3RMb2NhbFN0cmF0ZWd5LFxyXG4gICAgICAgIEdvb2dsZU9BdXRoQWRhcHRlcixcclxuICAgICAgICBGYWNlYm9va09BdXRoQWRhcHRlcixcclxuICAgICAgICBBcHBsZU9BdXRoQWRhcHRlcixcclxuICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IEFQUF9HVUFSRCxcclxuICAgICAgdXNlQ2xhc3M6IEp3dEF1dGhHdWFyZCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IEFQUF9HVUFSRCxcclxuICAgICAgdXNlQ2xhc3M6IFJvbGVzR3VhcmQsXHJcbiAgICB9LFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW0F1dGhTZXJ2aWNlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEF1dGhNb2R1bGUge31cclxuIl0sInZlcnNpb24iOjN9