{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\integration\\auth\\auth.integration.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AAEtD,6CAAgD;AAChD,2CAA8C;AAC9C,mDAAqC;AAErC,+DAA2D;AAC3D,kEAA8D;AAC9D,yEAA+D;AAC/D,0FAA+E;AAC/E,+CAA8C;AAC9C,2EAAsE;AAEtE,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,GAAqB,CAAC;IAC1B,IAAI,SAAwB,CAAC;IAE7B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,SAAS,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YACzC,OAAO,EAAE;gBACP,qBAAY,CAAC,OAAO,CAAC;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,WAAW;iBACzB,CAAC;gBACF,yCAAkB;gBAClB,uBAAa,CAAC,UAAU,CAAC,CAAC,kBAAI,EAAE,mCAAY,CAAC,CAAC;gBAC9C,wBAAU;gBACV,0BAAW;aACZ;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,GAAG,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;QACxC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,kCAAkC;QAClC,MAAM,MAAM,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,WAAW,GAAG;YAClB,KAAK,EAAE,kBAAkB;YACzB,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,MAAM;SACjB,CAAC;QAEF,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC,WAAW,CAAC;iBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAChC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACjC,IAAI,EAAE;oBACJ,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;oBACtB,KAAK,EAAE,WAAW,CAAC,KAAK;oBACxB,IAAI,EAAE,WAAW,CAAC,IAAI;oBACtB,IAAI,EAAE,SAAS;iBAChB;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,GAAG,WAAW;gBACd,KAAK,EAAE,eAAe;aACvB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,GAAG,WAAW;gBACd,QAAQ,EAAE,KAAK;aAChB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,qBAAqB;YACrB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC,WAAW,CAAC;iBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,sCAAsC;YACtC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC,WAAW,CAAC;iBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC,EAAE,CAAC;iBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,QAAc,CAAC;QAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,mBAAmB;YACnB,QAAQ,GAAG,uBAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC9C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,aAAa,CAAC;iBACnB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,aAAa;aACxB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAChC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACjC,IAAI,EAAE;oBACJ,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;oBACtB,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,aAAa,CAAC;iBACnB,IAAI,CAAC;gBACJ,KAAK,EAAE,sBAAsB;gBAC7B,QAAQ,EAAE,aAAa;aACxB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,aAAa,CAAC;iBACnB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,eAAe;aAC1B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,aAAa,CAAC;iBACnB,IAAI,CAAC,EAAE,CAAC;iBACR,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAI,YAAoB,CAAC;QAEzB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,0CAA0C;YAC1C,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACxD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YAEL,YAAY,GAAG,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,eAAe,CAAC;iBACrB,IAAI,CAAC;gBACJ,aAAa,EAAE,YAAY;aAC5B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aACjC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,eAAe,CAAC;iBACrB,IAAI,CAAC;gBACJ,aAAa,EAAE,eAAe;aAC/B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,IAAI,CAAC,EAAE,CAAC;iBACR,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAI,YAAoB,CAAC;QAEzB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACxD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YAEL,YAAY,GAAG,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,cAAc,CAAC;iBACpB,IAAI,CAAC;gBACJ,aAAa,EAAE,YAAY;aAC5B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,sCAAsC;YACtC,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,IAAI,CAAC;gBACJ,aAAa,EAAE,YAAY;aAC5B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAI,QAAc,CAAC;QAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,QAAQ,GAAG,uBAAW,CAAC,OAAO,EAAE,CAAC;YACjC,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;aACtB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,IAAI,CAAC;gBACJ,KAAK,EAAE,sBAAsB;aAC9B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,IAAI,CAAC;gBACJ,KAAK,EAAE,eAAe;aACvB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,WAAmB,CAAC;QACxB,IAAI,QAAc,CAAC;QAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,QAAQ,GAAG,uBAAW,CAAC,OAAO,EAAE,CAAC;YACjC,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACxD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC,CAAC;YAEL,WAAW,GAAG,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,eAAe,CAAC;iBACpB,GAAG,CAAC,eAAe,EAAE,UAAU,WAAW,EAAE,CAAC;iBAC7C,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,eAAe,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,eAAe,CAAC;iBACpB,GAAG,CAAC,eAAe,EAAE,sBAAsB,CAAC;iBAC5C,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,eAAe,CAAC;iBACpB,GAAG,CAAC,eAAe,EAAE,qBAAqB,CAAC;iBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\integration\\auth\\auth.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { INestApplication } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport * as request from 'supertest';\r\n\r\nimport { AuthModule } from '../../../src/auth/auth.module';\r\nimport { UsersModule } from '../../../src/users/users.module';\r\nimport { User } from '../../../src/users/entities/user.entity';\r\nimport { RefreshToken } from '../../../src/auth/entities/refresh-token.entity';\r\nimport { userFactory } from '../../factories';\r\nimport { DatabaseTestModule } from '../../utils/database-test.module';\r\n\r\ndescribe('Auth Integration Tests', () => {\r\n  let app: INestApplication;\r\n  let moduleRef: TestingModule;\r\n\r\n  beforeAll(async () => {\r\n    moduleRef = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot({\r\n          isGlobal: true,\r\n          envFilePath: '.env.test',\r\n        }),\r\n        DatabaseTestModule,\r\n        TypeOrmModule.forFeature([User, RefreshToken]),\r\n        AuthModule,\r\n        UsersModule,\r\n      ],\r\n    }).compile();\r\n\r\n    app = moduleRef.createNestApplication();\r\n    await app.init();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    await app.close();\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // Clean database before each test\r\n    await global.testUtils.cleanupDatabase();\r\n  });\r\n\r\n  describe('POST /auth/register', () => {\r\n    const registerDto = {\r\n      email: 'test@example.com',\r\n      password: 'password123',\r\n      name: 'Test User',\r\n      firstName: 'Test',\r\n      lastName: 'User',\r\n    };\r\n\r\n    it('should register a new user successfully', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send(registerDto)\r\n        .expect(201);\r\n\r\n      expect(response.body).toMatchObject({\r\n        access_token: expect.any(String),\r\n        refresh_token: expect.any(String),\r\n        user: {\r\n          id: expect.any(String),\r\n          email: registerDto.email,\r\n          name: registerDto.name,\r\n          role: 'student',\r\n        },\r\n      });\r\n\r\n      expect(response.body.user.id).toBeValidUUID();\r\n      expect(response.body.user.email).toBeValidEmail();\r\n    });\r\n\r\n    it('should return 400 for invalid email format', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          ...registerDto,\r\n          email: 'invalid-email',\r\n        })\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveValidationError('email');\r\n    });\r\n\r\n    it('should return 400 for weak password', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          ...registerDto,\r\n          password: '123',\r\n        })\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveValidationError('password');\r\n    });\r\n\r\n    it('should return 409 for duplicate email', async () => {\r\n      // First registration\r\n      await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send(registerDto)\r\n        .expect(201);\r\n\r\n      // Second registration with same email\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send(registerDto)\r\n        .expect(409);\r\n\r\n      expect(response.body.message).toContain('already exists');\r\n    });\r\n\r\n    it('should validate required fields', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({})\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveValidationError('email');\r\n      expect(response.body).toHaveValidationError('password');\r\n      expect(response.body).toHaveValidationError('name');\r\n    });\r\n  });\r\n\r\n  describe('POST /auth/login', () => {\r\n    let testUser: User;\r\n\r\n    beforeEach(async () => {\r\n      // Create test user\r\n      testUser = userFactory.forAuth('password123');\r\n      await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          email: testUser.email,\r\n          password: 'password123',\r\n          name: testUser.name,\r\n          firstName: testUser.firstName,\r\n          lastName: testUser.lastName,\r\n        });\r\n    });\r\n\r\n    it('should login with valid credentials', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/login')\r\n        .send({\r\n          email: testUser.email,\r\n          password: 'password123',\r\n        })\r\n        .expect(200);\r\n\r\n      expect(response.body).toMatchObject({\r\n        access_token: expect.any(String),\r\n        refresh_token: expect.any(String),\r\n        user: {\r\n          id: expect.any(String),\r\n          email: testUser.email,\r\n          name: testUser.name,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should return 401 for invalid email', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/login')\r\n        .send({\r\n          email: 'nonexistent@test.com',\r\n          password: 'password123',\r\n        })\r\n        .expect(401);\r\n\r\n      expect(response.body.message).toContain('Invalid credentials');\r\n    });\r\n\r\n    it('should return 401 for invalid password', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/login')\r\n        .send({\r\n          email: testUser.email,\r\n          password: 'wrongpassword',\r\n        })\r\n        .expect(401);\r\n\r\n      expect(response.body.message).toContain('Invalid credentials');\r\n    });\r\n\r\n    it('should return 400 for missing credentials', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/login')\r\n        .send({})\r\n        .expect(400);\r\n    });\r\n  });\r\n\r\n  describe('POST /auth/refresh', () => {\r\n    let refreshToken: string;\r\n\r\n    beforeEach(async () => {\r\n      // Register and login to get refresh token\r\n      const registerResponse = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          email: 'test@example.com',\r\n          password: 'password123',\r\n          name: 'Test User',\r\n          firstName: 'Test',\r\n          lastName: 'User',\r\n        });\r\n\r\n      refreshToken = registerResponse.body.refresh_token;\r\n    });\r\n\r\n    it('should refresh access token with valid refresh token', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/refresh')\r\n        .send({\r\n          refresh_token: refreshToken,\r\n        })\r\n        .expect(200);\r\n\r\n      expect(response.body).toMatchObject({\r\n        access_token: expect.any(String),\r\n      });\r\n    });\r\n\r\n    it('should return 401 for invalid refresh token', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .post('/auth/refresh')\r\n        .send({\r\n          refresh_token: 'invalid-token',\r\n        })\r\n        .expect(401);\r\n\r\n      expect(response.body.message).toContain('Invalid refresh token');\r\n    });\r\n\r\n    it('should return 400 for missing refresh token', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/refresh')\r\n        .send({})\r\n        .expect(400);\r\n    });\r\n  });\r\n\r\n  describe('POST /auth/logout', () => {\r\n    let refreshToken: string;\r\n\r\n    beforeEach(async () => {\r\n      const registerResponse = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          email: 'test@example.com',\r\n          password: 'password123',\r\n          name: 'Test User',\r\n          firstName: 'Test',\r\n          lastName: 'User',\r\n        });\r\n\r\n      refreshToken = registerResponse.body.refresh_token;\r\n    });\r\n\r\n    it('should logout successfully', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/logout')\r\n        .send({\r\n          refresh_token: refreshToken,\r\n        })\r\n        .expect(200);\r\n\r\n      // Verify refresh token is invalidated\r\n      await request(app.getHttpServer())\r\n        .post('/auth/refresh')\r\n        .send({\r\n          refresh_token: refreshToken,\r\n        })\r\n        .expect(401);\r\n    });\r\n  });\r\n\r\n  describe('POST /auth/forgot-password', () => {\r\n    let testUser: User;\r\n\r\n    beforeEach(async () => {\r\n      testUser = userFactory.forAuth();\r\n      await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          email: testUser.email,\r\n          password: 'password123',\r\n          name: testUser.name,\r\n          firstName: testUser.firstName,\r\n          lastName: testUser.lastName,\r\n        });\r\n    });\r\n\r\n    it('should send password reset email for existing user', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/forgot-password')\r\n        .send({\r\n          email: testUser.email,\r\n        })\r\n        .expect(200);\r\n    });\r\n\r\n    it('should not reveal if email does not exist', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/forgot-password')\r\n        .send({\r\n          email: 'nonexistent@test.com',\r\n        })\r\n        .expect(200);\r\n    });\r\n\r\n    it('should return 400 for invalid email format', async () => {\r\n      await request(app.getHttpServer())\r\n        .post('/auth/forgot-password')\r\n        .send({\r\n          email: 'invalid-email',\r\n        })\r\n        .expect(400);\r\n    });\r\n  });\r\n\r\n  describe('Protected Routes', () => {\r\n    let accessToken: string;\r\n    let testUser: User;\r\n\r\n    beforeEach(async () => {\r\n      testUser = userFactory.forAuth();\r\n      const registerResponse = await request(app.getHttpServer())\r\n        .post('/auth/register')\r\n        .send({\r\n          email: testUser.email,\r\n          password: 'password123',\r\n          name: testUser.name,\r\n          firstName: testUser.firstName,\r\n          lastName: testUser.lastName,\r\n        });\r\n\r\n      accessToken = registerResponse.body.access_token;\r\n    });\r\n\r\n    it('should access protected route with valid token', async () => {\r\n      const response = await request(app.getHttpServer())\r\n        .get('/auth/profile')\r\n        .set('Authorization', `Bearer ${accessToken}`)\r\n        .expect(200);\r\n\r\n      expect(response.body).toMatchObject({\r\n        id: expect.any(String),\r\n        email: testUser.email,\r\n        name: testUser.name,\r\n      });\r\n    });\r\n\r\n    it('should return 401 for missing token', async () => {\r\n      await request(app.getHttpServer())\r\n        .get('/auth/profile')\r\n        .expect(401);\r\n    });\r\n\r\n    it('should return 401 for invalid token', async () => {\r\n      await request(app.getHttpServer())\r\n        .get('/auth/profile')\r\n        .set('Authorization', 'Bearer invalid-token')\r\n        .expect(401);\r\n    });\r\n\r\n    it('should return 401 for malformed authorization header', async () => {\r\n      await request(app.getHttpServer())\r\n        .get('/auth/profile')\r\n        .set('Authorization', 'InvalidFormat token')\r\n        .expect(401);\r\n    });\r\n  });\r\n});\r\n"],"version":3}