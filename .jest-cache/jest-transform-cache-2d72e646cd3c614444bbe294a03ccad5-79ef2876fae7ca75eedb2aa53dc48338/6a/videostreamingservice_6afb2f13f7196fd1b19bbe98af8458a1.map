{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\services\\video-streaming.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\services\\video-streaming.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, FindOptionsWhere } from 'typeorm';\r\nimport { Video, VideoStatus, VideoVisibility } from '../entities/video.entity';\r\nimport { VideoQuality } from '../entities/video-quality.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { CreateVideoDto } from '../dto/create-video.dto';\r\nimport { AwsCloudFrontService } from './aws-cloudfront.service';\r\nimport { VideoProcessingService } from './video-processing.service';\r\nimport { VideoSecurityService } from './video-security.service';\r\nimport { VideoAnalyticsService } from './video-analytics.service';\r\n\r\nexport interface VideoUploadResult {\r\n  video: Video;\r\n  uploadUrl?: string;\r\n  uploadFields?: Record<string, string>;\r\n}\r\n\r\nexport interface VideoStreamingInfo {\r\n  video: Video;\r\n  streamingUrls: {\r\n    primary: string;\r\n    hls?: string;\r\n    dash?: string;\r\n    qualities: Array<{\r\n      quality: string;\r\n      url: string;\r\n      width: number;\r\n      height: number;\r\n      bitrate: number;\r\n    }>;\r\n  };\r\n  security: {\r\n    accessToken: string;\r\n    expiresAt: number;\r\n    drmConfig?: any;\r\n  };\r\n  analytics: {\r\n    sessionId: string;\r\n    trackingUrl: string;\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class VideoStreamingService {\r\n  private readonly logger = new Logger(VideoStreamingService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Video)\r\n    private readonly videoRepository: Repository<Video>,\r\n    @InjectRepository(VideoQuality)\r\n    private readonly qualityRepository: Repository<VideoQuality>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    private readonly cloudFrontService: AwsCloudFrontService,\r\n    private readonly processingService: VideoProcessingService,\r\n    private readonly securityService: VideoSecurityService,\r\n    private readonly analyticsService: VideoAnalyticsService,\r\n  ) {}\r\n\r\n  async createVideo(createVideoDto: CreateVideoDto, uploadedBy: User): Promise<VideoUploadResult> {\r\n    try {\r\n      this.logger.debug(`Creating video: ${createVideoDto.title}`);\r\n\r\n      // Create video entity\r\n      const video = this.videoRepository.create({\r\n        ...createVideoDto,\r\n        uploadedBy,\r\n        status: VideoStatus.UPLOADING,\r\n        visibility: createVideoDto.visibility || VideoVisibility.PRIVATE,\r\n        metadata: {\r\n          originalFormat: this.extractFileExtension(createVideoDto.originalFilename),\r\n          uploadMethod: 'direct',\r\n          tags: createVideoDto.tags || [],\r\n          chapters: createVideoDto.chapters || [],\r\n          customData: createVideoDto.customData || {},\r\n        },\r\n        securitySettings: {\r\n          requireAuth: true,\r\n          allowedDomains: [],\r\n          geoRestrictions: {},\r\n          drmEnabled: false,\r\n          signedUrlExpiry: 3600,\r\n          downloadEnabled: false,\r\n          embedEnabled: false,\r\n          ...createVideoDto.securitySettings,\r\n        },\r\n        processingSettings: {\r\n          generateThumbnails: true,\r\n          thumbnailCount: 5,\r\n          generatePreview: true,\r\n          adaptiveStreaming: true,\r\n          qualityLevels: ['720p', '480p', '360p'],\r\n          ...createVideoDto.processingSettings,\r\n        },\r\n      });\r\n\r\n      const savedVideo = await this.videoRepository.save(video);\r\n\r\n      // Generate S3 upload URL for direct upload\r\n      const uploadKey = this.cloudFrontService.generateVideoKey(savedVideo.id, undefined, 'original');\r\n      \r\n      // Update video with S3 information\r\n      await this.videoRepository.update(savedVideo.id, {\r\n        s3Key: uploadKey,\r\n        s3Bucket: this.cloudFrontService['config'].s3Bucket,\r\n        cdnDomain: this.cloudFrontService['config'].distributionDomain,\r\n      });\r\n\r\n      this.logger.debug(`Video created successfully: ${savedVideo.id}`);\r\n\r\n      return {\r\n        video: savedVideo,\r\n        uploadUrl: `https://${this.cloudFrontService['config'].s3Bucket}.s3.amazonaws.com/${uploadKey}`,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Failed to create video', error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async uploadVideoFile(videoId: string, file: Express.Multer.File): Promise<void> {\r\n    try {\r\n      this.logger.debug(`Uploading video file for video: ${videoId}`);\r\n\r\n      const video = await this.findVideoById(videoId);\r\n      \r\n      if (video.status !== VideoStatus.UPLOADING) {\r\n        throw new BadRequestException('Video is not in uploading state');\r\n      }\r\n\r\n      // Upload to CloudFront/S3\r\n      const uploadKey = this.cloudFrontService.generateVideoKey(videoId, undefined, 'original');\r\n      const uploadResult = await this.cloudFrontService.uploadVideo(\r\n        file.buffer,\r\n        uploadKey,\r\n        file.mimetype,\r\n        {\r\n          'video-id': videoId,\r\n          'original-filename': file.originalname,\r\n        },\r\n      );\r\n\r\n      // Update video with upload information\r\n      await this.videoRepository.update(videoId, {\r\n        s3Key: uploadResult.key,\r\n        fileSize: uploadResult.size,\r\n        streamingUrl: uploadResult.cdnUrl,\r\n        metadata: {\r\n          ...video.metadata,\r\n          uploadMethod: 'direct',\r\n          uploadCompletedAt: new Date(),\r\n        },\r\n      });\r\n\r\n      // Queue video for processing\r\n      await this.processingService.queueVideoProcessing(\r\n        videoId,\r\n        uploadResult.url,\r\n        video.processingSettings as any,\r\n      );\r\n\r\n      this.logger.debug(`Video file uploaded successfully: ${videoId}`);\r\n    } catch (error) {\r\n      this.logger.error(`Failed to upload video file: ${videoId}`, error.stack);\r\n      \r\n      // Update video status to failed\r\n      await this.videoRepository.update(videoId, {\r\n        status: VideoStatus.FAILED,\r\n        metadata: {\r\n          processingErrors: [error.message],\r\n        },\r\n      });\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVideoStreamingInfo(\r\n    videoId: string,\r\n    userId?: string,\r\n    requestInfo?: {\r\n      ipAddress?: string;\r\n      userAgent?: string;\r\n      referrer?: string;\r\n      domain?: string;\r\n      country?: string;\r\n    },\r\n  ): Promise<VideoStreamingInfo> {\r\n    try {\r\n      this.logger.debug(`Getting streaming info for video: ${videoId}`);\r\n\r\n      const video = await this.findVideoById(videoId, ['qualityVariants']);\r\n\r\n      // Validate access\r\n      const accessResult = await this.securityService.validateVideoAccess({\r\n        videoId,\r\n        userId,\r\n        ...requestInfo,\r\n      });\r\n\r\n      if (!accessResult.allowed) {\r\n        throw new BadRequestException(accessResult.reason);\r\n      }\r\n\r\n      // Get quality variants\r\n      const qualities = video.qualityVariants\r\n        .filter(q => q.status === 'completed')\r\n        .map(q => ({\r\n          quality: q.quality,\r\n          url: q.url,\r\n          width: q.width,\r\n          height: q.height,\r\n          bitrate: q.bitrate,\r\n        }));\r\n\r\n      // Generate DRM config if needed\r\n      const drmConfig = await this.securityService.generateDRMConfig(video);\r\n\r\n      // Generate session ID for analytics\r\n      const sessionId = this.generateSessionId();\r\n\r\n      return {\r\n        video,\r\n        streamingUrls: {\r\n          primary: accessResult.streamingUrl || video.streamingUrl,\r\n          hls: video.hlsUrl,\r\n          dash: video.dashUrl,\r\n          qualities,\r\n        },\r\n        security: {\r\n          accessToken: accessResult.accessToken!,\r\n          expiresAt: Math.floor(Date.now() / 1000) + 3600,\r\n          drmConfig,\r\n        },\r\n        analytics: {\r\n          sessionId,\r\n          trackingUrl: `/api/video-streaming/analytics/events`,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Failed to get streaming info: ${videoId}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async findVideoById(videoId: string, relations: string[] = []): Promise<Video> {\r\n    const video = await this.videoRepository.findOne({\r\n      where: { id: videoId },\r\n      relations: ['uploadedBy', ...relations],\r\n    });\r\n\r\n    if (!video) {\r\n      throw new NotFoundException('Video not found');\r\n    }\r\n\r\n    return video;\r\n  }\r\n\r\n  async findVideos(\r\n    filters: {\r\n      status?: VideoStatus;\r\n      visibility?: VideoVisibility;\r\n      uploadedBy?: string;\r\n      search?: string;\r\n    } = {},\r\n    pagination: {\r\n      page?: number;\r\n      limit?: number;\r\n    } = {},\r\n  ): Promise<{ videos: Video[]; total: number }> {\r\n    const { page = 1, limit = 20 } = pagination;\r\n    const skip = (page - 1) * limit;\r\n\r\n    const whereClause: FindOptionsWhere<Video> = {};\r\n\r\n    if (filters.status) {\r\n      whereClause.status = filters.status;\r\n    }\r\n\r\n    if (filters.visibility) {\r\n      whereClause.visibility = filters.visibility;\r\n    }\r\n\r\n    if (filters.uploadedBy) {\r\n      whereClause.uploadedBy = { id: filters.uploadedBy };\r\n    }\r\n\r\n    const queryBuilder = this.videoRepository.createQueryBuilder('video')\r\n      .leftJoinAndSelect('video.uploadedBy', 'uploadedBy')\r\n      .leftJoinAndSelect('video.qualityVariants', 'qualityVariants')\r\n      .where(whereClause);\r\n\r\n    if (filters.search) {\r\n      queryBuilder.andWhere(\r\n        '(video.title ILIKE :search OR video.description ILIKE :search)',\r\n        { search: `%${filters.search}%` },\r\n      );\r\n    }\r\n\r\n    const [videos, total] = await queryBuilder\r\n      .orderBy('video.createdAt', 'DESC')\r\n      .skip(skip)\r\n      .take(limit)\r\n      .getManyAndCount();\r\n\r\n    return { videos, total };\r\n  }\r\n\r\n  async updateVideo(\r\n    videoId: string,\r\n    updateData: Partial<Video>,\r\n    userId: string,\r\n  ): Promise<Video> {\r\n    const video = await this.findVideoById(videoId);\r\n\r\n    // Check if user has permission to update\r\n    if (video.uploadedBy.id !== userId) {\r\n      throw new BadRequestException('You do not have permission to update this video');\r\n    }\r\n\r\n    await this.videoRepository.update(videoId, updateData);\r\n    return this.findVideoById(videoId);\r\n  }\r\n\r\n  async deleteVideo(videoId: string, userId: string): Promise<void> {\r\n    const video = await this.findVideoById(videoId, ['qualityVariants']);\r\n\r\n    // Check if user has permission to delete\r\n    if (video.uploadedBy.id !== userId) {\r\n      throw new BadRequestException('You do not have permission to delete this video');\r\n    }\r\n\r\n    try {\r\n      // Delete from CloudFront/S3\r\n      if (video.s3Key) {\r\n        await this.cloudFrontService.deleteVideo(video.s3Key);\r\n      }\r\n\r\n      // Delete quality variants from S3\r\n      for (const quality of video.qualityVariants) {\r\n        if (quality.s3Key) {\r\n          await this.cloudFrontService.deleteVideo(quality.s3Key);\r\n        }\r\n      }\r\n\r\n      // Delete from database\r\n      await this.videoRepository.remove(video);\r\n\r\n      this.logger.debug(`Video deleted successfully: ${videoId}`);\r\n    } catch (error) {\r\n      this.logger.error(`Failed to delete video: ${videoId}`, error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVideoAnalytics(videoId: string, userId: string) {\r\n    const video = await this.findVideoById(videoId);\r\n\r\n    // Check if user has permission to view analytics\r\n    if (video.uploadedBy.id !== userId) {\r\n      throw new BadRequestException('You do not have permission to view analytics for this video');\r\n    }\r\n\r\n    const [engagement, performance, geographic, device, quality] = await Promise.all([\r\n      this.analyticsService.getEngagementMetrics(videoId),\r\n      this.analyticsService.getPerformanceMetrics(videoId),\r\n      this.analyticsService.getGeographicMetrics(videoId),\r\n      this.analyticsService.getDeviceMetrics(videoId),\r\n      this.analyticsService.getQualityMetrics(videoId),\r\n    ]);\r\n\r\n    return {\r\n      video: {\r\n        id: video.id,\r\n        title: video.title,\r\n        duration: video.duration,\r\n        viewCount: video.viewCount,\r\n        createdAt: video.createdAt,\r\n      },\r\n      engagement,\r\n      performance,\r\n      geographic,\r\n      device,\r\n      quality,\r\n    };\r\n  }\r\n\r\n  private extractFileExtension(filename: string): string {\r\n    return filename.split('.').pop()?.toLowerCase() || '';\r\n  }\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n"],"version":3}