56670bf72a9ba32a03d8ee76333f009c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VideoStreamingService_1;
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoStreamingService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const video_entity_1 = require("../entities/video.entity");
const video_quality_entity_1 = require("../entities/video-quality.entity");
const user_entity_1 = require("../../users/entities/user.entity");
const aws_cloudfront_service_1 = require("./aws-cloudfront.service");
const video_processing_service_1 = require("./video-processing.service");
const video_security_service_1 = require("./video-security.service");
const video_analytics_service_1 = require("./video-analytics.service");
let VideoStreamingService = VideoStreamingService_1 = class VideoStreamingService {
    constructor(videoRepository, qualityRepository, userRepository, cloudFrontService, processingService, securityService, analyticsService) {
        this.videoRepository = videoRepository;
        this.qualityRepository = qualityRepository;
        this.userRepository = userRepository;
        this.cloudFrontService = cloudFrontService;
        this.processingService = processingService;
        this.securityService = securityService;
        this.analyticsService = analyticsService;
        this.logger = new common_1.Logger(VideoStreamingService_1.name);
    }
    async createVideo(createVideoDto, uploadedBy) {
        try {
            this.logger.debug(`Creating video: ${createVideoDto.title}`);
            // Create video entity
            const video = this.videoRepository.create({
                ...createVideoDto,
                uploadedBy,
                status: video_entity_1.VideoStatus.UPLOADING,
                visibility: createVideoDto.visibility || video_entity_1.VideoVisibility.PRIVATE,
                metadata: {
                    originalFormat: this.extractFileExtension(createVideoDto.originalFilename),
                    uploadMethod: 'direct',
                    tags: createVideoDto.tags || [],
                    chapters: createVideoDto.chapters || [],
                    customData: createVideoDto.customData || {},
                },
                securitySettings: {
                    requireAuth: true,
                    allowedDomains: [],
                    geoRestrictions: {},
                    drmEnabled: false,
                    signedUrlExpiry: 3600,
                    downloadEnabled: false,
                    embedEnabled: false,
                    ...createVideoDto.securitySettings,
                },
                processingSettings: {
                    generateThumbnails: true,
                    thumbnailCount: 5,
                    generatePreview: true,
                    adaptiveStreaming: true,
                    qualityLevels: ['720p', '480p', '360p'],
                    ...createVideoDto.processingSettings,
                },
            });
            const savedVideo = await this.videoRepository.save(video);
            // Generate S3 upload URL for direct upload
            const uploadKey = this.cloudFrontService.generateVideoKey(savedVideo.id, undefined, 'original');
            // Update video with S3 information
            await this.videoRepository.update(savedVideo.id, {
                s3Key: uploadKey,
                s3Bucket: this.cloudFrontService['config'].s3Bucket,
                cdnDomain: this.cloudFrontService['config'].distributionDomain,
            });
            this.logger.debug(`Video created successfully: ${savedVideo.id}`);
            return {
                video: savedVideo,
                uploadUrl: `https://${this.cloudFrontService['config'].s3Bucket}.s3.amazonaws.com/${uploadKey}`,
            };
        }
        catch (error) {
            this.logger.error('Failed to create video', error.stack);
            throw error;
        }
    }
    async uploadVideoFile(videoId, file) {
        try {
            this.logger.debug(`Uploading video file for video: ${videoId}`);
            const video = await this.findVideoById(videoId);
            if (video.status !== video_entity_1.VideoStatus.UPLOADING) {
                throw new common_1.BadRequestException('Video is not in uploading state');
            }
            // Upload to CloudFront/S3
            const uploadKey = this.cloudFrontService.generateVideoKey(videoId, undefined, 'original');
            const uploadResult = await this.cloudFrontService.uploadVideo(file.buffer, uploadKey, file.mimetype, {
                'video-id': videoId,
                'original-filename': file.originalname,
            });
            // Update video with upload information
            await this.videoRepository.update(videoId, {
                s3Key: uploadResult.key,
                fileSize: uploadResult.size,
                streamingUrl: uploadResult.cdnUrl,
                metadata: {
                    ...video.metadata,
                    uploadMethod: 'direct',
                    uploadCompletedAt: new Date(),
                },
            });
            // Queue video for processing
            await this.processingService.queueVideoProcessing(videoId, uploadResult.url, video.processingSettings);
            this.logger.debug(`Video file uploaded successfully: ${videoId}`);
        }
        catch (error) {
            this.logger.error(`Failed to upload video file: ${videoId}`, error.stack);
            // Update video status to failed
            await this.videoRepository.update(videoId, {
                status: video_entity_1.VideoStatus.FAILED,
                metadata: {
                    processingErrors: [error.message],
                },
            });
            throw error;
        }
    }
    async getVideoStreamingInfo(videoId, userId, requestInfo) {
        try {
            this.logger.debug(`Getting streaming info for video: ${videoId}`);
            const video = await this.findVideoById(videoId, ['qualityVariants']);
            // Validate access
            const accessResult = await this.securityService.validateVideoAccess({
                videoId,
                userId,
                ...requestInfo,
            });
            if (!accessResult.allowed) {
                throw new common_1.BadRequestException(accessResult.reason);
            }
            // Get quality variants
            const qualities = video.qualityVariants
                .filter(q => q.status === 'completed')
                .map(q => ({
                quality: q.quality,
                url: q.url,
                width: q.width,
                height: q.height,
                bitrate: q.bitrate,
            }));
            // Generate DRM config if needed
            const drmConfig = await this.securityService.generateDRMConfig(video);
            // Generate session ID for analytics
            const sessionId = this.generateSessionId();
            return {
                video,
                streamingUrls: {
                    primary: accessResult.streamingUrl || video.streamingUrl,
                    hls: video.hlsUrl,
                    dash: video.dashUrl,
                    qualities,
                },
                security: {
                    accessToken: accessResult.accessToken,
                    expiresAt: Math.floor(Date.now() / 1000) + 3600,
                    drmConfig,
                },
                analytics: {
                    sessionId,
                    trackingUrl: `/api/video-streaming/analytics/events`,
                },
            };
        }
        catch (error) {
            this.logger.error(`Failed to get streaming info: ${videoId}`, error.stack);
            throw error;
        }
    }
    async findVideoById(videoId, relations = []) {
        const video = await this.videoRepository.findOne({
            where: { id: videoId },
            relations: ['uploadedBy', ...relations],
        });
        if (!video) {
            throw new common_1.NotFoundException('Video not found');
        }
        return video;
    }
    async findVideos(filters = {}, pagination = {}) {
        const { page = 1, limit = 20 } = pagination;
        const skip = (page - 1) * limit;
        const whereClause = {};
        if (filters.status) {
            whereClause.status = filters.status;
        }
        if (filters.visibility) {
            whereClause.visibility = filters.visibility;
        }
        if (filters.uploadedBy) {
            whereClause.uploadedBy = { id: filters.uploadedBy };
        }
        const queryBuilder = this.videoRepository.createQueryBuilder('video')
            .leftJoinAndSelect('video.uploadedBy', 'uploadedBy')
            .leftJoinAndSelect('video.qualityVariants', 'qualityVariants')
            .where(whereClause);
        if (filters.search) {
            queryBuilder.andWhere('(video.title ILIKE :search OR video.description ILIKE :search)', { search: `%${filters.search}%` });
        }
        const [videos, total] = await queryBuilder
            .orderBy('video.createdAt', 'DESC')
            .skip(skip)
            .take(limit)
            .getManyAndCount();
        return { videos, total };
    }
    async updateVideo(videoId, updateData, userId) {
        const video = await this.findVideoById(videoId);
        // Check if user has permission to update
        if (video.uploadedBy.id !== userId) {
            throw new common_1.BadRequestException('You do not have permission to update this video');
        }
        await this.videoRepository.update(videoId, updateData);
        return this.findVideoById(videoId);
    }
    async deleteVideo(videoId, userId) {
        const video = await this.findVideoById(videoId, ['qualityVariants']);
        // Check if user has permission to delete
        if (video.uploadedBy.id !== userId) {
            throw new common_1.BadRequestException('You do not have permission to delete this video');
        }
        try {
            // Delete from CloudFront/S3
            if (video.s3Key) {
                await this.cloudFrontService.deleteVideo(video.s3Key);
            }
            // Delete quality variants from S3
            for (const quality of video.qualityVariants) {
                if (quality.s3Key) {
                    await this.cloudFrontService.deleteVideo(quality.s3Key);
                }
            }
            // Delete from database
            await this.videoRepository.remove(video);
            this.logger.debug(`Video deleted successfully: ${videoId}`);
        }
        catch (error) {
            this.logger.error(`Failed to delete video: ${videoId}`, error.stack);
            throw error;
        }
    }
    async getVideoAnalytics(videoId, userId) {
        const video = await this.findVideoById(videoId);
        // Check if user has permission to view analytics
        if (video.uploadedBy.id !== userId) {
            throw new common_1.BadRequestException('You do not have permission to view analytics for this video');
        }
        const [engagement, performance, geographic, device, quality] = await Promise.all([
            this.analyticsService.getEngagementMetrics(videoId),
            this.analyticsService.getPerformanceMetrics(videoId),
            this.analyticsService.getGeographicMetrics(videoId),
            this.analyticsService.getDeviceMetrics(videoId),
            this.analyticsService.getQualityMetrics(videoId),
        ]);
        return {
            video: {
                id: video.id,
                title: video.title,
                duration: video.duration,
                viewCount: video.viewCount,
                createdAt: video.createdAt,
            },
            engagement,
            performance,
            geographic,
            device,
            quality,
        };
    }
    extractFileExtension(filename) {
        return filename.split('.').pop()?.toLowerCase() || '';
    }
    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
};
exports.VideoStreamingService = VideoStreamingService;
exports.VideoStreamingService = VideoStreamingService = VideoStreamingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(video_entity_1.Video)),
    __param(1, (0, typeorm_1.InjectRepository)(video_quality_entity_1.VideoQuality)),
    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof aws_cloudfront_service_1.AwsCloudFrontService !== "undefined" && aws_cloudfront_service_1.AwsCloudFrontService) === "function" ? _d : Object, typeof (_e = typeof video_processing_service_1.VideoProcessingService !== "undefined" && video_processing_service_1.VideoProcessingService) === "function" ? _e : Object, typeof (_f = typeof video_security_service_1.VideoSecurityService !== "undefined" && video_security_service_1.VideoSecurityService) === "function" ? _f : Object, typeof (_g = typeof video_analytics_service_1.VideoAnalyticsService !== "undefined" && video_analytics_service_1.VideoAnalyticsService) === "function" ? _g : Object])
], VideoStreamingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,