2a123cc8627e4a748f1474e99653e6a9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const translation_entity_1 = require("./translation.entity");
const typeorm_2 = require("typeorm");
let TranslationService = class TranslationService {
    constructor(translationRepo) {
        this.translationRepo = translationRepo;
    }
    async getTranslation(key, language) {
        const translation = await this.translationRepo.findOne({ where: { key, language } });
        if (!translation) {
            throw new common_1.NotFoundException(`Translation not found for key: ${key}, language: ${language}`);
        }
        return translation.value;
    }
    async createTranslation(dto) {
        const exists = await this.translationRepo.findOne({ where: { key: dto.key, language: dto.language } });
        if (exists)
            return exists;
        const newTranslation = this.translationRepo.create(dto);
        return await this.translationRepo.save(newTranslation);
    }
    async translateBatch(keys, language) {
        const translations = await this.translationRepo.find({
            where: keys.map((key) => ({ key, language })),
        });
        return keys.reduce((map, key) => {
            const found = translations.find(t => t.key === key);
            map[key] = found ? found.value : key; // fallback to key
            return map;
        }, {});
    }
};
exports.TranslationService = TranslationService;
exports.TranslationService = TranslationService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(translation_entity_1.Translation)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], TranslationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFx0cmFuc2xhdGlvblxcdHJhbnNsYXRpb24uc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQStEO0FBQy9ELDZDQUFtRDtBQUNuRCw2REFBbUQ7QUFDbkQscUNBQXFDO0FBSzlCLElBQU0sa0JBQWtCLEdBQXhCLE1BQU0sa0JBQWtCO0lBQzdCLFlBRW1CLGVBQXdDO1FBQXhDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtJQUN4RCxDQUFDO0lBRUosS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFXLEVBQUUsUUFBa0I7UUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sSUFBSSwwQkFBaUIsQ0FBQyxrQ0FBa0MsR0FBRyxlQUFlLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQXlCO1FBQy9DLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2RyxJQUFJLE1BQU07WUFBRSxPQUFPLE1BQU0sQ0FBQztRQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4RCxPQUFPLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBYyxFQUFFLFFBQWtCO1FBQ3JELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7WUFDbkQsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5QyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDOUIsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDcEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsa0JBQWtCO1lBQ3hELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQTRCLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0YsQ0FBQTtBQWpDWSxnREFBa0I7NkJBQWxCLGtCQUFrQjtJQUQ5QixJQUFBLG1CQUFVLEdBQUU7SUFHUixXQUFBLElBQUEsMEJBQWdCLEVBQUMsZ0NBQVcsQ0FBQyxDQUFBO3lEQUNJLG9CQUFVLG9CQUFWLG9CQUFVO0dBSG5DLGtCQUFrQixDQWlDOUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFx0cmFuc2xhdGlvblxcdHJhbnNsYXRpb24uc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOb3RGb3VuZEV4Y2VwdGlvbiB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5lbnRpdHknO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcbmltcG9ydCB7IENyZWF0ZVRyYW5zbGF0aW9uRHRvIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5kdG8nO1xyXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ3NyYy9sYW5ndWFnZS9sYW5ndWFnZS5lbnVtJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShUcmFuc2xhdGlvbilcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNsYXRpb25SZXBvOiBSZXBvc2l0b3J5PFRyYW5zbGF0aW9uPixcclxuICApIHt9XHJcblxyXG4gIGFzeW5jIGdldFRyYW5zbGF0aW9uKGtleTogc3RyaW5nLCBsYW5ndWFnZTogTGFuZ3VhZ2UpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgdHJhbnNsYXRpb24gPSBhd2FpdCB0aGlzLnRyYW5zbGF0aW9uUmVwby5maW5kT25lKHsgd2hlcmU6IHsga2V5LCBsYW5ndWFnZSB9IH0pO1xyXG4gICAgaWYgKCF0cmFuc2xhdGlvbikge1xyXG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFeGNlcHRpb24oYFRyYW5zbGF0aW9uIG5vdCBmb3VuZCBmb3Iga2V5OiAke2tleX0sIGxhbmd1YWdlOiAke2xhbmd1YWdlfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYW5zbGF0aW9uLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRlVHJhbnNsYXRpb24oZHRvOiBDcmVhdGVUcmFuc2xhdGlvbkR0bykge1xyXG4gICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy50cmFuc2xhdGlvblJlcG8uZmluZE9uZSh7IHdoZXJlOiB7IGtleTogZHRvLmtleSwgbGFuZ3VhZ2U6IGR0by5sYW5ndWFnZSB9IH0pO1xyXG4gICAgaWYgKGV4aXN0cykgcmV0dXJuIGV4aXN0cztcclxuXHJcbiAgICBjb25zdCBuZXdUcmFuc2xhdGlvbiA9IHRoaXMudHJhbnNsYXRpb25SZXBvLmNyZWF0ZShkdG8pO1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNsYXRpb25SZXBvLnNhdmUobmV3VHJhbnNsYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdHJhbnNsYXRlQmF0Y2goa2V5czogc3RyaW5nW10sIGxhbmd1YWdlOiBMYW5ndWFnZSkge1xyXG4gICAgY29uc3QgdHJhbnNsYXRpb25zID0gYXdhaXQgdGhpcy50cmFuc2xhdGlvblJlcG8uZmluZCh7XHJcbiAgICAgIHdoZXJlOiBrZXlzLm1hcCgoa2V5KSA9PiAoeyBrZXksIGxhbmd1YWdlIH0pKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBrZXlzLnJlZHVjZSgobWFwLCBrZXkpID0+IHtcclxuICAgICAgY29uc3QgZm91bmQgPSB0cmFuc2xhdGlvbnMuZmluZCh0ID0+IHQua2V5ID09PSBrZXkpO1xyXG4gICAgICBtYXBba2V5XSA9IGZvdW5kID8gZm91bmQudmFsdWUgOiBrZXk7IC8vIGZhbGxiYWNrIHRvIGtleVxyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPik7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==