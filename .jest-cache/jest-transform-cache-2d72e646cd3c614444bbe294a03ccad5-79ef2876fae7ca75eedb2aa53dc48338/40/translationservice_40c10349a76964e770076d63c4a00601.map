{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\translation\\translation.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,6DAAmD;AACnD,qCAAqC;AAK9B,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEmB,eAAwC;QAAxC,oBAAe,GAAf,eAAe,CAAyB;IACxD,CAAC;IAEJ,KAAK,CAAC,cAAc,CAAC,GAAW,EAAE,QAAkB;QAClD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACrF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,kCAAkC,GAAG,eAAe,QAAQ,EAAE,CAAC,CAAC;QAC9F,CAAC;QACD,OAAO,WAAW,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAyB;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACvG,IAAI,MAAM;YAAE,OAAO,MAAM,CAAC;QAE1B,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACxD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAc,EAAE,QAAkB;QACrD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACnD,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC9C,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC9B,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;YACpD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,kBAAkB;YACxD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAA4B,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AAjCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;yDACI,oBAAU,oBAAV,oBAAU;GAHnC,kBAAkB,CAiC9B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\translation\\translation.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Translation } from './translation.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CreateTranslationDto } from './translation.dto';\r\nimport { Language } from 'src/language/language.enum';\r\n\r\n@Injectable()\r\nexport class TranslationService {\r\n  constructor(\r\n    @InjectRepository(Translation)\r\n    private readonly translationRepo: Repository<Translation>,\r\n  ) {}\r\n\r\n  async getTranslation(key: string, language: Language): Promise<string> {\r\n    const translation = await this.translationRepo.findOne({ where: { key, language } });\r\n    if (!translation) {\r\n      throw new NotFoundException(`Translation not found for key: ${key}, language: ${language}`);\r\n    }\r\n    return translation.value;\r\n  }\r\n\r\n  async createTranslation(dto: CreateTranslationDto) {\r\n    const exists = await this.translationRepo.findOne({ where: { key: dto.key, language: dto.language } });\r\n    if (exists) return exists;\r\n\r\n    const newTranslation = this.translationRepo.create(dto);\r\n    return await this.translationRepo.save(newTranslation);\r\n  }\r\n\r\n  async translateBatch(keys: string[], language: Language) {\r\n    const translations = await this.translationRepo.find({\r\n      where: keys.map((key) => ({ key, language })),\r\n    });\r\n\r\n    return keys.reduce((map, key) => {\r\n      const found = translations.find(t => t.key === key);\r\n      map[key] = found ? found.value : key; // fallback to key\r\n      return map;\r\n    }, {} as Record<string, string>);\r\n  }\r\n}\r\n"],"version":3}