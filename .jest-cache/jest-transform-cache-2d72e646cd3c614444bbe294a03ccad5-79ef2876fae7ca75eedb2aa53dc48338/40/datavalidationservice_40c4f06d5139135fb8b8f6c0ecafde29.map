{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-validation.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-validation.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { DataQualityRule } from \"../entities/data-quality-rule.entity\"\r\n\r\n@Injectable()\r\nexport class DataValidationService {\r\n  private readonly logger = new Logger(DataValidationService.name)\r\n\r\n  async checkCompleteness(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const field = rule.conditions.field\r\n    const requiredFields = rule.conditions.requiredFields || [field]\r\n\r\n    let completeCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      const isComplete = requiredFields.every((f) => item[f] !== null && item[f] !== undefined && item[f] !== \"\")\r\n\r\n      if (isComplete) {\r\n        completeCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const completenessRate = data.length > 0 ? (completeCount / data.length) * 100 : 100\r\n    const passed = completenessRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: completenessRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n\r\n  async checkAccuracy(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const field = rule.conditions.field\r\n    const expectedValues = rule.conditions.expectedValues\r\n    const pattern = rule.conditions.pattern\r\n\r\n    let accurateCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      let isAccurate = true\r\n\r\n      if (expectedValues && !expectedValues.includes(item[field])) {\r\n        isAccurate = false\r\n      }\r\n\r\n      if (pattern && !new RegExp(pattern).test(item[field])) {\r\n        isAccurate = false\r\n      }\r\n\r\n      if (isAccurate) {\r\n        accurateCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const accuracyRate = data.length > 0 ? (accurateCount / data.length) * 100 : 100\r\n    const passed = accuracyRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: accuracyRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n\r\n  async checkConsistency(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const fields = rule.conditions.fields\r\n    const consistencyRules = rule.conditions.rules\r\n\r\n    let consistentCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      let isConsistent = true\r\n\r\n      for (const consistencyRule of consistencyRules) {\r\n        const { field1, field2, operator } = consistencyRule\r\n\r\n        switch (operator) {\r\n          case \"equals\":\r\n            if (item[field1] !== item[field2]) {\r\n              isConsistent = false\r\n            }\r\n            break\r\n          case \"greater_than\":\r\n            if (item[field1] <= item[field2]) {\r\n              isConsistent = false\r\n            }\r\n            break\r\n          case \"less_than\":\r\n            if (item[field1] >= item[field2]) {\r\n              isConsistent = false\r\n            }\r\n            break\r\n        }\r\n      }\r\n\r\n      if (isConsistent) {\r\n        consistentCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const consistencyRate = data.length > 0 ? (consistentCount / data.length) * 100 : 100\r\n    const passed = consistencyRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: consistencyRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n\r\n  async checkValidity(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const field = rule.conditions.field\r\n    const dataType = rule.conditions.dataType\r\n    const format = rule.conditions.format\r\n    const range = rule.conditions.range\r\n\r\n    let validCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      let isValid = true\r\n      const value = item[field]\r\n\r\n      // Check data type\r\n      if (dataType) {\r\n        switch (dataType) {\r\n          case \"number\":\r\n            if (typeof value !== \"number\" || isNaN(value)) {\r\n              isValid = false\r\n            }\r\n            break\r\n          case \"string\":\r\n            if (typeof value !== \"string\") {\r\n              isValid = false\r\n            }\r\n            break\r\n          case \"date\":\r\n            if (!(value instanceof Date) && isNaN(Date.parse(value))) {\r\n              isValid = false\r\n            }\r\n            break\r\n          case \"email\":\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n            if (!emailRegex.test(value)) {\r\n              isValid = false\r\n            }\r\n            break\r\n        }\r\n      }\r\n\r\n      // Check format\r\n      if (format && typeof value === \"string\") {\r\n        if (!new RegExp(format).test(value)) {\r\n          isValid = false\r\n        }\r\n      }\r\n\r\n      // Check range\r\n      if (range && typeof value === \"number\") {\r\n        if (value < range.min || value > range.max) {\r\n          isValid = false\r\n        }\r\n      }\r\n\r\n      if (isValid) {\r\n        validCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const validityRate = data.length > 0 ? (validCount / data.length) * 100 : 100\r\n    const passed = validityRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: validityRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n\r\n  async checkUniqueness(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const fields = rule.conditions.fields || [rule.conditions.field]\r\n    const seen = new Set()\r\n    const duplicates: any[] = []\r\n\r\n    for (const item of data) {\r\n      const key = fields.map((f) => item[f]).join(\"|\")\r\n\r\n      if (seen.has(key)) {\r\n        duplicates.push(item)\r\n      } else {\r\n        seen.add(key)\r\n      }\r\n    }\r\n\r\n    const uniquenessRate = data.length > 0 ? ((data.length - duplicates.length) / data.length) * 100 : 100\r\n    const passed = uniquenessRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: uniquenessRate,\r\n      failedData: passed ? undefined : duplicates,\r\n    }\r\n  }\r\n\r\n  async checkTimeliness(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const field = rule.conditions.field\r\n    const maxAge = rule.conditions.maxAge // in hours\r\n    const now = new Date()\r\n\r\n    let timelyCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      const timestamp = new Date(item[field])\r\n      const ageInHours = (now.getTime() - timestamp.getTime()) / (1000 * 60 * 60)\r\n\r\n      if (ageInHours <= maxAge) {\r\n        timelyCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const timelinessRate = data.length > 0 ? (timelyCount / data.length) * 100 : 100\r\n    const passed = timelinessRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: timelinessRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n\r\n  async checkConformity(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n  }> {\r\n    const schema = rule.conditions.schema\r\n    let conformCount = 0\r\n    const failedData: any[] = []\r\n\r\n    for (const item of data) {\r\n      let isConform = true\r\n\r\n      // Check required fields\r\n      if (schema.required) {\r\n        for (const requiredField of schema.required) {\r\n          if (!item.hasOwnProperty(requiredField)) {\r\n            isConform = false\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check field types\r\n      if (schema.properties && isConform) {\r\n        for (const [field, fieldSchema] of Object.entries(schema.properties)) {\r\n          if (item.hasOwnProperty(field)) {\r\n            const value = item[field]\r\n            const expectedType = (fieldSchema as any).type\r\n\r\n            if (expectedType === \"string\" && typeof value !== \"string\") {\r\n              isConform = false\r\n              break\r\n            }\r\n            if (expectedType === \"number\" && typeof value !== \"number\") {\r\n              isConform = false\r\n              break\r\n            }\r\n            if (expectedType === \"boolean\" && typeof value !== \"boolean\") {\r\n              isConform = false\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isConform) {\r\n        conformCount++\r\n      } else {\r\n        failedData.push(item)\r\n      }\r\n    }\r\n\r\n    const conformityRate = data.length > 0 ? (conformCount / data.length) * 100 : 100\r\n    const passed = conformityRate >= rule.threshold\r\n\r\n    return {\r\n      passed,\r\n      score: conformityRate,\r\n      failedData: passed ? undefined : failedData,\r\n    }\r\n  }\r\n}\r\n"],"version":3}