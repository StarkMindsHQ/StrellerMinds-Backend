{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-governance.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-governance.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { DataGovernanceService } from \"../services/data-governance.service\"\r\nimport { DataGovernancePolicy } from \"../entities/data-governance-policy.entity\"\r\nimport { DataLineage } from \"../entities/data-lineage.entity\"\r\n\r\ndescribe(\"DataGovernanceService\", () => {\r\n  let service: DataGovernanceService\r\n  let policyRepository: Repository<DataGovernancePolicy>\r\n  let lineageRepository: Repository<DataLineage>\r\n\r\n  const mockQueryBuilder = {\r\n    where: jest.fn().mockReturnThis(),\r\n    andWhere: jest.fn().mockReturnThis(),\r\n    orderBy: jest.fn().mockReturnThis(),\r\n    getMany: jest.fn(),\r\n    getOne: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataGovernanceService,\r\n        {\r\n          provide: getRepositoryToken(DataGovernancePolicy),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            findOne: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(DataLineage),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n            findOne: jest.fn(),\r\n            createQueryBuilder: jest.fn(() => mockQueryBuilder),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<DataGovernanceService>(DataGovernanceService)\r\n    policyRepository = module.get<Repository<DataGovernancePolicy>>(getRepositoryToken(DataGovernancePolicy))\r\n    lineageRepository = module.get<Repository<DataLineage>>(getRepositoryToken(DataLineage))\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"createPolicy\", () => {\r\n    it(\"should create a new governance policy\", async () => {\r\n      const policyData = {\r\n        name: \"Data Retention Policy\",\r\n        description: \"Policy for data retention\",\r\n        category: \"retention\" as any,\r\n        rules: { retentionPeriod: \"7 years\" },\r\n        entityTypes: [\"user\", \"transaction\"],\r\n        status: \"active\" as any,\r\n      }\r\n\r\n      const mockPolicy = { id: \"policy1\", ...policyData }\r\n\r\n      jest.spyOn(policyRepository, \"create\").mockReturnValue(mockPolicy as any)\r\n      jest.spyOn(policyRepository, \"save\").mockResolvedValue(mockPolicy as any)\r\n\r\n      const result = await service.createPolicy(policyData)\r\n\r\n      expect(result).toEqual(mockPolicy)\r\n      expect(policyRepository.create).toHaveBeenCalledWith(policyData)\r\n      expect(policyRepository.save).toHaveBeenCalledWith(mockPolicy)\r\n    })\r\n  })\r\n\r\n  describe(\"getPolicies\", () => {\r\n    it(\"should return policies with filters\", async () => {\r\n      const mockPolicies = [\r\n        {\r\n          id: \"policy1\",\r\n          name: \"Policy 1\",\r\n          category: \"retention\",\r\n          status: \"active\",\r\n        },\r\n        {\r\n          id: \"policy2\",\r\n          name: \"Policy 2\",\r\n          category: \"privacy\",\r\n          status: \"active\",\r\n        },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValue(mockPolicies)\r\n\r\n      const result = await service.getPolicies({\r\n        category: \"retention\",\r\n        status: \"active\",\r\n      })\r\n\r\n      expect(result).toEqual(mockPolicies)\r\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith(\"policy.category = :category\", { category: \"retention\" })\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\"policy.status = :status\", { status: \"active\" })\r\n    })\r\n\r\n    it(\"should return all policies when no filters provided\", async () => {\r\n      const mockPolicies = [\r\n        { id: \"policy1\", name: \"Policy 1\" },\r\n        { id: \"policy2\", name: \"Policy 2\" },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValue(mockPolicies)\r\n\r\n      const result = await service.getPolicies({})\r\n\r\n      expect(result).toEqual(mockPolicies)\r\n      expect(mockQueryBuilder.where).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe(\"updatePolicy\", () => {\r\n    it(\"should update a policy\", async () => {\r\n      const policyId = \"policy1\"\r\n      const updates = { name: \"Updated Policy Name\" }\r\n      const updatedPolicy = { id: policyId, name: \"Updated Policy Name\" }\r\n\r\n      jest.spyOn(policyRepository, \"update\").mockResolvedValue({ affected: 1 } as any)\r\n      jest.spyOn(policyRepository, \"findOne\").mockResolvedValue(updatedPolicy as any)\r\n\r\n      const result = await service.updatePolicy(policyId, updates)\r\n\r\n      expect(result).toEqual(updatedPolicy)\r\n      expect(policyRepository.update).toHaveBeenCalledWith(policyId, updates)\r\n      expect(policyRepository.findOne).toHaveBeenCalledWith({ where: { id: policyId } })\r\n    })\r\n\r\n    it(\"should throw error if policy not found\", async () => {\r\n      const policyId = \"nonexistent\"\r\n      const updates = { name: \"Updated Name\" }\r\n\r\n      jest.spyOn(policyRepository, \"update\").mockResolvedValue({ affected: 1 } as any)\r\n      jest.spyOn(policyRepository, \"findOne\").mockResolvedValue(null)\r\n\r\n      await expect(service.updatePolicy(policyId, updates)).rejects.toThrow(\"Policy with id nonexistent not found\")\r\n    })\r\n  })\r\n\r\n  describe(\"deletePolicy\", () => {\r\n    it(\"should delete a policy\", async () => {\r\n      const policyId = \"policy1\"\r\n\r\n      jest.spyOn(policyRepository, \"delete\").mockResolvedValue({ affected: 1 } as any)\r\n\r\n      await service.deletePolicy(policyId)\r\n\r\n      expect(policyRepository.delete).toHaveBeenCalledWith(policyId)\r\n    })\r\n  })\r\n\r\n  describe(\"createLineage\", () => {\r\n    it(\"should create data lineage record\", async () => {\r\n      const lineageData = {\r\n        sourceEntity: \"users\",\r\n        targetEntity: \"user_profiles\",\r\n        transformationType: \"join\" as any,\r\n        transformationRules: { joinKey: \"user_id\" },\r\n        dataFlow: \"ETL Pipeline\",\r\n      }\r\n\r\n      const mockLineage = { id: \"lineage1\", ...lineageData }\r\n\r\n      jest.spyOn(lineageRepository, \"create\").mockReturnValue(mockLineage as any)\r\n      jest.spyOn(lineageRepository, \"save\").mockResolvedValue(mockLineage as any)\r\n\r\n      const result = await service.createLineage(lineageData)\r\n\r\n      expect(result).toEqual(mockLineage)\r\n      expect(lineageRepository.create).toHaveBeenCalledWith(lineageData)\r\n      expect(lineageRepository.save).toHaveBeenCalledWith(mockLineage)\r\n    })\r\n  })\r\n\r\n  describe(\"getLineage\", () => {\r\n    it(\"should return lineage for entity\", async () => {\r\n      const entityName = \"users\"\r\n      const mockLineage = [\r\n        {\r\n          id: \"lineage1\",\r\n          sourceEntity: \"users\",\r\n          targetEntity: \"user_profiles\",\r\n          transformationType: \"join\",\r\n        },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValue(mockLineage)\r\n\r\n      const result = await service.getLineage(entityName)\r\n\r\n      expect(result).toEqual(mockLineage)\r\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith(\r\n        \"lineage.sourceEntity = :entity OR lineage.targetEntity = :entity\",\r\n        { entity: entityName }\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"validateCompliance\", () => {\r\n    it(\"should validate compliance for entity\", async () => {\r\n      const entityType = \"user\"\r\n      const data = [\r\n        { id: 1, email: \"user1@example.com\", createdAt: new Date() },\r\n        { id: 2, email: \"user2@example.com\", createdAt: new Date() },\r\n      ]\r\n\r\n      const mockPolicies = [\r\n        {\r\n          id: \"policy1\",\r\n          name: \"Email Validation Policy\",\r\n          category: \"privacy\",\r\n          rules: { requireEmailValidation: true },\r\n          entityTypes: [\"user\"],\r\n          status: \"active\",\r\n        },\r\n      ]\r\n\r\n      jest.spyOn(policyRepository, \"find\").mockResolvedValue(mockPolicies as any)\r\n\r\n      const result = await service.validateCompliance(entityType, data)\r\n\r\n      expect(result).toHaveProperty(\"compliant\")\r\n      expect(result).toHaveProperty(\"violations\")\r\n      expect(result).toHaveProperty(\"score\")\r\n      expect(policyRepository.find).toHaveBeenCalledWith({\r\n        where: {\r\n          status: \"active\",\r\n        },\r\n      })\r\n    })\r\n\r\n    it(\"should return compliant result when no policies apply\", async () => {\r\n      const entityType = \"course\"\r\n      const data = [{ id: 1, name: \"Course 1\" }]\r\n\r\n      jest.spyOn(policyRepository, \"find\").mockResolvedValue([])\r\n\r\n      const result = await service.validateCompliance(entityType, data)\r\n\r\n      expect(result.compliant).toBe(true)\r\n      expect(result.violations).toHaveLength(0)\r\n      expect(result.score).toBe(100)\r\n    })\r\n  })\r\n\r\n  describe(\"getComplianceReport\", () => {\r\n    it(\"should generate compliance report\", async () => {\r\n      const entityType = \"user\"\r\n      const mockPolicies = [\r\n        {\r\n          id: \"policy1\",\r\n          name: \"Privacy Policy\",\r\n          category: \"privacy\",\r\n          entityTypes: [\"user\"],\r\n          status: \"active\",\r\n        },\r\n      ]\r\n\r\n      jest.spyOn(policyRepository, \"find\").mockResolvedValue(mockPolicies as any)\r\n\r\n      const result = await service.getComplianceReport(entityType)\r\n\r\n      expect(result).toHaveProperty(\"entityType\", entityType)\r\n      expect(result).toHaveProperty(\"applicablePolicies\")\r\n      expect(result).toHaveProperty(\"complianceStatus\")\r\n      expect(result).toHaveProperty(\"recommendations\")\r\n      expect(result).toHaveProperty(\"generatedAt\")\r\n      expect(result.applicablePolicies).toHaveLength(1)\r\n    })\r\n  })\r\n\r\n  describe(\"archiveOldPolicies\", () => {\r\n    it(\"should archive old policies\", async () => {\r\n      const cutoffDate = new Date()\r\n      cutoffDate.setMonths(cutoffDate.getMonths() - 12)\r\n\r\n      const mockOldPolicies = [\r\n        {\r\n          id: \"policy1\",\r\n          name: \"Old Policy\",\r\n          status: \"active\",\r\n          updatedAt: new Date(\"2022-01-01\"),\r\n        },\r\n      ]\r\n\r\n      mockQueryBuilder.getMany.mockResolvedValue(mockOldPolicies)\r\n      jest.spyOn(policyRepository, \"update\").mockResolvedValue({ affected: 1 } as any)\r\n\r\n      const result = await service.archiveOldPolicies(12)\r\n\r\n      expect(result).toBe(1)\r\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith(\"policy.updatedAt < :cutoffDate\", { cutoffDate })\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\"policy.status != :status\", { status: \"archived\" })\r\n      expect(policyRepository.update).toHaveBeenCalledWith(\"policy1\", { status: \"archived\" })\r\n    })\r\n  })\r\n\r\n  describe(\"getDataClassification\", () => {\r\n    it(\"should return data classification for entity\", async () => {\r\n      const entityType = \"user\"\r\n\r\n      const result = await service.getDataClassification(entityType)\r\n\r\n      expect(result).toHaveProperty(\"entityType\", entityType)\r\n      expect(result).toHaveProperty(\"classification\")\r\n      expect(result).toHaveProperty(\"sensitiveFields\")\r\n      expect(result).toHaveProperty(\"retentionPeriod\")\r\n      expect(result).toHaveProperty(\"accessLevel\")\r\n    })\r\n\r\n    it(\"should handle unknown entity types\", async () => {\r\n      const entityType = \"unknown_entity\"\r\n\r\n      const result = await service.getDataClassification(entityType)\r\n\r\n      expect(result.classification).toBe(\"unclassified\")\r\n      expect(result.sensitiveFields).toHaveLength(0)\r\n    })\r\n  })\r\n})\r\n"],"version":3}