e64844ad66edf2031cbb2d8faa22bd89
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const data_governance_service_1 = require("../services/data-governance.service");
const data_governance_policy_entity_1 = require("../entities/data-governance-policy.entity");
const data_lineage_entity_1 = require("../entities/data-lineage.entity");
describe("DataGovernanceService", () => {
    let service;
    let policyRepository;
    let lineageRepository;
    const mockQueryBuilder = {
        where: globals_1.jest.fn().mockReturnThis(),
        andWhere: globals_1.jest.fn().mockReturnThis(),
        orderBy: globals_1.jest.fn().mockReturnThis(),
        getMany: globals_1.jest.fn(),
        getOne: globals_1.jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                data_governance_service_1.DataGovernanceService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(data_governance_policy_entity_1.DataGovernancePolicy),
                    useValue: {
                        create: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        find: globals_1.jest.fn(),
                        findOne: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                        delete: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(() => mockQueryBuilder),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(data_lineage_entity_1.DataLineage),
                    useValue: {
                        create: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        find: globals_1.jest.fn(),
                        findOne: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(() => mockQueryBuilder),
                    },
                },
            ],
        }).compile();
        service = module.get(data_governance_service_1.DataGovernanceService);
        policyRepository = module.get((0, typeorm_1.getRepositoryToken)(data_governance_policy_entity_1.DataGovernancePolicy));
        lineageRepository = module.get((0, typeorm_1.getRepositoryToken)(data_lineage_entity_1.DataLineage));
    });
    afterEach(() => {
        globals_1.jest.clearAllMocks();
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("createPolicy", () => {
        it("should create a new governance policy", async () => {
            const policyData = {
                name: "Data Retention Policy",
                description: "Policy for data retention",
                category: "retention",
                rules: { retentionPeriod: "7 years" },
                entityTypes: ["user", "transaction"],
                status: "active",
            };
            const mockPolicy = { id: "policy1", ...policyData };
            globals_1.jest.spyOn(policyRepository, "create").mockReturnValue(mockPolicy);
            globals_1.jest.spyOn(policyRepository, "save").mockResolvedValue(mockPolicy);
            const result = await service.createPolicy(policyData);
            expect(result).toEqual(mockPolicy);
            expect(policyRepository.create).toHaveBeenCalledWith(policyData);
            expect(policyRepository.save).toHaveBeenCalledWith(mockPolicy);
        });
    });
    describe("getPolicies", () => {
        it("should return policies with filters", async () => {
            const mockPolicies = [
                {
                    id: "policy1",
                    name: "Policy 1",
                    category: "retention",
                    status: "active",
                },
                {
                    id: "policy2",
                    name: "Policy 2",
                    category: "privacy",
                    status: "active",
                },
            ];
            mockQueryBuilder.getMany.mockResolvedValue(mockPolicies);
            const result = await service.getPolicies({
                category: "retention",
                status: "active",
            });
            expect(result).toEqual(mockPolicies);
            expect(mockQueryBuilder.where).toHaveBeenCalledWith("policy.category = :category", { category: "retention" });
            expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith("policy.status = :status", { status: "active" });
        });
        it("should return all policies when no filters provided", async () => {
            const mockPolicies = [
                { id: "policy1", name: "Policy 1" },
                { id: "policy2", name: "Policy 2" },
            ];
            mockQueryBuilder.getMany.mockResolvedValue(mockPolicies);
            const result = await service.getPolicies({});
            expect(result).toEqual(mockPolicies);
            expect(mockQueryBuilder.where).not.toHaveBeenCalled();
        });
    });
    describe("updatePolicy", () => {
        it("should update a policy", async () => {
            const policyId = "policy1";
            const updates = { name: "Updated Policy Name" };
            const updatedPolicy = { id: policyId, name: "Updated Policy Name" };
            globals_1.jest.spyOn(policyRepository, "update").mockResolvedValue({ affected: 1 });
            globals_1.jest.spyOn(policyRepository, "findOne").mockResolvedValue(updatedPolicy);
            const result = await service.updatePolicy(policyId, updates);
            expect(result).toEqual(updatedPolicy);
            expect(policyRepository.update).toHaveBeenCalledWith(policyId, updates);
            expect(policyRepository.findOne).toHaveBeenCalledWith({ where: { id: policyId } });
        });
        it("should throw error if policy not found", async () => {
            const policyId = "nonexistent";
            const updates = { name: "Updated Name" };
            globals_1.jest.spyOn(policyRepository, "update").mockResolvedValue({ affected: 1 });
            globals_1.jest.spyOn(policyRepository, "findOne").mockResolvedValue(null);
            await expect(service.updatePolicy(policyId, updates)).rejects.toThrow("Policy with id nonexistent not found");
        });
    });
    describe("deletePolicy", () => {
        it("should delete a policy", async () => {
            const policyId = "policy1";
            globals_1.jest.spyOn(policyRepository, "delete").mockResolvedValue({ affected: 1 });
            await service.deletePolicy(policyId);
            expect(policyRepository.delete).toHaveBeenCalledWith(policyId);
        });
    });
    describe("createLineage", () => {
        it("should create data lineage record", async () => {
            const lineageData = {
                sourceEntity: "users",
                targetEntity: "user_profiles",
                transformationType: "join",
                transformationRules: { joinKey: "user_id" },
                dataFlow: "ETL Pipeline",
            };
            const mockLineage = { id: "lineage1", ...lineageData };
            globals_1.jest.spyOn(lineageRepository, "create").mockReturnValue(mockLineage);
            globals_1.jest.spyOn(lineageRepository, "save").mockResolvedValue(mockLineage);
            const result = await service.createLineage(lineageData);
            expect(result).toEqual(mockLineage);
            expect(lineageRepository.create).toHaveBeenCalledWith(lineageData);
            expect(lineageRepository.save).toHaveBeenCalledWith(mockLineage);
        });
    });
    describe("getLineage", () => {
        it("should return lineage for entity", async () => {
            const entityName = "users";
            const mockLineage = [
                {
                    id: "lineage1",
                    sourceEntity: "users",
                    targetEntity: "user_profiles",
                    transformationType: "join",
                },
            ];
            mockQueryBuilder.getMany.mockResolvedValue(mockLineage);
            const result = await service.getLineage(entityName);
            expect(result).toEqual(mockLineage);
            expect(mockQueryBuilder.where).toHaveBeenCalledWith("lineage.sourceEntity = :entity OR lineage.targetEntity = :entity", { entity: entityName });
        });
    });
    describe("validateCompliance", () => {
        it("should validate compliance for entity", async () => {
            const entityType = "user";
            const data = [
                { id: 1, email: "user1@example.com", createdAt: new Date() },
                { id: 2, email: "user2@example.com", createdAt: new Date() },
            ];
            const mockPolicies = [
                {
                    id: "policy1",
                    name: "Email Validation Policy",
                    category: "privacy",
                    rules: { requireEmailValidation: true },
                    entityTypes: ["user"],
                    status: "active",
                },
            ];
            globals_1.jest.spyOn(policyRepository, "find").mockResolvedValue(mockPolicies);
            const result = await service.validateCompliance(entityType, data);
            expect(result).toHaveProperty("compliant");
            expect(result).toHaveProperty("violations");
            expect(result).toHaveProperty("score");
            expect(policyRepository.find).toHaveBeenCalledWith({
                where: {
                    status: "active",
                },
            });
        });
        it("should return compliant result when no policies apply", async () => {
            const entityType = "course";
            const data = [{ id: 1, name: "Course 1" }];
            globals_1.jest.spyOn(policyRepository, "find").mockResolvedValue([]);
            const result = await service.validateCompliance(entityType, data);
            expect(result.compliant).toBe(true);
            expect(result.violations).toHaveLength(0);
            expect(result.score).toBe(100);
        });
    });
    describe("getComplianceReport", () => {
        it("should generate compliance report", async () => {
            const entityType = "user";
            const mockPolicies = [
                {
                    id: "policy1",
                    name: "Privacy Policy",
                    category: "privacy",
                    entityTypes: ["user"],
                    status: "active",
                },
            ];
            globals_1.jest.spyOn(policyRepository, "find").mockResolvedValue(mockPolicies);
            const result = await service.getComplianceReport(entityType);
            expect(result).toHaveProperty("entityType", entityType);
            expect(result).toHaveProperty("applicablePolicies");
            expect(result).toHaveProperty("complianceStatus");
            expect(result).toHaveProperty("recommendations");
            expect(result).toHaveProperty("generatedAt");
            expect(result.applicablePolicies).toHaveLength(1);
        });
    });
    describe("archiveOldPolicies", () => {
        it("should archive old policies", async () => {
            const cutoffDate = new Date();
            cutoffDate.setMonths(cutoffDate.getMonths() - 12);
            const mockOldPolicies = [
                {
                    id: "policy1",
                    name: "Old Policy",
                    status: "active",
                    updatedAt: new Date("2022-01-01"),
                },
            ];
            mockQueryBuilder.getMany.mockResolvedValue(mockOldPolicies);
            globals_1.jest.spyOn(policyRepository, "update").mockResolvedValue({ affected: 1 });
            const result = await service.archiveOldPolicies(12);
            expect(result).toBe(1);
            expect(mockQueryBuilder.where).toHaveBeenCalledWith("policy.updatedAt < :cutoffDate", { cutoffDate });
            expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith("policy.status != :status", { status: "archived" });
            expect(policyRepository.update).toHaveBeenCalledWith("policy1", { status: "archived" });
        });
    });
    describe("getDataClassification", () => {
        it("should return data classification for entity", async () => {
            const entityType = "user";
            const result = await service.getDataClassification(entityType);
            expect(result).toHaveProperty("entityType", entityType);
            expect(result).toHaveProperty("classification");
            expect(result).toHaveProperty("sensitiveFields");
            expect(result).toHaveProperty("retentionPeriod");
            expect(result).toHaveProperty("accessLevel");
        });
        it("should handle unknown entity types", async () => {
            const entityType = "unknown_entity";
            const result = await service.getDataClassification(entityType);
            expect(result.classification).toBe("unclassified");
            expect(result.sensitiveFields).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,