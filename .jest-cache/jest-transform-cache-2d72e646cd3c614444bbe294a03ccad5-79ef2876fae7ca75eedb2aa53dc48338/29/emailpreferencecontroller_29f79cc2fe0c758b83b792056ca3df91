6391329e189bb1236d601ed8605cbd59
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailPreferenceController = void 0;
const common_1 = require("@nestjs/common");
const email_service_1 = require("./email.service");
let EmailPreferenceController = class EmailPreferenceController {
    constructor(emailService) {
        this.emailService = emailService;
    }
    async getUserPreferences(req) {
        const preferences = await this.emailService.getUserPreferences(req.user.email);
        return preferences.map((pref) => ({
            emailType: pref.emailType,
            optOut: pref.optedOut,
        }));
    }
    async updatePreferences(req, body) {
        const results = [];
        for (const pref of body.preferences) {
            const result = await this.emailService.updateEmailPreference(req.user.email, pref.emailType, pref.optOut);
            results.push(result);
        }
        return results;
    }
    async unsubscribe(body) {
        const isValid = await this.emailService.verifyUnsubscribeToken(body.email, body.token);
        if (!isValid) {
            return { success: false, message: 'Invalid unsubscribe token' };
        }
        await this.emailService.updateEmailPreference(body.email, body.emailType, true);
        return { success: true, message: 'Successfully unsubscribed' };
    }
};
exports.EmailPreferenceController = EmailPreferenceController;
__decorate([
    (0, common_1.Get)(),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmailPreferenceController.prototype, "getUserPreferences", null);
__decorate([
    (0, common_1.Post)(),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], EmailPreferenceController.prototype, "updatePreferences", null);
__decorate([
    (0, common_1.Post)('unsubscribe'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EmailPreferenceController.prototype, "unsubscribe", null);
exports.EmailPreferenceController = EmailPreferenceController = __decorate([
    (0, common_1.Controller)('email-preferences'),
    __metadata("design:paramtypes", [typeof (_a = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _a : Object])
], EmailPreferenceController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbWFpbFxcZW1haWwtcHJlZmVyZW5jZS5jb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBc0U7QUFDdEUsbURBQStDO0FBSXhDLElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQXlCO0lBQ3BDLFlBQTZCLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUcsQ0FBQztJQUdyRCxBQUFOLEtBQUssQ0FBQyxrQkFBa0IsQ0FDWCxHQUFHO1FBRWQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0UsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBR0ssQUFBTixLQUFLLENBQUMsaUJBQWlCLENBQ1YsR0FBRyxFQUNOLElBQWtFO1FBRTFFLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVuQixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQzFELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUdLLEFBQU4sS0FBSyxDQUFDLFdBQVcsQ0FDUCxJQUE0RDtRQUVwRSxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQzVELElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLENBQUM7UUFDbEUsQ0FBQztRQUVELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FDM0MsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FDTCxDQUFDO1FBRUYsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLENBQUM7SUFDakUsQ0FBQztDQUNGLENBQUE7QUF0RFksOERBQXlCO0FBSTlCO0lBREwsSUFBQSxZQUFHLEdBQUU7SUFFSCxXQUFBLElBQUEsZ0JBQU8sR0FBRSxDQUFBOzs7d0RBQ1QsT0FBTyxvQkFBUCxPQUFPO21FQU1UO0FBR0s7SUFETCxJQUFBLGFBQUksR0FBRTtJQUVKLFdBQUEsSUFBQSxnQkFBTyxHQUFFLENBQUE7SUFDVCxXQUFBLElBQUEsYUFBSSxHQUFFLENBQUE7Ozs7a0VBY1I7QUFHSztJQURMLElBQUEsYUFBSSxFQUFDLGFBQWEsQ0FBQztJQUVqQixXQUFBLElBQUEsYUFBSSxHQUFFLENBQUE7Ozs7NERBa0JSO29DQXJEVSx5QkFBeUI7SUFEckMsSUFBQSxtQkFBVSxFQUFDLG1CQUFtQixDQUFDO3lEQUVhLDRCQUFZLG9CQUFaLDRCQUFZO0dBRDVDLHlCQUF5QixDQXNEckMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbWFpbFxcZW1haWwtcHJlZmVyZW5jZS5jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xsZXIsIEdldCwgUG9zdCwgQm9keSwgUmVxdWVzdCB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgRW1haWxTZXJ2aWNlIH0gZnJvbSAnLi9lbWFpbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRW1haWxUeXBlIH0gZnJvbSAnLi9lbnRpdGllcy9lbWFpbC1wcmVmZXJlbmNlLmVudGl0eSc7XHJcblxyXG5AQ29udHJvbGxlcignZW1haWwtcHJlZmVyZW5jZXMnKVxyXG5leHBvcnQgY2xhc3MgRW1haWxQcmVmZXJlbmNlQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbWFpbFNlcnZpY2U6IEVtYWlsU2VydmljZSkge31cclxuXHJcbiAgQEdldCgpXHJcbiAgYXN5bmMgZ2V0VXNlclByZWZlcmVuY2VzKFxyXG4gICAgQFJlcXVlc3QoKSByZXEsXHJcbiAgKTogUHJvbWlzZTx7IGVtYWlsVHlwZTogYW55OyBvcHRPdXQ6IGJvb2xlYW4gfVtdPiB7XHJcbiAgICBjb25zdCBwcmVmZXJlbmNlcyA9IGF3YWl0IHRoaXMuZW1haWxTZXJ2aWNlLmdldFVzZXJQcmVmZXJlbmNlcyhyZXEudXNlci5lbWFpbCk7XHJcbiAgICByZXR1cm4gcHJlZmVyZW5jZXMubWFwKChwcmVmKSA9PiAoe1xyXG4gICAgICBlbWFpbFR5cGU6IHByZWYuZW1haWxUeXBlLFxyXG4gICAgICBvcHRPdXQ6IHByZWYub3B0ZWRPdXQsXHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBAUG9zdCgpXHJcbiAgYXN5bmMgdXBkYXRlUHJlZmVyZW5jZXMoXHJcbiAgICBAUmVxdWVzdCgpIHJlcSxcclxuICAgIEBCb2R5KCkgYm9keTogeyBwcmVmZXJlbmNlczogeyBlbWFpbFR5cGU6IEVtYWlsVHlwZTsgb3B0T3V0OiBib29sZWFuIH1bXSB9LFxyXG4gICkge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcHJlZiBvZiBib2R5LnByZWZlcmVuY2VzKSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW1haWxTZXJ2aWNlLnVwZGF0ZUVtYWlsUHJlZmVyZW5jZShcclxuICAgICAgICByZXEudXNlci5lbWFpbCxcclxuICAgICAgICBwcmVmLmVtYWlsVHlwZSxcclxuICAgICAgICBwcmVmLm9wdE91dCxcclxuICAgICAgKTtcclxuICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfVxyXG5cclxuICBAUG9zdCgndW5zdWJzY3JpYmUnKVxyXG4gIGFzeW5jIHVuc3Vic2NyaWJlKFxyXG4gICAgQEJvZHkoKSBib2R5OiB7IGVtYWlsOiBzdHJpbmc7IHRva2VuOiBzdHJpbmc7IGVtYWlsVHlwZTogRW1haWxUeXBlIH0sXHJcbiAgKSB7XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdGhpcy5lbWFpbFNlcnZpY2UudmVyaWZ5VW5zdWJzY3JpYmVUb2tlbihcclxuICAgICAgYm9keS5lbWFpbCxcclxuICAgICAgYm9keS50b2tlbixcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnSW52YWxpZCB1bnN1YnNjcmliZSB0b2tlbicgfTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCB0aGlzLmVtYWlsU2VydmljZS51cGRhdGVFbWFpbFByZWZlcmVuY2UoXHJcbiAgICAgIGJvZHkuZW1haWwsXHJcbiAgICAgIGJvZHkuZW1haWxUeXBlLFxyXG4gICAgICB0cnVlLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IHVuc3Vic2NyaWJlZCcgfTtcclxuICB9XHJcbn0iXSwidmVyc2lvbiI6M30=