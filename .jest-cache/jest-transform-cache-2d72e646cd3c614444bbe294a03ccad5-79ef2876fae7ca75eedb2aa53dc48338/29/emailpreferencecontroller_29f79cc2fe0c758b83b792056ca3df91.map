{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email-preference.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAAsE;AACtE,mDAA+C;AAIxC,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IACpC,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAGrD,AAAN,KAAK,CAAC,kBAAkB,CACX,GAAG;QAEd,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/E,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAChC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,IAAI,CAAC,QAAQ;SACtB,CAAC,CAAC,CAAC;IACN,CAAC;IAGK,AAAN,KAAK,CAAC,iBAAiB,CACV,GAAG,EACN,IAAkE;QAE1E,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAC1D,GAAG,CAAC,IAAI,CAAC,KAAK,EACd,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,MAAM,CACZ,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAGK,AAAN,KAAK,CAAC,WAAW,CACP,IAA4D;QAEpE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAC5D,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,KAAK,CACX,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;QAClE,CAAC;QAED,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAC3C,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,SAAS,EACd,IAAI,CACL,CAAC;QAEF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;IACjE,CAAC;CACF,CAAA;AAtDY,8DAAyB;AAI9B;IADL,IAAA,YAAG,GAAE;IAEH,WAAA,IAAA,gBAAO,GAAE,CAAA;;;wDACT,OAAO,oBAAP,OAAO;mEAMT;AAGK;IADL,IAAA,aAAI,GAAE;IAEJ,WAAA,IAAA,gBAAO,GAAE,CAAA;IACT,WAAA,IAAA,aAAI,GAAE,CAAA;;;;kEAcR;AAGK;IADL,IAAA,aAAI,EAAC,aAAa,CAAC;IAEjB,WAAA,IAAA,aAAI,GAAE,CAAA;;;;4DAkBR;oCArDU,yBAAyB;IADrC,IAAA,mBAAU,EAAC,mBAAmB,CAAC;yDAEa,4BAAY,oBAAZ,4BAAY;GAD5C,yBAAyB,CAsDrC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email-preference.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Body, Request } from '@nestjs/common';\r\nimport { EmailService } from './email.service';\r\nimport { EmailType } from './entities/email-preference.entity';\r\n\r\n@Controller('email-preferences')\r\nexport class EmailPreferenceController {\r\n  constructor(private readonly emailService: EmailService) {}\r\n\r\n  @Get()\r\n  async getUserPreferences(\r\n    @Request() req,\r\n  ): Promise<{ emailType: any; optOut: boolean }[]> {\r\n    const preferences = await this.emailService.getUserPreferences(req.user.email);\r\n    return preferences.map((pref) => ({\r\n      emailType: pref.emailType,\r\n      optOut: pref.optedOut,\r\n    }));\r\n  }\r\n\r\n  @Post()\r\n  async updatePreferences(\r\n    @Request() req,\r\n    @Body() body: { preferences: { emailType: EmailType; optOut: boolean }[] },\r\n  ) {\r\n    const results = [];\r\n\r\n    for (const pref of body.preferences) {\r\n      const result = await this.emailService.updateEmailPreference(\r\n        req.user.email,\r\n        pref.emailType,\r\n        pref.optOut,\r\n      );\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  @Post('unsubscribe')\r\n  async unsubscribe(\r\n    @Body() body: { email: string; token: string; emailType: EmailType },\r\n  ) {\r\n    const isValid = await this.emailService.verifyUnsubscribeToken(\r\n      body.email,\r\n      body.token,\r\n    );\r\n\r\n    if (!isValid) {\r\n      return { success: false, message: 'Invalid unsubscribe token' };\r\n    }\r\n\r\n    await this.emailService.updateEmailPreference(\r\n      body.email,\r\n      body.emailType,\r\n      true,\r\n    );\r\n\r\n    return { success: true, message: 'Successfully unsubscribed' };\r\n  }\r\n}"],"version":3}