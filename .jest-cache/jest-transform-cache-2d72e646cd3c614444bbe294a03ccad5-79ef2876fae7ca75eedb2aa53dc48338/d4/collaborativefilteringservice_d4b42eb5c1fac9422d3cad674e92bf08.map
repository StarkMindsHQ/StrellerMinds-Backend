{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\collaborative-filtering.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\collaborative-filtering.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserInteraction, InteractionType } from '../entities/user-interaction.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { Recommendation, RecommendationType, RecommendationReason } from '../entities/recommendation.entity';\r\nimport { RecommendationContext } from './recommendation-engine.service';\r\n\r\ninterface UserSimilarity {\r\n  userId: string;\r\n  similarity: number;\r\n  commonInteractions: number;\r\n  user?: User;\r\n}\r\n\r\ninterface ItemSimilarity {\r\n  courseId: string;\r\n  similarity: number;\r\n  commonUsers: number;\r\n  course?: Course;\r\n}\r\n\r\ninterface CollaborativeRecommendation {\r\n  courseId: string;\r\n  score: number;\r\n  reason: string;\r\n  similarUsers?: string[];\r\n  similarItems?: string[];\r\n}\r\n\r\n@Injectable()\r\nexport class CollaborativeFilteringService {\r\n  private readonly logger = new Logger(CollaborativeFilteringService.name);\r\n  private userSimilarityCache = new Map<string, UserSimilarity[]>();\r\n  private itemSimilarityCache = new Map<string, ItemSimilarity[]>();\r\n  private cacheExpiry = 24 * 60 * 60 * 1000; // 24 hours\r\n\r\n  constructor(\r\n    @InjectRepository(UserInteraction)\r\n    private interactionRepository: Repository<UserInteraction>,\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n    @InjectRepository(Course)\r\n    private courseRepository: Repository<Course>,\r\n  ) {}\r\n\r\n  /**\r\n   * Generate recommendations using collaborative filtering\r\n   */\r\n  async generateRecommendations(\r\n    context: RecommendationContext,\r\n    options: { limit: number; minConfidence: number },\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    try {\r\n      this.logger.log(`Generating collaborative filtering recommendations for user ${context.userId}`);\r\n\r\n      // Get user-based collaborative filtering recommendations\r\n      const userBasedRecs = await this.getUserBasedRecommendations(context, Math.ceil(options.limit * 0.6));\r\n      \r\n      // Get item-based collaborative filtering recommendations\r\n      const itemBasedRecs = await this.getItemBasedRecommendations(context, Math.ceil(options.limit * 0.4));\r\n      \r\n      // Combine and rank recommendations\r\n      const combinedRecs = [...userBasedRecs, ...itemBasedRecs];\r\n      const rankedRecs = this.rankCollaborativeRecommendations(combinedRecs);\r\n      \r\n      // Filter by confidence and limit\r\n      const filteredRecs = rankedRecs\r\n        .filter(rec => rec.score >= options.minConfidence)\r\n        .slice(0, options.limit);\r\n\r\n      // Convert to recommendation format\r\n      return filteredRecs.map(rec => this.createRecommendation(rec, context));\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error generating collaborative filtering recommendations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find similar users based on interaction patterns\r\n   */\r\n  async findSimilarUsers(userId: string, limit: number = 20): Promise<UserSimilarity[]> {\r\n    // Check cache first\r\n    const cacheKey = `user_${userId}`;\r\n    const cached = this.userSimilarityCache.get(cacheKey);\r\n    if (cached && this.isCacheValid(cacheKey)) {\r\n      return cached.slice(0, limit);\r\n    }\r\n\r\n    try {\r\n      // Get user's interactions\r\n      const userInteractions = await this.getUserInteractions(userId);\r\n      if (userInteractions.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Get all other users who have interacted with similar content\r\n      const courseIds = userInteractions.map(i => i.courseId).filter(Boolean);\r\n      const otherUsers = await this.interactionRepository\r\n        .createQueryBuilder('interaction')\r\n        .select('DISTINCT interaction.userId')\r\n        .where('interaction.courseId IN (:...courseIds)', { courseIds })\r\n        .andWhere('interaction.userId != :userId', { userId })\r\n        .getRawMany();\r\n\r\n      // Calculate similarity with each user\r\n      const similarities: UserSimilarity[] = [];\r\n      \r\n      for (const { userId: otherUserId } of otherUsers) {\r\n        const otherInteractions = await this.getUserInteractions(otherUserId);\r\n        const similarity = this.calculateUserSimilarity(userInteractions, otherInteractions);\r\n        \r\n        if (similarity.similarity > 0.1) { // Only include users with meaningful similarity\r\n          similarities.push({\r\n            userId: otherUserId,\r\n            similarity: similarity.similarity,\r\n            commonInteractions: similarity.commonInteractions,\r\n          });\r\n        }\r\n      }\r\n\r\n      // Sort by similarity and cache\r\n      similarities.sort((a, b) => b.similarity - a.similarity);\r\n      this.userSimilarityCache.set(cacheKey, similarities);\r\n      \r\n      return similarities.slice(0, limit);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error finding similar users for ${userId}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find similar items (courses) based on user interaction patterns\r\n   */\r\n  async findSimilarItems(courseId: string, limit: number = 20): Promise<ItemSimilarity[]> {\r\n    // Check cache first\r\n    const cacheKey = `item_${courseId}`;\r\n    const cached = this.itemSimilarityCache.get(cacheKey);\r\n    if (cached && this.isCacheValid(cacheKey)) {\r\n      return cached.slice(0, limit);\r\n    }\r\n\r\n    try {\r\n      // Get users who interacted with this course\r\n      const courseUsers = await this.interactionRepository.find({\r\n        where: { courseId },\r\n        select: ['userId'],\r\n      });\r\n\r\n      if (courseUsers.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      const userIds = courseUsers.map(u => u.userId);\r\n\r\n      // Get other courses these users interacted with\r\n      const otherCourses = await this.interactionRepository\r\n        .createQueryBuilder('interaction')\r\n        .select('DISTINCT interaction.courseId')\r\n        .where('interaction.userId IN (:...userIds)', { userIds })\r\n        .andWhere('interaction.courseId != :courseId', { courseId })\r\n        .getRawMany();\r\n\r\n      // Calculate similarity with each course\r\n      const similarities: ItemSimilarity[] = [];\r\n      \r\n      for (const { courseId: otherCourseId } of otherCourses) {\r\n        const otherCourseUsers = await this.interactionRepository.find({\r\n          where: { courseId: otherCourseId },\r\n          select: ['userId'],\r\n        });\r\n\r\n        const similarity = this.calculateItemSimilarity(\r\n          userIds,\r\n          otherCourseUsers.map(u => u.userId)\r\n        );\r\n\r\n        if (similarity.similarity > 0.1) {\r\n          similarities.push({\r\n            courseId: otherCourseId,\r\n            similarity: similarity.similarity,\r\n            commonUsers: similarity.commonUsers,\r\n          });\r\n        }\r\n      }\r\n\r\n      // Sort by similarity and cache\r\n      similarities.sort((a, b) => b.similarity - a.similarity);\r\n      this.itemSimilarityCache.set(cacheKey, similarities);\r\n      \r\n      return similarities.slice(0, limit);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error finding similar items for ${courseId}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user-based collaborative filtering recommendations\r\n   */\r\n  private async getUserBasedRecommendations(\r\n    context: RecommendationContext,\r\n    limit: number,\r\n  ): Promise<CollaborativeRecommendation[]> {\r\n    // Find similar users\r\n    const similarUsers = await this.findSimilarUsers(context.userId, 50);\r\n    \r\n    if (similarUsers.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Get courses that similar users liked but current user hasn't interacted with\r\n    const userCourseIds = new Set(\r\n      context.recentInteractions?.map(i => i.courseId).filter(Boolean) || []\r\n    );\r\n\r\n    const recommendations = new Map<string, {\r\n      score: number;\r\n      count: number;\r\n      similarUsers: string[];\r\n    }>();\r\n\r\n    for (const similarUser of similarUsers.slice(0, 20)) { // Top 20 similar users\r\n      const similarUserInteractions = await this.getUserInteractions(similarUser.userId);\r\n      \r\n      // Find highly rated interactions from similar users\r\n      const positiveInteractions = similarUserInteractions.filter(interaction =>\r\n        this.isPositiveInteraction(interaction) && \r\n        !userCourseIds.has(interaction.courseId)\r\n      );\r\n\r\n      for (const interaction of positiveInteractions) {\r\n        if (!interaction.courseId) continue;\r\n\r\n        const existing = recommendations.get(interaction.courseId) || {\r\n          score: 0,\r\n          count: 0,\r\n          similarUsers: [],\r\n        };\r\n\r\n        // Weight by user similarity and interaction strength\r\n        const interactionWeight = this.getInteractionWeight(interaction);\r\n        const weightedScore = similarUser.similarity * interactionWeight;\r\n\r\n        existing.score += weightedScore;\r\n        existing.count += 1;\r\n        existing.similarUsers.push(similarUser.userId);\r\n        \r\n        recommendations.set(interaction.courseId, existing);\r\n      }\r\n    }\r\n\r\n    // Convert to recommendation format and sort\r\n    const result: CollaborativeRecommendation[] = [];\r\n    \r\n    for (const [courseId, data] of recommendations.entries()) {\r\n      const normalizedScore = data.score / Math.max(data.count, 1);\r\n      \r\n      result.push({\r\n        courseId,\r\n        score: normalizedScore,\r\n        reason: `Recommended by ${data.count} similar learners`,\r\n        similarUsers: data.similarUsers.slice(0, 5),\r\n      });\r\n    }\r\n\r\n    return result\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Get item-based collaborative filtering recommendations\r\n   */\r\n  private async getItemBasedRecommendations(\r\n    context: RecommendationContext,\r\n    limit: number,\r\n  ): Promise<CollaborativeRecommendation[]> {\r\n    // Get courses user has positively interacted with\r\n    const userInteractions = context.recentInteractions || [];\r\n    const positiveCourses = userInteractions\r\n      .filter(i => this.isPositiveInteraction(i) && i.courseId)\r\n      .map(i => i.courseId!)\r\n      .slice(0, 10); // Consider top 10 courses\r\n\r\n    if (positiveCourses.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const recommendations = new Map<string, {\r\n      score: number;\r\n      count: number;\r\n      similarItems: string[];\r\n    }>();\r\n\r\n    // For each course user liked, find similar courses\r\n    for (const courseId of positiveCourses) {\r\n      const similarItems = await this.findSimilarItems(courseId, 20);\r\n      \r\n      for (const similarItem of similarItems) {\r\n        // Skip if user already interacted with this course\r\n        if (positiveCourses.includes(similarItem.courseId)) continue;\r\n\r\n        const existing = recommendations.get(similarItem.courseId) || {\r\n          score: 0,\r\n          count: 0,\r\n          similarItems: [],\r\n        };\r\n\r\n        existing.score += similarItem.similarity;\r\n        existing.count += 1;\r\n        existing.similarItems.push(courseId);\r\n        \r\n        recommendations.set(similarItem.courseId, existing);\r\n      }\r\n    }\r\n\r\n    // Convert to recommendation format and sort\r\n    const result: CollaborativeRecommendation[] = [];\r\n    \r\n    for (const [courseId, data] of recommendations.entries()) {\r\n      const normalizedScore = data.score / Math.max(data.count, 1);\r\n      \r\n      result.push({\r\n        courseId,\r\n        score: normalizedScore,\r\n        reason: `Similar to ${data.count} courses you've engaged with`,\r\n        similarItems: data.similarItems.slice(0, 3),\r\n      });\r\n    }\r\n\r\n    return result\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Get user interactions with weighted values\r\n   */\r\n  private async getUserInteractions(userId: string): Promise<UserInteraction[]> {\r\n    return await this.interactionRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n      take: 500, // Limit for performance\r\n      relations: ['course'],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity between two users based on their interactions\r\n   */\r\n  private calculateUserSimilarity(\r\n    user1Interactions: UserInteraction[],\r\n    user2Interactions: UserInteraction[],\r\n  ): { similarity: number; commonInteractions: number } {\r\n    // Create maps of course interactions for each user\r\n    const user1Courses = new Map<string, number>();\r\n    const user2Courses = new Map<string, number>();\r\n\r\n    // Build weighted interaction maps\r\n    user1Interactions.forEach(interaction => {\r\n      if (interaction.courseId) {\r\n        const weight = this.getInteractionWeight(interaction);\r\n        user1Courses.set(\r\n          interaction.courseId,\r\n          (user1Courses.get(interaction.courseId) || 0) + weight\r\n        );\r\n      }\r\n    });\r\n\r\n    user2Interactions.forEach(interaction => {\r\n      if (interaction.courseId) {\r\n        const weight = this.getInteractionWeight(interaction);\r\n        user2Courses.set(\r\n          interaction.courseId,\r\n          (user2Courses.get(interaction.courseId) || 0) + weight\r\n        );\r\n      }\r\n    });\r\n\r\n    // Find common courses\r\n    const commonCourses = new Set([...user1Courses.keys()].filter(courseId => \r\n      user2Courses.has(courseId)\r\n    ));\r\n\r\n    if (commonCourses.size === 0) {\r\n      return { similarity: 0, commonInteractions: 0 };\r\n    }\r\n\r\n    // Calculate cosine similarity\r\n    let dotProduct = 0;\r\n    let norm1 = 0;\r\n    let norm2 = 0;\r\n\r\n    // Calculate for all courses (not just common ones)\r\n    const allCourses = new Set([...user1Courses.keys(), ...user2Courses.keys()]);\r\n    \r\n    for (const courseId of allCourses) {\r\n      const rating1 = user1Courses.get(courseId) || 0;\r\n      const rating2 = user2Courses.get(courseId) || 0;\r\n      \r\n      dotProduct += rating1 * rating2;\r\n      norm1 += rating1 * rating1;\r\n      norm2 += rating2 * rating2;\r\n    }\r\n\r\n    const similarity = (norm1 > 0 && norm2 > 0) \r\n      ? dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2))\r\n      : 0;\r\n\r\n    return {\r\n      similarity: Math.max(0, Math.min(1, similarity)),\r\n      commonInteractions: commonCourses.size,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity between two items based on user interactions\r\n   */\r\n  private calculateItemSimilarity(\r\n    item1Users: string[],\r\n    item2Users: string[],\r\n  ): { similarity: number; commonUsers: number } {\r\n    const users1Set = new Set(item1Users);\r\n    const users2Set = new Set(item2Users);\r\n    \r\n    // Calculate Jaccard similarity\r\n    const intersection = new Set([...users1Set].filter(userId => users2Set.has(userId)));\r\n    const union = new Set([...users1Set, ...users2Set]);\r\n    \r\n    const similarity = union.size > 0 ? intersection.size / union.size : 0;\r\n    \r\n    return {\r\n      similarity,\r\n      commonUsers: intersection.size,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get weight for different interaction types\r\n   */\r\n  private getInteractionWeight(interaction: UserInteraction): number {\r\n    const weights = {\r\n      [InteractionType.VIEW]: 0.1,\r\n      [InteractionType.CLICK]: 0.2,\r\n      [InteractionType.ENROLL]: 0.8,\r\n      [InteractionType.START]: 0.6,\r\n      [InteractionType.PROGRESS]: 0.7,\r\n      [InteractionType.COMPLETE]: 1.0,\r\n      [InteractionType.RATE]: 0.9,\r\n      [InteractionType.BOOKMARK]: 0.5,\r\n      [InteractionType.SHARE]: 0.4,\r\n      [InteractionType.DOWNLOAD]: 0.3,\r\n    };\r\n\r\n    let baseWeight = weights[interaction.interactionType] || 0.1;\r\n    \r\n    // Apply additional weighting based on interaction metadata\r\n    if (interaction.weightedValue) {\r\n      baseWeight *= interaction.weightedValue;\r\n    }\r\n\r\n    return Math.max(0, Math.min(1, baseWeight));\r\n  }\r\n\r\n  /**\r\n   * Check if interaction is positive (indicates user interest/satisfaction)\r\n   */\r\n  private isPositiveInteraction(interaction: UserInteraction): boolean {\r\n    const positiveTypes = [\r\n      InteractionType.ENROLL,\r\n      InteractionType.COMPLETE,\r\n      InteractionType.RATE,\r\n      InteractionType.BOOKMARK,\r\n      InteractionType.SHARE,\r\n      InteractionType.PROGRESS,\r\n    ];\r\n\r\n    return positiveTypes.includes(interaction.interactionType) ||\r\n           (interaction.weightedValue && interaction.weightedValue > 0.5);\r\n  }\r\n\r\n  /**\r\n   * Rank collaborative recommendations by combining scores\r\n   */\r\n  private rankCollaborativeRecommendations(\r\n    recommendations: CollaborativeRecommendation[],\r\n  ): CollaborativeRecommendation[] {\r\n    // Remove duplicates and combine scores\r\n    const combined = new Map<string, CollaborativeRecommendation>();\r\n    \r\n    recommendations.forEach(rec => {\r\n      const existing = combined.get(rec.courseId);\r\n      \r\n      if (existing) {\r\n        // Combine scores using weighted average\r\n        existing.score = (existing.score + rec.score) / 2;\r\n        existing.reason = `${existing.reason} and ${rec.reason}`;\r\n        \r\n        if (rec.similarUsers) {\r\n          existing.similarUsers = [...(existing.similarUsers || []), ...rec.similarUsers];\r\n        }\r\n        if (rec.similarItems) {\r\n          existing.similarItems = [...(existing.similarItems || []), ...rec.similarItems];\r\n        }\r\n      } else {\r\n        combined.set(rec.courseId, { ...rec });\r\n      }\r\n    });\r\n\r\n    return Array.from(combined.values()).sort((a, b) => b.score - a.score);\r\n  }\r\n\r\n  /**\r\n   * Create recommendation from collaborative recommendation\r\n   */\r\n  private createRecommendation(\r\n    colabRec: CollaborativeRecommendation,\r\n    context: RecommendationContext,\r\n  ): Partial<Recommendation> {\r\n    const hasUserBased = colabRec.similarUsers && colabRec.similarUsers.length > 0;\r\n    const hasItemBased = colabRec.similarItems && colabRec.similarItems.length > 0;\r\n    \r\n    let reason: RecommendationReason;\r\n    if (hasUserBased && hasItemBased) {\r\n      reason = RecommendationReason.COLLABORATIVE_FILTERING;\r\n    } else if (hasUserBased) {\r\n      reason = RecommendationReason.SIMILAR_USERS;\r\n    } else {\r\n      reason = RecommendationReason.SIMILAR_CONTENT;\r\n    }\r\n\r\n    return {\r\n      userId: context.userId,\r\n      courseId: colabRec.courseId,\r\n      recommendationType: RecommendationType.COLLABORATIVE,\r\n      reason,\r\n      confidenceScore: colabRec.score,\r\n      relevanceScore: colabRec.score * 0.9,\r\n      priority: this.calculatePriority(colabRec.score),\r\n      explanation: colabRec.reason,\r\n      metadata: {\r\n        algorithmUsed: 'collaborative_filtering',\r\n        collaborativeScore: colabRec.score,\r\n        similarUsers: colabRec.similarUsers?.slice(0, 3) || [],\r\n        similarItems: colabRec.similarItems?.slice(0, 3) || [],\r\n        recommendationType: hasUserBased ? 'user_based' : 'item_based',\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate priority based on collaborative score\r\n   */\r\n  private calculatePriority(score: number): number {\r\n    if (score >= 0.8) return 5;\r\n    if (score >= 0.6) return 4;\r\n    if (score >= 0.4) return 3;\r\n    if (score >= 0.2) return 2;\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Check if cache is still valid\r\n   */\r\n  private isCacheValid(cacheKey: string): boolean {\r\n    // Simple time-based cache validation\r\n    // In a real implementation, you might want more sophisticated cache invalidation\r\n    return true; // Placeholder - implement based on your caching strategy\r\n  }\r\n\r\n  /**\r\n   * Clear similarity caches (useful for testing or manual cache refresh)\r\n   */\r\n  clearCache(): void {\r\n    this.userSimilarityCache.clear();\r\n    this.itemSimilarityCache.clear();\r\n    this.logger.log('Collaborative filtering caches cleared');\r\n  }\r\n}\r\n"],"version":3}