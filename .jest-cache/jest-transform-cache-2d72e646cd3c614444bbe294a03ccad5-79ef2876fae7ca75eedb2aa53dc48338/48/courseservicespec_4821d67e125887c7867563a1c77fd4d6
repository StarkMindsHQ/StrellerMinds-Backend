c88b8fde63074de64e5d20d73fcfe076
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const course_service_1 = require("./course.service");
const typeorm_1 = require("@nestjs/typeorm");
const course_entity_1 = require("./course.entity");
describe('CourseService', () => {
    let service;
    let repo;
    const mockCourse = {
        id: 'some-uuid',
        title: 'Test Course',
        description: 'A course description',
        status: 'draft',
        enrollmentCount: 0,
        completionCount: 0,
        createdAt: new Date(),
    };
    const mockRepo = {
        create: jest.fn().mockImplementation((dto) => ({ ...dto })),
        save: jest.fn().mockResolvedValue(mockCourse),
        find: jest.fn().mockResolvedValue([mockCourse]),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                course_service_1.CourseService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(course_entity_1.Course),
                    useValue: mockRepo,
                },
            ],
        }).compile();
        service = module.get(course_service_1.CourseService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(course_entity_1.Course));
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    it('should create a course', async () => {
        const dto = { title: 'Test Course', description: 'A course description' };
        const result = await service.create(dto);
        expect(mockRepo.create).toHaveBeenCalledWith(dto);
        expect(mockRepo.save).toHaveBeenCalled();
        expect(result).toEqual(mockCourse);
    });
    it('should find all courses', async () => {
        const result = await service.findAll();
        expect(repo.find).toHaveBeenCalled();
        expect(result).toEqual([mockCourse]);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjb3Vyc2VcXGNvdXJzZS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0Q7QUFDdEQscURBQWlEO0FBQ2pELDZDQUFxRDtBQUVyRCxtREFBeUM7QUFFekMsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxPQUFzQixDQUFDO0lBQzNCLElBQUksSUFBd0IsQ0FBQztJQUU3QixNQUFNLFVBQVUsR0FBVztRQUN6QixFQUFFLEVBQUUsV0FBVztRQUNmLEtBQUssRUFBRSxhQUFhO1FBQ3BCLFdBQVcsRUFBRSxzQkFBc0I7UUFDbkMsTUFBTSxFQUFFLE9BQU87UUFDZixlQUFlLEVBQUUsQ0FBQztRQUNsQixlQUFlLEVBQUUsQ0FBQztRQUNsQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7S0FDdEIsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztRQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDaEQsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsU0FBUyxFQUFFO2dCQUNULDhCQUFhO2dCQUNiO29CQUNFLE9BQU8sRUFBRSxJQUFBLDRCQUFrQixFQUFDLHNCQUFNLENBQUM7b0JBQ25DLFFBQVEsRUFBRSxRQUFRO2lCQUNuQjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWdCLDhCQUFhLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBcUIsSUFBQSw0QkFBa0IsRUFBQyxzQkFBTSxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztRQUMxRSxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDckMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGNvdXJzZVxcY291cnNlLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcclxuaW1wb3J0IHsgQ291cnNlU2VydmljZSB9IGZyb20gJy4vY291cnNlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBnZXRSZXBvc2l0b3J5VG9rZW4gfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gJy4vY291cnNlLmVudGl0eSc7XHJcblxyXG5kZXNjcmliZSgnQ291cnNlU2VydmljZScsICgpID0+IHtcclxuICBsZXQgc2VydmljZTogQ291cnNlU2VydmljZTtcclxuICBsZXQgcmVwbzogUmVwb3NpdG9yeTxDb3Vyc2U+O1xyXG5cclxuICBjb25zdCBtb2NrQ291cnNlOiBDb3Vyc2UgPSB7XHJcbiAgICBpZDogJ3NvbWUtdXVpZCcsXHJcbiAgICB0aXRsZTogJ1Rlc3QgQ291cnNlJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnQSBjb3Vyc2UgZGVzY3JpcHRpb24nLFxyXG4gICAgc3RhdHVzOiAnZHJhZnQnLFxyXG4gICAgZW5yb2xsbWVudENvdW50OiAwLFxyXG4gICAgY29tcGxldGlvbkNvdW50OiAwLFxyXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG1vY2tSZXBvID0ge1xyXG4gICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChkdG8pID0+ICh7IC4uLmR0byB9KSksXHJcbiAgICBzYXZlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NvdXJzZSksXHJcbiAgICBmaW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW21vY2tDb3Vyc2VdKSxcclxuICB9O1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIENvdXJzZVNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKENvdXJzZSksXHJcbiAgICAgICAgICB1c2VWYWx1ZTogbW9ja1JlcG8sXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgIH0pLmNvbXBpbGUoKTtcclxuXHJcbiAgICBzZXJ2aWNlID0gbW9kdWxlLmdldDxDb3Vyc2VTZXJ2aWNlPihDb3Vyc2VTZXJ2aWNlKTtcclxuICAgIHJlcG8gPSBtb2R1bGUuZ2V0PFJlcG9zaXRvcnk8Q291cnNlPj4oZ2V0UmVwb3NpdG9yeVRva2VuKENvdXJzZSkpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qoc2VydmljZSkudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBjb3Vyc2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBkdG8gPSB7IHRpdGxlOiAnVGVzdCBDb3Vyc2UnLCBkZXNjcmlwdGlvbjogJ0EgY291cnNlIGRlc2NyaXB0aW9uJyB9O1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5jcmVhdGUoZHRvKTtcclxuICAgIGV4cGVjdChtb2NrUmVwby5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGR0byk7XHJcbiAgICBleHBlY3QobW9ja1JlcG8uc2F2ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ291cnNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBmaW5kIGFsbCBjb3Vyc2VzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5maW5kQWxsKCk7XHJcbiAgICBleHBlY3QocmVwby5maW5kKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFttb2NrQ291cnNlXSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=