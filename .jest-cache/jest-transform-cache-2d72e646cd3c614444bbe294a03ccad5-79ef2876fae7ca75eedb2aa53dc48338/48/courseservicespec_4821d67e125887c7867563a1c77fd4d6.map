{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\course\\course.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,qDAAiD;AACjD,6CAAqD;AAErD,mDAAyC;AAEzC,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,OAAsB,CAAC;IAC3B,IAAI,IAAwB,CAAC;IAE7B,MAAM,UAAU,GAAW;QACzB,EAAE,EAAE,WAAW;QACf,KAAK,EAAE,aAAa;QACpB,WAAW,EAAE,sBAAsB;QACnC,MAAM,EAAE,OAAO;QACf,eAAe,EAAE,CAAC;QAClB,eAAe,EAAE,CAAC;QAClB,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,MAAM,QAAQ,GAAG;QACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3D,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;QAC7C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC;KAChD,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,8BAAa;gBACb;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,sBAAM,CAAC;oBACnC,QAAQ,EAAE,QAAQ;iBACnB;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAgB,8BAAa,CAAC,CAAC;QACnD,IAAI,GAAG,MAAM,CAAC,GAAG,CAAqB,IAAA,4BAAkB,EAAC,sBAAM,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,GAAG,GAAG,EAAE,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;QAC1E,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\course\\course.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { CourseService } from './course.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Course } from './course.entity';\r\n\r\ndescribe('CourseService', () => {\r\n  let service: CourseService;\r\n  let repo: Repository<Course>;\r\n\r\n  const mockCourse: Course = {\r\n    id: 'some-uuid',\r\n    title: 'Test Course',\r\n    description: 'A course description',\r\n    status: 'draft',\r\n    enrollmentCount: 0,\r\n    completionCount: 0,\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  const mockRepo = {\r\n    create: jest.fn().mockImplementation((dto) => ({ ...dto })),\r\n    save: jest.fn().mockResolvedValue(mockCourse),\r\n    find: jest.fn().mockResolvedValue([mockCourse]),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CourseService,\r\n        {\r\n          provide: getRepositoryToken(Course),\r\n          useValue: mockRepo,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<CourseService>(CourseService);\r\n    repo = module.get<Repository<Course>>(getRepositoryToken(Course));\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  it('should create a course', async () => {\r\n    const dto = { title: 'Test Course', description: 'A course description' };\r\n    const result = await service.create(dto);\r\n    expect(mockRepo.create).toHaveBeenCalledWith(dto);\r\n    expect(mockRepo.save).toHaveBeenCalled();\r\n    expect(result).toEqual(mockCourse);\r\n  });\r\n\r\n  it('should find all courses', async () => {\r\n    const result = await service.findAll();\r\n    expect(repo.find).toHaveBeenCalled();\r\n    expect(result).toEqual([mockCourse]);\r\n  });\r\n});\r\n"],"version":3}