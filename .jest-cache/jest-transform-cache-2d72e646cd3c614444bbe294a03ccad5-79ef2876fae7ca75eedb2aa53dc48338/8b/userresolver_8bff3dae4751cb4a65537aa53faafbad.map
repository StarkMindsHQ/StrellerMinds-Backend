{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\modules\\user\\resolvers\\user.resolver.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\modules\\user\\resolvers\\user.resolver.ts"],"sourcesContent":["import { Resolver, Query, Mutation, ResolveField, Parent, Context, Subscription } from \"@nestjs/graphql\"\r\nimport { UseGuards, UseInterceptors } from \"@nestjs/common\"\r\nimport { PubSub } from \"graphql-subscriptions\"\r\n\r\nimport { User } from \"../entities/user.entity\"\r\nimport type { UserService } from \"../services/user.service\"\r\nimport type { UserLoader } from \"../loaders/user.loader\"\r\nimport type { CreateUserInput } from \"../dto/create-user.input\"\r\nimport type { UpdateUserInput } from \"../dto/update-user.input\"\r\nimport type { UsersArgs } from \"../dto/users.args\"\r\n\r\nimport { GqlAuthGuard } from \"../../../guards/gql-auth.guard\"\r\nimport { CurrentUser } from \"../../../decorators/current-user.decorator\"\r\nimport { CacheInterceptor } from \"../../../interceptors/cache.interceptor\"\r\nimport type { GraphQLContext } from \"../../../types/context.type\"\r\n\r\nconst pubSub = new PubSub()\r\n\r\n@Resolver(() => User)\r\nexport class UserResolver {\r\n  constructor(\r\n    private readonly userService: UserService,\r\n    private readonly userLoader: UserLoader,\r\n  ) {}\r\n\r\n  @Query(() => [User], { name: \"users\" })\r\n  @UseInterceptors(CacheInterceptor)\r\n  async getUsers(args: UsersArgs): Promise<User[]> {\r\n    return this.userService.findAll(args)\r\n  }\r\n\r\n  @Query(() => User, { name: \"user\", nullable: true })\r\n  @UseInterceptors(CacheInterceptor)\r\n  async getUser(id: string): Promise<User | null> {\r\n    return this.userLoader.load(id)\r\n  }\r\n\r\n  @Query(() => User, { name: \"me\" })\r\n  @UseGuards(GqlAuthGuard)\r\n  async getCurrentUser(@CurrentUser() user: User): Promise<User> {\r\n    return user\r\n  }\r\n\r\n  @Mutation(() => User)\r\n  @UseGuards(GqlAuthGuard)\r\n  async createUser(input: CreateUserInput): Promise<User> {\r\n    const user = await this.userService.create(input)\r\n\r\n    // Publish subscription event\r\n    pubSub.publish(\"userCreated\", { userCreated: user })\r\n\r\n    return user\r\n  }\r\n\r\n  @Mutation(() => User)\r\n  @UseGuards(GqlAuthGuard)\r\n  async updateUser(id: string, input: UpdateUserInput, @CurrentUser() currentUser: User): Promise<User> {\r\n    const user = await this.userService.update(id, input, currentUser)\r\n\r\n    // Publish subscription event\r\n    pubSub.publish(\"userUpdated\", { userUpdated: user })\r\n\r\n    return user\r\n  }\r\n\r\n  @Mutation(() => Boolean)\r\n  @UseGuards(GqlAuthGuard)\r\n  async deleteUser(id: string, @CurrentUser() currentUser: User): Promise<boolean> {\r\n    await this.userService.delete(id, currentUser)\r\n\r\n    // Publish subscription event\r\n    pubSub.publish(\"userDeleted\", { userDeleted: { id } })\r\n\r\n    return true\r\n  }\r\n\r\n  // Field resolvers for optimized data fetching\r\n  @ResolveField(() => [String])\r\n  async posts(@Parent() user: User, @Context() context: GraphQLContext) {\r\n    // Use DataLoader to avoid N+1 queries\r\n    return context.dataSources.postLoader?.loadByUserId(user.id) || []\r\n  }\r\n\r\n  @ResolveField(() => Number)\r\n  async postsCount(@Parent() user: User, @Context() context: GraphQLContext): Promise<number> {\r\n    return context.dataSources.postLoader?.countByUserId(user.id) || 0\r\n  }\r\n\r\n  @ResolveField(() => String, { nullable: true })\r\n  async lastLoginAt(@Parent() user: User): Promise<Date | null> {\r\n    // This could be fetched from a separate service\r\n    return this.userService.getLastLoginAt(user.id)\r\n  }\r\n\r\n  // Subscriptions\r\n  @Subscription(() => User, { name: \"userCreated\" })\r\n  userCreated() {\r\n    return pubSub.asyncIterator(\"userCreated\")\r\n  }\r\n\r\n  @Subscription(() => User, { name: \"userUpdated\" })\r\n  userUpdated() {\r\n    return pubSub.asyncIterator(\"userUpdated\")\r\n  }\r\n\r\n  @Subscription(() => String, { name: \"userDeleted\" })\r\n  userDeleted() {\r\n    return pubSub.asyncIterator(\"userDeleted\")\r\n  }\r\n}\r\n"],"version":3}