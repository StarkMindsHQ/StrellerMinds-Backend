f334642815184b0212928ade4b0b02df
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificatesService = void 0;
/* eslint-disable prettier/prettier */
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const certificate_entity_1 = require("./entity/certificate.entity");
/**
 * CertificatesService provides logic for creating, retrieving, updating, and deleting certificates.
 */
let CertificatesService = class CertificatesService {
    constructor(certificatesRepository) {
        this.certificatesRepository = certificatesRepository;
    }
    /**
     * Create a new certificate.
     */
    async create(dto) {
        const certificate = this.certificatesRepository.create(dto);
        return await this.certificatesRepository.save(certificate);
    }
    /**
     * Get all certificates.
     */
    async findAll() {
        return await this.certificatesRepository.find();
    }
    /**
     * Get a certificate by ID.
     */
    async findOne(id) {
        const certificate = await this.certificatesRepository.findOne({ where: { id } });
        if (!certificate) {
            throw new common_1.NotFoundException(`Certificate with id ${id} not found`);
        }
        return certificate;
    }
    /**
     * Update a certificate by ID.
     */
    async update(id, dto) {
        await this.certificatesRepository.update(id, dto);
        return this.findOne(id);
    }
    /**
     * Remove a certificate by ID.
     */
    async remove(id) {
        const result = await this.certificatesRepository.delete(id);
        if (result.affected === 0) {
            throw new common_1.NotFoundException(`Certificate with id ${id} not found`);
        }
    }
};
exports.CertificatesService = CertificatesService;
exports.CertificatesService = CertificatesService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(certificate_entity_1.Certificate)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CertificatesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjZXJ0aWZpY2F0ZVxcY2VydGlmaWNhdGUuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0NBQXNDO0FBQ3RDLDJDQUErRDtBQUMvRCw2Q0FBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLG9FQUEwRDtBQUcxRDs7R0FFRztBQUVJLElBQU0sbUJBQW1CLEdBQXpCLE1BQU0sbUJBQW1CO0lBQzlCLFlBRVUsc0JBQStDO1FBQS9DLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBeUI7SUFDdEQsQ0FBQztJQUVKOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUF5QjtRQUNwQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVELE9BQU8sTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1gsT0FBTyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQVU7UUFDdEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixNQUFNLElBQUksMEJBQWlCLENBQUMsdUJBQXVCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBVSxFQUFFLEdBQWtDO1FBQ3pELE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBVTtRQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUQsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSwwQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUFqRFksa0RBQW1COzhCQUFuQixtQkFBbUI7SUFEL0IsSUFBQSxtQkFBVSxHQUFFO0lBR1IsV0FBQSxJQUFBLDBCQUFnQixFQUFDLGdDQUFXLENBQUMsQ0FBQTt5REFDRSxvQkFBVSxvQkFBVixvQkFBVTtHQUhqQyxtQkFBbUIsQ0FpRC9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcY2VydGlmaWNhdGVcXGNlcnRpZmljYXRlLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTm90Rm91bmRFeGNlcHRpb24gfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcbmltcG9ydCB7IENlcnRpZmljYXRlIH0gZnJvbSAnLi9lbnRpdHkvY2VydGlmaWNhdGUuZW50aXR5JztcclxuaW1wb3J0IHsgQ3JlYXRlQ2VydGlmaWNhdGVEdG8gfSBmcm9tICcuL2R0by9jcmVhdGUtY2VydGlmaWNhdGUuZHRvJztcclxuXHJcbi8qKlxyXG4gKiBDZXJ0aWZpY2F0ZXNTZXJ2aWNlIHByb3ZpZGVzIGxvZ2ljIGZvciBjcmVhdGluZywgcmV0cmlldmluZywgdXBkYXRpbmcsIGFuZCBkZWxldGluZyBjZXJ0aWZpY2F0ZXMuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDZXJ0aWZpY2F0ZXNTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KENlcnRpZmljYXRlKVxyXG4gICAgcHJpdmF0ZSBjZXJ0aWZpY2F0ZXNSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PENlcnRpZmljYXRlPixcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBjZXJ0aWZpY2F0ZS5cclxuICAgKi9cclxuICBhc3luYyBjcmVhdGUoZHRvOiBDcmVhdGVDZXJ0aWZpY2F0ZUR0byk6IFByb21pc2U8Q2VydGlmaWNhdGU+IHtcclxuICAgIGNvbnN0IGNlcnRpZmljYXRlID0gdGhpcy5jZXJ0aWZpY2F0ZXNSZXBvc2l0b3J5LmNyZWF0ZShkdG8pO1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2VydGlmaWNhdGVzUmVwb3NpdG9yeS5zYXZlKGNlcnRpZmljYXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhbGwgY2VydGlmaWNhdGVzLlxyXG4gICAqL1xyXG4gIGFzeW5jIGZpbmRBbGwoKTogUHJvbWlzZTxDZXJ0aWZpY2F0ZVtdPiB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jZXJ0aWZpY2F0ZXNSZXBvc2l0b3J5LmZpbmQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGNlcnRpZmljYXRlIGJ5IElELlxyXG4gICAqL1xyXG4gIGFzeW5jIGZpbmRPbmUoaWQ6IHN0cmluZyk6IFByb21pc2U8Q2VydGlmaWNhdGU+IHtcclxuICAgIGNvbnN0IGNlcnRpZmljYXRlID0gYXdhaXQgdGhpcy5jZXJ0aWZpY2F0ZXNSZXBvc2l0b3J5LmZpbmRPbmUoeyB3aGVyZTogeyBpZCB9IH0pO1xyXG4gICAgaWYgKCFjZXJ0aWZpY2F0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFeGNlcHRpb24oYENlcnRpZmljYXRlIHdpdGggaWQgJHtpZH0gbm90IGZvdW5kYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2VydGlmaWNhdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgYSBjZXJ0aWZpY2F0ZSBieSBJRC5cclxuICAgKi9cclxuICBhc3luYyB1cGRhdGUoaWQ6IHN0cmluZywgZHRvOiBQYXJ0aWFsPENyZWF0ZUNlcnRpZmljYXRlRHRvPik6IFByb21pc2U8Q2VydGlmaWNhdGU+IHtcclxuICAgIGF3YWl0IHRoaXMuY2VydGlmaWNhdGVzUmVwb3NpdG9yeS51cGRhdGUoaWQsIGR0byk7XHJcbiAgICByZXR1cm4gdGhpcy5maW5kT25lKGlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBhIGNlcnRpZmljYXRlIGJ5IElELlxyXG4gICAqL1xyXG4gIGFzeW5jIHJlbW92ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNlcnRpZmljYXRlc1JlcG9zaXRvcnkuZGVsZXRlKGlkKTtcclxuICAgIGlmIChyZXN1bHQuYWZmZWN0ZWQgPT09IDApIHtcclxuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXhjZXB0aW9uKGBDZXJ0aWZpY2F0ZSB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=