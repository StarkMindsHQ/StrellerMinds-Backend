{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,sCAAsC;AACtC,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,oEAA0D;AAG1D;;GAEG;AAEI,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC9B,YAEU,sBAA+C;QAA/C,2BAAsB,GAAtB,sBAAsB,CAAyB;IACtD,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,GAAyB;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5D,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO,CAAC,EAAU;QACtB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAC;QACrE,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,GAAkC;QACzD,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5D,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;CACF,CAAA;AAjDY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;yDACE,oBAAU,oBAAV,oBAAU;GAHjC,mBAAmB,CAiD/B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Certificate } from './entity/certificate.entity';\r\nimport { CreateCertificateDto } from './dto/create-certificate.dto';\r\n\r\n/**\r\n * CertificatesService provides logic for creating, retrieving, updating, and deleting certificates.\r\n */\r\n@Injectable()\r\nexport class CertificatesService {\r\n  constructor(\r\n    @InjectRepository(Certificate)\r\n    private certificatesRepository: Repository<Certificate>,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new certificate.\r\n   */\r\n  async create(dto: CreateCertificateDto): Promise<Certificate> {\r\n    const certificate = this.certificatesRepository.create(dto);\r\n    return await this.certificatesRepository.save(certificate);\r\n  }\r\n\r\n  /**\r\n   * Get all certificates.\r\n   */\r\n  async findAll(): Promise<Certificate[]> {\r\n    return await this.certificatesRepository.find();\r\n  }\r\n\r\n  /**\r\n   * Get a certificate by ID.\r\n   */\r\n  async findOne(id: string): Promise<Certificate> {\r\n    const certificate = await this.certificatesRepository.findOne({ where: { id } });\r\n    if (!certificate) {\r\n      throw new NotFoundException(`Certificate with id ${id} not found`);\r\n    }\r\n    return certificate;\r\n  }\r\n\r\n  /**\r\n   * Update a certificate by ID.\r\n   */\r\n  async update(id: string, dto: Partial<CreateCertificateDto>): Promise<Certificate> {\r\n    await this.certificatesRepository.update(id, dto);\r\n    return this.findOne(id);\r\n  }\r\n\r\n  /**\r\n   * Remove a certificate by ID.\r\n   */\r\n  async remove(id: string): Promise<void> {\r\n    const result = await this.certificatesRepository.delete(id);\r\n    if (result.affected === 0) {\r\n      throw new NotFoundException(`Certificate with id ${id} not found`);\r\n    }\r\n  }\r\n}\r\n"],"version":3}