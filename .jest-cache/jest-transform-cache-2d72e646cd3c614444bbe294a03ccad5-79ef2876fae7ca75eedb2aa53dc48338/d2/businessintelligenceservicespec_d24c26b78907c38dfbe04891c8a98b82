df9ef0b724c5beead0caa96d92efec98
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const business_intelligence_service_1 = require("../services/business-intelligence.service");
const data_warehouse_service_1 = require("../services/data-warehouse.service");
const data_collection_service_1 = require("../services/data-collection.service");
const data_warehouse_metric_entity_1 = require("../entities/data-warehouse-metric.entity");
describe("BusinessIntelligenceService", () => {
    let service;
    let dataWarehouseService;
    let dataCollectionService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                business_intelligence_service_1.BusinessIntelligenceService,
                {
                    provide: data_warehouse_service_1.DataWarehouseService,
                    useValue: {
                        getMetrics: globals_1.jest.fn(),
                    },
                },
                {
                    provide: data_collection_service_1.DataCollectionService,
                    useValue: {
                        getEvents: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(business_intelligence_service_1.BusinessIntelligenceService);
        dataWarehouseService = module.get(data_warehouse_service_1.DataWarehouseService);
        dataCollectionService = module.get(data_collection_service_1.DataCollectionService);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("executeQuery", () => {
        it("should execute analytics query successfully", async () => {
            const query = {
                metrics: ["event_count", "active_users"],
                timeRange: {
                    start: new Date("2023-01-01"),
                    end: new Date("2023-01-02"),
                },
                granularity: "1h",
            };
            const mockMetrics = [
                {
                    id: "1",
                    metricName: "event_count",
                    metricType: data_warehouse_metric_entity_1.MetricType.COUNTER,
                    value: 100,
                    dimensions: { eventType: "user_action" },
                    timestamp: new Date("2023-01-01T10:00:00Z"),
                },
                {
                    id: "2",
                    metricName: "active_users",
                    metricType: data_warehouse_metric_entity_1.MetricType.GAUGE,
                    value: 50,
                    dimensions: { eventType: "user_action" },
                    timestamp: new Date("2023-01-01T10:00:00Z"),
                },
            ];
            dataWarehouseService.getMetrics.mockResolvedValue(mockMetrics);
            const result = await service.executeQuery(query);
            expect(result.data).toHaveLength(1);
            expect(result.data[0].metrics).toEqual({
                event_count: 100,
                active_users: 50,
            });
            expect(result.summary.totalRecords).toBe(1);
            expect(result.summary.aggregations).toEqual({
                event_count_total: 100,
                event_count_avg: 100,
                active_users_total: 50,
                active_users_avg: 50,
            });
        });
        it("should handle empty results", async () => {
            const query = {
                metrics: ["event_count"],
                timeRange: {
                    start: new Date("2023-01-01"),
                    end: new Date("2023-01-02"),
                },
            };
            dataWarehouseService.getMetrics.mockResolvedValue([]);
            const result = await service.executeQuery(query);
            expect(result.data).toHaveLength(0);
            expect(result.summary.totalRecords).toBe(0);
        });
    });
    describe("getUserAnalytics", () => {
        it("should return user analytics", async () => {
            const userId = "user123";
            const timeRange = {
                start: new Date("2023-01-01"),
                end: new Date("2023-01-02"),
            };
            const mockEvents = {
                events: [
                    {
                        id: "1",
                        eventType: "user_action",
                        sessionId: "session1",
                        timestamp: new Date("2023-01-01T10:00:00Z"),
                    },
                    {
                        id: "2",
                        eventType: "system_event",
                        sessionId: "session2",
                        timestamp: new Date("2023-01-01T11:00:00Z"),
                    },
                ],
                total: 2,
            };
            dataCollectionService.getEvents.mockResolvedValue(mockEvents);
            const result = await service.getUserAnalytics(userId, timeRange);
            expect(result.userId).toBe(userId);
            expect(result.totalEvents).toBe(2);
            expect(result.sessionCount).toBe(2);
            expect(result.eventsByType).toEqual({
                user_action: 1,
                system_event: 1,
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,