{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\business-intelligence.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\business-intelligence.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { BusinessIntelligenceService, type AnalyticsQuery } from \"../services/business-intelligence.service\"\r\nimport { DataWarehouseService } from \"../services/data-warehouse.service\"\r\nimport { DataCollectionService } from \"../services/data-collection.service\"\r\nimport { MetricType } from \"../entities/data-warehouse-metric.entity\"\r\n\r\ndescribe(\"BusinessIntelligenceService\", () => {\r\n  let service: BusinessIntelligenceService\r\n  let dataWarehouseService: jest.Mocked<DataWarehouseService>\r\n  let dataCollectionService: jest.Mocked<DataCollectionService>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        BusinessIntelligenceService,\r\n        {\r\n          provide: DataWarehouseService,\r\n          useValue: {\r\n            getMetrics: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: DataCollectionService,\r\n          useValue: {\r\n            getEvents: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<BusinessIntelligenceService>(BusinessIntelligenceService)\r\n    dataWarehouseService = module.get(DataWarehouseService)\r\n    dataCollectionService = module.get(DataCollectionService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"executeQuery\", () => {\r\n    it(\"should execute analytics query successfully\", async () => {\r\n      const query: AnalyticsQuery = {\r\n        metrics: [\"event_count\", \"active_users\"],\r\n        timeRange: {\r\n          start: new Date(\"2023-01-01\"),\r\n          end: new Date(\"2023-01-02\"),\r\n        },\r\n        granularity: \"1h\",\r\n      }\r\n\r\n      const mockMetrics = [\r\n        {\r\n          id: \"1\",\r\n          metricName: \"event_count\",\r\n          metricType: MetricType.COUNTER,\r\n          value: 100,\r\n          dimensions: { eventType: \"user_action\" },\r\n          timestamp: new Date(\"2023-01-01T10:00:00Z\"),\r\n        },\r\n        {\r\n          id: \"2\",\r\n          metricName: \"active_users\",\r\n          metricType: MetricType.GAUGE,\r\n          value: 50,\r\n          dimensions: { eventType: \"user_action\" },\r\n          timestamp: new Date(\"2023-01-01T10:00:00Z\"),\r\n        },\r\n      ]\r\n\r\n      dataWarehouseService.getMetrics.mockResolvedValue(mockMetrics)\r\n\r\n      const result = await service.executeQuery(query)\r\n\r\n      expect(result.data).toHaveLength(1)\r\n      expect(result.data[0].metrics).toEqual({\r\n        event_count: 100,\r\n        active_users: 50,\r\n      })\r\n      expect(result.summary.totalRecords).toBe(1)\r\n      expect(result.summary.aggregations).toEqual({\r\n        event_count_total: 100,\r\n        event_count_avg: 100,\r\n        active_users_total: 50,\r\n        active_users_avg: 50,\r\n      })\r\n    })\r\n\r\n    it(\"should handle empty results\", async () => {\r\n      const query: AnalyticsQuery = {\r\n        metrics: [\"event_count\"],\r\n        timeRange: {\r\n          start: new Date(\"2023-01-01\"),\r\n          end: new Date(\"2023-01-02\"),\r\n        },\r\n      }\r\n\r\n      dataWarehouseService.getMetrics.mockResolvedValue([])\r\n\r\n      const result = await service.executeQuery(query)\r\n\r\n      expect(result.data).toHaveLength(0)\r\n      expect(result.summary.totalRecords).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe(\"getUserAnalytics\", () => {\r\n    it(\"should return user analytics\", async () => {\r\n      const userId = \"user123\"\r\n      const timeRange = {\r\n        start: new Date(\"2023-01-01\"),\r\n        end: new Date(\"2023-01-02\"),\r\n      }\r\n\r\n      const mockEvents = {\r\n        events: [\r\n          {\r\n            id: \"1\",\r\n            eventType: \"user_action\",\r\n            sessionId: \"session1\",\r\n            timestamp: new Date(\"2023-01-01T10:00:00Z\"),\r\n          },\r\n          {\r\n            id: \"2\",\r\n            eventType: \"system_event\",\r\n            sessionId: \"session2\",\r\n            timestamp: new Date(\"2023-01-01T11:00:00Z\"),\r\n          },\r\n        ],\r\n        total: 2,\r\n      }\r\n\r\n      dataCollectionService.getEvents.mockResolvedValue(mockEvents as any)\r\n\r\n      const result = await service.getUserAnalytics(userId, timeRange)\r\n\r\n      expect(result.userId).toBe(userId)\r\n      expect(result.totalEvents).toBe(2)\r\n      expect(result.sessionCount).toBe(2)\r\n      expect(result.eventsByType).toEqual({\r\n        user_action: 1,\r\n        system_event: 1,\r\n      })\r\n    })\r\n  })\r\n})\r\n"],"version":3}