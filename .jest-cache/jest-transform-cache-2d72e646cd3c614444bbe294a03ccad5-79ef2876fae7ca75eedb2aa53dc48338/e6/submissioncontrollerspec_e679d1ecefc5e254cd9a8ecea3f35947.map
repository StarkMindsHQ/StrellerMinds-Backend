{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\submission\\submission.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,mEAA+D;AAC/D,sEAAkE;AAGlE,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,UAAgC,CAAC;IACrC,IAAI,OAA0B,CAAC;IAE/B,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;KAClB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,4CAAoB,CAAC;YACnC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,sCAAiB,EAAE,QAAQ,EAAE,WAAW,EAAE;aACtD;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAuB,4CAAoB,CAAC,CAAC;QACpE,OAAO,GAAG,MAAM,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IAEtC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,GAAG,GAAwB;gBAC/B,SAAS,EAAE,MAAM;gBACjB,YAAY,EAAE,MAAM;gBACpB,WAAW,EAAE,MAAM;aACpB,CAAC;YACF,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAyB,CAAC;YACjE,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACxD,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE9C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,UAAU,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;YAClD,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;YACpD,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE9C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;YACxE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\submission\\submission.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { SubmissionController } from './submission.controller';\r\nimport { SubmissionService } from './provider/submission.service';\r\nimport { CreateSubmissionDto } from './dtos/createSubmission.dto';\r\n\r\ndescribe('SubmissionController', () => {\r\n  let controller: SubmissionController;\r\n  let service: SubmissionService;\r\n\r\n  const mockService = {\r\n    create: jest.fn(),\r\n    findOne: jest.fn(),\r\n    update: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [SubmissionController],\r\n      providers: [\r\n        { provide: SubmissionService, useValue: mockService },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<SubmissionController>(SubmissionController);\r\n    service = module.get<SubmissionService>(SubmissionService);\r\n  });\r\n\r\n  afterEach(() => jest.clearAllMocks());\r\n\r\n  describe('create', () => {\r\n    it('should call service and return submission', async () => {\r\n      const dto: CreateSubmissionDto = {\r\n        studentId: 'uuid',\r\n        assignmentId: 'uuid',\r\n        textContent: 'Test',\r\n      };\r\n      const file = { path: 'uploads/file.pdf' } as Express.Multer.File;\r\n      const created = { id: '1', ...dto, fileUrl: file.path };\r\n      mockService.create.mockResolvedValue(created);\r\n\r\n      const result = await controller.create(dto, file);\r\n      expect(result).toEqual(created);\r\n    });\r\n  });\r\n\r\n  describe('findOne', () => {\r\n    it('should return submission by id', async () => {\r\n      const submission = { id: '1', studentId: 'uuid' };\r\n      mockService.findOne.mockResolvedValue(submission);\r\n\r\n      const result = await controller.findOne('1');\r\n      expect(result).toEqual(submission);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update submission', async () => {\r\n      const updated = { id: '1', textContent: 'Updated' };\r\n      mockService.update.mockResolvedValue(updated);\r\n\r\n      const result = await controller.update('1', { textContent: 'Updated' });\r\n      expect(result).toEqual(updated);\r\n    });\r\n  });\r\n});\r\n"],"version":3}