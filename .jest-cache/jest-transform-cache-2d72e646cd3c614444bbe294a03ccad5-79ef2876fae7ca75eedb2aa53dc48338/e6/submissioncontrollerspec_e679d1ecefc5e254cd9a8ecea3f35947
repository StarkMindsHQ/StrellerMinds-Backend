d8b1c3bd950d775a43bda9674720a57e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const submission_controller_1 = require("./submission.controller");
const submission_service_1 = require("./provider/submission.service");
describe('SubmissionController', () => {
    let controller;
    let service;
    const mockService = {
        create: jest.fn(),
        findOne: jest.fn(),
        update: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [submission_controller_1.SubmissionController],
            providers: [
                { provide: submission_service_1.SubmissionService, useValue: mockService },
            ],
        }).compile();
        controller = module.get(submission_controller_1.SubmissionController);
        service = module.get(submission_service_1.SubmissionService);
    });
    afterEach(() => jest.clearAllMocks());
    describe('create', () => {
        it('should call service and return submission', async () => {
            const dto = {
                studentId: 'uuid',
                assignmentId: 'uuid',
                textContent: 'Test',
            };
            const file = { path: 'uploads/file.pdf' };
            const created = { id: '1', ...dto, fileUrl: file.path };
            mockService.create.mockResolvedValue(created);
            const result = await controller.create(dto, file);
            expect(result).toEqual(created);
        });
    });
    describe('findOne', () => {
        it('should return submission by id', async () => {
            const submission = { id: '1', studentId: 'uuid' };
            mockService.findOne.mockResolvedValue(submission);
            const result = await controller.findOne('1');
            expect(result).toEqual(submission);
        });
    });
    describe('update', () => {
        it('should update submission', async () => {
            const updated = { id: '1', textContent: 'Updated' };
            mockService.update.mockResolvedValue(updated);
            const result = await controller.update('1', { textContent: 'Updated' });
            expect(result).toEqual(updated);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzdWJtaXNzaW9uXFxzdWJtaXNzaW9uLmNvbnRyb2xsZXIuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCxtRUFBK0Q7QUFDL0Qsc0VBQWtFO0FBR2xFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxVQUFnQyxDQUFDO0lBQ3JDLElBQUksT0FBMEIsQ0FBQztJQUUvQixNQUFNLFdBQVcsR0FBRztRQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNsQixDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxXQUFXLEVBQUUsQ0FBQyw0Q0FBb0IsQ0FBQztZQUNuQyxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsc0NBQWlCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTthQUN0RDtTQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUViLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUF1Qiw0Q0FBb0IsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFvQixzQ0FBaUIsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RCxNQUFNLEdBQUcsR0FBd0I7Z0JBQy9CLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixZQUFZLEVBQUUsTUFBTTtnQkFDcEIsV0FBVyxFQUFFLE1BQU07YUFDcEIsQ0FBQztZQUNGLE1BQU0sSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUF5QixDQUFDO1lBQ2pFLE1BQU0sT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3hELFdBQVcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUN2QixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUNsRCxXQUFXLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWxELE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUN0QixFQUFFLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDeEMsTUFBTSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQztZQUNwRCxXQUFXLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXHN1Ym1pc3Npb25cXHN1Ym1pc3Npb24uY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBTdWJtaXNzaW9uQ29udHJvbGxlciB9IGZyb20gJy4vc3VibWlzc2lvbi5jb250cm9sbGVyJztcclxuaW1wb3J0IHsgU3VibWlzc2lvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVyL3N1Ym1pc3Npb24uc2VydmljZSc7XHJcbmltcG9ydCB7IENyZWF0ZVN1Ym1pc3Npb25EdG8gfSBmcm9tICcuL2R0b3MvY3JlYXRlU3VibWlzc2lvbi5kdG8nO1xyXG5cclxuZGVzY3JpYmUoJ1N1Ym1pc3Npb25Db250cm9sbGVyJywgKCkgPT4ge1xyXG4gIGxldCBjb250cm9sbGVyOiBTdWJtaXNzaW9uQ29udHJvbGxlcjtcclxuICBsZXQgc2VydmljZTogU3VibWlzc2lvblNlcnZpY2U7XHJcblxyXG4gIGNvbnN0IG1vY2tTZXJ2aWNlID0ge1xyXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXHJcbiAgICBmaW5kT25lOiBqZXN0LmZuKCksXHJcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICB9O1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGNvbnRyb2xsZXJzOiBbU3VibWlzc2lvbkNvbnRyb2xsZXJdLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IFN1Ym1pc3Npb25TZXJ2aWNlLCB1c2VWYWx1ZTogbW9ja1NlcnZpY2UgfSxcclxuICAgICAgXSxcclxuICAgIH0pLmNvbXBpbGUoKTtcclxuXHJcbiAgICBjb250cm9sbGVyID0gbW9kdWxlLmdldDxTdWJtaXNzaW9uQ29udHJvbGxlcj4oU3VibWlzc2lvbkNvbnRyb2xsZXIpO1xyXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8U3VibWlzc2lvblNlcnZpY2U+KFN1Ym1pc3Npb25TZXJ2aWNlKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IGplc3QuY2xlYXJBbGxNb2NrcygpKTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NyZWF0ZScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgY2FsbCBzZXJ2aWNlIGFuZCByZXR1cm4gc3VibWlzc2lvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgZHRvOiBDcmVhdGVTdWJtaXNzaW9uRHRvID0ge1xyXG4gICAgICAgIHN0dWRlbnRJZDogJ3V1aWQnLFxyXG4gICAgICAgIGFzc2lnbm1lbnRJZDogJ3V1aWQnLFxyXG4gICAgICAgIHRleHRDb250ZW50OiAnVGVzdCcsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGZpbGUgPSB7IHBhdGg6ICd1cGxvYWRzL2ZpbGUucGRmJyB9IGFzIEV4cHJlc3MuTXVsdGVyLkZpbGU7XHJcbiAgICAgIGNvbnN0IGNyZWF0ZWQgPSB7IGlkOiAnMScsIC4uLmR0bywgZmlsZVVybDogZmlsZS5wYXRoIH07XHJcbiAgICAgIG1vY2tTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShjcmVhdGVkKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuY3JlYXRlKGR0bywgZmlsZSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoY3JlYXRlZCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2ZpbmRPbmUnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBzdWJtaXNzaW9uIGJ5IGlkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdWJtaXNzaW9uID0geyBpZDogJzEnLCBzdHVkZW50SWQ6ICd1dWlkJyB9O1xyXG4gICAgICBtb2NrU2VydmljZS5maW5kT25lLm1vY2tSZXNvbHZlZFZhbHVlKHN1Ym1pc3Npb24pO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5maW5kT25lKCcxJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoc3VibWlzc2lvbik7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3VwZGF0ZScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHN1Ym1pc3Npb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWQgPSB7IGlkOiAnMScsIHRleHRDb250ZW50OiAnVXBkYXRlZCcgfTtcclxuICAgICAgbW9ja1NlcnZpY2UudXBkYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHVwZGF0ZWQpO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci51cGRhdGUoJzEnLCB7IHRleHRDb250ZW50OiAnVXBkYXRlZCcgfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwodXBkYXRlZCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==