4112af87803a021d95d209631fc61fb9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DependencyInjectionService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyInjectionService = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
let DependencyInjectionService = DependencyInjectionService_1 = class DependencyInjectionService {
    constructor(moduleRef) {
        this.moduleRef = moduleRef;
        this.logger = new common_1.Logger(DependencyInjectionService_1.name);
        this.serviceCache = new Map();
        this.cacheEnabled = true;
        this.maxCacheSize = 100;
    }
    /**
     * Get a service instance by type
     */
    async getService(serviceType) {
        const cacheKey = `type:${serviceType.name}`;
        // Check cache first
        if (this.cacheEnabled && this.serviceCache.has(cacheKey)) {
            this.logger.debug(`Service ${serviceType.name} found in cache`);
            return this.serviceCache.get(cacheKey);
        }
        try {
            const service = await this.moduleRef.get(serviceType, { strict: false });
            // Cache the service if caching is enabled
            if (this.cacheEnabled) {
                this.setCacheEntry(cacheKey, service);
            }
            return service;
        }
        catch (error) {
            const serviceError = {
                name: 'ServiceResolutionError',
                message: `Failed to resolve service ${serviceType.name}: ${error.message}`,
                serviceName: serviceType.name,
                originalError: error,
            };
            this.logger.error(`Failed to resolve service ${serviceType.name}: ${error.message}`);
            throw new common_1.ServiceUnavailableException(serviceError.message, { cause: serviceError });
        }
    }
    /**
     * Get a service instance by token
     */
    async getServiceByToken(token) {
        const cacheKey = `token:${String(token)}`;
        // Check cache first
        if (this.cacheEnabled && this.serviceCache.has(cacheKey)) {
            this.logger.debug(`Service with token ${String(token)} found in cache`);
            return this.serviceCache.get(cacheKey);
        }
        try {
            const service = await this.moduleRef.get(token, { strict: false });
            // Cache the service if caching is enabled
            if (this.cacheEnabled) {
                this.setCacheEntry(cacheKey, service);
            }
            return service;
        }
        catch (error) {
            const serviceError = {
                name: 'ServiceResolutionError',
                message: `Failed to resolve service by token ${String(token)}: ${error.message}`,
                serviceName: String(token),
                token,
                originalError: error,
            };
            this.logger.error(`Failed to resolve service by token ${String(token)}: ${error.message}`);
            throw new common_1.ServiceUnavailableException(serviceError.message, { cause: serviceError });
        }
    }
    /**
     * Check if a service is available
     */
    async isServiceAvailable(serviceType) {
        try {
            await this.moduleRef.get(serviceType, { strict: false });
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Get all available services of a specific type
     * Note: This is a basic implementation. For production use, consider using a service registry
     */
    async getAllServices(serviceType) {
        try {
            // Try to get the service first to see if it exists
            const service = await this.getService(serviceType);
            return service ? [service] : [];
        }
        catch (error) {
            this.logger.debug(`No services of type ${serviceType.name} found: ${error.message}`);
            return [];
        }
    }
    /**
     * Resolve circular dependencies by using lazy loading
     */
    createLazyService(serviceType) {
        return async () => {
            return await this.getService(serviceType);
        };
    }
    /**
     * Create a service factory that can be used for conditional service creation
     */
    createServiceFactory(serviceType, condition) {
        return async () => {
            if (condition()) {
                return await this.getService(serviceType);
            }
            return null;
        };
    }
    /**
     * Get service metadata for debugging purposes
     */
    getServiceMetadata(serviceType) {
        try {
            const metadata = Reflect.getMetadata('design:paramtypes', serviceType) || [];
            return {
                name: serviceType.name,
                parameters: metadata.map((param) => param?.name || 'unknown'),
                isInjectable: Reflect.hasMetadata('injectable', serviceType),
            };
        }
        catch (error) {
            this.logger.warn(`Failed to get metadata for service ${serviceType.name}: ${error.message}`);
            return { name: serviceType.name, error: 'Failed to get metadata' };
        }
    }
    /**
     * Validate service dependencies
     */
    async validateServiceDependencies(serviceType) {
        const result = {
            isValid: true,
            missingDependencies: [],
            errors: [],
        };
        try {
            const metadata = this.getServiceMetadata(serviceType);
            const dependencies = metadata.parameters || [];
            for (const dependency of dependencies) {
                if (dependency === 'unknown') {
                    result.errors.push(`Unknown dependency type in ${serviceType.name}`);
                    result.isValid = false;
                    continue;
                }
                try {
                    // Try to resolve the dependency
                    const dependencyType = this.getDependencyType(dependency);
                    if (dependencyType) {
                        await this.getService(dependencyType);
                    }
                }
                catch (error) {
                    result.missingDependencies.push(dependency);
                    result.isValid = false;
                }
            }
        }
        catch (error) {
            result.errors.push(`Failed to validate service ${serviceType.name}: ${error.message}`);
            result.isValid = false;
        }
        return result;
    }
    /**
     * Get dependency type from string name
     * This is a simplified implementation - in practice, you might use a service registry
     */
    getDependencyType(dependencyName) {
        // This would typically use a service registry or reflection
        // For now, return null to indicate we can't determine the type
        return null;
    }
    /**
     * Set cache entry with size management
     */
    setCacheEntry(key, value) {
        if (!this.cacheEnabled)
            return;
        // Implement LRU-like behavior by removing oldest entries if cache is full
        if (this.serviceCache.size >= this.maxCacheSize) {
            const firstKey = this.serviceCache.keys().next().value;
            if (firstKey) {
                this.serviceCache.delete(firstKey);
            }
        }
        this.serviceCache.set(key, value);
        this.logger.debug(`Service cached: ${key}`);
    }
    /**
     * Clear service cache
     */
    clearCache() {
        this.serviceCache.clear();
        this.logger.debug('Service cache cleared');
    }
    /**
     * Get cache statistics
     */
    getCacheStats() {
        return {
            size: this.serviceCache.size,
            keys: Array.from(this.serviceCache.keys()),
            maxSize: this.maxCacheSize,
            enabled: this.cacheEnabled,
        };
    }
    /**
     * Enable or disable caching
     */
    setCacheEnabled(enabled) {
        this.cacheEnabled = enabled;
        if (!enabled) {
            this.clearCache();
        }
        this.logger.debug(`Service caching ${enabled ? 'enabled' : 'disabled'}`);
    }
};
exports.DependencyInjectionService = DependencyInjectionService;
exports.DependencyInjectionService = DependencyInjectionService = DependencyInjectionService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.ModuleRef !== "undefined" && core_1.ModuleRef) === "function" ? _a : Object])
], DependencyInjectionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,