775ab5f082435e65ea919624a11bf3e4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const courses_controller_1 = require("./courses.controller");
const course_service_1 = require("./course.service");
const jwt_auth_guard_1 = require("src/auth/guards/jwt-auth.guard");
const roles_guard_1 = require("src/auth/guards/roles.guard");
const mockCourse = {
    id: '1',
    title: 'Test Course',
    description: 'Description',
    difficulty: 'Beginner',
    modules: [],
};
describe('CoursesController', () => {
    let controller;
    let service;
    const mockCourseService = {
        create: jest.fn().mockResolvedValue(mockCourse),
        findAll: jest.fn().mockResolvedValue([mockCourse]),
        findOne: jest.fn().mockResolvedValue(mockCourse),
        update: jest.fn().mockResolvedValue(mockCourse),
        remove: jest.fn().mockResolvedValue({ affected: 1 }),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [courses_controller_1.CoursesController],
            providers: [{ provide: course_service_1.CourseService, useValue: mockCourseService }],
        })
            .overrideGuard(jwt_auth_guard_1.JwtAuthGuard)
            .useValue({ canActivate: () => true })
            .overrideGuard(roles_guard_1.RolesGuard)
            .useValue({ canActivate: () => true })
            .compile();
        controller = module.get(courses_controller_1.CoursesController);
        service = module.get(course_service_1.CourseService);
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    it('should create a course', async () => {
        const dto = { ...mockCourse };
        const result = await controller.create(dto);
        expect(service.create).toHaveBeenCalledWith(dto);
        expect(result).toEqual(mockCourse);
    });
    it('should return all courses', async () => {
        const result = await controller.findAll();
        expect(service.findAll).toHaveBeenCalled();
        expect(result).toEqual([mockCourse]);
    });
    it('should return one course by id', async () => {
        const result = await controller.findOne('1');
        expect(service.findOne).toHaveBeenCalledWith('1');
        expect(result).toEqual(mockCourse);
    });
    it('should update a course', async () => {
        const dto = { title: 'Updated Title' };
        const result = await controller.update('1', dto);
        expect(service.update).toHaveBeenCalledWith('1', dto);
        expect(result).toEqual(mockCourse);
    });
    it('should delete a course', async () => {
        const result = await controller.remove('1');
        expect(service.remove).toHaveBeenCalledWith('1');
        expect(result).toEqual({ affected: 1 });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjb3Vyc2VcXGNvdXJzZS5jb250cm9sbGVyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0Q7QUFDdEQsNkRBQXlEO0FBQ3pELHFEQUFpRDtBQUNqRCxtRUFBOEQ7QUFDOUQsNkRBQXlEO0FBRXpELE1BQU0sVUFBVSxHQUFHO0lBQ2pCLEVBQUUsRUFBRSxHQUFHO0lBQ1AsS0FBSyxFQUFFLGFBQWE7SUFDcEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsVUFBVSxFQUFFLFVBQVU7SUFDdEIsT0FBTyxFQUFFLEVBQUU7Q0FDWixDQUFDO0FBRUYsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLFVBQTZCLENBQUM7SUFDbEMsSUFBSSxPQUFzQixDQUFDO0lBRTNCLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7UUFDL0MsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1FBQ2hELE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1FBQy9DLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDckQsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsV0FBVyxFQUFFLENBQUMsc0NBQWlCLENBQUM7WUFDaEMsU0FBUyxFQUFF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QU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjb3Vyc2VcXGNvdXJzZS5jb250cm9sbGVyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XHJcbmltcG9ydCB7IENvdXJzZXNDb250cm9sbGVyIH0gZnJvbSAnLi9jb3Vyc2VzLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDb3Vyc2VTZXJ2aWNlIH0gZnJvbSAnLi9jb3Vyc2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEp3dEF1dGhHdWFyZCB9IGZyb20gJ3NyYy9hdXRoL2d1YXJkcy9qd3QtYXV0aC5ndWFyZCc7XHJcbmltcG9ydCB7IFJvbGVzR3VhcmQgfSBmcm9tICdzcmMvYXV0aC9ndWFyZHMvcm9sZXMuZ3VhcmQnO1xyXG5cclxuY29uc3QgbW9ja0NvdXJzZSA9IHtcclxuICBpZDogJzEnLFxyXG4gIHRpdGxlOiAnVGVzdCBDb3Vyc2UnLFxyXG4gIGRlc2NyaXB0aW9uOiAnRGVzY3JpcHRpb24nLFxyXG4gIGRpZmZpY3VsdHk6ICdCZWdpbm5lcicsXHJcbiAgbW9kdWxlczogW10sXHJcbn07XHJcblxyXG5kZXNjcmliZSgnQ291cnNlc0NvbnRyb2xsZXInLCAoKSA9PiB7XHJcbiAgbGV0IGNvbnRyb2xsZXI6IENvdXJzZXNDb250cm9sbGVyO1xyXG4gIGxldCBzZXJ2aWNlOiBDb3Vyc2VTZXJ2aWNlO1xyXG5cclxuICBjb25zdCBtb2NrQ291cnNlU2VydmljZSA9IHtcclxuICAgIGNyZWF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tDb3Vyc2UpLFxyXG4gICAgZmluZEFsbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFttb2NrQ291cnNlXSksXHJcbiAgICBmaW5kT25lOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NvdXJzZSksXHJcbiAgICB1cGRhdGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQ291cnNlKSxcclxuICAgIHJlbW92ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYWZmZWN0ZWQ6IDEgfSksXHJcbiAgfTtcclxuXHJcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICBjb250cm9sbGVyczogW0NvdXJzZXNDb250cm9sbGVyXSxcclxuICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBDb3Vyc2VTZXJ2aWNlLCB1c2VWYWx1ZTogbW9ja0NvdXJzZVNlcnZpY2UgfV0sXHJcbiAgICB9KVxyXG4gICAgICAub3ZlcnJpZGVHdWFyZChKd3RBdXRoR3VhcmQpXHJcbiAgICAgIC51c2VWYWx1ZSh7IGNhbkFjdGl2YXRlOiAoKSA9PiB0cnVlIH0pXHJcbiAgICAgIC5vdmVycmlkZUd1YXJkKFJvbGVzR3VhcmQpXHJcbiAgICAgIC51c2VWYWx1ZSh7IGNhbkFjdGl2YXRlOiAoKSA9PiB0cnVlIH0pXHJcbiAgICAgIC5jb21waWxlKCk7XHJcblxyXG4gICAgY29udHJvbGxlciA9IG1vZHVsZS5nZXQ8Q291cnNlc0NvbnRyb2xsZXI+KENvdXJzZXNDb250cm9sbGVyKTtcclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PENvdXJzZVNlcnZpY2U+KENvdXJzZVNlcnZpY2UpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoY29udHJvbGxlcikudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBjb3Vyc2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBkdG8gPSB7IC4uLm1vY2tDb3Vyc2UgfTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuY3JlYXRlKGR0byk7XHJcbiAgICBleHBlY3Qoc2VydmljZS5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGR0byk7XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tDb3Vyc2UpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJldHVybiBhbGwgY291cnNlcycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZmluZEFsbCgpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UuZmluZEFsbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbbW9ja0NvdXJzZV0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJldHVybiBvbmUgY291cnNlIGJ5IGlkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5maW5kT25lKCcxJyk7XHJcbiAgICBleHBlY3Qoc2VydmljZS5maW5kT25lKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMScpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ291cnNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB1cGRhdGUgYSBjb3Vyc2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBkdG8gPSB7IHRpdGxlOiAnVXBkYXRlZCBUaXRsZScgfTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIudXBkYXRlKCcxJywgZHRvKTtcclxuICAgIGV4cGVjdChzZXJ2aWNlLnVwZGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzEnLCBkdG8pO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ291cnNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBkZWxldGUgYSBjb3Vyc2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLnJlbW92ZSgnMScpO1xyXG4gICAgZXhwZWN0KHNlcnZpY2UucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMScpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IGFmZmVjdGVkOiAxIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9