{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.module.ts","mappings":";;;;;;;;;AAAA;;;;GAIG;AACH,2CAAwC;AACxC,qCAAwC;AACxC,+CAAkD;AAClD,2CAA6D;AAC7D,wDAAoD;AACpD,6CAAgD;AAChD,uDAAmD;AACnD,iDAA6C;AAC7C,iDAA6C;AAC7C,oEAAyD;AACzD,0EAA+D;AAC/D,yDAAqD;AACrD,+EAA0E;AAC1E,uCAAyC;AACzC,4DAAuD;AACvD,sDAAkD;AAElD,wEAAmE;AAEnE,gFAAwE;AACxE,oFAA4E;AAC5E,8EAAsE;AACtE,2DAAuD;AA2DhD,IAAM,UAAU,GAAhB,MAAM,UAAU;CAAG,CAAA;AAAb,gCAAU;qBAAV,UAAU;IAzDtB,IAAA,eAAM,EAAC;QACN,OAAO,EAAE;YACP,0BAAW;YACX,0BAAW,EAAE,0DAA0D;YACvE,yBAAc;YACd,uBAAa,CAAC,UAAU,CAAC,CAAC,6BAAS,EAAE,mCAAY,CAAC,CAAC;YACnD,eAAS,CAAC,aAAa,CAAC;gBACtB,OAAO,EAAE,CAAC,qBAAY,CAAC;gBACvB,MAAM,EAAE,CAAC,sBAAa,CAAC;gBACvB,UAAU,EAAE,KAAK,EAAE,aAA4B,EAAE,EAAE,CAAC,CAAC;oBACnD,MAAM,EAAE,aAAa,CAAC,GAAG,CAAS,YAAY,CAAC;oBAC/C,WAAW,EAAE;wBACX,SAAS,EAAE,IAAI;qBAChB;iBACF,CAAC;aACH,CAAC;YACF,4BAAY;SACb;QACD,WAAW,EAAE,CAAC,gCAAc,CAAC;QAC7B,SAAS,EAAE;YACT,0BAAW;YACX,0BAAW;YACX,uDAAyB;YACzB,qCAAgB;YAChB,4CAAkB;YAClB,gDAAoB;YACpB,0CAAiB;YACjB;gBACE,OAAO,EAAE,eAAe;gBACxB,WAAW,EAAE,qCAAgB,EAAE,wDAAwD;aACxF;YACD;gBACE,OAAO,EAAE,iBAAiB;gBAC1B,UAAU,EAAE,CACV,gBAAkC,EAClC,MAA0B,EAC1B,QAA8B,EAC9B,KAAwB,EACP,EAAE,CAAC,CAAC,gBAAgB,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC;gBACjE,MAAM,EAAE;oBACN,qCAAgB;oBAChB,4CAAkB;oBAClB,gDAAoB;oBACpB,0CAAiB;iBAClB;aACF;YACD;gBACE,OAAO,EAAE,gBAAS;gBAClB,QAAQ,EAAE,6BAAY;aACvB;YACD;gBACE,OAAO,EAAE,gBAAS;gBAClB,QAAQ,EAAE,wBAAU;aACrB;SACF;QACD,OAAO,EAAE,CAAC,0BAAW,CAAC;KACvB,CAAC;GACW,UAAU,CAAG","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.module.ts"],"sourcesContent":["/**\r\n * AuthModule provides authentication and authorization features.\r\n *\r\n * @module Auth\r\n */\r\nimport { Module } from '@nestjs/common';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AuthController } from './auth.controller';\r\nimport { AuthService } from './auth.service';\r\nimport { JwtStrategy } from './jwt.strategy';\r\nimport { AuthToken } from './entities/auth-token.entity';\r\nimport { RefreshToken } from './entities/refresh-token.entity';\r\nimport { EmailModule } from 'src/email/email.module';\r\nimport { PasswordValidationService } from './password-validation.service';\r\nimport { APP_GUARD } from '@nestjs/core';\r\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\r\nimport { RolesGuard } from './guards/roles.guard';\r\n\r\nimport { JwtLocalStrategy } from './strategies/jwt-local.strategy';\r\nimport { IAuthStrategy } from './strategies/auth-strategy.interface';\r\nimport { GoogleOAuthAdapter } from './adapters/google.strategy.adapter';\r\nimport { FacebookOAuthAdapter } from './adapters/facebook.strategy.adapter';\r\nimport { AppleOAuthAdapter } from './adapters/apple.strategy.adapter';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@Module({\r\n  imports: [\r\n    EmailModule,\r\n    UsersModule, // This imports the UsersModule which exports UsersService\r\n    PassportModule,\r\n    TypeOrmModule.forFeature([AuthToken, RefreshToken]),\r\n    JwtModule.registerAsync({\r\n      imports: [ConfigModule],\r\n      inject: [ConfigService],\r\n      useFactory: async (configService: ConfigService) => ({\r\n        secret: configService.get<string>('JWT_SECRET'),\r\n        signOptions: {\r\n          expiresIn: '1h',\r\n        },\r\n      }),\r\n    }),\r\n    SharedModule,\r\n  ],\r\n  controllers: [AuthController],\r\n  providers: [\r\n    AuthService,\r\n    JwtStrategy,\r\n    PasswordValidationService,\r\n    JwtLocalStrategy,\r\n    GoogleOAuthAdapter,\r\n    FacebookOAuthAdapter,\r\n    AppleOAuthAdapter,\r\n    {\r\n      provide: 'AUTH_STRATEGY',\r\n      useExisting: JwtLocalStrategy, // Use the JwtLocalStrategy as the default auth strategy\r\n    },\r\n    {\r\n      provide: 'AUTH_STRATEGIES',\r\n      useFactory: (\r\n        jwtLocalStrategy: JwtLocalStrategy,\r\n        google: GoogleOAuthAdapter,\r\n        facebook: FacebookOAuthAdapter,\r\n        apple: AppleOAuthAdapter,\r\n      ): IAuthStrategy[] => [jwtLocalStrategy, google, facebook, apple],\r\n      inject: [\r\n        JwtLocalStrategy,\r\n        GoogleOAuthAdapter,\r\n        FacebookOAuthAdapter,\r\n        AppleOAuthAdapter,\r\n      ],\r\n    },\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: JwtAuthGuard,\r\n    },\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: RolesGuard,\r\n    },\r\n  ],\r\n  exports: [AuthService],\r\n})\r\nexport class AuthModule {}\r\n"],"version":3}