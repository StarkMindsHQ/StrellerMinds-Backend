{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup-verification.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup-verification.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport * as fs from 'fs/promises';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n@Injectable()\r\nexport class BackupVerificationService {\r\n  private readonly logger = new Logger(BackupVerificationService.name);\r\n  private readonly dbConfig: any;\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    this.dbConfig = {\r\n      host: this.configService.get<string>('database.host'),\r\n      port: this.configService.get<number>('database.port'),\r\n      username: this.configService.get<string>('database.user'),\r\n      password: this.configService.get<string>('database.password'),\r\n      database: this.configService.get<string>('database.name'),\r\n    };\r\n  }\r\n\r\n  async verifyDatabaseBackup(backupPath: string): Promise<boolean> {\r\n    try {\r\n      // Check if file exists and is not empty\r\n      const stats = await fs.stat(backupPath);\r\n      if (stats.size === 0) {\r\n        this.logger.error(`Backup file is empty: ${backupPath}`);\r\n        return false;\r\n      }\r\n\r\n      // Verify SQL syntax by doing a dry run\r\n      const testDbName = `${this.dbConfig.database}_backup_test`;\r\n      const env = { ...process.env, PGPASSWORD: this.dbConfig.password };\r\n\r\n      try {\r\n        // Create test database\r\n        await execAsync(\r\n          `createdb -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} ${testDbName}`,\r\n          { env },\r\n        );\r\n\r\n        // Try to restore backup to test database\r\n        await execAsync(\r\n          `psql -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${testDbName} -f \"${backupPath}\" --quiet`,\r\n          { env },\r\n        );\r\n\r\n        // Verify some basic tables exist\r\n        const { stdout } = await execAsync(\r\n          `psql -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${testDbName} -t -c \"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';\"`,\r\n          { env },\r\n        );\r\n\r\n        const tableCount = parseInt(stdout.trim());\r\n        if (tableCount === 0) {\r\n          this.logger.error('Backup verification failed: No tables found');\r\n          return false;\r\n        }\r\n\r\n        this.logger.log(\r\n          `Backup verification successful: ${tableCount} tables restored`,\r\n        );\r\n        return true;\r\n      } finally {\r\n        // Clean up test database\r\n        try {\r\n          await execAsync(\r\n            `dropdb -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} ${testDbName}`,\r\n            { env },\r\n          );\r\n        } catch (cleanupError) {\r\n          this.logger.warn(\r\n            `Failed to cleanup test database: ${cleanupError.message}`,\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Backup verification failed: ${error.message}`,\r\n        error.stack,\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async verifyApplicationDataBackup(backupPath: string): Promise<boolean> {\r\n    try {\r\n      // Check if tar.gz file is valid\r\n      await execAsync(`tar -tzf \"${backupPath}\" > /dev/null`);\r\n      this.logger.log(\r\n        `Application data backup verification successful: ${backupPath}`,\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Application data backup verification failed: ${error.message}`,\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"version":3}