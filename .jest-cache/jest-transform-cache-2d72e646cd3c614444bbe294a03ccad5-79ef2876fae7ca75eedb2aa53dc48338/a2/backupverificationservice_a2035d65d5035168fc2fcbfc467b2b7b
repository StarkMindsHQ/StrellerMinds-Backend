97cdfc4c9681fb034b42fc0635f5befc
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BackupVerificationService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupVerificationService = void 0;
/* eslint-disable prettier/prettier */
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const child_process_1 = require("child_process");
const util_1 = require("util");
const fs = __importStar(require("fs/promises"));
const execAsync = (0, util_1.promisify)(child_process_1.exec);
let BackupVerificationService = BackupVerificationService_1 = class BackupVerificationService {
    constructor(configService) {
        this.configService = configService;
        this.logger = new common_1.Logger(BackupVerificationService_1.name);
        this.dbConfig = {
            host: this.configService.get('database.host'),
            port: this.configService.get('database.port'),
            username: this.configService.get('database.user'),
            password: this.configService.get('database.password'),
            database: this.configService.get('database.name'),
        };
    }
    async verifyDatabaseBackup(backupPath) {
        try {
            // Check if file exists and is not empty
            const stats = await fs.stat(backupPath);
            if (stats.size === 0) {
                this.logger.error(`Backup file is empty: ${backupPath}`);
                return false;
            }
            // Verify SQL syntax by doing a dry run
            const testDbName = `${this.dbConfig.database}_backup_test`;
            const env = { ...process.env, PGPASSWORD: this.dbConfig.password };
            try {
                // Create test database
                await execAsync(`createdb -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} ${testDbName}`, { env });
                // Try to restore backup to test database
                await execAsync(`psql -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${testDbName} -f "${backupPath}" --quiet`, { env });
                // Verify some basic tables exist
                const { stdout } = await execAsync(`psql -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${testDbName} -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"`, { env });
                const tableCount = parseInt(stdout.trim());
                if (tableCount === 0) {
                    this.logger.error('Backup verification failed: No tables found');
                    return false;
                }
                this.logger.log(`Backup verification successful: ${tableCount} tables restored`);
                return true;
            }
            finally {
                // Clean up test database
                try {
                    await execAsync(`dropdb -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} ${testDbName}`, { env });
                }
                catch (cleanupError) {
                    this.logger.warn(`Failed to cleanup test database: ${cleanupError.message}`);
                }
            }
        }
        catch (error) {
            this.logger.error(`Backup verification failed: ${error.message}`, error.stack);
            return false;
        }
    }
    async verifyApplicationDataBackup(backupPath) {
        try {
            // Check if tar.gz file is valid
            await execAsync(`tar -tzf "${backupPath}" > /dev/null`);
            this.logger.log(`Application data backup verification successful: ${backupPath}`);
            return true;
        }
        catch (error) {
            this.logger.error(`Application data backup verification failed: ${error.message}`);
            return false;
        }
    }
};
exports.BackupVerificationService = BackupVerificationService;
exports.BackupVerificationService = BackupVerificationService = BackupVerificationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], BackupVerificationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,