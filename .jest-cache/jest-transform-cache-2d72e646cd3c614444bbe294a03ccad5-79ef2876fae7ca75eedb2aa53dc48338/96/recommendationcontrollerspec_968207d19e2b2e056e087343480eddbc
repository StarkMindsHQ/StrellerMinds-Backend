d44deedd9a15eccc60f70c966a6a83cc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const recommendation_controller_1 = require("../controllers/recommendation.controller");
const recommendation_engine_service_1 = require("../services/recommendation-engine.service");
const recommendation_analytics_service_1 = require("../services/recommendation-analytics.service");
const recommendation_entity_1 = require("../entities/recommendation.entity");
describe('RecommendationController', () => {
    let controller;
    let recommendationService;
    let analyticsService;
    const mockUser = {
        id: 'user-1',
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
    };
    const mockRecommendation = {
        id: 'rec-1',
        userId: 'user-1',
        courseId: 'course-1',
        recommendationType: recommendation_entity_1.RecommendationType.CONTENT_BASED,
        reason: recommendation_entity_1.RecommendationReason.SKILL_BASED,
        confidenceScore: 0.85,
        relevanceScore: 0.80,
        priority: 4,
        explanation: 'Recommended based on your skills',
        status: recommendation_entity_1.RecommendationStatus.ACTIVE,
        metadata: { algorithmUsed: 'content_similarity' },
        course: {
            id: 'course-1',
            title: 'Advanced React',
            description: 'Learn advanced React concepts',
            difficulty: 'intermediate',
            duration: 120,
            rating: 4.5,
        },
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [recommendation_controller_1.RecommendationController],
            providers: [
                {
                    provide: recommendation_engine_service_1.RecommendationEngineService,
                    useValue: {
                        generateRecommendations: jest.fn(),
                        getRecommendations: jest.fn(),
                        recordInteraction: jest.fn(),
                        provideFeedback: jest.fn(),
                    },
                },
                {
                    provide: recommendation_analytics_service_1.RecommendationAnalyticsService,
                    useValue: {
                        getUserAnalytics: jest.fn(),
                    },
                },
            ],
        }).compile();
        controller = module.get(recommendation_controller_1.RecommendationController);
        recommendationService = module.get(recommendation_engine_service_1.RecommendationEngineService);
        analyticsService = module.get(recommendation_analytics_service_1.RecommendationAnalyticsService);
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('getRecommendations', () => {
        it('should return recommendations with pagination', async () => {
            // Arrange
            const query = {
                limit: 10,
                offset: 0,
                sortBy: 'createdAt',
                sortOrder: 'DESC',
            };
            const serviceResult = {
                recommendations: [mockRecommendation],
                total: 1,
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);
            // Act
            const result = await controller.getRecommendations(mockUser, query);
            // Assert
            expect(result).toBeDefined();
            expect(result.recommendations).toHaveLength(1);
            expect(result.total).toBe(1);
            expect(result.pagination.page).toBe(1);
            expect(result.pagination.totalPages).toBe(1);
            expect(recommendationService.getRecommendations).toHaveBeenCalledWith(mockUser.id, query);
        });
        it('should handle service errors gracefully', async () => {
            // Arrange
            const query = {
                limit: 10,
                offset: 0,
                sortBy: 'createdAt',
                sortOrder: 'DESC',
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockRejectedValue(new Error('Service error'));
            // Act & Assert
            await expect(controller.getRecommendations(mockUser, query)).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('generateRecommendations', () => {
        it('should generate new recommendations successfully', async () => {
            // Arrange
            const request = {
                limit: 5,
                minConfidence: 0.1,
                sessionId: 'session-1',
                deviceType: 'desktop',
            };
            jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([mockRecommendation]);
            // Act
            const result = await controller.generateRecommendations(mockUser, request);
            // Assert
            expect(result).toBeDefined();
            expect(result.recommendations).toHaveLength(1);
            expect(result.generationTime).toBeDefined();
            expect(recommendationService.generateRecommendations).toHaveBeenCalledWith({
                userId: mockUser.id,
                type: request.type,
                limit: 5,
                minConfidence: 0.1,
                context: {
                    userId: mockUser.id,
                    sessionId: 'session-1',
                    deviceType: 'desktop',
                    context: request.context,
                },
                excludeCourseIds: request.excludeCourseIds,
                includeReasons: request.includeReasons,
            });
        });
        it('should use default values when not provided', async () => {
            // Arrange
            const request = {};
            jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([]);
            // Act
            await controller.generateRecommendations(mockUser, request);
            // Assert
            expect(recommendationService.generateRecommendations).toHaveBeenCalledWith(expect.objectContaining({
                limit: 10,
                minConfidence: 0.1,
            }));
        });
    });
    describe('getRecommendation', () => {
        it('should return specific recommendation and record view', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            const serviceResult = {
                recommendations: [mockRecommendation],
                total: 1,
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);
            jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();
            // Act
            const result = await controller.getRecommendation(mockUser, recommendationId);
            // Assert
            expect(result).toBeDefined();
            expect(result.id).toBe(recommendationId);
            expect(recommendationService.recordInteraction).toHaveBeenCalledWith(recommendationId, 'view');
        });
        it('should throw 404 when recommendation not found', async () => {
            // Arrange
            const recommendationId = 'nonexistent-rec';
            const serviceResult = {
                recommendations: [],
                total: 0,
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);
            // Act & Assert
            await expect(controller.getRecommendation(mockUser, recommendationId)).rejects.toThrow(new common_1.HttpException('Recommendation not found', common_1.HttpStatus.NOT_FOUND));
        });
    });
    describe('recordInteraction', () => {
        it('should record interaction successfully', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            const body = {
                interactionType: 'click',
                metadata: { source: 'homepage' },
            };
            jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();
            // Act
            const result = await controller.recordInteraction(mockUser, recommendationId, body);
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Interaction recorded successfully',
            });
            expect(recommendationService.recordInteraction).toHaveBeenCalledWith(recommendationId, 'click', body.metadata);
        });
        it('should handle service errors', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            const body = { interactionType: 'click' };
            jest.spyOn(recommendationService, 'recordInteraction').mockRejectedValue(new Error('Service error'));
            // Act & Assert
            await expect(controller.recordInteraction(mockUser, recommendationId, body)).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('provideFeedback', () => {
        it('should record feedback successfully', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            const feedback = {
                score: 4,
                feedbackType: 'explicit',
                comment: 'Great recommendation!',
            };
            jest.spyOn(recommendationService, 'provideFeedback').mockResolvedValue();
            // Act
            const result = await controller.provideFeedback(mockUser, recommendationId, feedback);
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Feedback recorded successfully',
            });
            expect(recommendationService.provideFeedback).toHaveBeenCalledWith(recommendationId, feedback.score, feedback.feedbackType, feedback.comment);
        });
    });
    describe('dismissRecommendation', () => {
        it('should dismiss recommendation successfully', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            jest.spyOn(recommendationService, 'recordInteraction').mockResolvedValue();
            // Act
            const result = await controller.dismissRecommendation(mockUser, recommendationId);
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Recommendation dismissed successfully',
            });
            expect(recommendationService.recordInteraction).toHaveBeenCalledWith(recommendationId, 'dismiss');
        });
    });
    describe('getAnalyticsSummary', () => {
        it('should return user analytics summary', async () => {
            // Arrange
            const days = 30;
            const analyticsData = {
                totalRecommendationsReceived: 50,
                totalInteractions: 25,
                averageFeedbackScore: 4.2,
                topRecommendationReasons: ['SKILL_BASED', 'SIMILAR_CONTENT'],
                engagementTrend: [
                    { date: '2023-01-01', interactions: 5 },
                    { date: '2023-01-02', interactions: 3 },
                ],
            };
            jest.spyOn(analyticsService, 'getUserAnalytics').mockResolvedValue(analyticsData);
            // Act
            const result = await controller.getAnalyticsSummary(mockUser, days);
            // Assert
            expect(result).toEqual(analyticsData);
            expect(analyticsService.getUserAnalytics).toHaveBeenCalledWith(mockUser.id, days);
        });
        it('should use default days when not provided', async () => {
            // Arrange
            const analyticsData = {
                totalRecommendationsReceived: 0,
                totalInteractions: 0,
                averageFeedbackScore: 0,
                topRecommendationReasons: [],
                engagementTrend: [],
            };
            jest.spyOn(analyticsService, 'getUserAnalytics').mockResolvedValue(analyticsData);
            // Act
            await controller.getAnalyticsSummary(mockUser);
            // Assert
            expect(analyticsService.getUserAnalytics).toHaveBeenCalledWith(mockUser.id, 30);
        });
    });
    describe('getSimilarCourseRecommendations', () => {
        it('should return similar course recommendations', async () => {
            // Arrange
            const courseId = 'course-1';
            const limit = 5;
            jest.spyOn(recommendationService, 'generateRecommendations').mockResolvedValue([mockRecommendation]);
            // Act
            const result = await controller.getSimilarCourseRecommendations(mockUser, courseId, limit);
            // Assert
            expect(result).toBeDefined();
            expect(result.recommendations).toHaveLength(1);
            expect(result.baseCourse.id).toBe(courseId);
            expect(recommendationService.generateRecommendations).toHaveBeenCalledWith({
                userId: mockUser.id,
                limit,
                minConfidence: 0.3,
                context: {
                    userId: mockUser.id,
                    currentCourse: courseId,
                },
            });
        });
    });
    describe('provideBulkFeedback', () => {
        it('should process bulk feedback successfully', async () => {
            // Arrange
            const feedbackList = [
                {
                    recommendationId: 'rec-1',
                    feedback: { score: 4, feedbackType: 'explicit' },
                },
                {
                    recommendationId: 'rec-2',
                    feedback: { score: 5, feedbackType: 'explicit' },
                },
            ];
            jest.spyOn(recommendationService, 'provideFeedback').mockResolvedValue();
            // Act
            const result = await controller.provideBulkFeedback(mockUser, feedbackList);
            // Assert
            expect(result).toEqual({
                success: true,
                processed: 2,
                failed: 0,
            });
            expect(recommendationService.provideFeedback).toHaveBeenCalledTimes(2);
        });
        it('should handle partial failures in bulk feedback', async () => {
            // Arrange
            const feedbackList = [
                {
                    recommendationId: 'rec-1',
                    feedback: { score: 4, feedbackType: 'explicit' },
                },
                {
                    recommendationId: 'rec-2',
                    feedback: { score: 5, feedbackType: 'explicit' },
                },
            ];
            jest.spyOn(recommendationService, 'provideFeedback')
                .mockResolvedValueOnce()
                .mockRejectedValueOnce(new Error('Service error'));
            // Act
            const result = await controller.provideBulkFeedback(mockUser, feedbackList);
            // Assert
            expect(result).toEqual({
                success: false,
                processed: 1,
                failed: 1,
            });
        });
    });
    describe('getTrendingTopics', () => {
        it('should return trending topics and skills', async () => {
            // Act
            const result = await controller.getTrendingTopics();
            // Assert
            expect(result).toBeDefined();
            expect(result.trendingSkills).toBeDefined();
            expect(result.trendingTopics).toBeDefined();
            expect(Array.isArray(result.trendingSkills)).toBe(true);
            expect(Array.isArray(result.trendingTopics)).toBe(true);
        });
    });
    describe('mapToResponseDto', () => {
        it('should map recommendation entity to response DTO correctly', () => {
            // Act
            const result = controller.mapToResponseDto(mockRecommendation);
            // Assert
            expect(result).toBeDefined();
            expect(result.id).toBe(mockRecommendation.id);
            expect(result.courseId).toBe(mockRecommendation.courseId);
            expect(result.recommendationType).toBe(mockRecommendation.recommendationType);
            expect(result.course).toBeDefined();
            expect(result.course.id).toBe(mockRecommendation.course.id);
        });
        it('should handle recommendation without course', () => {
            // Arrange
            const recWithoutCourse = { ...mockRecommendation, course: null };
            // Act
            const result = controller.mapToResponseDto(recWithoutCourse);
            // Assert
            expect(result).toBeDefined();
            expect(result.course).toBeUndefined();
        });
    });
    describe('error handling', () => {
        it('should handle unexpected errors gracefully', async () => {
            // Arrange
            const query = {
                limit: 10,
                offset: 0,
                sortBy: 'createdAt',
                sortOrder: 'DESC',
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockRejectedValue(new Error('Unexpected error'));
            // Act & Assert
            await expect(controller.getRecommendations(mockUser, query)).rejects.toThrow(new common_1.HttpException('Failed to get recommendations', common_1.HttpStatus.INTERNAL_SERVER_ERROR));
        });
        it('should preserve HttpExceptions from service layer', async () => {
            // Arrange
            const recommendationId = 'rec-1';
            const serviceResult = {
                recommendations: [],
                total: 0,
            };
            jest.spyOn(recommendationService, 'getRecommendations').mockResolvedValue(serviceResult);
            // Act & Assert
            await expect(controller.getRecommendation(mockUser, recommendationId)).rejects.toThrow(common_1.HttpException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,