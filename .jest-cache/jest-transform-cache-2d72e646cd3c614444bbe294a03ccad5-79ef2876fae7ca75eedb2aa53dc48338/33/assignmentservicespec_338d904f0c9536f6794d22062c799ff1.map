{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\assignment\\assignment.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,6DAAyD;AAIzD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,OAA0B,CAAC;IAE/B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE,CAAC,sCAAiB,CAAC;SAC/B,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAChF,MAAM,mBAAmB,GAAwB;gBAC/C,KAAK,EAAE,cAAc;gBACrB,YAAY,EAAE,mBAAmB;gBACjC,OAAO,EAAE,YAAY;aACtB,CAAC;YACF,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,YAAY,GAAG,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,YAAY,aAAa,CAAC,CAAC;QACxG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,YAAY,GAAG,CAAC,CAAC;YACvB,MAAM,mBAAmB,GAAwB;gBAC/C,KAAK,EAAE,sBAAsB;gBAC7B,YAAY,EAAE,2BAA2B;gBACzC,OAAO,EAAE,YAAY;aACtB,CAAC;YACF,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,YAAY,aAAa,CAAC,CAAC;QAC5H,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,YAAY,GAAG,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,YAAY,aAAa,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\assignment\\assignment.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AssignmentService } from './assignment.service';\r\nimport { CreateAssignmentDto } from './dto/create-assignment.dto';\r\nimport { UpdateAssignmentDto } from './dto/update-assignment.dto';\r\n\r\ndescribe('AssignmentService', () => {\r\n  let service: AssignmentService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [AssignmentService],\r\n    }).compile();\r\n\r\n    service = module.get<AssignmentService>(AssignmentService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should return a success message when a new assignment is created', async () => {\r\n      const createAssignmentDto: CreateAssignmentDto = {\r\n        title: 'Assignment 1',\r\n        instructions: 'Complete the task',\r\n        dueDate: '2025-12-01',\r\n      };\r\n      expect(await service.create(createAssignmentDto)).toBe('This action adds a new assignment');\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return all assignments', async () => {\r\n      expect(await service.findAll()).toBe('This action returns all assignment');\r\n    });\r\n  });\r\n\r\n  describe('findOne', () => {\r\n    it('should return a specific assignment by ID', async () => {\r\n      const assignmentId = 1;\r\n      expect(await service.findOne(assignmentId)).toBe(`This action returns a #${assignmentId} assignment`);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should return an updated assignment message', async () => {\r\n      const assignmentId = 1;\r\n      const updateAssignmentDto: UpdateAssignmentDto = {\r\n        title: 'Updated Assignment 1',\r\n        instructions: 'Complete the updated task',\r\n        dueDate: '2025-12-05',\r\n      };\r\n      expect(await service.update(assignmentId, updateAssignmentDto)).toBe(`This action updates a #${assignmentId} assignment`);\r\n    });\r\n  });\r\n\r\n  describe('remove', () => {\r\n    it('should return a success message when an assignment is removed', async () => {\r\n      const assignmentId = 1;\r\n      expect(await service.remove(assignmentId)).toBe(`This action removes a #${assignmentId} assignment`);\r\n    });\r\n  });\r\n});\r\n"],"version":3}