17563ed23ddccd82f857caeb4a5845cd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const translation_service_1 = require("../services/translation.service");
const tms_service_1 = require("../services/tms.service");
const translation_entity_1 = require("../entities/translation.entity");
describe("TranslationService", () => {
    let service;
    let repository;
    let tmsService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                translation_service_1.TranslationService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(translation_entity_1.Translation),
                    useValue: {
                        findOne: globals_1.jest.fn(),
                        find: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        delete: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                        createQueryBuilder: globals_1.jest.fn(),
                    },
                },
                {
                    provide: tms_service_1.TmsService,
                    useValue: {
                        getTranslations: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(translation_service_1.TranslationService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(translation_entity_1.Translation));
        tmsService = module.get(tms_service_1.TmsService);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("createTranslation", () => {
        it("should create a new translation", async () => {
            const dto = {
                key: "hello",
                locale: "en",
                namespace: "common",
                value: "Hello World",
            };
            repository.findOne.mockResolvedValue(null);
            repository.create.mockReturnValue(dto);
            repository.save.mockResolvedValue({ id: "1", ...dto });
            const result = await service.createTranslation(dto);
            expect(result).toEqual({ id: "1", ...dto });
            expect(repository.create).toHaveBeenCalledWith({
                ...dto,
                status: translation_entity_1.TranslationStatus.DRAFT,
                source: "manual",
                version: 1,
            });
        });
        it("should throw error if translation already exists", async () => {
            const dto = {
                key: "hello",
                locale: "en",
                namespace: "common",
                value: "Hello World",
            };
            repository.findOne.mockResolvedValue({ id: "1" });
            await expect(service.createTranslation(dto)).rejects.toThrow("Translation already exists for key: hello, locale: en");
        });
    });
    describe("updateTranslation", () => {
        it("should update translation and increment version", async () => {
            const existingTranslation = {
                id: "1",
                key: "hello",
                locale: "en",
                namespace: "common",
                value: "Hello",
                version: 1,
            };
            const updateDto = {
                value: "Hello World",
                status: translation_entity_1.TranslationStatus.APPROVED,
            };
            repository.findOne.mockResolvedValue(existingTranslation);
            repository.save.mockResolvedValue({
                ...existingTranslation,
                ...updateDto,
                version: 2,
                translatedAt: expect.any(Date),
            });
            const result = await service.updateTranslation("1", updateDto);
            expect(result.version).toBe(2);
            expect(result.value).toBe("Hello World");
            expect(repository.save).toHaveBeenCalled();
        });
    });
    describe("getTranslationStats", () => {
        it("should return translation statistics", async () => {
            const mockTranslations = [
                { status: translation_entity_1.TranslationStatus.PUBLISHED, namespace: "common" },
                { status: translation_entity_1.TranslationStatus.DRAFT, namespace: "common" },
                { status: translation_entity_1.TranslationStatus.PUBLISHED, namespace: "auth" },
            ];
            const mockQueryBuilder = {
                where: globals_1.jest.fn().mockReturnThis(),
                getMany: globals_1.jest.fn().mockResolvedValue(mockTranslations),
            };
            repository.createQueryBuilder.mockReturnValue(mockQueryBuilder);
            const result = await service.getTranslationStats("en");
            expect(result).toEqual({
                total: 3,
                byStatus: {
                    draft: 1,
                    pending_review: 0,
                    approved: 0,
                    published: 2,
                    deprecated: 0,
                },
                byNamespace: {
                    common: 2,
                    auth: 1,
                },
                completionPercentage: 67,
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,