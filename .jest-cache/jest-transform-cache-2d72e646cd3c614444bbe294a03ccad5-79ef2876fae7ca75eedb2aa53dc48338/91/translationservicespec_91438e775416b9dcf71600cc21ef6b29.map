{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\translation.service.spec.ts","mappings":";;AAGA,2CAAoC;AAHpC,6CAA0D;AAC1D,6CAAoD;AAIpD,yEAAoE;AACpE,yDAAoD;AACpD,uEAA+E;AAE/E,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,OAA2B,CAAA;IAC/B,IAAI,UAAgD,CAAA;IACpD,IAAI,UAAmC,CAAA;IAEvC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,wCAAkB;gBAClB;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,gCAAW,CAAC;oBACxC,QAAQ,EAAE;wBACR,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;wBAClB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;wBACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;wBACf,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;wBACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;wBACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;wBACjB,kBAAkB,EAAE,cAAI,CAAC,EAAE,EAAE;qBAC9B;iBACF;gBACD;oBACE,OAAO,EAAE,wBAAU;oBACnB,QAAQ,EAAE;wBACR,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE;qBAC3B;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,OAAO,GAAG,MAAM,CAAC,GAAG,CAAqB,wCAAkB,CAAC,CAAA;QAC5D,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,gCAAW,CAAC,CAAC,CAAA;QACxD,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,CAAA;IACrC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;IAC/B,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,GAAG,GAAG;gBACV,GAAG,EAAE,OAAO;gBACZ,MAAM,EAAE,IAAI;gBACZ,SAAS,EAAE,QAAQ;gBACnB,KAAK,EAAE,aAAa;aACrB,CAAA;YAED,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAC1C,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,GAAU,CAAC,CAAA;YAC7C,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAS,CAAC,CAAA;YAE7D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAA;YAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAA;YAC3C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,GAAG,GAAG;gBACN,MAAM,EAAE,sCAAiB,CAAC,KAAK;gBAC/B,MAAM,EAAE,QAAQ;gBAChB,OAAO,EAAE,CAAC;aACX,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,GAAG,GAAG;gBACV,GAAG,EAAE,OAAO;gBACZ,MAAM,EAAE,IAAI;gBACZ,SAAS,EAAE,QAAQ;gBACnB,KAAK,EAAE,aAAa;aACrB,CAAA;YAED,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAS,CAAC,CAAA;YAExD,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC1D,uDAAuD,CACxD,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,mBAAmB,GAAG;gBAC1B,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,OAAO;gBACZ,MAAM,EAAE,IAAI;gBACZ,SAAS,EAAE,QAAQ;gBACnB,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,CAAC;aACI,CAAA;YAEhB,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,aAAa;gBACpB,MAAM,EAAE,sCAAiB,CAAC,QAAQ;aACnC,CAAA;YAED,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAA;YACzD,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAChC,GAAG,mBAAmB;gBACtB,GAAG,SAAS;gBACZ,OAAO,EAAE,CAAC;gBACV,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aACxB,CAAC,CAAA;YAET,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAA;YAE9D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;YACxC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC5C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,gBAAgB,GAAG;gBACvB,EAAE,MAAM,EAAE,sCAAiB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE;gBAC5D,EAAE,MAAM,EAAE,sCAAiB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;gBACxD,EAAE,MAAM,EAAE,sCAAiB,CAAC,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE;aAC1C,CAAA;YAElB,MAAM,gBAAgB,GAAG;gBACvB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;aACvD,CAAA;YAED,UAAU,CAAC,kBAAkB,CAAC,eAAe,CAAC,gBAAuB,CAAC,CAAA;YAEtE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;YAEtD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE;oBACR,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE,CAAC;oBACjB,QAAQ,EAAE,CAAC;oBACX,SAAS,EAAE,CAAC;oBACZ,UAAU,EAAE,CAAC;iBACd;gBACD,WAAW,EAAE;oBACX,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,CAAC;iBACR;gBACD,oBAAoB,EAAE,EAAE;aACzB,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\translation.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { TranslationService } from \"../services/translation.service\"\r\nimport { TmsService } from \"../services/tms.service\"\r\nimport { Translation, TranslationStatus } from \"../entities/translation.entity\"\r\n\r\ndescribe(\"TranslationService\", () => {\r\n  let service: TranslationService\r\n  let repository: jest.Mocked<Repository<Translation>>\r\n  let tmsService: jest.Mocked<TmsService>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        TranslationService,\r\n        {\r\n          provide: getRepositoryToken(Translation),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            find: jest.fn(),\r\n            save: jest.fn(),\r\n            create: jest.fn(),\r\n            delete: jest.fn(),\r\n            update: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: TmsService,\r\n          useValue: {\r\n            getTranslations: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<TranslationService>(TranslationService)\r\n    repository = module.get(getRepositoryToken(Translation))\r\n    tmsService = module.get(TmsService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"createTranslation\", () => {\r\n    it(\"should create a new translation\", async () => {\r\n      const dto = {\r\n        key: \"hello\",\r\n        locale: \"en\",\r\n        namespace: \"common\",\r\n        value: \"Hello World\",\r\n      }\r\n\r\n      repository.findOne.mockResolvedValue(null)\r\n      repository.create.mockReturnValue(dto as any)\r\n      repository.save.mockResolvedValue({ id: \"1\", ...dto } as any)\r\n\r\n      const result = await service.createTranslation(dto)\r\n\r\n      expect(result).toEqual({ id: \"1\", ...dto })\r\n      expect(repository.create).toHaveBeenCalledWith({\r\n        ...dto,\r\n        status: TranslationStatus.DRAFT,\r\n        source: \"manual\",\r\n        version: 1,\r\n      })\r\n    })\r\n\r\n    it(\"should throw error if translation already exists\", async () => {\r\n      const dto = {\r\n        key: \"hello\",\r\n        locale: \"en\",\r\n        namespace: \"common\",\r\n        value: \"Hello World\",\r\n      }\r\n\r\n      repository.findOne.mockResolvedValue({ id: \"1\" } as any)\r\n\r\n      await expect(service.createTranslation(dto)).rejects.toThrow(\r\n        \"Translation already exists for key: hello, locale: en\",\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"updateTranslation\", () => {\r\n    it(\"should update translation and increment version\", async () => {\r\n      const existingTranslation = {\r\n        id: \"1\",\r\n        key: \"hello\",\r\n        locale: \"en\",\r\n        namespace: \"common\",\r\n        value: \"Hello\",\r\n        version: 1,\r\n      } as Translation\r\n\r\n      const updateDto = {\r\n        value: \"Hello World\",\r\n        status: TranslationStatus.APPROVED,\r\n      }\r\n\r\n      repository.findOne.mockResolvedValue(existingTranslation)\r\n      repository.save.mockResolvedValue({\r\n        ...existingTranslation,\r\n        ...updateDto,\r\n        version: 2,\r\n        translatedAt: expect.any(Date),\r\n      } as any)\r\n\r\n      const result = await service.updateTranslation(\"1\", updateDto)\r\n\r\n      expect(result.version).toBe(2)\r\n      expect(result.value).toBe(\"Hello World\")\r\n      expect(repository.save).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe(\"getTranslationStats\", () => {\r\n    it(\"should return translation statistics\", async () => {\r\n      const mockTranslations = [\r\n        { status: TranslationStatus.PUBLISHED, namespace: \"common\" },\r\n        { status: TranslationStatus.DRAFT, namespace: \"common\" },\r\n        { status: TranslationStatus.PUBLISHED, namespace: \"auth\" },\r\n      ] as Translation[]\r\n\r\n      const mockQueryBuilder = {\r\n        where: jest.fn().mockReturnThis(),\r\n        getMany: jest.fn().mockResolvedValue(mockTranslations),\r\n      }\r\n\r\n      repository.createQueryBuilder.mockReturnValue(mockQueryBuilder as any)\r\n\r\n      const result = await service.getTranslationStats(\"en\")\r\n\r\n      expect(result).toEqual({\r\n        total: 3,\r\n        byStatus: {\r\n          draft: 1,\r\n          pending_review: 0,\r\n          approved: 0,\r\n          published: 2,\r\n          deprecated: 0,\r\n        },\r\n        byNamespace: {\r\n          common: 2,\r\n          auth: 1,\r\n        },\r\n        completionPercentage: 67,\r\n      })\r\n    })\r\n  })\r\n})\r\n"],"version":3}