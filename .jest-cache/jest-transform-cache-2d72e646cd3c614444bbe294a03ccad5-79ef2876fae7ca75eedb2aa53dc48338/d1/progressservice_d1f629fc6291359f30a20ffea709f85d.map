{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\progress.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\progress.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, In } from 'typeorm';\r\nimport { UserProgress } from '../entities/user-progress.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { Lesson } from '../../lesson/entity/lesson.entity';\r\nimport { CourseModule } from '../../courses/entities/course-module.entity';\r\nimport { User } from '../entities/user.entity';\r\n\r\n@Injectable()\r\nexport class ProgressService {\r\n  constructor(\r\n    @InjectRepository(UserProgress)\r\n    private readonly progressRepository: Repository<UserProgress>,\r\n    @InjectRepository(Course)\r\n    private readonly courseRepository: Repository<Course>,\r\n    @InjectRepository(Lesson)\r\n    private readonly lessonRepository: Repository<Lesson>,\r\n    @InjectRepository(CourseModule)\r\n    private readonly moduleRepository: Repository<CourseModule>,\r\n  ) {}\r\n\r\n  async updateLessonProgress(\r\n    userId: string,\r\n    courseId: string,\r\n    lessonId: string,\r\n    progressPercentage: number,\r\n    metadata?: any,\r\n  ): Promise<UserProgress> {\r\n    // Validate lesson belongs to course\r\n    const lesson = await this.lessonRepository.findOne({\r\n      where: { id: lessonId },\r\n      relations: ['module'],\r\n    });\r\n\r\n    if (!lesson) {\r\n      throw new NotFoundException('Lesson not found');\r\n    }\r\n\r\n    if (lesson.module.courseId !== courseId) {\r\n      throw new BadRequestException('Lesson does not belong to the specified course');\r\n    }\r\n\r\n    let progress = await this.progressRepository.findOne({\r\n      where: {\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n        lesson: { id: lessonId },\r\n      },\r\n    });\r\n\r\n    if (!progress) {\r\n      progress = this.progressRepository.create({\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n        lesson: { id: lessonId },\r\n        module: { id: lesson.module.id },\r\n      });\r\n    }\r\n\r\n    progress.progressPercentage = progressPercentage;\r\n    progress.isCompleted = progressPercentage >= 100;\r\n    progress.metadata = metadata;\r\n    progress.lastAccessedAt = new Date();\r\n    \r\n    if (progress.isCompleted && !progress.completedAt) {\r\n      progress.completedAt = new Date();\r\n    }\r\n\r\n    // Update module progress\r\n    await this.updateModuleProgress(userId, courseId, lesson.module.id);\r\n\r\n    return await this.progressRepository.save(progress);\r\n  }\r\n\r\n  private async updateModuleProgress(\r\n    userId: string,\r\n    courseId: string,\r\n    moduleId: string,\r\n  ): Promise<void> {\r\n    const module = await this.moduleRepository.findOne({\r\n      where: { id: moduleId },\r\n      relations: ['lessons'],\r\n    });\r\n\r\n    const progress = await this.progressRepository.find({\r\n      where: {\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n        module: { id: moduleId },\r\n      },\r\n    });\r\n\r\n    const totalLessons = module.lessons.length;\r\n    const completedLessons = progress.filter(p => p.isCompleted).length;\r\n    const moduleProgress = (completedLessons / totalLessons) * 100;\r\n\r\n    // Create or update module-level progress\r\n    let moduleProgressRecord = await this.progressRepository.findOne({\r\n      where: {\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n        module: { id: moduleId },\r\n        lesson: null,\r\n      },\r\n    });\r\n\r\n    if (!moduleProgressRecord) {\r\n      moduleProgressRecord = this.progressRepository.create({\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n        module: { id: moduleId },\r\n      });\r\n    }\r\n\r\n    moduleProgressRecord.progressPercentage = moduleProgress;\r\n    moduleProgressRecord.isCompleted = moduleProgress >= 100;\r\n    moduleProgressRecord.lastAccessedAt = new Date();\r\n\r\n    if (moduleProgressRecord.isCompleted && !moduleProgressRecord.completedAt) {\r\n      moduleProgressRecord.completedAt = new Date();\r\n    }\r\n\r\n    await this.progressRepository.save(moduleProgressRecord);\r\n  }\r\n\r\n  async getCourseProgress(userId: string, courseId: string): Promise<{\r\n    overallProgress: number;\r\n    completedLessons: number;\r\n    totalLessons: number;\r\n    moduleProgress: Array<{\r\n      moduleId: string;\r\n      title: string;\r\n      progress: number;\r\n      completedLessons: number;\r\n      totalLessons: number;\r\n      lastAccessedAt: Date;\r\n    }>;\r\n  }> {\r\n    const course = await this.courseRepository.findOne({\r\n      where: { id: courseId },\r\n      relations: ['modules', 'modules.lessons'],\r\n    });\r\n\r\n    if (!course) {\r\n      throw new NotFoundException('Course not found');\r\n    }\r\n\r\n    const progress = await this.progressRepository.find({\r\n      where: {\r\n        user: { id: userId },\r\n        course: { id: courseId },\r\n      },\r\n      relations: ['lesson', 'module'],\r\n      order: { lastAccessedAt: 'DESC' },\r\n    });\r\n\r\n    const modules = await course.modules;\r\n    const moduleProgress = await Promise.all(\r\n      modules.map(async (module) => {\r\n        const moduleLessons = await this.lessonRepository.find({\r\n          where: { module: { id: module.id } },\r\n        });\r\n\r\n        const completedLessons = progress.filter(\r\n          (p) =>\r\n            p.isCompleted &&\r\n            moduleLessons.some((l) => l.id === p.lesson?.id),\r\n        ).length;\r\n\r\n        const moduleProgressRecord = progress.find(\r\n          (p) => p.module?.id === module.id && !p.lesson,\r\n        );\r\n\r\n        return {\r\n          moduleId: module.id,\r\n          title: module.title,\r\n          progress: moduleProgressRecord?.progressPercentage || 0,\r\n          completedLessons,\r\n          totalLessons: moduleLessons.length,\r\n          lastAccessedAt: moduleProgressRecord?.lastAccessedAt || new Date(),\r\n        };\r\n      }),\r\n    );\r\n\r\n    const totalLessons = moduleProgress.reduce(\r\n      (sum, module) => sum + module.totalLessons,\r\n      0,\r\n    );\r\n    const completedLessons = moduleProgress.reduce(\r\n      (sum, module) => sum + module.completedLessons,\r\n      0,\r\n    );\r\n\r\n    return {\r\n      overallProgress: (completedLessons / totalLessons) * 100,\r\n      completedLessons,\r\n      totalLessons,\r\n      moduleProgress,\r\n    };\r\n  }\r\n\r\n  async getUserProgress(userId: string): Promise<Array<{\r\n    courseId: string;\r\n    courseTitle: string;\r\n    progress: number;\r\n    lastAccessed: Date;\r\n    completedModules: number;\r\n    totalModules: number;\r\n  }>> {\r\n    const progress = await this.progressRepository.find({\r\n      where: { user: { id: userId } },\r\n      relations: ['course', 'module'],\r\n      order: { lastAccessedAt: 'DESC' },\r\n    });\r\n\r\n    const courseProgressMap = new Map<string, {\r\n      courseTitle: string;\r\n      progress: number;\r\n      lastAccessed: Date;\r\n      completedModules: number;\r\n      totalModules: number;\r\n    }>();\r\n\r\n    // Preload all courses with their modules\r\n    const courseIds = Array.from(new Set(progress.map(p => p.course?.id).filter(Boolean)));\r\n\r\n    const coursesWithModules = await this.courseRepository.find({\r\n      where: { id: In(courseIds) },\r\n      relations: ['modules'],\r\n    });\r\n    const courseModulesMap = new Map<string, number>();\r\n    for (const course of coursesWithModules) {\r\n      const modules = await course.modules;\r\n      courseModulesMap.set(course.id, modules ? modules.length : 0);\r\n    }\r\n\r\n    progress.forEach((p) => {\r\n      if (!p.course) return;\r\n\r\n      const existing = courseProgressMap.get(p.course.id);\r\n      if (!existing || p.lastAccessedAt > existing.lastAccessed) {\r\n        const moduleProgress = progress.filter(\r\n          (mp) =>\r\n            mp.course?.id === p.course.id &&\r\n            mp.module &&\r\n            !mp.lesson &&\r\n            mp.isCompleted,\r\n        );\r\n\r\n        courseProgressMap.set(p.course.id, {\r\n          courseTitle: p.course.title,\r\n          progress: p.progressPercentage,\r\n          lastAccessed: p.lastAccessedAt,\r\n          completedModules: moduleProgress.length,\r\n          totalModules: courseModulesMap.get(p.course.id) || 0,\r\n        });\r\n      }\r\n    });\r\n\r\n    return Array.from(courseProgressMap.entries()).map(([courseId, data]) => ({\r\n      courseId,\r\n      ...data,\r\n    }));\r\n  }\r\n\r\n  async syncProgress(userId: string, courseId: string): Promise<void> {\r\n    const course = await this.courseRepository.findOne({\r\n      where: { id: courseId },\r\n      relations: ['modules', 'modules.lessons'],\r\n    });\r\n\r\n    if (!course) {\r\n      throw new NotFoundException('Course not found');\r\n    }\r\n\r\n    // Sync module progress\r\n    const modules = await course.modules;\r\n    for (const module of modules) {\r\n      await this.updateModuleProgress(userId, courseId, module.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Learning Analytics: Get strengths, weaknesses, and trends for a user in a course\r\n   */\r\n  async getLearningAnalytics(userId: string, courseId: string) {\r\n    const progress = await this.progressRepository.find({\r\n      where: { user: { id: userId }, course: { id: courseId } },\r\n      relations: ['lesson'],\r\n    });\r\n    const completed = progress.filter(p => p.isCompleted);\r\n    const avgScore = completed.length\r\n      ? completed.reduce((sum, p) => sum + (p.metadata?.score || 0), 0) / completed.length\r\n      : 0;\r\n    const strengths = completed\r\n      .filter(p => (p.metadata?.score || 0) >= 80)\r\n      .map(p => p.lesson?.title || p.lesson?.id);\r\n    const weaknesses = completed\r\n      .filter(p => (p.metadata?.score || 0) < 50)\r\n      .map(p => p.lesson?.title || p.lesson?.id);\r\n    return {\r\n      totalLessons: progress.length,\r\n      completedLessons: completed.length,\r\n      avgScore,\r\n      strengths,\r\n      weaknesses,\r\n      progressOverTime: progress.map(p => ({\r\n        lesson: p.lesson?.title || p.lesson?.id,\r\n        completedAt: p.completedAt,\r\n        score: p.metadata?.score || null,\r\n      })),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adaptive Learning Path: Recommend next lessons based on performance\r\n   */\r\n  async getAdaptiveNextLessons(userId: string, courseId: string) {\r\n    const course = await this.courseRepository.findOne({\r\n      where: { id: courseId },\r\n      relations: ['modules', 'modules.lessons'],\r\n    });\r\n    if (!course) throw new NotFoundException('Course not found');\r\n    const modules = await course.modules;\r\n    const allLessons = modules.flatMap(m => m.lessons);\r\n    const progress = await this.progressRepository.find({\r\n      where: { user: { id: userId }, course: { id: courseId } },\r\n      relations: ['lesson'],\r\n    });\r\n    const completedLessonIds = new Set(progress.filter(p => p.isCompleted).map(p => p.lesson?.id));\r\n    // Recommend next uncompleted lessons, prioritizing those after weak lessons\r\n    const weakLessons = progress.filter(p => (p.metadata?.score || 0) < 50).map(p => p.lesson?.id);\r\n    const nextLessons = allLessons.filter(l => !completedLessonIds.has(l.id));\r\n    // Prioritize lessons in the same module as weak lessons\r\n    const prioritized = nextLessons.sort((a, b) => {\r\n      if (weakLessons.includes(a.id)) return -1;\r\n      if (weakLessons.includes(b.id)) return 1;\r\n      return 0;\r\n    });\r\n    return prioritized.slice(0, 3).map(l => ({ id: l.id, title: l.title }));\r\n  }\r\n\r\n  /**\r\n   * Progress Visualization: Get progress data for charting\r\n   */\r\n  async getProgressVisualization(userId: string, courseId: string) {\r\n    const progress = await this.progressRepository.find({\r\n      where: { user: { id: userId }, course: { id: courseId } },\r\n      order: { completedAt: 'ASC' },\r\n    });\r\n    return progress.map(p => ({\r\n      lessonId: p.lesson?.id,\r\n      completedAt: p.completedAt,\r\n      progress: p.progressPercentage,\r\n      score: p.metadata?.score || null,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Learning Outcome Metrics: Mastery, improvement, engagement\r\n   */\r\n  async getLearningOutcomeMetrics(userId: string, courseId: string) {\r\n    const progress = await this.progressRepository.find({\r\n      where: { user: { id: userId }, course: { id: courseId } },\r\n    });\r\n    const completed = progress.filter(p => p.isCompleted);\r\n    const mastery = completed.filter(p => (p.metadata?.score || 0) >= 80).length / (progress.length || 1);\r\n    const improvement = completed.length > 1\r\n      ? (completed[completed.length - 1].metadata?.score || 0) - (completed[0].metadata?.score || 0)\r\n      : 0;\r\n    const engagement = progress.length;\r\n    return { mastery, improvement, engagement };\r\n  }\r\n}"],"version":3}