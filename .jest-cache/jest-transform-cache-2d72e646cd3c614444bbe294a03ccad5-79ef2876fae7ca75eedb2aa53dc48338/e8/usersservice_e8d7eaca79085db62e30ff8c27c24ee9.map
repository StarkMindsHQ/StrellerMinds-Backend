{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, FindOptionsWhere } from 'typeorm';\r\nimport { User } from '../entities/user.entity';\r\nimport { CreateUsersDto } from '../dtos/create.users.dto';\r\nimport { updateUsersDto } from '../dtos/update.users.dto';\r\nimport { BaseService, PaginationOptions, PaginatedResult } from '../../common/services/base.service';\r\nimport { IUserService } from '../../common/interfaces/service.interface';\r\nimport { SharedUtilityService } from '../../common/services/shared-utility.service';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n@Injectable()\r\nexport class UsersService extends BaseService<User> implements IUserService<User> {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    private readonly sharedUtilityService: SharedUtilityService,\r\n  ) {\r\n    super(userRepository);\r\n  }\r\n\r\n  /**\r\n   * Create a new user\r\n   */\r\n  public async create(createUsersDto: CreateUsersDto): Promise<User> {\r\n    try {\r\n      // Validate email format\r\n      if (!this.sharedUtilityService.isValidEmail(createUsersDto.email)) {\r\n        throw new ConflictException('Invalid email format');\r\n      }\r\n\r\n      // Check if user already exists\r\n      const existingUser = await this.userRepository.findOne({\r\n        where: { email: createUsersDto.email },\r\n        select: ['id', 'email'],\r\n      });\r\n\r\n      if (existingUser) {\r\n        throw new ConflictException('Email already exists');\r\n      }\r\n\r\n      // Validate password strength\r\n      const passwordValidation = this.sharedUtilityService.validatePasswordStrength(createUsersDto.password);\r\n      if (!passwordValidation.isValid) {\r\n        throw new ConflictException(`Password validation failed: ${passwordValidation.errors.join(', ')}`);\r\n      }\r\n\r\n      // Hash password\r\n      const hashedPassword = await bcrypt.hash(createUsersDto.password, 10);\r\n\r\n      // Sanitize input data\r\n      const sanitizedData = {\r\n        ...createUsersDto,\r\n        password: hashedPassword,\r\n        firstName: this.sharedUtilityService.sanitizeInput(createUsersDto.firstName),\r\n        lastName: this.sharedUtilityService.sanitizeInput(createUsersDto.lastName),\r\n        bio: createUsersDto.bio ? this.sharedUtilityService.sanitizeInput(createUsersDto.bio) : undefined,\r\n      };\r\n\r\n      return await this.createEntity(sanitizedData);\r\n    } catch (error) {\r\n      if (error instanceof ConflictException) throw error;\r\n      return this.handleError(error, 'creating user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all users with pagination and filtering\r\n   */\r\n  public async findAll(\r\n    options: PaginationOptions = { page: 1, limit: 10 },\r\n    where?: FindOptionsWhere<User>,\r\n  ): Promise<PaginatedResult<User>> {\r\n    try {\r\n      return await this.findEntitiesWithPagination({\r\n        page: options.page,\r\n        limit: options.limit,\r\n        where,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n        order: { createdAt: 'DESC' },\r\n      });\r\n    } catch (error) {\r\n      return this.handleError(error, 'fetching users');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find user by ID with optional relations\r\n   */\r\n  public async findOne(id: string, relations: string[] = []): Promise<User> {\r\n    try {\r\n      return await this.findEntityById(id, relations);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'fetching user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user by ID\r\n   */\r\n  public async update(\r\n    id: string,\r\n    updateUserDto: updateUsersDto,\r\n  ): Promise<User> {\r\n    try {\r\n      // Sanitize input data\r\n      const sanitizedData = this.sharedUtilityService.removeEmptyValues({\r\n        ...updateUserDto,\r\n        firstName: updateUserDto.firstName ? this.sharedUtilityService.sanitizeInput(updateUserDto.firstName) : undefined,\r\n        lastName: updateUserDto.lastName ? this.sharedUtilityService.sanitizeInput(updateUserDto.lastName) : undefined,\r\n        bio: updateUserDto.bio ? this.sharedUtilityService.sanitizeInput(updateUserDto.bio) : undefined,\r\n      });\r\n\r\n      return await this.updateEntity(id, sanitizedData);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'updating user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete user by ID (soft delete)\r\n   */\r\n  public async delete(id: string): Promise<void> {\r\n    try {\r\n      await this.deleteEntity(id);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'deleting user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user's refresh token\r\n   */\r\n  async updateRefreshToken(userId: string, refreshToken: string | null): Promise<void> {\r\n    try {\r\n      await this.userRepository.update(userId, { refreshToken });\r\n    } catch (error) {\r\n      return this.handleError(error, 'updating refresh token');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find user by email\r\n   */\r\n  async findByEmail(email: string): Promise<User | undefined> {\r\n    try {\r\n      if (!this.sharedUtilityService.isValidEmail(email)) {\r\n        return undefined;\r\n      }\r\n\r\n      return await this.userRepository.findOne({\r\n        where: { email },\r\n        select: ['id', 'email', 'password', 'role', 'status'],\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Error finding user by email ${email}: ${error.message}`);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find user by ID\r\n   */\r\n  async findById(id: string): Promise<User | undefined> {\r\n    try {\r\n      return await this.userRepository.findOne({\r\n        where: { id },\r\n        select: ['id', 'email', 'role', 'status'],\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Error finding user by ID ${id}: ${error.message}`);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user password\r\n   */\r\n  async updatePassword(userId: string, hashedPassword: string): Promise<void> {\r\n    try {\r\n      await this.userRepository.update(userId, { password: hashedPassword });\r\n    } catch (error) {\r\n      return this.handleError(error, 'updating password');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate user credentials\r\n   */\r\n  async validateCredentials(email: string, password: string): Promise<boolean> {\r\n    try {\r\n      const user = await this.findByEmail(email);\r\n      if (!user || !user.password) {\r\n        return false;\r\n      }\r\n\r\n      return await bcrypt.compare(password, user.password);\r\n    } catch (error) {\r\n      this.logger.error(`Error validating credentials for ${email}: ${error.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find users by criteria\r\n   */\r\n  async findByCriteria(criteria: Record<string, any>): Promise<User[]> {\r\n    try {\r\n      // Sanitize criteria\r\n      const sanitizedCriteria = Object.entries(criteria).reduce((acc, [key, value]) => {\r\n        if (typeof value === 'string') {\r\n          acc[key] = this.sharedUtilityService.sanitizeInput(value);\r\n        } else {\r\n          acc[key] = value;\r\n        }\r\n        return acc;\r\n      }, {} as Record<string, any>);\r\n\r\n      return await this.userRepository.find({\r\n        where: sanitizedCriteria as FindOptionsWhere<User>,\r\n        select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Error finding users by criteria: ${error.message}`);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n"],"version":3}