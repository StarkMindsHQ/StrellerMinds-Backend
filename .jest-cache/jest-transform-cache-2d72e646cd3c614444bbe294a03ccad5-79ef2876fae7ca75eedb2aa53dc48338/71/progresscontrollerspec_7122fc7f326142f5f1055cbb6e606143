6446a7a65debdc3868e127f25d477716
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const progress_controller_1 = require("./progress.controller");
const progress_service_1 = require("../services/progress.service");
const common_1 = require("@nestjs/common");
describe('ProgressController', () => {
    let controller;
    let service;
    const mockProgressService = {
        updateLessonProgress: jest.fn(),
        getCourseProgress: jest.fn(),
        getUserProgress: jest.fn(),
        syncProgress: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [progress_controller_1.ProgressController],
            providers: [
                {
                    provide: progress_service_1.ProgressService,
                    useValue: mockProgressService,
                },
            ],
        }).compile();
        controller = module.get(progress_controller_1.ProgressController);
        service = module.get(progress_service_1.ProgressService);
    });
    describe('updateLessonProgress', () => {
        const mockRequest = {
            user: { id: 'user1' },
        };
        const mockUpdateProgressDto = {
            progressPercentage: 50,
            metadata: { timeSpent: 1200 },
        };
        it('should update lesson progress successfully', async () => {
            const expectedResult = {
                id: '1',
                progressPercentage: 50,
                isCompleted: false,
            };
            mockProgressService.updateLessonProgress.mockResolvedValue(expectedResult);
            const result = await controller.updateLessonProgress(mockRequest, 'course1', 'lesson1', mockUpdateProgressDto);
            expect(result).toEqual(expectedResult);
            expect(service.updateLessonProgress).toHaveBeenCalledWith('user1', 'course1', 'lesson1', 50, { timeSpent: 1200 });
        });
        it('should handle errors appropriately', async () => {
            mockProgressService.updateLessonProgress.mockRejectedValue(new Error('Database error'));
            await expect(controller.updateLessonProgress(mockRequest, 'course1', 'lesson1', mockUpdateProgressDto)).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('getCourseProgress', () => {
        const mockRequest = {
            user: { id: 'user1' },
        };
        it('should return course progress successfully', async () => {
            const expectedResult = {
                overallProgress: 50,
                completedLessons: 1,
                totalLessons: 2,
                moduleProgress: [],
            };
            mockProgressService.getCourseProgress.mockResolvedValue(expectedResult);
            const result = await controller.getCourseProgress(mockRequest, 'course1');
            expect(result).toEqual(expectedResult);
            expect(service.getCourseProgress).toHaveBeenCalledWith('user1', 'course1');
        });
        it('should handle errors appropriately', async () => {
            mockProgressService.getCourseProgress.mockRejectedValue(new Error('Database error'));
            await expect(controller.getCourseProgress(mockRequest, 'course1')).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('getUserProgress', () => {
        const mockRequest = {
            user: { id: 'user1' },
        };
        it('should return user progress successfully', async () => {
            const expectedResult = [
                {
                    courseId: 'course1',
                    courseTitle: 'Course 1',
                    progress: 50,
                    lastAccessed: new Date(),
                },
            ];
            mockProgressService.getUserProgress.mockResolvedValue(expectedResult);
            const result = await controller.getUserProgress(mockRequest);
            expect(result).toEqual(expectedResult);
            expect(service.getUserProgress).toHaveBeenCalledWith('user1');
        });
        it('should handle errors appropriately', async () => {
            mockProgressService.getUserProgress.mockRejectedValue(new Error('Database error'));
            await expect(controller.getUserProgress(mockRequest)).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('syncProgress', () => {
        const mockRequest = {
            user: { id: 'user1' },
        };
        it('should sync progress successfully', async () => {
            mockProgressService.syncProgress.mockResolvedValue(undefined);
            const result = await controller.syncProgress(mockRequest, 'course1');
            expect(result).toEqual({ message: 'Progress synchronized successfully' });
            expect(service.syncProgress).toHaveBeenCalledWith('user1', 'course1');
        });
        it('should handle errors appropriately', async () => {
            mockProgressService.syncProgress.mockRejectedValue(new Error('Database error'));
            await expect(controller.syncProgress(mockRequest, 'course1')).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('getCourseProgressAdmin', () => {
        it('should return admin course progress successfully', async () => {
            const expectedResult = {
                overallProgress: 50,
                completedLessons: 1,
                totalLessons: 2,
                moduleProgress: [],
            };
            mockProgressService.getCourseProgress.mockResolvedValue(expectedResult);
            const result = await controller.getCourseProgressAdmin('course1');
            expect(result).toEqual(expectedResult);
            expect(service.getCourseProgress).toHaveBeenCalledWith('course1');
        });
        it('should handle errors appropriately', async () => {
            mockProgressService.getCourseProgress.mockRejectedValue(new Error('Database error'));
            await expect(controller.getCourseProgressAdmin('course1')).rejects.toThrow(common_1.HttpException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,