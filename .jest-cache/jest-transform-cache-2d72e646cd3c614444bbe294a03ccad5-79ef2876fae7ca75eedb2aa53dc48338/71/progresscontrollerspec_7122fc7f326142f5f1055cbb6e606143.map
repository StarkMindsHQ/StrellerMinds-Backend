{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\controllers\\progress.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\controllers\\progress.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ProgressController } from './progress.controller';\r\nimport { ProgressService } from '../services/progress.service';\r\nimport { HttpException, HttpStatus } from '@nestjs/common';\r\n\r\ndescribe('ProgressController', () => {\r\n  let controller: ProgressController;\r\n  let service: ProgressService;\r\n\r\n  const mockProgressService = {\r\n    updateLessonProgress: jest.fn(),\r\n    getCourseProgress: jest.fn(),\r\n    getUserProgress: jest.fn(),\r\n    syncProgress: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [ProgressController],\r\n      providers: [\r\n        {\r\n          provide: ProgressService,\r\n          useValue: mockProgressService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<ProgressController>(ProgressController);\r\n    service = module.get<ProgressService>(ProgressService);\r\n  });\r\n\r\n  describe('updateLessonProgress', () => {\r\n    const mockRequest = {\r\n      user: { id: 'user1' },\r\n    };\r\n\r\n    const mockUpdateProgressDto = {\r\n      progressPercentage: 50,\r\n      metadata: { timeSpent: 1200 },\r\n    };\r\n\r\n    it('should update lesson progress successfully', async () => {\r\n      const expectedResult = {\r\n        id: '1',\r\n        progressPercentage: 50,\r\n        isCompleted: false,\r\n      };\r\n\r\n      mockProgressService.updateLessonProgress.mockResolvedValue(expectedResult);\r\n\r\n      const result = await controller.updateLessonProgress(\r\n        mockRequest,\r\n        'course1',\r\n        'lesson1',\r\n        mockUpdateProgressDto,\r\n      );\r\n\r\n      expect(result).toEqual(expectedResult);\r\n      expect(service.updateLessonProgress).toHaveBeenCalledWith(\r\n        'user1',\r\n        'course1',\r\n        'lesson1',\r\n        50,\r\n        { timeSpent: 1200 },\r\n      );\r\n    });\r\n\r\n    it('should handle errors appropriately', async () => {\r\n      mockProgressService.updateLessonProgress.mockRejectedValue(\r\n        new Error('Database error'),\r\n      );\r\n\r\n      await expect(\r\n        controller.updateLessonProgress(\r\n          mockRequest,\r\n          'course1',\r\n          'lesson1',\r\n          mockUpdateProgressDto,\r\n        ),\r\n      ).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('getCourseProgress', () => {\r\n    const mockRequest = {\r\n      user: { id: 'user1' },\r\n    };\r\n\r\n    it('should return course progress successfully', async () => {\r\n      const expectedResult = {\r\n        overallProgress: 50,\r\n        completedLessons: 1,\r\n        totalLessons: 2,\r\n        moduleProgress: [],\r\n      };\r\n\r\n      mockProgressService.getCourseProgress.mockResolvedValue(expectedResult);\r\n\r\n      const result = await controller.getCourseProgress(mockRequest, 'course1');\r\n\r\n      expect(result).toEqual(expectedResult);\r\n      expect(service.getCourseProgress).toHaveBeenCalledWith('user1', 'course1');\r\n    });\r\n\r\n    it('should handle errors appropriately', async () => {\r\n      mockProgressService.getCourseProgress.mockRejectedValue(\r\n        new Error('Database error'),\r\n      );\r\n\r\n      await expect(\r\n        controller.getCourseProgress(mockRequest, 'course1'),\r\n      ).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('getUserProgress', () => {\r\n    const mockRequest = {\r\n      user: { id: 'user1' },\r\n    };\r\n\r\n    it('should return user progress successfully', async () => {\r\n      const expectedResult = [\r\n        {\r\n          courseId: 'course1',\r\n          courseTitle: 'Course 1',\r\n          progress: 50,\r\n          lastAccessed: new Date(),\r\n        },\r\n      ];\r\n\r\n      mockProgressService.getUserProgress.mockResolvedValue(expectedResult);\r\n\r\n      const result = await controller.getUserProgress(mockRequest);\r\n\r\n      expect(result).toEqual(expectedResult);\r\n      expect(service.getUserProgress).toHaveBeenCalledWith('user1');\r\n    });\r\n\r\n    it('should handle errors appropriately', async () => {\r\n      mockProgressService.getUserProgress.mockRejectedValue(\r\n        new Error('Database error'),\r\n      );\r\n\r\n      await expect(controller.getUserProgress(mockRequest)).rejects.toThrow(\r\n        HttpException,\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('syncProgress', () => {\r\n    const mockRequest = {\r\n      user: { id: 'user1' },\r\n    };\r\n\r\n    it('should sync progress successfully', async () => {\r\n      mockProgressService.syncProgress.mockResolvedValue(undefined);\r\n\r\n      const result = await controller.syncProgress(mockRequest, 'course1');\r\n\r\n      expect(result).toEqual({ message: 'Progress synchronized successfully' });\r\n      expect(service.syncProgress).toHaveBeenCalledWith('user1', 'course1');\r\n    });\r\n\r\n    it('should handle errors appropriately', async () => {\r\n      mockProgressService.syncProgress.mockRejectedValue(\r\n        new Error('Database error'),\r\n      );\r\n\r\n      await expect(\r\n        controller.syncProgress(mockRequest, 'course1'),\r\n      ).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('getCourseProgressAdmin', () => {\r\n    it('should return admin course progress successfully', async () => {\r\n      const expectedResult = {\r\n        overallProgress: 50,\r\n        completedLessons: 1,\r\n        totalLessons: 2,\r\n        moduleProgress: [],\r\n      };\r\n\r\n      mockProgressService.getCourseProgress.mockResolvedValue(expectedResult);\r\n\r\n      const result = await controller.getCourseProgressAdmin('course1');\r\n\r\n      expect(result).toEqual(expectedResult);\r\n      expect(service.getCourseProgress).toHaveBeenCalledWith('course1');\r\n    });\r\n\r\n    it('should handle errors appropriately', async () => {\r\n      mockProgressService.getCourseProgress.mockRejectedValue(\r\n        new Error('Database error'),\r\n      );\r\n\r\n      await expect(\r\n        controller.getCourseProgressAdmin('course1'),\r\n      ).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n}); "],"version":3}