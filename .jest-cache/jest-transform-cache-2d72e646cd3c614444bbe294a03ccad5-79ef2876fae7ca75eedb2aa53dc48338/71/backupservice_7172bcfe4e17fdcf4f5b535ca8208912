03f638e11335b00c90c8ffdb213227b9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BackupService_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupService = void 0;
/* eslint-disable prettier/prettier */
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const schedule_1 = require("@nestjs/schedule");
const child_process_1 = require("child_process");
const util_1 = require("util");
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const backup_verification_service_1 = require("./backup-verification.service");
const backup_retention_service_1 = require("./backup-retention.service");
const email_service_1 = require("../email/email.service");
const execAsync = (0, util_1.promisify)(child_process_1.exec);
/**
 * BackupService provides logic for creating, listing, and verifying backups.
 */
let BackupService = BackupService_1 = class BackupService {
    constructor(configService, verificationService, retentionService, emailService) {
        this.configService = configService;
        this.verificationService = verificationService;
        this.retentionService = retentionService;
        this.emailService = emailService;
        this.logger = new common_1.Logger(BackupService_1.name);
        this.backupDir = this.configService.get('BACKUP_DIR', './backups');
        this.dbConfig = {
            host: this.configService.get('database.host'),
            port: this.configService.get('database.port'),
            username: this.configService.get('database.user'),
            password: this.configService.get('database.password'),
            database: this.configService.get('database.name'),
        };
        this.ensureBackupDirectory();
    }
    async ensureBackupDirectory() {
        try {
            await fs.access(this.backupDir);
        }
        catch {
            await fs.mkdir(this.backupDir, { recursive: true });
            this.logger.log(`Created backup directory: ${this.backupDir}`);
        }
    }
    async scheduledDatabaseBackup() {
        this.logger.log('Starting scheduled database backup');
        try {
            const result = await this.createDatabaseBackup();
            if (result.success) {
                this.logger.log(`Scheduled backup completed successfully: ${result.backupPath}`);
                await this.retentionService.cleanupOldBackups();
            }
            else {
                this.logger.error(`Scheduled backup failed: ${result.error}`);
                await this.sendBackupFailureAlert(result.error);
            }
        }
        catch (error) {
            this.logger.error(`Scheduled backup error: ${error.message}`, error.stack);
            await this.sendBackupFailureAlert(error.message);
        }
    }
    async scheduledApplicationDataBackup() {
        this.logger.log('Starting scheduled application data backup');
        try {
            const result = await this.createApplicationDataBackup();
            if (result.success) {
                this.logger.log(`Application data backup completed: ${result.backupPath}`);
            }
            else {
                this.logger.error(`Application data backup failed: ${result.error}`);
            }
        }
        catch (error) {
            this.logger.error(`Application data backup error: ${error.message}`, error.stack);
        }
    }
    /**
     * Create a manual database backup.
     */
    async createDatabaseBackup() {
        const startTime = Date.now();
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFileName = `db-backup-${timestamp}.sql`;
        const backupPath = path.join(this.backupDir, backupFileName);
        try {
            // Set PGPASSWORD environment variable for pg_dump
            const env = { ...process.env, PGPASSWORD: this.dbConfig.password };
            const command = `pg_dump -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${this.dbConfig.database} -f "${backupPath}" --verbose --no-password`;
            this.logger.log(`Executing backup command for database: ${this.dbConfig.database}`);
            await execAsync(command, { env });
            // Get backup file size
            const stats = await fs.stat(backupPath);
            const duration = Date.now() - startTime;
            this.logger.log(`Database backup created: ${backupPath} (${stats.size} bytes, ${duration}ms)`);
            // Verify backup
            const isValid = await this.verificationService.verifyDatabaseBackup(backupPath);
            if (!isValid) {
                await this.sendBackupFailureAlert('Backup verification failed');
                throw new Error('Backup verification failed');
            }
            return {
                success: true,
                backupPath,
                size: stats.size,
                duration,
            };
        }
        catch (error) {
            this.logger.error(`Database backup failed: ${error.message}`, error.stack);
            await this.sendBackupFailureAlert(error.message);
            return {
                success: false,
                error: error.message,
            };
        }
    }
    /**
     * Create a manual application data backup.
     */
    async createApplicationDataBackup() {
        const startTime = Date.now(); // Add missing startTime variable
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFileName = `app-data-backup-${timestamp}.tar.gz`;
        const backupPath = path.join(this.backupDir, backupFileName);
        try {
            // Use the variables in the tar command or remove them if not needed
            const uploadDir = this.configService.get('UPLOAD_DIR', './uploads');
            const logsDir = './logs';
            // Create tar.gz archive of application data using the variables
            const command = `tar -czf "${backupPath}" -C . "${uploadDir.replace('./', '')}", "${logsDir.replace('./', '')}", .env.production`;
            this.logger.log('Creating application data backup');
            await execAsync(command);
            const stats = await fs.stat(backupPath);
            const duration = Date.now() - startTime;
            this.logger.log(`Application data backup created: ${backupPath} (${stats.size} bytes, ${duration}ms)`);
            return {
                success: true,
                backupPath,
                size: stats.size,
                duration,
            };
        }
        catch (error) {
            this.logger.error(`Application data backup failed: ${error.message}`, error.stack);
            return {
                success: false,
                error: error.message,
            };
        }
    }
    /**
     * List all backup files.
     */
    async listBackups() {
        try {
            const files = await fs.readdir(this.backupDir);
            return files.filter((file) => file.endsWith('.sql') || file.endsWith('.tar.gz'));
        }
        catch (error) {
            this.logger.error(`Failed to list backups: ${error.message}`);
            return [];
        }
    }
    /**
     * Get information about a specific backup file.
     */
    async getBackupInfo(filename) {
        try {
            const backupPath = path.join(this.backupDir, filename);
            const stats = await fs.stat(backupPath);
            return {
                filename,
                size: stats.size,
                created: stats.birthtime,
                modified: stats.mtime,
            };
        }
        catch (error) {
            this.logger.error(`Failed to get backup info: ${error.message}`);
            return null;
        }
    }
    async sendBackupFailureAlert(error) {
        const adminEmail = this.configService.get('BACKUP_ADMIN_EMAIL');
        if (!adminEmail) {
            this.logger.warn('No BACKUP_ADMIN_EMAIL configured, cannot send alert.');
            return;
        }
        await this.emailService.sendImmediate({
            to: adminEmail,
            subject: 'Backup Failure Alert',
            templateName: 'backup-failure',
            context: {
                error,
                timestamp: new Date().toISOString(),
            },
        });
    }
};
exports.BackupService = BackupService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_2AM),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], BackupService.prototype, "scheduledDatabaseBackup", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_WEEK),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], BackupService.prototype, "scheduledApplicationDataBackup", null);
exports.BackupService = BackupService = BackupService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof backup_verification_service_1.BackupVerificationService !== "undefined" && backup_verification_service_1.BackupVerificationService) === "function" ? _b : Object, typeof (_c = typeof backup_retention_service_1.BackupRetentionService !== "undefined" && backup_retention_service_1.BackupRetentionService) === "function" ? _c : Object, typeof (_d = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _d : Object])
], BackupService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,