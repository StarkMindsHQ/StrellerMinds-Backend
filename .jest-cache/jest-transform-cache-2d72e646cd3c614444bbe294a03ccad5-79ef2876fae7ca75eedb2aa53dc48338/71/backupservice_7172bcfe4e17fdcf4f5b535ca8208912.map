{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\backup\\backup.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { Cron, CronExpression } from '@nestjs/schedule';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport { BackupVerificationService } from './backup-verification.service';\r\nimport { BackupRetentionService } from './backup-retention.service';\r\nimport { EmailService } from '../email/email.service';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport interface BackupResult {\r\n  success: boolean;\r\n  backupPath?: string;\r\n  size?: number;\r\n  duration?: number;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * BackupService provides logic for creating, listing, and verifying backups.\r\n */\r\n@Injectable()\r\nexport class BackupService {\r\n  private readonly logger = new Logger(BackupService.name);\r\n  private readonly backupDir: string;\r\n  private readonly dbConfig: any;\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private readonly verificationService: BackupVerificationService,\r\n    private readonly retentionService: BackupRetentionService,\r\n    private readonly emailService: EmailService,\r\n  ) {\r\n    this.backupDir = this.configService.get<string>('BACKUP_DIR', './backups');\r\n    this.dbConfig = {\r\n      host: this.configService.get<string>('database.host'),\r\n      port: this.configService.get<number>('database.port'),\r\n      username: this.configService.get<string>('database.user'),\r\n      password: this.configService.get<string>('database.password'),\r\n      database: this.configService.get<string>('database.name'),\r\n    };\r\n    this.ensureBackupDirectory();\r\n  }\r\n\r\n  private async ensureBackupDirectory(): Promise<void> {\r\n    try {\r\n      await fs.access(this.backupDir);\r\n    } catch {\r\n      await fs.mkdir(this.backupDir, { recursive: true });\r\n      this.logger.log(`Created backup directory: ${this.backupDir}`);\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_DAY_AT_2AM)\r\n  async scheduledDatabaseBackup(): Promise<void> {\r\n    this.logger.log('Starting scheduled database backup');\r\n    try {\r\n      const result = await this.createDatabaseBackup();\r\n      if (result.success) {\r\n        this.logger.log(\r\n          `Scheduled backup completed successfully: ${result.backupPath}`,\r\n        );\r\n        await this.retentionService.cleanupOldBackups();\r\n      } else {\r\n        this.logger.error(`Scheduled backup failed: ${result.error}`);\r\n        await this.sendBackupFailureAlert(result.error);\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Scheduled backup error: ${error.message}`,\r\n        error.stack,\r\n      );\r\n      await this.sendBackupFailureAlert(error.message);\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_WEEK)\r\n  async scheduledApplicationDataBackup(): Promise<void> {\r\n    this.logger.log('Starting scheduled application data backup');\r\n    try {\r\n      const result = await this.createApplicationDataBackup();\r\n      if (result.success) {\r\n        this.logger.log(\r\n          `Application data backup completed: ${result.backupPath}`,\r\n        );\r\n      } else {\r\n        this.logger.error(`Application data backup failed: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Application data backup error: ${error.message}`,\r\n        error.stack,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a manual database backup.\r\n   */\r\n  async createDatabaseBackup(): Promise<BackupResult> {\r\n    const startTime = Date.now();\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const backupFileName = `db-backup-${timestamp}.sql`;\r\n    const backupPath = path.join(this.backupDir, backupFileName);\r\n\r\n    try {\r\n      // Set PGPASSWORD environment variable for pg_dump\r\n      const env = { ...process.env, PGPASSWORD: this.dbConfig.password };\r\n\r\n      const command = `pg_dump -h ${this.dbConfig.host} -p ${this.dbConfig.port} -U ${this.dbConfig.username} -d ${this.dbConfig.database} -f \"${backupPath}\" --verbose --no-password`;\r\n\r\n      this.logger.log(\r\n        `Executing backup command for database: ${this.dbConfig.database}`,\r\n      );\r\n      await execAsync(command, { env });\r\n\r\n      // Get backup file size\r\n      const stats = await fs.stat(backupPath);\r\n      const duration = Date.now() - startTime;\r\n\r\n      this.logger.log(\r\n        `Database backup created: ${backupPath} (${stats.size} bytes, ${duration}ms)`,\r\n      );\r\n\r\n      // Verify backup\r\n      const isValid =\r\n        await this.verificationService.verifyDatabaseBackup(backupPath);\r\n      if (!isValid) {\r\n        await this.sendBackupFailureAlert('Backup verification failed');\r\n        throw new Error('Backup verification failed');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        backupPath,\r\n        size: stats.size,\r\n        duration,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Database backup failed: ${error.message}`,\r\n        error.stack,\r\n      );\r\n      await this.sendBackupFailureAlert(error.message);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a manual application data backup.\r\n   */\r\n  async createApplicationDataBackup(): Promise<BackupResult> {\r\n    const startTime = Date.now(); // Add missing startTime variable\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const backupFileName = `app-data-backup-${timestamp}.tar.gz`;\r\n    const backupPath = path.join(this.backupDir, backupFileName);\r\n\r\n    try {\r\n      // Use the variables in the tar command or remove them if not needed\r\n      const uploadDir = this.configService.get<string>(\r\n        'UPLOAD_DIR',\r\n        './uploads',\r\n      );\r\n      const logsDir = './logs';\r\n\r\n      // Create tar.gz archive of application data using the variables\r\n      const command = `tar -czf \"${backupPath}\" -C . \"${uploadDir.replace('./', '')}\", \"${logsDir.replace('./', '')}\", .env.production`;\r\n\r\n      this.logger.log('Creating application data backup');\r\n      await execAsync(command);\r\n\r\n      const stats = await fs.stat(backupPath);\r\n      const duration = Date.now() - startTime;\r\n\r\n      this.logger.log(\r\n        `Application data backup created: ${backupPath} (${stats.size} bytes, ${duration}ms)`,\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        backupPath,\r\n        size: stats.size,\r\n        duration,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Application data backup failed: ${error.message}`,\r\n        error.stack,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List all backup files.\r\n   */\r\n  async listBackups(): Promise<string[]> {\r\n    try {\r\n      const files = await fs.readdir(this.backupDir);\r\n      return files.filter(\r\n        (file) => file.endsWith('.sql') || file.endsWith('.tar.gz'),\r\n      );\r\n    } catch (error) {\r\n      this.logger.error(`Failed to list backups: ${error.message}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get information about a specific backup file.\r\n   */\r\n  async getBackupInfo(filename: string): Promise<any> {\r\n    try {\r\n      const backupPath = path.join(this.backupDir, filename);\r\n      const stats = await fs.stat(backupPath);\r\n      return {\r\n        filename,\r\n        size: stats.size,\r\n        created: stats.birthtime,\r\n        modified: stats.mtime,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`Failed to get backup info: ${error.message}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async sendBackupFailureAlert(error: string): Promise<void> {\r\n    const adminEmail = this.configService.get<string>('BACKUP_ADMIN_EMAIL');\r\n    if (!adminEmail) {\r\n      this.logger.warn('No BACKUP_ADMIN_EMAIL configured, cannot send alert.');\r\n      return;\r\n    }\r\n    await this.emailService.sendImmediate({\r\n      to: adminEmail,\r\n      subject: 'Backup Failure Alert',\r\n      templateName: 'backup-failure',\r\n      context: {\r\n        error,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"version":3}