{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.deletion.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\users.deletion.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Connection, Repository } from 'typeorm';\r\nimport { User } from '../entities/user.entity';\r\nimport { WalletInfo } from '../entities/wallet-info.entity';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { UserProgress } from '../entities/user-progress.entity';\r\nimport { UserDeletionService } from './users.deletion.service';\r\nimport { AuditLogService } from 'src/audit/services/audit.log.service';\r\nimport { AccountDeletionConfirmationService } from './account.deletion.confirmation.service';\r\nimport { AccountStatus } from '../enums/accountStatus.enum';\r\n\r\ndescribe('UserDeletionService', () => {\r\n  let service: UserDeletionService;\r\n  let userRepository: Repository<User>;\r\n  let walletInfoRepository: Repository<WalletInfo>;\r\n  let userProgressRepository: Repository<UserProgress>;\r\n  let auditLogService: AuditLogService;\r\n  let confirmationService: AccountDeletionConfirmationService;\r\n  let connection: Connection;\r\n\r\n  const mockQueryRunner = {\r\n    connect: jest.fn(),\r\n    startTransaction: jest.fn(),\r\n    commitTransaction: jest.fn(),\r\n    rollbackTransaction: jest.fn(),\r\n    release: jest.fn(),\r\n    manager: {\r\n      update: jest.fn(),\r\n      save: jest.fn(),\r\n      softDelete: jest.fn(),\r\n      delete: jest.fn(),\r\n    },\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UserDeletionService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            save: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(WalletInfo),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(UserProgress),\r\n          useValue: {\r\n            delete: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: AuditLogService,\r\n          useValue: {\r\n            createLog: jest.fn().mockResolvedValue({}),\r\n          },\r\n        },\r\n        {\r\n          provide: AccountDeletionConfirmationService,\r\n          useValue: {\r\n            startDeletionConfirmationWorkflow: jest\r\n              .fn()\r\n              .mockResolvedValue(undefined),\r\n            validateDeletionConfirmation: jest.fn().mockResolvedValue(true),\r\n          },\r\n        },\r\n        {\r\n          provide: ConfigService,\r\n          useValue: {\r\n            get: jest.fn().mockImplementation((key, defaultValue) => {\r\n              if (key === 'DATA_RETENTION_PERIOD') return 30;\r\n              return defaultValue;\r\n            }),\r\n          },\r\n        },\r\n        {\r\n          provide: Connection,\r\n          useValue: {\r\n            createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<UserDeletionService>(UserDeletionService);\r\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\r\n    walletInfoRepository = module.get<Repository<WalletInfo>>(\r\n      getRepositoryToken(WalletInfo),\r\n    );\r\n    userProgressRepository = module.get<Repository<UserProgress>>(\r\n      getRepositoryToken(UserProgress),\r\n    );\r\n    auditLogService = module.get<AuditLogService>(AuditLogService);\r\n    confirmationService = module.get<AccountDeletionConfirmationService>(\r\n      AccountDeletionConfirmationService,\r\n    );\r\n    connection = module.get<Connection>(Connection);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('deactivateAccount', () => {\r\n    it('should deactivate user account', async () => {\r\n      const mockUser = { id: 'user-id', email: 'test@example.com' };\r\n      jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser as any);\r\n\r\n      await service.deactivateAccount('user-id', 'requester-id');\r\n\r\n      expect(mockQueryRunner.connect).toHaveBeenCalled();\r\n      expect(mockQueryRunner.startTransaction).toHaveBeenCalled();\r\n      expect(mockQueryRunner.manager.save).toHaveBeenCalledWith({\r\n        ...mockUser,\r\n        status: AccountStatus.DEACTIVATED,\r\n        deactivatedAt: expect.any(Date),\r\n      });\r\n      expect(auditLogService.createLog).toHaveBeenCalledWith({\r\n        action: 'ACCOUNT_DEACTIVATION',\r\n        entityType: 'USER',\r\n        entityId: 'user-id',\r\n        performedBy: 'requester-id',\r\n        details: expect.any(Object),\r\n      });\r\n      expect(mockQueryRunner.commitTransaction).toHaveBeenCalled();\r\n      expect(mockQueryRunner.release).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException if user not found', async () => {\r\n      jest.spyOn(userRepository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(\r\n        service.deactivateAccount('non-existent-id', 'requester-id'),\r\n      ).rejects.toThrow(NotFoundException);\r\n    });\r\n\r\n    it('should rollback transaction on error', async () => {\r\n      const mockUser = { id: 'user-id', email: 'test@example.com' };\r\n      jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser as any);\r\n      jest\r\n        .spyOn(mockQueryRunner.manager, 'save')\r\n        .mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(\r\n        service.deactivateAccount('user-id', 'requester-id'),\r\n      ).rejects.toThrow('Database error');\r\n\r\n      expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();\r\n      expect(mockQueryRunner.release).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('requestAccountDeletion', () => {\r\n    it('should start deletion workflow', async () => {\r\n      const mockUser = {\r\n        id: 'user-id',\r\n        email: 'test@example.com',\r\n        role: 'STUDENT',\r\n      };\r\n      jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser as any);\r\n\r\n      await service.requestAccountDeletion('user-id', 'user-id');\r\n\r\n      expect(userRepository.save).toHaveBeenCalledWith({\r\n        ...mockUser,\r\n        status: AccountStatus.PENDING_DELETION,\r\n        deletionRequestedAt: expect.any(Date),\r\n      });\r\n      expect(\r\n        confirmationService.startDeletionConfirmationWorkflow,\r\n      ).toHaveBeenCalledWith('user-id');\r\n      expect(auditLogService.createLog).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw error if user tries to delete another user without admin rights', async () => {\r\n      const mockUser = {\r\n        id: 'user-id',\r\n        email: 'test@example.com',\r\n        role: 'STUDENT',\r\n      };\r\n      const mockRequester = {\r\n        id: 'requester-id',\r\n        email: 'requester@example.com',\r\n        role: 'STUDENT',\r\n      };\r\n\r\n      jest\r\n        .spyOn(userRepository, 'findOne')\r\n        .mockResolvedValueOnce(mockUser as any)\r\n        .mockResolvedValueOnce(mockRequester as any);\r\n\r\n      await expect(\r\n        service.requestAccountDeletion('user-id', 'requester-id'),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('confirmAccountDeletion', () => {\r\n    it('should confirm and perform deletion with valid token', async () => {\r\n      jest\r\n        .spyOn(confirmationService, 'validateDeletionConfirmation')\r\n        .mockResolvedValue(true);\r\n      jest\r\n        .spyOn(service as any, 'performAccountDeletion')\r\n        .mockResolvedValue(undefined);\r\n\r\n      await service.confirmAccountDeletion('user-id', 'valid-token');\r\n\r\n      expect(\r\n        confirmationService.validateDeletionConfirmation,\r\n      ).toHaveBeenCalledWith('user-id', 'valid-token');\r\n      expect((service as any).performAccountDeletion).toHaveBeenCalledWith(\r\n        'user-id',\r\n        'user-id',\r\n      );\r\n    });\r\n\r\n    it('should throw error with invalid token', async () => {\r\n      jest\r\n        .spyOn(confirmationService, 'validateDeletionConfirmation')\r\n        .mockResolvedValue(false);\r\n\r\n      await expect(\r\n        service.confirmAccountDeletion('user-id', 'invalid-token'),\r\n      ).rejects.toThrow(BadRequestException);\r\n\r\n      expect((service as any).performAccountDeletion).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('performAccountDeletion', () => {\r\n    it('should perform full deletion process', async () => {\r\n      const mockUser = { id: 'user-id', email: 'test@example.com' };\r\n      const mockWallet = { id: 'wallet-id', walletAddress: '0x123' };\r\n\r\n      jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser as any);\r\n      jest\r\n        .spyOn(walletInfoRepository, 'findOne')\r\n        .mockResolvedValue(mockWallet as any);\r\n      jest\r\n        .spyOn(service as any, 'scheduleDataPurge')\r\n        .mockImplementation(() => {});\r\n\r\n      await service.performAccountDeletion('user-id', 'requester-id');\r\n\r\n      expect(mockQueryRunner.manager.update).toHaveBeenCalledWith(\r\n        User,\r\n        'user-id',\r\n        expect.objectContaining({\r\n          firstName: '[REDACTED]',\r\n          lastName: '[REDACTED]',\r\n        }),\r\n      );\r\n\r\n      expect(mockQueryRunner.manager.update).toHaveBeenCalledWith(\r\n        WalletInfo,\r\n        'wallet-id',\r\n        expect.objectContaining({\r\n          orphaned: true,\r\n          orphanedAt: expect.any(Date),\r\n        }),\r\n      );\r\n\r\n      expect(mockQueryRunner.manager.softDelete).toHaveBeenCalledWith(\r\n        UserProgress,\r\n        { user: { id: 'user-id' } },\r\n      );\r\n      expect(mockQueryRunner.manager.save).toHaveBeenCalled();\r\n      expect(auditLogService.createLog).toHaveBeenCalled();\r\n      expect((service as any).scheduleDataPurge).toHaveBeenCalledWith(\r\n        'user-id',\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"version":3}