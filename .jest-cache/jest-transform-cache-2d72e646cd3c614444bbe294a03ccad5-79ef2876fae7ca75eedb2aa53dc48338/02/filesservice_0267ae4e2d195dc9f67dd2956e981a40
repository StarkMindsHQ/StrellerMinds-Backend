c46ee0e60d290e434822fba48a8d6d47
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesService = void 0;
/**
 * FilesService provides logic for file management (upload, download, etc.).
 */
const common_1 = require("@nestjs/common");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const fluent_ffmpeg_1 = __importDefault(require("fluent-ffmpeg"));
const cloudinary_service_1 = require("../cloudinary/cloudinary.service");
const redis_service_1 = require("../shared/services/redis.service");
let FilesService = class FilesService {
    constructor(cloudinaryService, redisService) {
        this.cloudinaryService = cloudinaryService;
        this.redisService = redisService;
        this.tempDir = path.join(process.cwd(), 'uploads', 'tmp');
        if (!fs.existsSync(this.tempDir)) {
            fs.mkdirSync(this.tempDir, { recursive: true });
        }
    }
    async saveChunk(uploadId, chunkIndex, file) {
        const chunkDir = path.join(this.tempDir, uploadId);
        if (!fs.existsSync(chunkDir)) {
            fs.mkdirSync(chunkDir, { recursive: true });
        }
        const chunkPath = path.join(chunkDir, `${chunkIndex}`);
        await fs.promises.writeFile(chunkPath, file.buffer);
    }
    /**
     * Assembles file chunks, compresses if video, uploads to Cloudinary, and returns the CDN URL.
     * @returns The Cloudinary CDN URL for the uploaded file
     */
    async assembleChunks(uploadId, fileName, totalChunks) {
        const chunkDir = path.join(this.tempDir, uploadId);
        const finalPath = path.join(process.cwd(), 'uploads', fileName);
        const writeStream = fs.createWriteStream(finalPath);
        for (let i = 0; i < totalChunks; i++) {
            const chunkPath = path.join(chunkDir, `${i}`);
            const data = await fs.promises.readFile(chunkPath);
            writeStream.write(data);
        }
        writeStream.end();
        // Wait for the write stream to finish
        await new Promise((resolve) => writeStream.on('finish', () => resolve()));
        // Cleanup chunks
        const files = await fs.promises.readdir(chunkDir);
        for (const file of files) {
            await fs.promises.unlink(path.join(chunkDir, file));
        }
        await fs.promises.rmdir(chunkDir);
        // Calculate file hash for deduplication
        const fileBuffer = await fs.promises.readFile(finalPath);
        const hash = crypto.createHash('sha256').update(fileBuffer).digest('hex');
        const redisKey = `filehash:${hash}`;
        const existingUrl = await this.redisService.get(redisKey);
        if (existingUrl) {
            // Remove the just-assembled file since it's a duplicate
            await fs.promises.unlink(finalPath);
            return existingUrl;
        }
        // If video, compress
        if (this.isVideoFile(fileName)) {
            await this.compressVideo(finalPath);
        }
        // Upload to Cloudinary and return the CDN URL
        const uploadResult = await this.cloudinaryService.uploadVideoFromPath(finalPath);
        // Store hash-to-url mapping in Redis (no expiration)
        await this.redisService.set(redisKey, uploadResult.secure_url);
        return uploadResult.secure_url;
    }
    /**
     * Checks if a file is a video based on its extension.
     * @param fileName The file name to check
     */
    isVideoFile(fileName) {
        const videoExtensions = ['.mp4', '.mov', '.avi', '.mkv', '.webm'];
        return videoExtensions.includes(path.extname(fileName).toLowerCase());
    }
    /**
     * Compresses a video file using ffmpeg and replaces the original with the compressed version.
     * @param filePath The path to the video file
     */
    compressVideo(filePath) {
        return new Promise((resolve, reject) => {
            const tempCompressed = filePath + '.compressed.mp4';
            (0, fluent_ffmpeg_1.default)(filePath)
                .outputOptions([
                '-vcodec libx264',
                '-crf 28', // Adjust CRF for desired quality/size
                '-preset fast',
                '-acodec aac',
                '-b:a 128k',
            ])
                .on('end', async () => {
                try {
                    await fs.promises.rename(tempCompressed, filePath);
                    resolve();
                }
                catch (err) {
                    reject(err);
                }
            })
                .on('error', (err) => {
                reject(err);
            })
                .save(tempCompressed);
        });
    }
    /**
     * Returns the upload progress for a given uploadId.
     * Lists which chunks have been received so far.
     */
    async getUploadProgress(uploadId, totalChunks) {
        const chunkDir = path.join(this.tempDir, uploadId);
        let receivedChunks = [];
        if (fs.existsSync(chunkDir)) {
            const files = await fs.promises.readdir(chunkDir);
            receivedChunks = files
                .map((f) => parseInt(f, 10))
                .filter((n) => !isNaN(n));
        }
        return {
            uploadId,
            receivedChunks,
            totalChunks,
        };
    }
};
exports.FilesService = FilesService;
exports.FilesService = FilesService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof cloudinary_service_1.CloudinaryService !== "undefined" && cloudinary_service_1.CloudinaryService) === "function" ? _a : Object, typeof (_b = typeof redis_service_1.RedisService !== "undefined" && redis_service_1.RedisService) === "function" ? _b : Object])
], FilesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,