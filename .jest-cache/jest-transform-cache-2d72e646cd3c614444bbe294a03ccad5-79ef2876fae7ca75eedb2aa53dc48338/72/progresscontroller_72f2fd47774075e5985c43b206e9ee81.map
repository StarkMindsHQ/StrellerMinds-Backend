{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\controllers\\progress.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\controllers\\progress.controller.ts"],"sourcesContent":["/**\r\n * ProgressController handles user progress tracking and analytics endpoints.\r\n */\r\nimport {\r\n  Controller,\r\n  Post,\r\n  Get,\r\n  Body,\r\n  Param,\r\n  UseGuards,\r\n  Request,\r\n  ParseUUIDPipe,\r\n  HttpStatus,\r\n  HttpException,\r\n} from '@nestjs/common';\r\nimport { ProgressService } from '../services/progress.service';\r\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\r\nimport { RolesGuard } from '../../auth/guards/roles.guard';\r\nimport { Roles } from '../../auth/decorators/roles.decorator';\r\nimport { UpdateProgressDto } from '../dtos/update-progress.dto';\r\nimport { Role } from 'src/role/roles.enum';\r\nimport { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\r\n\r\n@ApiTags('Progress')\r\n@ApiBearerAuth()\r\n@Controller('progress')\r\n@UseGuards(JwtAuthGuard, RolesGuard)\r\nexport class ProgressController {\r\n  constructor(private readonly progressService: ProgressService) {}\r\n\r\n  @ApiOperation({ summary: 'Update lesson progress' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiParam({ name: 'lessonId', type: 'string', description: 'Lesson ID' })\r\n  @ApiBody({ type: UpdateProgressDto })\r\n  @ApiResponse({ status: 200, description: 'Lesson progress updated.' })\r\n  @Post('courses/:courseId/lessons/:lessonId')\r\n  async updateLessonProgress(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n    @Param('lessonId', ParseUUIDPipe) lessonId: string,\r\n    @Body() updateProgressDto: UpdateProgressDto,\r\n  ) {\r\n    try {\r\n      return await this.progressService.updateLessonProgress(\r\n        req.user.id,\r\n        courseId,\r\n        lessonId,\r\n        updateProgressDto.progressPercentage,\r\n        updateProgressDto.metadata,\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof HttpException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException(\r\n        'Failed to update lesson progress',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get course progress' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Course progress.' })\r\n  @Get('courses/:courseId')\r\n  async getCourseProgress(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      return await this.progressService.getCourseProgress(req.user.id, courseId);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException(\r\n        'Failed to retrieve course progress',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get user progress' })\r\n  @ApiResponse({ status: 200, description: 'User progress.' })\r\n  @Get('user')\r\n  async getUserProgress(@Request() req) {\r\n    try {\r\n      return await this.progressService.getUserProgress(req.user.id);\r\n    } catch (error) {\r\n      throw new HttpException(\r\n        'Failed to retrieve user progress',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Sync course progress' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Progress synchronized.' })\r\n  @Post('courses/:courseId/sync')\r\n  async syncProgress(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      await this.progressService.syncProgress(req.user.id, courseId);\r\n      return { message: 'Progress synchronized successfully' };\r\n    } catch (error) {\r\n      if (error instanceof HttpException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException(\r\n        'Failed to synchronize progress',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get course progress (admin)' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Admin course progress.' })\r\n  @Get('admin/courses/:courseId')\r\n  @Roles(Role.Admin)\r\n  async getCourseProgressAdmin(\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      // For admin, you may want to pass a special userId or null if your service supports it, or fetch all users' progress for the course.\r\n      // Here, we'll pass null as userId, but you may need to adjust the service logic if it doesn't handle null.\r\n      return await this.progressService.getCourseProgress(null, courseId);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException(\r\n        'Failed to retrieve admin course progress',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n      );\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get learning analytics' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Learning analytics.' })\r\n  @Get('courses/:courseId/analytics')\r\n  async getLearningAnalytics(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      return await this.progressService.getLearningAnalytics(req.user.id, courseId);\r\n    } catch (error) {\r\n      throw new HttpException('Failed to retrieve analytics', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get adaptive next lessons' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Adaptive next lessons.' })\r\n  @Get('courses/:courseId/adaptive-next')\r\n  async getAdaptiveNextLessons(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      return await this.progressService.getAdaptiveNextLessons(req.user.id, courseId);\r\n    } catch (error) {\r\n      throw new HttpException('Failed to retrieve adaptive next lessons', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get progress visualization' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Progress visualization.' })\r\n  @Get('courses/:courseId/visualization')\r\n  async getProgressVisualization(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      return await this.progressService.getProgressVisualization(req.user.id, courseId);\r\n    } catch (error) {\r\n      throw new HttpException('Failed to retrieve progress visualization', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get learning outcome metrics' })\r\n  @ApiParam({ name: 'courseId', type: 'string', description: 'Course ID' })\r\n  @ApiResponse({ status: 200, description: 'Learning outcome metrics.' })\r\n  @Get('courses/:courseId/outcomes')\r\n  async getLearningOutcomeMetrics(\r\n    @Request() req,\r\n    @Param('courseId', ParseUUIDPipe) courseId: string,\r\n  ) {\r\n    try {\r\n      return await this.progressService.getLearningOutcomeMetrics(req.user.id, courseId);\r\n    } catch (error) {\r\n      throw new HttpException('Failed to retrieve learning outcome metrics', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n}"],"version":3}