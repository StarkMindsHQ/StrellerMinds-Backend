7da1966f632309dedba342659380c755
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressController = void 0;
/**
 * ProgressController handles user progress tracking and analytics endpoints.
 */
const common_1 = require("@nestjs/common");
const progress_service_1 = require("../services/progress.service");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../auth/guards/roles.guard");
const roles_decorator_1 = require("../../auth/decorators/roles.decorator");
const update_progress_dto_1 = require("../dtos/update-progress.dto");
const roles_enum_1 = require("src/role/roles.enum");
const swagger_1 = require("@nestjs/swagger");
let ProgressController = class ProgressController {
    constructor(progressService) {
        this.progressService = progressService;
    }
    async updateLessonProgress(req, courseId, lessonId, updateProgressDto) {
        try {
            return await this.progressService.updateLessonProgress(req.user.id, courseId, lessonId, updateProgressDto.progressPercentage, updateProgressDto.metadata);
        }
        catch (error) {
            if (error instanceof common_1.HttpException) {
                throw error;
            }
            throw new common_1.HttpException('Failed to update lesson progress', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getCourseProgress(req, courseId) {
        try {
            return await this.progressService.getCourseProgress(req.user.id, courseId);
        }
        catch (error) {
            if (error instanceof common_1.HttpException) {
                throw error;
            }
            throw new common_1.HttpException('Failed to retrieve course progress', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getUserProgress(req) {
        try {
            return await this.progressService.getUserProgress(req.user.id);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to retrieve user progress', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async syncProgress(req, courseId) {
        try {
            await this.progressService.syncProgress(req.user.id, courseId);
            return { message: 'Progress synchronized successfully' };
        }
        catch (error) {
            if (error instanceof common_1.HttpException) {
                throw error;
            }
            throw new common_1.HttpException('Failed to synchronize progress', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getCourseProgressAdmin(courseId) {
        try {
            // For admin, you may want to pass a special userId or null if your service supports it, or fetch all users' progress for the course.
            // Here, we'll pass null as userId, but you may need to adjust the service logic if it doesn't handle null.
            return await this.progressService.getCourseProgress(null, courseId);
        }
        catch (error) {
            if (error instanceof common_1.HttpException) {
                throw error;
            }
            throw new common_1.HttpException('Failed to retrieve admin course progress', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getLearningAnalytics(req, courseId) {
        try {
            return await this.progressService.getLearningAnalytics(req.user.id, courseId);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to retrieve analytics', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getAdaptiveNextLessons(req, courseId) {
        try {
            return await this.progressService.getAdaptiveNextLessons(req.user.id, courseId);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to retrieve adaptive next lessons', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getProgressVisualization(req, courseId) {
        try {
            return await this.progressService.getProgressVisualization(req.user.id, courseId);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to retrieve progress visualization', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    async getLearningOutcomeMetrics(req, courseId) {
        try {
            return await this.progressService.getLearningOutcomeMetrics(req.user.id, courseId);
        }
        catch (error) {
            throw new common_1.HttpException('Failed to retrieve learning outcome metrics', common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
};
exports.ProgressController = ProgressController;
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update lesson progress' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiParam)({ name: 'lessonId', type: 'string', description: 'Lesson ID' }),
    (0, swagger_1.ApiBody)({ type: update_progress_dto_1.UpdateProgressDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Lesson progress updated.' }),
    (0, common_1.Post)('courses/:courseId/lessons/:lessonId'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __param(2, (0, common_1.Param)('lessonId', common_1.ParseUUIDPipe)),
    __param(3, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, String, typeof (_b = typeof update_progress_dto_1.UpdateProgressDto !== "undefined" && update_progress_dto_1.UpdateProgressDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "updateLessonProgress", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get course progress' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Course progress.' }),
    (0, common_1.Get)('courses/:courseId'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getCourseProgress", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get user progress' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User progress.' }),
    (0, common_1.Get)('user'),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getUserProgress", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Sync course progress' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Progress synchronized.' }),
    (0, common_1.Post)('courses/:courseId/sync'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "syncProgress", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get course progress (admin)' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Admin course progress.' }),
    (0, common_1.Get)('admin/courses/:courseId'),
    (0, roles_decorator_1.Roles)(roles_enum_1.Role.Admin),
    __param(0, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getCourseProgressAdmin", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get learning analytics' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Learning analytics.' }),
    (0, common_1.Get)('courses/:courseId/analytics'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getLearningAnalytics", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get adaptive next lessons' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Adaptive next lessons.' }),
    (0, common_1.Get)('courses/:courseId/adaptive-next'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getAdaptiveNextLessons", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get progress visualization' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Progress visualization.' }),
    (0, common_1.Get)('courses/:courseId/visualization'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getProgressVisualization", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get learning outcome metrics' }),
    (0, swagger_1.ApiParam)({ name: 'courseId', type: 'string', description: 'Course ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Learning outcome metrics.' }),
    (0, common_1.Get)('courses/:courseId/outcomes'),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Param)('courseId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], ProgressController.prototype, "getLearningOutcomeMetrics", null);
exports.ProgressController = ProgressController = __decorate([
    (0, swagger_1.ApiTags)('Progress'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('progress'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    __metadata("design:paramtypes", [typeof (_a = typeof progress_service_1.ProgressService !== "undefined" && progress_service_1.ProgressService) === "function" ? _a : Object])
], ProgressController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,