ada989f99291d88f46821fd105dd960d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const assignment_controller_1 = require("./assignment.controller");
const assignment_service_1 = require("./assignment.service");
describe('AssignmentController', () => {
    let controller;
    let service;
    const mockAssignmentService = {
        create: jest.fn().mockResolvedValue('This action adds a new assignment'),
        findAll: jest.fn().mockResolvedValue('This action returns all assignment'),
        findOne: jest.fn().mockResolvedValue('This action returns a #1 assignment'),
        update: jest.fn().mockResolvedValue('This action updates a #1 assignment'),
        remove: jest.fn().mockResolvedValue('This action removes a #1 assignment'),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [assignment_controller_1.AssignmentController],
            providers: [
                {
                    provide: assignment_service_1.AssignmentService,
                    useValue: mockAssignmentService,
                },
            ],
        }).compile();
        controller = module.get(assignment_controller_1.AssignmentController);
        service = module.get(assignment_service_1.AssignmentService);
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('create', () => {
        it('should create a new assignment and return a success message', async () => {
            const createAssignmentDto = {
                title: 'Assignment 1',
                instructions: 'Complete the task',
                dueDate: '2025-12-01',
            };
            expect(await controller.create(createAssignmentDto)).toBe('This action adds a new assignment');
        });
    });
    describe('findAll', () => {
        it('should return all assignments', async () => {
            expect(await controller.findAll()).toBe('This action returns all assignment');
        });
    });
    describe('findOne', () => {
        it('should return a specific assignment by ID', async () => {
            const assignmentId = '1';
            expect(await controller.findOne(assignmentId)).toBe('This action returns a #1 assignment');
        });
    });
    describe('update', () => {
        it('should return an updated assignment message', async () => {
            const assignmentId = '1';
            const updateAssignmentDto = {
                title: 'Updated Assignment 1',
                instructions: 'Complete the updated task',
                dueDate: '2025-12-05',
            };
            expect(await controller.update(assignmentId, updateAssignmentDto)).toBe('This action updates a #1 assignment');
        });
    });
    describe('remove', () => {
        it('should return a success message when an assignment is removed', async () => {
            const assignmentId = '1';
            expect(await controller.remove(assignmentId)).toBe('This action removes a #1 assignment');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxhc3NpZ25tZW50XFxhc3NpZ25tZW50LmNvbnRyb2xsZXIuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCxtRUFBK0Q7QUFDL0QsNkRBQXlEO0FBTXpELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxVQUFnQyxDQUFDO0lBQ3JDLElBQUksT0FBMEIsQ0FBQztJQUUvQixNQUFNLHFCQUFxQixHQUFHO1FBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsbUNBQW1DLENBQUM7UUFDeEUsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxvQ0FBb0MsQ0FBQztRQUMxRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLHFDQUFxQyxDQUFDO1FBQzNFLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMscUNBQXFDLENBQUM7UUFDMUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxxQ0FBcUMsQ0FBQztLQUMzRSxDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxXQUFXLEVBQUUsQ0FBQyw0Q0FBb0IsQ0FBQztZQUNuQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHNDQUFpQjtvQkFDMUIsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7YUFDRjtTQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUViLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUF1Qiw0Q0FBb0IsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFvQixzQ0FBaUIsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUN0QixFQUFFLENBQUMsNkRBQTZELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0UsTUFBTSxtQkFBbUIsR0FBd0I7Z0JBQy9DLEtBQUssRUFBRSxjQUFjO2dCQUNyQixZQUFZLEVBQUUsbUJBQW1CO2dCQUNqQyxPQUFPLEVBQUUsWUFBWTthQUN0QixDQUFDO1lBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFDakcsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3QyxNQUFNLENBQUMsTUFBTSxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUNoRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pELE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQztZQUN6QixNQUFNLENBQUMsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDN0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7WUFDekIsTUFBTSxtQkFBbUIsR0FBd0I7Z0JBQy9DLEtBQUssRUFBRSxzQkFBc0I7Z0JBQzdCLFlBQVksRUFBRSwyQkFBMkI7Z0JBQ3pDLE9BQU8sRUFBRSxZQUFZO2FBQ3RCLENBQUM7WUFDRixNQUFNLENBQUMsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDakgsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQywrREFBK0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RSxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7WUFDekIsTUFBTSxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQzVGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGFzc2lnbm1lbnRcXGFzc2lnbm1lbnQuY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBBc3NpZ25tZW50Q29udHJvbGxlciB9IGZyb20gJy4vYXNzaWdubWVudC5jb250cm9sbGVyJztcclxuaW1wb3J0IHsgQXNzaWdubWVudFNlcnZpY2UgfSBmcm9tICcuL2Fzc2lnbm1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IENyZWF0ZUFzc2lnbm1lbnREdG8gfSBmcm9tICcuL2R0by9jcmVhdGUtYXNzaWdubWVudC5kdG8nO1xyXG5pbXBvcnQgeyBVcGRhdGVBc3NpZ25tZW50RHRvIH0gZnJvbSAnLi9kdG8vdXBkYXRlLWFzc2lnbm1lbnQuZHRvJztcclxuaW1wb3J0IHsgSHR0cFN0YXR1cyB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbmRlc2NyaWJlKCdBc3NpZ25tZW50Q29udHJvbGxlcicsICgpID0+IHtcclxuICBsZXQgY29udHJvbGxlcjogQXNzaWdubWVudENvbnRyb2xsZXI7XHJcbiAgbGV0IHNlcnZpY2U6IEFzc2lnbm1lbnRTZXJ2aWNlO1xyXG5cclxuICBjb25zdCBtb2NrQXNzaWdubWVudFNlcnZpY2UgPSB7XHJcbiAgICBjcmVhdGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnVGhpcyBhY3Rpb24gYWRkcyBhIG5ldyBhc3NpZ25tZW50JyksXHJcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ1RoaXMgYWN0aW9uIHJldHVybnMgYWxsIGFzc2lnbm1lbnQnKSxcclxuICAgIGZpbmRPbmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnVGhpcyBhY3Rpb24gcmV0dXJucyBhICMxIGFzc2lnbm1lbnQnKSxcclxuICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdUaGlzIGFjdGlvbiB1cGRhdGVzIGEgIzEgYXNzaWdubWVudCcpLFxyXG4gICAgcmVtb3ZlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ1RoaXMgYWN0aW9uIHJlbW92ZXMgYSAjMSBhc3NpZ25tZW50JyksXHJcbiAgfTtcclxuXHJcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICBjb250cm9sbGVyczogW0Fzc2lnbm1lbnRDb250cm9sbGVyXSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQXNzaWdubWVudFNlcnZpY2UsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogbW9ja0Fzc2lnbm1lbnRTZXJ2aWNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9KS5jb21waWxlKCk7XHJcblxyXG4gICAgY29udHJvbGxlciA9IG1vZHVsZS5nZXQ8QXNzaWdubWVudENvbnRyb2xsZXI+KEFzc2lnbm1lbnRDb250cm9sbGVyKTtcclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PEFzc2lnbm1lbnRTZXJ2aWNlPihBc3NpZ25tZW50U2VydmljZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcclxuICAgIGV4cGVjdChjb250cm9sbGVyKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgYXNzaWdubWVudCBhbmQgcmV0dXJuIGEgc3VjY2VzcyBtZXNzYWdlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjcmVhdGVBc3NpZ25tZW50RHRvOiBDcmVhdGVBc3NpZ25tZW50RHRvID0ge1xyXG4gICAgICAgIHRpdGxlOiAnQXNzaWdubWVudCAxJyxcclxuICAgICAgICBpbnN0cnVjdGlvbnM6ICdDb21wbGV0ZSB0aGUgdGFzaycsXHJcbiAgICAgICAgZHVlRGF0ZTogJzIwMjUtMTItMDEnLFxyXG4gICAgICB9O1xyXG4gICAgICBleHBlY3QoYXdhaXQgY29udHJvbGxlci5jcmVhdGUoY3JlYXRlQXNzaWdubWVudER0bykpLnRvQmUoJ1RoaXMgYWN0aW9uIGFkZHMgYSBuZXcgYXNzaWdubWVudCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdmaW5kQWxsJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYWxsIGFzc2lnbm1lbnRzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoYXdhaXQgY29udHJvbGxlci5maW5kQWxsKCkpLnRvQmUoJ1RoaXMgYWN0aW9uIHJldHVybnMgYWxsIGFzc2lnbm1lbnQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnZmluZE9uZScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc3BlY2lmaWMgYXNzaWdubWVudCBieSBJRCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgYXNzaWdubWVudElkID0gJzEnO1xyXG4gICAgICBleHBlY3QoYXdhaXQgY29udHJvbGxlci5maW5kT25lKGFzc2lnbm1lbnRJZCkpLnRvQmUoJ1RoaXMgYWN0aW9uIHJldHVybnMgYSAjMSBhc3NpZ25tZW50Jyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3VwZGF0ZScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFuIHVwZGF0ZWQgYXNzaWdubWVudCBtZXNzYWdlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhc3NpZ25tZW50SWQgPSAnMSc7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZUFzc2lnbm1lbnREdG86IFVwZGF0ZUFzc2lnbm1lbnREdG8gPSB7XHJcbiAgICAgICAgdGl0bGU6ICdVcGRhdGVkIEFzc2lnbm1lbnQgMScsXHJcbiAgICAgICAgaW5zdHJ1Y3Rpb25zOiAnQ29tcGxldGUgdGhlIHVwZGF0ZWQgdGFzaycsXHJcbiAgICAgICAgZHVlRGF0ZTogJzIwMjUtMTItMDUnLFxyXG4gICAgICB9O1xyXG4gICAgICBleHBlY3QoYXdhaXQgY29udHJvbGxlci51cGRhdGUoYXNzaWdubWVudElkLCB1cGRhdGVBc3NpZ25tZW50RHRvKSkudG9CZSgnVGhpcyBhY3Rpb24gdXBkYXRlcyBhICMxIGFzc2lnbm1lbnQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgncmVtb3ZlJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBzdWNjZXNzIG1lc3NhZ2Ugd2hlbiBhbiBhc3NpZ25tZW50IGlzIHJlbW92ZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFzc2lnbm1lbnRJZCA9ICcxJztcclxuICAgICAgZXhwZWN0KGF3YWl0IGNvbnRyb2xsZXIucmVtb3ZlKGFzc2lnbm1lbnRJZCkpLnRvQmUoJ1RoaXMgYWN0aW9uIHJlbW92ZXMgYSAjMSBhc3NpZ25tZW50Jyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==