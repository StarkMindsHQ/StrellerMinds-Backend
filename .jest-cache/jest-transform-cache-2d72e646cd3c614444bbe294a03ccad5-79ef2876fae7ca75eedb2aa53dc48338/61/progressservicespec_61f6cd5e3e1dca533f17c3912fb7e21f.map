{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\progress.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\progress.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ProgressService } from './progress.service';\r\nimport { UserProgress } from '../entities/user-progress.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { Lesson } from '../../lesson/entity/lesson.entity';\r\nimport { CourseModule } from '../../courses/entities/course-module.entity';\r\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\r\n\r\ndescribe('ProgressService', () => {\r\n  let service: ProgressService;\r\n  let progressRepository: Repository<UserProgress>;\r\n  let courseRepository: Repository<Course>;\r\n  let lessonRepository: Repository<Lesson>;\r\n  let moduleRepository: Repository<CourseModule>;\r\n\r\n  const mockUserProgress = {\r\n    id: '1',\r\n    progressPercentage: 0,\r\n    isCompleted: false,\r\n    user: { id: 'user1' },\r\n    course: { id: 'course1' },\r\n    lesson: { id: 'lesson1' },\r\n    module: { id: 'module1' },\r\n  };\r\n\r\n  const mockCourse = {\r\n    id: 'course1',\r\n    title: 'Test Course',\r\n    modules: [\r\n      {\r\n        id: 'module1',\r\n        title: 'Module 1',\r\n        lessons: [\r\n          { id: 'lesson1', title: 'Lesson 1' },\r\n          { id: 'lesson2', title: 'Lesson 2' },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const mockLesson = {\r\n    id: 'lesson1',\r\n    title: 'Lesson 1',\r\n    module: { id: 'module1', courseId: 'course1' },\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ProgressService,\r\n        {\r\n          provide: getRepositoryToken(UserProgress),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            find: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(Course),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(Lesson),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            find: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(CourseModule),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<ProgressService>(ProgressService);\r\n    progressRepository = module.get<Repository<UserProgress>>(\r\n      getRepositoryToken(UserProgress),\r\n    );\r\n    courseRepository = module.get<Repository<Course>>(\r\n      getRepositoryToken(Course),\r\n    );\r\n    lessonRepository = module.get<Repository<Lesson>>(\r\n      getRepositoryToken(Lesson),\r\n    );\r\n    moduleRepository = module.get<Repository<CourseModule>>(\r\n      getRepositoryToken(CourseModule),\r\n    );\r\n  });\r\n\r\n  describe('updateLessonProgress', () => {\r\n    it('should create new progress record if none exists', async () => {\r\n      jest.spyOn(lessonRepository, 'findOne').mockResolvedValue(mockLesson as any);\r\n      jest.spyOn(progressRepository, 'findOne').mockResolvedValue(null);\r\n      jest.spyOn(progressRepository, 'create').mockReturnValue(mockUserProgress as any);\r\n      jest.spyOn(progressRepository, 'save').mockResolvedValue(mockUserProgress as any);\r\n\r\n      const result = await service.updateLessonProgress(\r\n        'user1',\r\n        'course1',\r\n        'lesson1',\r\n        50,\r\n      );\r\n\r\n      expect(result).toBeDefined();\r\n      expect(progressRepository.create).toHaveBeenCalled();\r\n      expect(progressRepository.save).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException if lesson not found', async () => {\r\n      jest.spyOn(lessonRepository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(\r\n        service.updateLessonProgress('user1', 'course1', 'lesson1', 50),\r\n      ).rejects.toThrow(NotFoundException);\r\n    });\r\n\r\n    it('should throw BadRequestException if lesson does not belong to course', async () => {\r\n      jest.spyOn(lessonRepository, 'findOne').mockResolvedValue({\r\n        ...mockLesson,\r\n        module: { id: 'module1', courseId: 'different-course' },\r\n      } as any);\r\n\r\n      await expect(\r\n        service.updateLessonProgress('user1', 'course1', 'lesson1', 50),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('getCourseProgress', () => {\r\n    it('should return course progress with module details', async () => {\r\n      jest.spyOn(courseRepository, 'findOne').mockResolvedValue(mockCourse as any);\r\n      jest.spyOn(progressRepository, 'find').mockResolvedValue([\r\n        {\r\n          ...mockUserProgress,\r\n          isCompleted: true,\r\n          progressPercentage: 100,\r\n        },\r\n      ] as any);\r\n\r\n      const result = await service.getCourseProgress('user1', 'course1');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.overallProgress).toBe(50); // 1 completed out of 2 lessons\r\n      expect(result.moduleProgress).toHaveLength(1);\r\n      expect(result.moduleProgress[0].progress).toBe(50);\r\n    });\r\n\r\n    it('should throw NotFoundException if course not found', async () => {\r\n      jest.spyOn(courseRepository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(\r\n        service.getCourseProgress('user1', 'course1'),\r\n      ).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getUserProgress', () => {\r\n    it('should return user progress across all courses', async () => {\r\n      const mockProgress = [\r\n        {\r\n          ...mockUserProgress,\r\n          course: { id: 'course1', title: 'Course 1' },\r\n          lastAccessedAt: new Date(),\r\n        },\r\n      ];\r\n\r\n      jest.spyOn(progressRepository, 'find').mockResolvedValue(mockProgress as any);\r\n\r\n      const result = await service.getUserProgress('user1');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result).toHaveLength(1);\r\n      expect(result[0].courseId).toBe('course1');\r\n    });\r\n  });\r\n\r\n  describe('syncProgress', () => {\r\n    it('should sync progress for all modules in a course', async () => {\r\n      jest.spyOn(courseRepository, 'findOne').mockResolvedValue(mockCourse as any);\r\n      jest.spyOn(moduleRepository, 'findOne').mockResolvedValue(mockCourse.modules[0] as any);\r\n      jest.spyOn(progressRepository, 'find').mockResolvedValue([]);\r\n      jest.spyOn(progressRepository, 'save').mockResolvedValue({} as any);\r\n\r\n      await service.syncProgress('user1', 'course1');\r\n\r\n      expect(moduleRepository.findOne).toHaveBeenCalled();\r\n      expect(progressRepository.save).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException if course not found', async () => {\r\n      jest.spyOn(courseRepository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(\r\n        service.syncProgress('user1', 'course1'),\r\n      ).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n}); "],"version":3}