f0348058fff9c63cacc230c871c2d3fb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const progress_service_1 = require("./progress.service");
const user_progress_entity_1 = require("../entities/user-progress.entity");
const course_entity_1 = require("../../courses/entities/course.entity");
const lesson_entity_1 = require("../../lesson/entity/lesson.entity");
const course_module_entity_1 = require("../../courses/entities/course-module.entity");
const common_1 = require("@nestjs/common");
describe('ProgressService', () => {
    let service;
    let progressRepository;
    let courseRepository;
    let lessonRepository;
    let moduleRepository;
    const mockUserProgress = {
        id: '1',
        progressPercentage: 0,
        isCompleted: false,
        user: { id: 'user1' },
        course: { id: 'course1' },
        lesson: { id: 'lesson1' },
        module: { id: 'module1' },
    };
    const mockCourse = {
        id: 'course1',
        title: 'Test Course',
        modules: [
            {
                id: 'module1',
                title: 'Module 1',
                lessons: [
                    { id: 'lesson1', title: 'Lesson 1' },
                    { id: 'lesson2', title: 'Lesson 2' },
                ],
            },
        ],
    };
    const mockLesson = {
        id: 'lesson1',
        title: 'Lesson 1',
        module: { id: 'module1', courseId: 'course1' },
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                progress_service_1.ProgressService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_progress_entity_1.UserProgress),
                    useValue: {
                        findOne: jest.fn(),
                        find: jest.fn(),
                        create: jest.fn(),
                        save: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(course_entity_1.Course),
                    useValue: {
                        findOne: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(lesson_entity_1.Lesson),
                    useValue: {
                        findOne: jest.fn(),
                        find: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(course_module_entity_1.CourseModule),
                    useValue: {
                        findOne: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(progress_service_1.ProgressService);
        progressRepository = module.get((0, typeorm_1.getRepositoryToken)(user_progress_entity_1.UserProgress));
        courseRepository = module.get((0, typeorm_1.getRepositoryToken)(course_entity_1.Course));
        lessonRepository = module.get((0, typeorm_1.getRepositoryToken)(lesson_entity_1.Lesson));
        moduleRepository = module.get((0, typeorm_1.getRepositoryToken)(course_module_entity_1.CourseModule));
    });
    describe('updateLessonProgress', () => {
        it('should create new progress record if none exists', async () => {
            jest.spyOn(lessonRepository, 'findOne').mockResolvedValue(mockLesson);
            jest.spyOn(progressRepository, 'findOne').mockResolvedValue(null);
            jest.spyOn(progressRepository, 'create').mockReturnValue(mockUserProgress);
            jest.spyOn(progressRepository, 'save').mockResolvedValue(mockUserProgress);
            const result = await service.updateLessonProgress('user1', 'course1', 'lesson1', 50);
            expect(result).toBeDefined();
            expect(progressRepository.create).toHaveBeenCalled();
            expect(progressRepository.save).toHaveBeenCalled();
        });
        it('should throw NotFoundException if lesson not found', async () => {
            jest.spyOn(lessonRepository, 'findOne').mockResolvedValue(null);
            await expect(service.updateLessonProgress('user1', 'course1', 'lesson1', 50)).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw BadRequestException if lesson does not belong to course', async () => {
            jest.spyOn(lessonRepository, 'findOne').mockResolvedValue({
                ...mockLesson,
                module: { id: 'module1', courseId: 'different-course' },
            });
            await expect(service.updateLessonProgress('user1', 'course1', 'lesson1', 50)).rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('getCourseProgress', () => {
        it('should return course progress with module details', async () => {
            jest.spyOn(courseRepository, 'findOne').mockResolvedValue(mockCourse);
            jest.spyOn(progressRepository, 'find').mockResolvedValue([
                {
                    ...mockUserProgress,
                    isCompleted: true,
                    progressPercentage: 100,
                },
            ]);
            const result = await service.getCourseProgress('user1', 'course1');
            expect(result).toBeDefined();
            expect(result.overallProgress).toBe(50); // 1 completed out of 2 lessons
            expect(result.moduleProgress).toHaveLength(1);
            expect(result.moduleProgress[0].progress).toBe(50);
        });
        it('should throw NotFoundException if course not found', async () => {
            jest.spyOn(courseRepository, 'findOne').mockResolvedValue(null);
            await expect(service.getCourseProgress('user1', 'course1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('getUserProgress', () => {
        it('should return user progress across all courses', async () => {
            const mockProgress = [
                {
                    ...mockUserProgress,
                    course: { id: 'course1', title: 'Course 1' },
                    lastAccessedAt: new Date(),
                },
            ];
            jest.spyOn(progressRepository, 'find').mockResolvedValue(mockProgress);
            const result = await service.getUserProgress('user1');
            expect(result).toBeDefined();
            expect(result).toHaveLength(1);
            expect(result[0].courseId).toBe('course1');
        });
    });
    describe('syncProgress', () => {
        it('should sync progress for all modules in a course', async () => {
            jest.spyOn(courseRepository, 'findOne').mockResolvedValue(mockCourse);
            jest.spyOn(moduleRepository, 'findOne').mockResolvedValue(mockCourse.modules[0]);
            jest.spyOn(progressRepository, 'find').mockResolvedValue([]);
            jest.spyOn(progressRepository, 'save').mockResolvedValue({});
            await service.syncProgress('user1', 'course1');
            expect(moduleRepository.findOne).toHaveBeenCalled();
            expect(progressRepository.save).toHaveBeenCalled();
        });
        it('should throw NotFoundException if course not found', async () => {
            jest.spyOn(courseRepository, 'findOne').mockResolvedValue(null);
            await expect(service.syncProgress('user1', 'course1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,