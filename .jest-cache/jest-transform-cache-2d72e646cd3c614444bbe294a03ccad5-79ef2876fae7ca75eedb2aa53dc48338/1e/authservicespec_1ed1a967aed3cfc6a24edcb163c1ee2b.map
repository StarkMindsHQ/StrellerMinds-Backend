{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AuthService } from './auth.service';\r\nimport { UsersService } from '../users/services/users.service';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { BadRequestException, UnauthorizedException } from '@nestjs/common';\r\nimport { PasswordValidationService } from './password-validation.service';\r\nimport { EmailService } from '../email/email.service';\r\nimport * as bcrypt from 'bcryptjs';\r\n\r\njest.mock('bcryptjs');\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n  let usersService: UsersService;\r\n  let jwtService: JwtService;\r\n  let configService: ConfigService;\r\n  let passwordValidationService: PasswordValidationService;\r\n  let emailService: EmailService;\r\n\r\n  const mockUser = {\r\n    id: '1',\r\n    email: 'test@example.com',\r\n    password: 'hashedPassword',\r\n    roles: ['STUDENT'],\r\n    isEmailVerified: true,\r\n  };\r\n\r\n  const mockTokens = {\r\n    accessToken: 'mockAccessToken',\r\n    refreshToken: 'mockRefreshToken',\r\n    expiresIn: 3600,\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const usersServiceMock = {\r\n      findOne: jest.fn(),\r\n      findByEmail: jest.fn(),\r\n      create: jest.fn(),\r\n      findById: jest.fn(),\r\n      updatePassword: jest.fn(),\r\n      updateRefreshToken: jest.fn(),\r\n      userRepository: {},\r\n    };\r\n\r\n    const jwtServiceMock = {\r\n      sign: jest.fn().mockReturnValue('test-token'),\r\n      verify: jest.fn().mockReturnValue({ sub: 'test-id' }),\r\n      signAsync: jest.fn(),\r\n      verifyAsync: jest.fn(),\r\n      options: {},\r\n      logger: {\r\n        error: jest.fn(),\r\n        warn: jest.fn(),\r\n        log: jest.fn(),\r\n      },\r\n      mergeJwtOptions: jest.fn(),\r\n      overrideSecretFromOptions: jest.fn(),\r\n      getSecretKey: jest.fn(),\r\n    };\r\n\r\n    const configServiceMock = {\r\n      get: jest.fn().mockReturnValue('testSecret'),\r\n    };\r\n\r\n    const passwordValidationServiceMock = {\r\n      validatePassword: jest.fn(),\r\n      MIN_LENGTH: 8,\r\n      MIN_SCORE: 3,\r\n    };\r\n\r\n    const emailServiceMock = {\r\n      sendEmail: jest.fn().mockResolvedValue({}),\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        { provide: UsersService, useValue: usersServiceMock },\r\n        { provide: JwtService, useValue: jwtServiceMock },\r\n        { provide: ConfigService, useValue: configServiceMock },\r\n        { provide: EmailService, useValue: emailServiceMock },\r\n        {\r\n          provide: PasswordValidationService,\r\n          useValue: passwordValidationServiceMock,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<AuthService>(AuthService);\r\n    usersService = module.get<UsersService>(UsersService);\r\n    jwtService = module.get<JwtService>(JwtService);\r\n    configService = module.get<ConfigService>(ConfigService);\r\n    passwordValidationService = module.get<PasswordValidationService>(\r\n      PasswordValidationService,\r\n    );\r\n    emailService = module.get<EmailService>(EmailService);\r\n\r\n    (bcrypt.compare as jest.Mock).mockImplementation((plainText, hash) =>\r\n      Promise.resolve(plainText === 'correctPassword'),\r\n    );\r\n    (bcrypt.hash as jest.Mock).mockImplementation((text) =>\r\n      Promise.resolve(`hashed-${text}`),\r\n    );\r\n  });\r\n});\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n\r\n  const mockGoogle = {\r\n    name: 'google',\r\n    validate: jest.fn().mockResolvedValue({ email: 'test@gmail.com' }),\r\n    login: jest.fn().mockResolvedValue({ token: 'jwt-token' }),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module = await Test.createTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        { provide: 'AUTH_STRATEGIES', useValue: [mockGoogle] },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<AuthService>(AuthService);\r\n  });\r\n\r\n  it('should validate with Google', async () => {\r\n    const result = await service.validate('google', {});\r\n    expect(result).toEqual({ email: 'test@gmail.com' });\r\n  });\r\n\r\n  it('should fail for missing strategy', async () => {\r\n    await expect(service.login('facebook', {})).rejects.toThrow(\r\n      /Strategy for facebook not found/,\r\n    );\r\n  });\r\n});\r\n"],"version":3}