{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\auth.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AuthController } from './auth.controller';\r\nimport { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';\r\nimport { AuthService } from './auth.service';\r\nimport { UsersService } from '../users/users.service';\r\nimport { PasswordValidationService } from './password-validation.service';\r\n\r\n// Create mock types to fix TypeScript errors\r\ntype MockAuthService = {\r\n  validateUser: jest.Mock;\r\n  login: jest.Mock;\r\n  register: jest.Mock;\r\n  refreshToken: jest.Mock;\r\n  changePassword: jest.Mock;\r\n};\r\n\r\ndescribe('AuthController', () => {\r\n  let controller: AuthController;\r\n  let authService: MockAuthService;\r\n  let passwordValidationService: PasswordValidationService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [AuthController],\r\n      providers: [\r\n        {\r\n          provide: AuthService,\r\n          useValue: {\r\n            validateUser: jest.fn(),\r\n            login: jest.fn(),\r\n            register: jest.fn(),\r\n            refreshToken: jest.fn(),\r\n            changePassword: jest.fn(),\r\n          }\r\n        },\r\n        {\r\n          provide: UsersService,\r\n          useValue: {\r\n            findByEmail: jest.fn().mockResolvedValue(null),\r\n            create: jest.fn().mockResolvedValue({}),\r\n          }\r\n        },\r\n        {\r\n          provide: PasswordValidationService,\r\n          useValue: {\r\n            getPasswordRequirements: jest.fn().mockReturnValue([\r\n              'At least 8 characters long',\r\n              'Contains at least one uppercase letter',\r\n              'Contains at least one lowercase letter',\r\n              'Contains at least one number',\r\n              'Contains at least one special character',\r\n            ]),\r\n          }\r\n        }\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<AuthController>(AuthController);\r\n    authService = module.get(AuthService) as unknown as MockAuthService;\r\n    passwordValidationService = module.get<PasswordValidationService>(PasswordValidationService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should validate user and return login response', async () => {\r\n      // Setup\r\n      const mockUser = { id: 'user-id', email: 'test@example.com' };\r\n      const mockLoginResponse = { access_token: 'token', refresh_token: 'refresh', expires_in: 3600, user: mockUser };\r\n\r\n      authService.validateUser.mockResolvedValue(mockUser);\r\n      authService.login.mockResolvedValue(mockLoginResponse);\r\n\r\n      // Execute\r\n      const result = await controller.login({ email: 'test@example.com', password: 'password' });\r\n\r\n      // Assert\r\n      expect(authService.validateUser).toHaveBeenCalledWith('test@example.com', 'password');\r\n      expect(authService.login).toHaveBeenCalledWith(mockUser);\r\n      expect(result).toEqual(mockLoginResponse);\r\n    });\r\n\r\n    it('should throw UnauthorizedException when user validation fails', async () => {\r\n      // Setup\r\n      authService.validateUser.mockResolvedValue(null);\r\n\r\n      // Execute & Assert\r\n      await expect(controller.login({ email: 'test@example.com', password: 'wrong' }))\r\n        .rejects.toThrow(UnauthorizedException);\r\n\r\n      expect(authService.login).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('register', () => {\r\n    it('should call authService.register with correct parameters', async () => {\r\n      // Setup\r\n      const registerDto = {\r\n        email: 'new@example.com',\r\n        password: 'StrongP@ss123',\r\n        firstName: 'John',\r\n        lastName: 'Doe'\r\n      };\r\n\r\n      const mockResponse = { access_token: 'token', refresh_token: 'refresh', expires_in: 3600, user: { id: 'new-id', email: 'new@example.com' } };\r\n      authService.register.mockResolvedValue(mockResponse);\r\n\r\n      // Execute\r\n      const result = await controller.register(registerDto);\r\n\r\n      // Assert\r\n      expect(authService.register).toHaveBeenCalledWith(\r\n        'new@example.com',\r\n        'StrongP@ss123',\r\n        { firstName: 'John', lastName: 'Doe' }\r\n      );\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n\r\n    it('should propagate BadRequestException from authService.register', async () => {\r\n      // Setup\r\n      authService.register.mockRejectedValue(new BadRequestException('Password does not meet requirements'));\r\n\r\n      // Execute & Assert\r\n      await expect(controller.register({ email: 'new@example.com', password: 'weak' }))\r\n        .rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('getPasswordRequirements', () => {\r\n    it('should return password requirements from passwordValidationService', () => {\r\n      // Execute\r\n      const result = controller.getPasswordRequirements();\r\n\r\n      // Assert\r\n      expect(passwordValidationService.getPasswordRequirements).toHaveBeenCalled();\r\n      expect(result).toEqual({\r\n        requirements: [\r\n          'At least 8 characters long',\r\n          'Contains at least one uppercase letter',\r\n          'Contains at least one lowercase letter',\r\n          'Contains at least one number',\r\n          'Contains at least one special character',\r\n        ]\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('refresh', () => {\r\n    it('should call authService.refreshToken with userId and refreshToken', async () => {\r\n      // Setup\r\n      const mockTokens = { accessToken: 'new-token', refreshToken: 'new-refresh' };\r\n      authService.refreshToken.mockResolvedValue(mockTokens);\r\n\r\n      // Execute\r\n      const result = await controller.refresh({ userId: 'user-id', refreshToken: 'refresh-token' });\r\n\r\n      // Assert\r\n      expect(authService.refreshToken).toHaveBeenCalledWith('user-id', 'refresh-token');\r\n      expect(result).toEqual(mockTokens);\r\n    });\r\n\r\n    it('should throw UnauthorizedException when userId or refreshToken is missing', async () => {\r\n      // Execute & Assert\r\n      await expect(controller.refresh({ userId: 'user-id', refreshToken: undefined } as any))\r\n        .rejects.toThrow(UnauthorizedException);\r\n\r\n      await expect(controller.refresh({ userId: undefined, refreshToken: 'refresh-token' } as any))\r\n        .rejects.toThrow(UnauthorizedException);\r\n\r\n      await expect(controller.refresh({} as any))\r\n        .rejects.toThrow(UnauthorizedException);\r\n\r\n      expect(authService.refreshToken).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('changePassword', () => {\r\n    it('should call authService.changePassword with correct parameters', async () => {\r\n      // Setup\r\n      const req = { user: { id: 'user-id' } };\r\n      const changePasswordDto = {\r\n        currentPassword: 'currentPass',\r\n        newPassword: 'NewStrongP@ss123'\r\n      };\r\n      authService.changePassword.mockResolvedValue(true);\r\n\r\n      // Execute\r\n      const result = await controller.changePassword(req, changePasswordDto);\r\n\r\n      // Assert\r\n      expect(authService.changePassword).toHaveBeenCalledWith(\r\n        'user-id',\r\n        'currentPass',\r\n        'NewStrongP@ss123'\r\n      );\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should throw BadRequestException when passwords are missing', async () => {\r\n      // Setup\r\n      const req = { user: { id: 'user-id' } };\r\n\r\n      // Execute & Assert\r\n      await expect(controller.changePassword(req, { currentPassword: 'current', newPassword: undefined } as any))\r\n        .rejects.toThrow(BadRequestException);\r\n\r\n      await expect(controller.changePassword(req, { currentPassword: undefined, newPassword: 'new' } as any))\r\n        .rejects.toThrow(BadRequestException);\r\n\r\n      await expect(controller.changePassword(req, {} as any))\r\n        .rejects.toThrow(BadRequestException);\r\n\r\n      expect(authService.changePassword).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"version":3}