588ea5d596b8b01286b296c7772698b6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('bcryptjs');
const testing_1 = require("@nestjs/testing");
const auth_service_1 = require("./auth.service");
const users_service_1 = require("../users/services/users.service");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const password_validation_service_1 = require("./password-validation.service");
const email_service_1 = require("../email/email.service");
const bcrypt = __importStar(require("bcryptjs"));
describe('AuthService', () => {
    let service;
    let usersService;
    let jwtService;
    let configService;
    let passwordValidationService;
    let emailService;
    const mockUser = {
        id: '1',
        email: 'test@example.com',
        password: 'hashedPassword',
        roles: ['STUDENT'],
        isEmailVerified: true,
    };
    const mockTokens = {
        accessToken: 'mockAccessToken',
        refreshToken: 'mockRefreshToken',
        expiresIn: 3600,
    };
    beforeEach(async () => {
        const usersServiceMock = {
            findOne: jest.fn(),
            findByEmail: jest.fn(),
            create: jest.fn(),
            findById: jest.fn(),
            updatePassword: jest.fn(),
            updateRefreshToken: jest.fn(),
            userRepository: {},
        };
        const jwtServiceMock = {
            sign: jest.fn().mockReturnValue('test-token'),
            verify: jest.fn().mockReturnValue({ sub: 'test-id' }),
            signAsync: jest.fn(),
            verifyAsync: jest.fn(),
            options: {},
            logger: {
                error: jest.fn(),
                warn: jest.fn(),
                log: jest.fn(),
            },
            mergeJwtOptions: jest.fn(),
            overrideSecretFromOptions: jest.fn(),
            getSecretKey: jest.fn(),
        };
        const configServiceMock = {
            get: jest.fn().mockReturnValue('testSecret'),
        };
        const passwordValidationServiceMock = {
            validatePassword: jest.fn(),
            MIN_LENGTH: 8,
            MIN_SCORE: 3,
        };
        const emailServiceMock = {
            sendEmail: jest.fn().mockResolvedValue({}),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                { provide: users_service_1.UsersService, useValue: usersServiceMock },
                { provide: jwt_1.JwtService, useValue: jwtServiceMock },
                { provide: config_1.ConfigService, useValue: configServiceMock },
                { provide: email_service_1.EmailService, useValue: emailServiceMock },
                {
                    provide: password_validation_service_1.PasswordValidationService,
                    useValue: passwordValidationServiceMock,
                },
            ],
        }).compile();
        service = module.get(auth_service_1.AuthService);
        usersService = module.get(users_service_1.UsersService);
        jwtService = module.get(jwt_1.JwtService);
        configService = module.get(config_1.ConfigService);
        passwordValidationService = module.get(password_validation_service_1.PasswordValidationService);
        emailService = module.get(email_service_1.EmailService);
        bcrypt.compare.mockImplementation((plainText, hash) => Promise.resolve(plainText === 'correctPassword'));
        bcrypt.hash.mockImplementation((text) => Promise.resolve(`hashed-${text}`));
    });
});
describe('AuthService', () => {
    let service;
    const mockGoogle = {
        name: 'google',
        validate: jest.fn().mockResolvedValue({ email: 'test@gmail.com' }),
        login: jest.fn().mockResolvedValue({ token: 'jwt-token' }),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                { provide: 'AUTH_STRATEGIES', useValue: [mockGoogle] },
            ],
        }).compile();
        service = module.get(auth_service_1.AuthService);
    });
    it('should validate with Google', async () => {
        const result = await service.validate('google', {});
        expect(result).toEqual({ email: 'test@gmail.com' });
    });
    it('should fail for missing strategy', async () => {
        await expect(service.login('facebook', {})).rejects.toThrow(/Strategy for facebook not found/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,