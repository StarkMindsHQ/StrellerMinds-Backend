a16deac23c9ace5284177555f6a834f3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPreferencesController = void 0;
const common_1 = require("@nestjs/common");
const user_preferences_service_1 = require("./user-preferences.service");
const create_user_preferences_dto_1 = require("./dtos/create-user-preferences.dto");
const jwt_auth_guard_1 = require("src/auth/guards/jwt-auth.guard");
let UserPreferencesController = class UserPreferencesController {
    constructor(preferencesService) {
        this.preferencesService = preferencesService;
    }
    async create(req, dto) {
        try {
            // const userId = req.user.id;
            const userId = req.body.userId || req.user?.id;
            return await this.preferencesService.create(userId, dto);
        }
        catch (error) {
            if (error instanceof common_1.HttpException)
                throw error;
            throw new common_1.HttpException(error.message || 'Failed to create preferences', error.status || common_1.HttpStatus.BAD_REQUEST);
        }
    }
    async get(userId) {
        try {
            return await this.preferencesService.findByUserId(userId);
        }
        catch (error) {
            if (error instanceof common_1.HttpException)
                throw error;
            throw new common_1.HttpException(error.message || 'Preferences not found', error.status || common_1.HttpStatus.NOT_FOUND);
        }
    }
    async update(userId, dto) {
        try {
            return await this.preferencesService.update(userId, dto);
        }
        catch (error) {
            if (error instanceof common_1.HttpException)
                throw error;
            throw new common_1.HttpException(error.message || 'Failed to update preferences', error.status || common_1.HttpStatus.BAD_REQUEST);
        }
    }
    async getLearningPath(userId) {
        try {
            return await this.preferencesService.getCustomizedLearningPath(userId);
        }
        catch (error) {
            if (error instanceof common_1.HttpException)
                throw error;
            throw new common_1.HttpException(error.message || 'Failed to get learning path', error.status || common_1.HttpStatus.BAD_REQUEST);
        }
    }
};
exports.UserPreferencesController = UserPreferencesController;
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Post)(),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ whitelist: true, forbidNonWhitelisted: true })),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeof (_b = typeof create_user_preferences_dto_1.CreateUserPreferencesDto !== "undefined" && create_user_preferences_dto_1.CreateUserPreferencesDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], UserPreferencesController.prototype, "create", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Get)(':userId'),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UserPreferencesController.prototype, "get", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Put)(':userId'),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ whitelist: true, forbidNonWhitelisted: true })),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof create_user_preferences_dto_1.CreateUserPreferencesDto !== "undefined" && create_user_preferences_dto_1.CreateUserPreferencesDto) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], UserPreferencesController.prototype, "update", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Get)(':userId/learning-path'),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UserPreferencesController.prototype, "getLearningPath", null);
exports.UserPreferencesController = UserPreferencesController = __decorate([
    (0, common_1.Controller)('preferences'),
    __metadata("design:paramtypes", [typeof (_a = typeof user_preferences_service_1.UserPreferencesService !== "undefined" && user_preferences_service_1.UserPreferencesService) === "function" ? _a : Object])
], UserPreferencesController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFx1c2VyLXByZWZlcmVuY2VzXFx1c2VyLXByZWZlcmVuY2VzLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE4STtBQUM5SSx5RUFBb0U7QUFDcEUsb0ZBQThFO0FBQzlFLG1FQUE4RDtBQUl2RCxJQUFNLHlCQUF5QixHQUEvQixNQUFNLHlCQUF5QjtJQUNwQyxZQUE2QixrQkFBMEM7UUFBMUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF3QjtJQUFHLENBQUM7SUFLckUsQUFBTixLQUFLLENBQUMsTUFBTSxDQUFRLEdBQUcsRUFBVSxHQUE2QjtRQUM1RCxJQUFJLENBQUM7WUFDSCw4QkFBOEI7WUFDOUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDL0MsT0FBTyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxLQUFLLFlBQVksc0JBQWE7Z0JBQUUsTUFBTSxLQUFLLENBQUM7WUFDaEQsTUFBTSxJQUFJLHNCQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSw4QkFBOEIsRUFBRSxLQUFLLENBQUMsTUFBTSxJQUFJLG1CQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbkgsQ0FBQztJQUNILENBQUM7SUFJSyxBQUFOLEtBQUssQ0FBQyxHQUFHLENBQWtCLE1BQWM7UUFDdkMsSUFBSSxDQUFDO1lBQ0gsT0FBTyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLEtBQUssWUFBWSxzQkFBYTtnQkFBRSxNQUFNLEtBQUssQ0FBQztZQUNoRCxNQUFNLElBQUksc0JBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksbUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRyxDQUFDO0lBQ0gsQ0FBQztJQUtLLEFBQU4sS0FBSyxDQUFDLE1BQU0sQ0FBa0IsTUFBYyxFQUFVLEdBQTZCO1FBQ2pGLElBQUksQ0FBQztZQUNILE9BQU8sTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUksS0FBSyxZQUFZLHNCQUFhO2dCQUFFLE1BQU0sS0FBSyxDQUFDO1lBQ2hELE1BQU0sSUFBSSxzQkFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksOEJBQThCLEVBQUUsS0FBSyxDQUFDLE1BQU0sSUFBSSxtQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ILENBQUM7SUFDSCxDQUFDO0lBSUssQUFBTixLQUFLLENBQUMsZUFBZSxDQUFrQixNQUFjO1FBQ25ELElBQUksQ0FBQztZQUNILE9BQU8sTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLEtBQUssWUFBWSxzQkFBYTtnQkFBRSxNQUFNLEtBQUssQ0FBQztZQUNoRCxNQUFNLElBQUksc0JBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLDZCQUE2QixFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksbUJBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsSCxDQUFDO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUFsRFksOERBQXlCO0FBTTlCO0lBSEwsSUFBQSxrQkFBUyxFQUFDLDZCQUFZLENBQUM7SUFDdkIsSUFBQSxhQUFJLEdBQUU7SUFDTixJQUFBLGlCQUFRLEVBQUMsSUFBSSx1QkFBYyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLFdBQUEsSUFBQSxZQUFHLEdBQUUsQ0FBQTtJQUFPLFdBQUEsSUFBQSxhQUFJLEdBQUUsQ0FBQTs7aUVBQU0sc0RBQXdCLG9CQUF4QixzREFBd0I7O3VEQVM3RDtBQUlLO0lBRkwsSUFBQSxrQkFBUyxFQUFDLDZCQUFZLENBQUM7SUFDdkIsSUFBQSxZQUFHLEVBQUMsU0FBUyxDQUFDO0lBQ0osV0FBQSxJQUFBLGNBQUssRUFBQyxRQUFRLENBQUMsQ0FBQTs7OztvREFPekI7QUFLSztJQUhMLElBQUEsa0JBQVMsRUFBQyw2QkFBWSxDQUFDO0lBQ3ZCLElBQUEsWUFBRyxFQUFDLFNBQVMsQ0FBQztJQUNkLElBQUEsaUJBQVEsRUFBQyxJQUFJLHVCQUFjLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEUsV0FBQSxJQUFBLGNBQUssRUFBQyxRQUFRLENBQUMsQ0FBQTtJQUFrQixXQUFBLElBQUEsYUFBSSxHQUFFLENBQUE7O2lFQUFNLHNEQUF3QixvQkFBeEIsc0RBQXdCOzt1REFPbEY7QUFJSztJQUZMLElBQUEsa0JBQVMsRUFBQyw2QkFBWSxDQUFDO0lBQ3ZCLElBQUEsWUFBRyxFQUFDLHVCQUF1QixDQUFDO0lBQ04sV0FBQSxJQUFBLGNBQUssRUFBQyxRQUFRLENBQUMsQ0FBQTs7OztnRUFPckM7b0NBakRVLHlCQUF5QjtJQURyQyxJQUFBLG1CQUFVLEVBQUMsYUFBYSxDQUFDO3lEQUV5QixpREFBc0Isb0JBQXRCLGlEQUFzQjtHQUQ1RCx5QkFBeUIsQ0FrRHJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcdXNlci1wcmVmZXJlbmNlc1xcdXNlci1wcmVmZXJlbmNlcy5jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xsZXIsIFBvc3QsIEdldCwgUHV0LCBCb2R5LCBQYXJhbSwgVXNlR3VhcmRzLCBSZXEsIFVzZVBpcGVzLCBWYWxpZGF0aW9uUGlwZSwgSHR0cEV4Y2VwdGlvbiwgSHR0cFN0YXR1cyB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3JlYXRlVXNlclByZWZlcmVuY2VzRHRvIH0gZnJvbSAnLi9kdG9zL2NyZWF0ZS11c2VyLXByZWZlcmVuY2VzLmR0byc7XHJcbmltcG9ydCB7IEp3dEF1dGhHdWFyZCB9IGZyb20gJ3NyYy9hdXRoL2d1YXJkcy9qd3QtYXV0aC5ndWFyZCc7XHJcblxyXG5cclxuQENvbnRyb2xsZXIoJ3ByZWZlcmVuY2VzJylcclxuZXhwb3J0IGNsYXNzIFVzZXJQcmVmZXJlbmNlc0NvbnRyb2xsZXIge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJlZmVyZW5jZXNTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlKSB7fVxyXG5cclxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcclxuICBAUG9zdCgpXHJcbiAgQFVzZVBpcGVzKG5ldyBWYWxpZGF0aW9uUGlwZSh7IHdoaXRlbGlzdDogdHJ1ZSwgZm9yYmlkTm9uV2hpdGVsaXN0ZWQ6IHRydWUgfSkpXHJcbiAgYXN5bmMgY3JlYXRlKEBSZXEoKSByZXEsIEBCb2R5KCkgZHRvOiBDcmVhdGVVc2VyUHJlZmVyZW5jZXNEdG8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyLmlkO1xyXG4gICAgICBjb25zdCB1c2VySWQgPSByZXEuYm9keS51c2VySWQgfHwgcmVxLnVzZXI/LmlkO1xyXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcmVmZXJlbmNlc1NlcnZpY2UuY3JlYXRlKHVzZXJJZCwgZHRvKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFeGNlcHRpb24pIHRocm93IGVycm9yO1xyXG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gY3JlYXRlIHByZWZlcmVuY2VzJywgZXJyb3Iuc3RhdHVzIHx8IEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQpXHJcbiAgQEdldCgnOnVzZXJJZCcpXHJcbiAgYXN5bmMgZ2V0KEBQYXJhbSgndXNlcklkJykgdXNlcklkOiBzdHJpbmcpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByZWZlcmVuY2VzU2VydmljZS5maW5kQnlVc2VySWQodXNlcklkKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFeGNlcHRpb24pIHRocm93IGVycm9yO1xyXG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihlcnJvci5tZXNzYWdlIHx8ICdQcmVmZXJlbmNlcyBub3QgZm91bmQnLCBlcnJvci5zdGF0dXMgfHwgSHR0cFN0YXR1cy5OT1RfRk9VTkQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQpXHJcbiAgQFB1dCgnOnVzZXJJZCcpXHJcbiAgQFVzZVBpcGVzKG5ldyBWYWxpZGF0aW9uUGlwZSh7IHdoaXRlbGlzdDogdHJ1ZSwgZm9yYmlkTm9uV2hpdGVsaXN0ZWQ6IHRydWUgfSkpXHJcbiAgYXN5bmMgdXBkYXRlKEBQYXJhbSgndXNlcklkJykgdXNlcklkOiBzdHJpbmcsIEBCb2R5KCkgZHRvOiBDcmVhdGVVc2VyUHJlZmVyZW5jZXNEdG8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByZWZlcmVuY2VzU2VydmljZS51cGRhdGUodXNlcklkLCBkdG8pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEV4Y2VwdGlvbikgdGhyb3cgZXJyb3I7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgcHJlZmVyZW5jZXMnLCBlcnJvci5zdGF0dXMgfHwgSHR0cFN0YXR1cy5CQURfUkVRVUVTVCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcclxuICBAR2V0KCc6dXNlcklkL2xlYXJuaW5nLXBhdGgnKVxyXG4gIGFzeW5jIGdldExlYXJuaW5nUGF0aChAUGFyYW0oJ3VzZXJJZCcpIHVzZXJJZDogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcmVmZXJlbmNlc1NlcnZpY2UuZ2V0Q3VzdG9taXplZExlYXJuaW5nUGF0aCh1c2VySWQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEV4Y2VwdGlvbikgdGhyb3cgZXJyb3I7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBnZXQgbGVhcm5pbmcgcGF0aCcsIGVycm9yLnN0YXR1cyB8fCBIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcclxuICAgIH1cclxuICB9XHJcbn0gIl0sInZlcnNpb24iOjN9