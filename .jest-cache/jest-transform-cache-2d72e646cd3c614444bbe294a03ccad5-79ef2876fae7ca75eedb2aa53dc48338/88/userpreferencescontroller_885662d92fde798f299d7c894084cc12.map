{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.controller.ts"],"sourcesContent":["import { Controller, Post, Get, Put, Body, Param, UseGuards, Req, UsePipes, ValidationPipe, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { UserPreferencesService } from './user-preferences.service';\r\nimport { CreateUserPreferencesDto } from './dtos/create-user-preferences.dto';\r\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\r\n\r\n\r\n@Controller('preferences')\r\nexport class UserPreferencesController {\r\n  constructor(private readonly preferencesService: UserPreferencesService) {}\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post()\r\n  @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))\r\n  async create(@Req() req, @Body() dto: CreateUserPreferencesDto) {\r\n    try {\r\n      // const userId = req.user.id;\r\n      const userId = req.body.userId || req.user?.id;\r\n      return await this.preferencesService.create(userId, dto);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) throw error;\r\n      throw new HttpException(error.message || 'Failed to create preferences', error.status || HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get(':userId')\r\n  async get(@Param('userId') userId: string) {\r\n    try {\r\n      return await this.preferencesService.findByUserId(userId);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) throw error;\r\n      throw new HttpException(error.message || 'Preferences not found', error.status || HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':userId')\r\n  @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))\r\n  async update(@Param('userId') userId: string, @Body() dto: CreateUserPreferencesDto) {\r\n    try {\r\n      return await this.preferencesService.update(userId, dto);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) throw error;\r\n      throw new HttpException(error.message || 'Failed to update preferences', error.status || HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get(':userId/learning-path')\r\n  async getLearningPath(@Param('userId') userId: string) {\r\n    try {\r\n      return await this.preferencesService.getCustomizedLearningPath(userId);\r\n    } catch (error) {\r\n      if (error instanceof HttpException) throw error;\r\n      throw new HttpException(error.message || 'Failed to get learning path', error.status || HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n} "],"version":3}