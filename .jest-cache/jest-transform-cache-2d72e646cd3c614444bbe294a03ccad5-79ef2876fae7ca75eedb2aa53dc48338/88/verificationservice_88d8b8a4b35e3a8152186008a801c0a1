9c2cd812f7aec09ddef50b8779ee56ec
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationService = void 0;
// src/verification/verification.service.ts
const common_1 = require("@nestjs/common");
const eth_signature_strategy_1 = require("./strategies/eth-signature.strategy");
const jwt_strategy_1 = require("./strategies/jwt.strategy");
const ipfs_proof_strategy_1 = require("./strategies/ipfs-proof.strategy");
let VerificationService = class VerificationService {
    constructor(ethStrategy, jwtStrategy, ipfsStrategy) {
        this.ethStrategy = ethStrategy;
        this.jwtStrategy = jwtStrategy;
        this.ipfsStrategy = ipfsStrategy;
    }
    async verify(dto) {
        switch (dto.method) {
            case 'eth_signature':
                return this.ethStrategy.verify(dto.credentialHash);
            case 'jwt':
                return this.jwtStrategy.verify(dto.credentialHash);
            case 'ipfs_proof':
                return this.ipfsStrategy.verify(dto.credentialHash);
            default:
                throw new Error('Unsupported verification method');
        }
    }
};
exports.VerificationService = VerificationService;
exports.VerificationService = VerificationService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof eth_signature_strategy_1.EthSignatureStrategy !== "undefined" && eth_signature_strategy_1.EthSignatureStrategy) === "function" ? _a : Object, typeof (_b = typeof jwt_strategy_1.JwtStrategy !== "undefined" && jwt_strategy_1.JwtStrategy) === "function" ? _b : Object, typeof (_c = typeof ipfs_proof_strategy_1.IpfsProofStrategy !== "undefined" && ipfs_proof_strategy_1.IpfsProofStrategy) === "function" ? _c : Object])
], VerificationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFx2ZXJpZmljYXRpb25cXHZlcmlmaWNhdGlvbi5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkM7QUFDM0MsMkNBQTRDO0FBRTVDLGdGQUEyRTtBQUMzRSw0REFBd0Q7QUFDeEQsMEVBQXFFO0FBRzlELElBQU0sbUJBQW1CLEdBQXpCLE1BQU0sbUJBQW1CO0lBQzlCLFlBQ1UsV0FBaUMsRUFDakMsV0FBd0IsRUFDeEIsWUFBK0I7UUFGL0IsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO1FBQ2pDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtJQUN0QyxDQUFDO0lBRUosS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUF3QjtRQUNuQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNuQixLQUFLLGVBQWU7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JELEtBQUssS0FBSztnQkFDUixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyRCxLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdEQ7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQW5CWSxrREFBbUI7OEJBQW5CLG1CQUFtQjtJQUQvQixJQUFBLG1CQUFVLEdBQUU7eURBR1ksNkNBQW9CLG9CQUFwQiw2Q0FBb0Isb0RBQ3BCLDBCQUFXLG9CQUFYLDBCQUFXLG9EQUNWLHVDQUFpQixvQkFBakIsdUNBQWlCO0dBSjlCLG1CQUFtQixDQW1CL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFx2ZXJpZmljYXRpb25cXHZlcmlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy92ZXJpZmljYXRpb24vdmVyaWZpY2F0aW9uLnNlcnZpY2UudHNcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgVmVyaWZ5Q3JlZGVudGlhbER0byB9IGZyb20gJy4vZHRvL3ZlcmlmeS1jcmVkZW50aWFsLmR0byc7XHJcbmltcG9ydCB7IEV0aFNpZ25hdHVyZVN0cmF0ZWd5IH0gZnJvbSAnLi9zdHJhdGVnaWVzL2V0aC1zaWduYXR1cmUuc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBKd3RTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ2llcy9qd3Quc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBJcGZzUHJvb2ZTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ2llcy9pcGZzLXByb29mLnN0cmF0ZWd5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFZlcmlmaWNhdGlvblNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBldGhTdHJhdGVneTogRXRoU2lnbmF0dXJlU3RyYXRlZ3ksXHJcbiAgICBwcml2YXRlIGp3dFN0cmF0ZWd5OiBKd3RTdHJhdGVneSxcclxuICAgIHByaXZhdGUgaXBmc1N0cmF0ZWd5OiBJcGZzUHJvb2ZTdHJhdGVneSxcclxuICApIHt9XHJcblxyXG4gIGFzeW5jIHZlcmlmeShkdG86IFZlcmlmeUNyZWRlbnRpYWxEdG8pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgc3dpdGNoIChkdG8ubWV0aG9kKSB7XHJcbiAgICAgIGNhc2UgJ2V0aF9zaWduYXR1cmUnOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmV0aFN0cmF0ZWd5LnZlcmlmeShkdG8uY3JlZGVudGlhbEhhc2gpO1xyXG4gICAgICBjYXNlICdqd3QnOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmp3dFN0cmF0ZWd5LnZlcmlmeShkdG8uY3JlZGVudGlhbEhhc2gpO1xyXG4gICAgICBjYXNlICdpcGZzX3Byb29mJzpcclxuICAgICAgICByZXR1cm4gdGhpcy5pcGZzU3RyYXRlZ3kudmVyaWZ5KGR0by5jcmVkZW50aWFsSGFzaCk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJpZmljYXRpb24gbWV0aG9kJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==