9e1f06d17e7311684a859f603585e1d9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificatesController = void 0;
/**
 * CertificatesController handles endpoints for managing certificates.
 */
const common_1 = require("@nestjs/common");
const create_certificate_dto_1 = require("./dto/create-certificate.dto");
const certificate_service_1 = require("./certificate.service");
const request_mapping_decorator_1 = require("@nestjs/common/decorators/http/request-mapping.decorator");
const route_params_decorator_1 = require("@nestjs/common/decorators/http/route-params.decorator");
const swagger_1 = require("@nestjs/swagger");
let CertificatesController = class CertificatesController {
    constructor(certificatesService) {
        this.certificatesService = certificatesService;
    }
    // Create a new certificate
    async create(createCertificateDto) {
        return this.certificatesService.create(createCertificateDto);
    }
    // Get all certificates
    async findAll() {
        return this.certificatesService.findAll();
    }
    // Get a single certificate by ID
    async findOne(id) {
        return this.certificatesService.findOne(id);
    }
    // Update an existing certificate
    async update(id, updateCertificateDto) {
        return this.certificatesService.update(id, updateCertificateDto);
    }
    // Delete a certificate
    async remove(id) {
        return this.certificatesService.remove(id);
    }
};
exports.CertificatesController = CertificatesController;
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Create a new certificate' }),
    (0, swagger_1.ApiBody)({ type: create_certificate_dto_1.CreateCertificateDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Certificate created.' }),
    (0, request_mapping_decorator_1.Post)(),
    __param(0, (0, route_params_decorator_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_certificate_dto_1.CreateCertificateDto !== "undefined" && create_certificate_dto_1.CreateCertificateDto) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CertificatesController.prototype, "create", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get all certificates' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of certificates.' }),
    (0, request_mapping_decorator_1.Get)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CertificatesController.prototype, "findAll", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get a certificate by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'Certificate ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Certificate found.' }),
    (0, request_mapping_decorator_1.Get)(':id'),
    __param(0, (0, route_params_decorator_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CertificatesController.prototype, "findOne", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update a certificate' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'Certificate ID' }),
    (0, swagger_1.ApiBody)({ type: create_certificate_dto_1.CreateCertificateDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Certificate updated.' }),
    (0, request_mapping_decorator_1.Put)(':id'),
    __param(0, (0, route_params_decorator_1.Param)('id')),
    __param(1, (0, route_params_decorator_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof Partial !== "undefined" && Partial) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], CertificatesController.prototype, "update", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Delete a certificate' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'Certificate ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Certificate deleted.' }),
    (0, request_mapping_decorator_1.Delete)(':id'),
    __param(0, (0, route_params_decorator_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], CertificatesController.prototype, "remove", null);
exports.CertificatesController = CertificatesController = __decorate([
    (0, swagger_1.ApiTags)('certificates'),
    (0, common_1.Controller)('certificates'),
    __metadata("design:paramtypes", [typeof (_a = typeof certificate_service_1.CertificatesService !== "undefined" && certificate_service_1.CertificatesService) === "function" ? _a : Object])
], CertificatesController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjZXJ0aWZpY2F0ZVxcY2VydGlmaWNhdGUuY29udHJvbGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0dBRUc7QUFDSCwyQ0FBNEM7QUFDNUMseUVBQW9FO0FBRXBFLCtEQUE0RDtBQUM1RCx3R0FLa0U7QUFDbEUsa0dBRytEO0FBQy9ELDZDQUF3RjtBQUlqRixJQUFNLHNCQUFzQixHQUE1QixNQUFNLHNCQUFzQjtJQUNqQyxZQUE2QixtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUFHLENBQUM7SUFFekUsMkJBQTJCO0lBS3JCLEFBQU4sS0FBSyxDQUFDLE1BQU0sQ0FDRixvQkFBMEM7UUFFbEQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELHVCQUF1QjtJQUlqQixBQUFOLEtBQUssQ0FBQyxPQUFPO1FBQ1gsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFpQztJQUszQixBQUFOLEtBQUssQ0FBQyxPQUFPLENBQWMsRUFBVTtRQUNuQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGlDQUFpQztJQU0zQixBQUFOLEtBQUssQ0FBQyxNQUFNLENBQ0csRUFBVSxFQUNmLG9CQUFtRDtRQUUzRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELHVCQUF1QjtJQUtqQixBQUFOLEtBQUssQ0FBQyxNQUFNLENBQWMsRUFBVTtRQUNsQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGLENBQUE7QUFwRFksd0RBQXNCO0FBUTNCO0lBSkwsSUFBQSxzQkFBWSxFQUFDLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUM7SUFDckQsSUFBQSxpQkFBTyxFQUFDLEVBQUUsSUFBSSxFQUFFLDZDQUFvQixFQUFFLENBQUM7SUFDdkMsSUFBQSxxQkFBVyxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztJQUNqRSxJQUFBLGdDQUFJLEdBQUU7SUFFSixXQUFBLElBQUEsNkJBQUksR0FBRSxDQUFBOzt5REFBdUIsNkNBQW9CLG9CQUFwQiw2Q0FBb0I7d0RBQ2pELE9BQU8sb0JBQVAsT0FBTztvREFFVDtBQU1LO0lBSEwsSUFBQSxzQkFBWSxFQUFDLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLENBQUM7SUFDakQsSUFBQSxxQkFBVyxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztJQUNsRSxJQUFBLCtCQUFHLEdBQUU7Ozt3REFDVyxPQUFPLG9CQUFQLE9BQU87cURBRXZCO0FBT0s7SUFKTCxJQUFBLHNCQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQztJQUNwRCxJQUFBLGtCQUFRLEVBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLENBQUM7SUFDdkUsSUFBQSxxQkFBVyxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztJQUMvRCxJQUFBLCtCQUFHLEVBQUMsS0FBSyxDQUFDO0lBQ0ksV0FBQSxJQUFBLDhCQUFLLEVBQUMsSUFBSSxDQUFDLENBQUE7Ozt3REFBYyxPQUFPLG9CQUFQLE9BQU87cURBRTlDO0FBUUs7SUFMTCxJQUFBLHNCQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztJQUNqRCxJQUFBLGtCQUFRLEVBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLENBQUM7SUFDdkUsSUFBQSxpQkFBTyxFQUFDLEVBQUUsSUFBSSxFQUFFLDZDQUFvQixFQUFFLENBQUM7SUFDdkMsSUFBQSxxQkFBVyxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztJQUNqRSxJQUFBLCtCQUFHLEVBQUMsS0FBSyxDQUFDO0lBRVIsV0FBQSxJQUFBLDhCQUFLLEVBQUMsSUFBSSxDQUFDLENBQUE7SUFDWCxXQUFBLElBQUEsNkJBQUksR0FBRSxDQUFBOztpRUFBdUIsT0FBTyxvQkFBUCxPQUFPO3dEQUNwQyxPQUFPLG9CQUFQLE9BQU87b0RBRVQ7QUFPSztJQUpMLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxDQUFDO0lBQ2pELElBQUEsa0JBQVEsRUFBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2RSxJQUFBLHFCQUFXLEVBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDO0lBQ2pFLElBQUEsa0NBQU0sRUFBQyxLQUFLLENBQUM7SUFDQSxXQUFBLElBQUEsOEJBQUssRUFBQyxJQUFJLENBQUMsQ0FBQTs7O3dEQUFjLE9BQU8sb0JBQVAsT0FBTztvREFFN0M7aUNBbkRVLHNCQUFzQjtJQUZsQyxJQUFBLGlCQUFPLEVBQUMsY0FBYyxDQUFDO0lBQ3ZCLElBQUEsbUJBQVUsRUFBQyxjQUFjLENBQUM7eURBRXlCLHlDQUFtQixvQkFBbkIseUNBQW1CO0dBRDFELHNCQUFzQixDQW9EbEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjZXJ0aWZpY2F0ZVxcY2VydGlmaWNhdGUuY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2VydGlmaWNhdGVzQ29udHJvbGxlciBoYW5kbGVzIGVuZHBvaW50cyBmb3IgbWFuYWdpbmcgY2VydGlmaWNhdGVzLlxyXG4gKi9cclxuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgQ3JlYXRlQ2VydGlmaWNhdGVEdG8gfSBmcm9tICcuL2R0by9jcmVhdGUtY2VydGlmaWNhdGUuZHRvJztcclxuaW1wb3J0IHsgQ2VydGlmaWNhdGUgfSBmcm9tICcuL2VudGl0eS9jZXJ0aWZpY2F0ZS5lbnRpdHknO1xyXG5pbXBvcnQgeyBDZXJ0aWZpY2F0ZXNTZXJ2aWNlIH0gZnJvbSAnLi9jZXJ0aWZpY2F0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHtcclxuICBEZWxldGUsXHJcbiAgR2V0LFxyXG4gIFBvc3QsXHJcbiAgUHV0LFxyXG59IGZyb20gJ0BuZXN0anMvY29tbW9uL2RlY29yYXRvcnMvaHR0cC9yZXF1ZXN0LW1hcHBpbmcuZGVjb3JhdG9yJztcclxuaW1wb3J0IHtcclxuICBCb2R5LFxyXG4gIFBhcmFtLFxyXG59IGZyb20gJ0BuZXN0anMvY29tbW9uL2RlY29yYXRvcnMvaHR0cC9yb3V0ZS1wYXJhbXMuZGVjb3JhdG9yJztcclxuaW1wb3J0IHsgQXBpVGFncywgQXBpT3BlcmF0aW9uLCBBcGlSZXNwb25zZSwgQXBpUGFyYW0sIEFwaUJvZHkgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xyXG5cclxuQEFwaVRhZ3MoJ2NlcnRpZmljYXRlcycpXHJcbkBDb250cm9sbGVyKCdjZXJ0aWZpY2F0ZXMnKVxyXG5leHBvcnQgY2xhc3MgQ2VydGlmaWNhdGVzQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjZXJ0aWZpY2F0ZXNTZXJ2aWNlOiBDZXJ0aWZpY2F0ZXNTZXJ2aWNlKSB7fVxyXG5cclxuICAvLyBDcmVhdGUgYSBuZXcgY2VydGlmaWNhdGVcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0NyZWF0ZSBhIG5ldyBjZXJ0aWZpY2F0ZScgfSlcclxuICBAQXBpQm9keSh7IHR5cGU6IENyZWF0ZUNlcnRpZmljYXRlRHRvIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDEsIGRlc2NyaXB0aW9uOiAnQ2VydGlmaWNhdGUgY3JlYXRlZC4nIH0pXHJcbiAgQFBvc3QoKVxyXG4gIGFzeW5jIGNyZWF0ZShcclxuICAgIEBCb2R5KCkgY3JlYXRlQ2VydGlmaWNhdGVEdG86IENyZWF0ZUNlcnRpZmljYXRlRHRvLFxyXG4gICk6IFByb21pc2U8Q2VydGlmaWNhdGU+IHtcclxuICAgIHJldHVybiB0aGlzLmNlcnRpZmljYXRlc1NlcnZpY2UuY3JlYXRlKGNyZWF0ZUNlcnRpZmljYXRlRHRvKTtcclxuICB9XHJcblxyXG4gIC8vIEdldCBhbGwgY2VydGlmaWNhdGVzXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdHZXQgYWxsIGNlcnRpZmljYXRlcycgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdMaXN0IG9mIGNlcnRpZmljYXRlcy4nIH0pXHJcbiAgQEdldCgpXHJcbiAgYXN5bmMgZmluZEFsbCgpOiBQcm9taXNlPENlcnRpZmljYXRlW10+IHtcclxuICAgIHJldHVybiB0aGlzLmNlcnRpZmljYXRlc1NlcnZpY2UuZmluZEFsbCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGEgc2luZ2xlIGNlcnRpZmljYXRlIGJ5IElEXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdHZXQgYSBjZXJ0aWZpY2F0ZSBieSBJRCcgfSlcclxuICBAQXBpUGFyYW0oeyBuYW1lOiAnaWQnLCB0eXBlOiAnc3RyaW5nJywgZGVzY3JpcHRpb246ICdDZXJ0aWZpY2F0ZSBJRCcgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdDZXJ0aWZpY2F0ZSBmb3VuZC4nIH0pXHJcbiAgQEdldCgnOmlkJylcclxuICBhc3luYyBmaW5kT25lKEBQYXJhbSgnaWQnKSBpZDogc3RyaW5nKTogUHJvbWlzZTxDZXJ0aWZpY2F0ZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2VydGlmaWNhdGVzU2VydmljZS5maW5kT25lKGlkKTtcclxuICB9XHJcblxyXG4gIC8vIFVwZGF0ZSBhbiBleGlzdGluZyBjZXJ0aWZpY2F0ZVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnVXBkYXRlIGEgY2VydGlmaWNhdGUnIH0pXHJcbiAgQEFwaVBhcmFtKHsgbmFtZTogJ2lkJywgdHlwZTogJ3N0cmluZycsIGRlc2NyaXB0aW9uOiAnQ2VydGlmaWNhdGUgSUQnIH0pXHJcbiAgQEFwaUJvZHkoeyB0eXBlOiBDcmVhdGVDZXJ0aWZpY2F0ZUR0byB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ0NlcnRpZmljYXRlIHVwZGF0ZWQuJyB9KVxyXG4gIEBQdXQoJzppZCcpXHJcbiAgYXN5bmMgdXBkYXRlKFxyXG4gICAgQFBhcmFtKCdpZCcpIGlkOiBzdHJpbmcsXHJcbiAgICBAQm9keSgpIHVwZGF0ZUNlcnRpZmljYXRlRHRvOiBQYXJ0aWFsPENyZWF0ZUNlcnRpZmljYXRlRHRvPixcclxuICApOiBQcm9taXNlPENlcnRpZmljYXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jZXJ0aWZpY2F0ZXNTZXJ2aWNlLnVwZGF0ZShpZCwgdXBkYXRlQ2VydGlmaWNhdGVEdG8pO1xyXG4gIH1cclxuXHJcbiAgLy8gRGVsZXRlIGEgY2VydGlmaWNhdGVcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0RlbGV0ZSBhIGNlcnRpZmljYXRlJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIHR5cGU6ICdzdHJpbmcnLCBkZXNjcmlwdGlvbjogJ0NlcnRpZmljYXRlIElEJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ0NlcnRpZmljYXRlIGRlbGV0ZWQuJyB9KVxyXG4gIEBEZWxldGUoJzppZCcpXHJcbiAgYXN5bmMgcmVtb3ZlKEBQYXJhbSgnaWQnKSBpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jZXJ0aWZpY2F0ZXNTZXJ2aWNlLnJlbW92ZShpZCk7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==