d4b7c2b987ba49792dedb09c12e6dd3d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSeeder = exports.testData = exports.createCourses = exports.createCourse = exports.createUsers = exports.createUser = exports.BaseFactory = exports.Factory = exports.courseFactory = exports.userFactory = exports.FactoryRegistry = void 0;
const user_factory_1 = require("./user.factory");
const course_factory_1 = require("./course.factory");
const base_factory_1 = require("./base.factory");
Object.defineProperty(exports, "BaseFactory", { enumerable: true, get: function () { return base_factory_1.BaseFactory; } });
// Factory registry for easy access
class FactoryRegistry {
    static register(name, factory) {
        this.factories.set(name, factory);
    }
    static get(name) {
        const factory = this.factories.get(name);
        if (!factory) {
            throw new Error(`Factory '${name}' not found`);
        }
        return factory;
    }
    static create(name, options = {}) {
        return this.get(name).create(options);
    }
    static createMany(name, count, options = {}) {
        return this.get(name).createMany(count, options);
    }
    static build(name, options = {}) {
        return this.get(name).build(options);
    }
    static buildMany(name, count, options = {}) {
        return this.get(name).buildMany(count, options);
    }
    static resetSeed(seed = 12345) {
        base_factory_1.BaseFactory.resetSeed(seed);
    }
}
exports.FactoryRegistry = FactoryRegistry;
exports.Factory = FactoryRegistry;
FactoryRegistry.factories = new Map();
// Register all factories
FactoryRegistry.register('user', new user_factory_1.UserFactory());
FactoryRegistry.register('course', new course_factory_1.CourseFactory());
// Export individual factories
exports.userFactory = new user_factory_1.UserFactory();
exports.courseFactory = new course_factory_1.CourseFactory();
// Convenience functions
const createUser = (options = {}) => exports.userFactory.create(options);
exports.createUser = createUser;
const createUsers = (count, options = {}) => exports.userFactory.createMany(count, options);
exports.createUsers = createUsers;
const createCourse = (options = {}) => exports.courseFactory.create(options);
exports.createCourse = createCourse;
const createCourses = (count, options = {}) => exports.courseFactory.createMany(count, options);
exports.createCourses = createCourses;
// Test data presets
exports.testData = {
    users: {
        admin: () => exports.userFactory.admin(),
        instructor: () => exports.userFactory.instructor(),
        student: () => exports.userFactory.student(),
        unverified: () => exports.userFactory.unverified(),
        team: () => exports.userFactory.createTeam(),
    },
    courses: {
        published: () => exports.courseFactory.published(),
        draft: () => exports.courseFactory.draft(),
        featured: () => exports.courseFactory.featured(),
        free: () => exports.courseFactory.free(),
        premium: () => exports.courseFactory.premium(),
        popular: () => exports.courseFactory.popular(),
        catalog: (count = 10) => exports.courseFactory.createCatalog(count),
    },
    scenarios: {
        // Complete learning platform scenario
        learningPlatform: () => {
            const admin = exports.userFactory.admin();
            const instructors = exports.userFactory.createMany(3, { traits: ['instructor'] });
            const students = exports.userFactory.createMany(10, { traits: ['student'] });
            const courses = exports.courseFactory.createCatalog(15);
            return {
                admin,
                instructors,
                students,
                courses,
            };
        },
        // Course enrollment scenario
        courseEnrollment: () => {
            const instructor = exports.userFactory.instructor();
            const course = exports.courseFactory.withInstructor(instructor);
            const students = exports.userFactory.createMany(5, { traits: ['student'] });
            return {
                instructor,
                course,
                students,
            };
        },
        // Authentication scenario
        authentication: () => {
            const activeUser = exports.userFactory.forAuth('password123');
            const unverifiedUser = exports.userFactory.unverified();
            const inactiveUser = exports.userFactory.inactive();
            return {
                activeUser,
                unverifiedUser,
                inactiveUser,
            };
        },
        // Payment scenario
        payment: () => {
            const student = exports.userFactory.student();
            const premiumCourse = exports.courseFactory.premium();
            const freeCourse = exports.courseFactory.free();
            return {
                student,
                premiumCourse,
                freeCourse,
            };
        },
    },
};
// Database seeding utilities
class TestSeeder {
    static async seedUsers(count = 10) {
        const users = [];
        // Create admin
        users.push(exports.userFactory.admin({ overrides: { email: 'admin@test.com' } }));
        // Create instructors
        users.push(...exports.userFactory.createMany(2, { traits: ['instructor'] }));
        // Create students
        users.push(...exports.userFactory.createMany(count - 3, { traits: ['student'] }));
        return users;
    }
    static async seedCourses(instructors, count = 20) {
        const courses = [];
        instructors.forEach((instructor, index) => {
            const coursesPerInstructor = Math.ceil(count / instructors.length);
            const instructorCourses = exports.courseFactory.createMany(coursesPerInstructor, {
                overrides: { instructor },
            });
            courses.push(...instructorCourses);
        });
        return courses.slice(0, count);
    }
    static async seedCompleteDatabase() {
        // Reset seed for consistent data
        base_factory_1.BaseFactory.resetSeed(12345);
        const users = await this.seedUsers(50);
        const instructors = users.filter(u => u.role === 'instructor');
        const courses = await this.seedCourses(instructors, 100);
        // Create enrollments (simplified)
        const enrollments = [];
        const students = users.filter(u => u.role === 'student');
        students.forEach(student => {
            const enrolledCourses = exports.courseFactory.pickRandomMany(courses, exports.courseFactory.generateNumber(1, 5));
            enrolledCourses.forEach(course => {
                enrollments.push({
                    id: exports.courseFactory.generateId(),
                    student,
                    course,
                    enrolledAt: exports.courseFactory.generateDate({ past: true }),
                    progress: exports.courseFactory.generateNumber(0, 100),
                    completed: exports.courseFactory.generateBoolean(),
                });
            });
        });
        return {
            users,
            courses,
            enrollments,
        };
    }
}
exports.TestSeeder = TestSeeder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcdGVzdFxcZmFjdG9yaWVzXFxpbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBNkM7QUFDN0MscURBQWlEO0FBQ2pELGlEQUE2QztBQW1EcEMsNEZBbkRBLDBCQUFXLE9BbURBO0FBakRwQixtQ0FBbUM7QUFDbkMsTUFBYSxlQUFlO0lBRzFCLE1BQU0sQ0FBQyxRQUFRLENBQUksSUFBWSxFQUFFLE9BQXVCO1FBQ3RELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBSSxJQUFZO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBSSxJQUFZLEVBQUUsVUFBZSxFQUFFO1FBQzlDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUksSUFBWSxFQUFFLEtBQWEsRUFBRSxVQUFlLEVBQUU7UUFDakUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUksSUFBWSxFQUFFLFVBQWUsRUFBRTtRQUM3QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxD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LE1BQU0sZUFBZSxHQUFHLHFCQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFDMUQscUJBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNuQyxDQUFDO1lBRUYsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDL0IsV0FBVyxDQUFDLElBQUksQ0FBQztvQkFDZixFQUFFLEVBQUUscUJBQWEsQ0FBQyxVQUFVLEVBQUU7b0JBQzlCLE9BQU87b0JBQ1AsTUFBTTtvQkFDTixVQUFVLEVBQUUscUJBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7b0JBQ3RELFFBQVEsRUFBRSxxQkFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO29CQUM5QyxTQUFTLEVBQUUscUJBQWEsQ0FBQyxlQUFlLEVBQUU7aUJBQzNDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPO1lBQ0wsS0FBSztZQUNMLE9BQU87WUFDUCxXQUFXO1NBQ1osQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJFRCxnQ0FxRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcdGVzdFxcZmFjdG9yaWVzXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyRmFjdG9yeSB9IGZyb20gJy4vdXNlci5mYWN0b3J5JztcclxuaW1wb3J0IHsgQ291cnNlRmFjdG9yeSB9IGZyb20gJy4vY291cnNlLmZhY3RvcnknO1xyXG5pbXBvcnQgeyBCYXNlRmFjdG9yeSB9IGZyb20gJy4vYmFzZS5mYWN0b3J5JztcclxuXHJcbi8vIEZhY3RvcnkgcmVnaXN0cnkgZm9yIGVhc3kgYWNjZXNzXHJcbmV4cG9ydCBjbGFzcyBGYWN0b3J5UmVnaXN0cnkge1xyXG4gIHByaXZhdGUgc3RhdGljIGZhY3RvcmllcyA9IG5ldyBNYXA8c3RyaW5nLCBCYXNlRmFjdG9yeTxhbnk+PigpO1xyXG5cclxuICBzdGF0aWMgcmVnaXN0ZXI8VD4obmFtZTogc3RyaW5nLCBmYWN0b3J5OiBCYXNlRmFjdG9yeTxUPik6IHZvaWQge1xyXG4gICAgdGhpcy5mYWN0b3JpZXMuc2V0KG5hbWUsIGZhY3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldDxUPihuYW1lOiBzdHJpbmcpOiBCYXNlRmFjdG9yeTxUPiB7XHJcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5mYWN0b3JpZXMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKCFmYWN0b3J5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFjdG9yeSAnJHtuYW1lfScgbm90IGZvdW5kYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFjdG9yeTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGU8VD4obmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0PFQ+KG5hbWUpLmNyZWF0ZShvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVNYW55PFQ+KG5hbWU6IHN0cmluZywgY291bnQ6IG51bWJlciwgb3B0aW9uczogYW55ID0ge30pOiBUW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0PFQ+KG5hbWUpLmNyZWF0ZU1hbnkoY291bnQsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJ1aWxkPFQ+KG5hbWU6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBQYXJ0aWFsPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmdldDxUPihuYW1lKS5idWlsZChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBidWlsZE1hbnk8VD4obmFtZTogc3RyaW5nLCBjb3VudDogbnVtYmVyLCBvcHRpb25zOiBhbnkgPSB7fSk6IFBhcnRpYWw8VD5bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXQ8VD4obmFtZSkuYnVpbGRNYW55KGNvdW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZXNldFNlZWQoc2VlZDogbnVtYmVyID0gMTIzNDUpOiB2b2lkIHtcclxuICAgIEJhc2VGYWN0b3J5LnJlc2V0U2VlZChzZWVkKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFJlZ2lzdGVyIGFsbCBmYWN0b3JpZXNcclxuRmFjdG9yeVJlZ2lzdHJ5LnJlZ2lzdGVyKCd1c2VyJywgbmV3IFVzZXJGYWN0b3J5KCkpO1xyXG5GYWN0b3J5UmVnaXN0cnkucmVnaXN0ZXIoJ2NvdXJzZScsIG5ldyBDb3Vyc2VGYWN0b3J5KCkpO1xyXG5cclxuLy8gRXhwb3J0IGluZGl2aWR1YWwgZmFjdG9yaWVzXHJcbmV4cG9ydCBjb25zdCB1c2VyRmFjdG9yeSA9IG5ldyBVc2VyRmFjdG9yeSgpO1xyXG5leHBvcnQgY29uc3QgY291cnNlRmFjdG9yeSA9IG5ldyBDb3Vyc2VGYWN0b3J5KCk7XHJcblxyXG4vLyBFeHBvcnQgZmFjdG9yeSByZWdpc3RyeVxyXG5leHBvcnQgeyBGYWN0b3J5UmVnaXN0cnkgYXMgRmFjdG9yeSB9O1xyXG5cclxuLy8gRXhwb3J0IGJhc2UgZmFjdG9yeSBmb3IgY3VzdG9tIGZhY3Rvcmllc1xyXG5leHBvcnQgeyBCYXNlRmFjdG9yeSB9O1xyXG5cclxuLy8gQ29udmVuaWVuY2UgZnVuY3Rpb25zXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVc2VyID0gKG9wdGlvbnM6IGFueSA9IHt9KSA9PiB1c2VyRmFjdG9yeS5jcmVhdGUob3B0aW9ucyk7XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVc2VycyA9IChjb3VudDogbnVtYmVyLCBvcHRpb25zOiBhbnkgPSB7fSkgPT4gdXNlckZhY3RvcnkuY3JlYXRlTWFueShjb3VudCwgb3B0aW9ucyk7XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVDb3Vyc2UgPSAob3B0aW9uczogYW55ID0ge30pID0+IGNvdXJzZUZhY3RvcnkuY3JlYXRlKG9wdGlvbnMpO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlQ291cnNlcyA9IChjb3VudDogbnVtYmVyLCBvcHRpb25zOiBhbnkgPSB7fSkgPT4gY291cnNlRmFjdG9yeS5jcmVhdGVNYW55KGNvdW50LCBvcHRpb25zKTtcclxuXHJcbi8vIFRlc3QgZGF0YSBwcmVzZXRzXHJcbmV4cG9ydCBjb25zdCB0ZXN0RGF0YSA9IHtcclxuICB1c2Vyczoge1xyXG4gICAgYWRtaW46ICgpID0+IHVzZXJGYWN0b3J5LmFkbWluKCksXHJcbiAgICBpbnN0cnVjdG9yOiAoKSA9PiB1c2VyRmFjdG9yeS5pbnN0cnVjdG9yKCksXHJcbiAgICBzdHVkZW50OiAoKSA9PiB1c2VyRmFjdG9yeS5zdHVkZW50KCksXHJcbiAgICB1bnZlcmlmaWVkOiAoKSA9PiB1c2VyRmFjdG9yeS51bnZlcmlmaWVkKCksXHJcbiAgICB0ZWFtOiAoKSA9PiB1c2VyRmFjdG9yeS5jcmVhdGVUZWFtKCksXHJcbiAgfSxcclxuICBcclxuICBjb3Vyc2VzOiB7XHJcbiAgICBwdWJsaXNoZWQ6ICgpID0+IGNvdXJzZUZhY3RvcnkucHVibGlzaGVkKCksXHJcbiAgICBkcmFmdDogKCkgPT4gY291cnNlRmFjdG9yeS5kcmFmdCgpLFxyXG4gICAgZmVhdHVyZWQ6ICgpID0+IGNvdXJzZUZhY3RvcnkuZmVhdHVyZWQoKSxcclxuICAgIGZyZWU6ICgpID0+IGNvdXJzZUZhY3RvcnkuZnJlZSgpLFxyXG4gICAgcHJlbWl1bTogKCkgPT4gY291cnNlRmFjdG9yeS5wcmVtaXVtKCksXHJcbiAgICBwb3B1bGFyOiAoKSA9PiBjb3Vyc2VGYWN0b3J5LnBvcHVsYXIoKSxcclxuICAgIGNhdGFsb2c6IChjb3VudDogbnVtYmVyID0gMTApID0+IGNvdXJzZUZhY3RvcnkuY3JlYXRlQ2F0YWxvZyhjb3VudCksXHJcbiAgfSxcclxuICBcclxuICBzY2VuYXJpb3M6IHtcclxuICAgIC8vIENvbXBsZXRlIGxlYXJuaW5nIHBsYXRmb3JtIHNjZW5hcmlvXHJcbiAgICBsZWFybmluZ1BsYXRmb3JtOiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFkbWluID0gdXNlckZhY3RvcnkuYWRtaW4oKTtcclxuICAgICAgY29uc3QgaW5zdHJ1Y3RvcnMgPSB1c2VyRmFjdG9yeS5jcmVhdGVNYW55KDMsIHsgdHJhaXRzOiBbJ2luc3RydWN0b3InXSB9KTtcclxuICAgICAgY29uc3Qgc3R1ZGVudHMgPSB1c2VyRmFjdG9yeS5jcmVhdGVNYW55KDEwLCB7IHRyYWl0czogWydzdHVkZW50J10gfSk7XHJcbiAgICAgIGNvbnN0IGNvdXJzZXMgPSBjb3Vyc2VGYWN0b3J5LmNyZWF0ZUNhdGFsb2coMTUpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhZG1pbixcclxuICAgICAgICBpbnN0cnVjdG9ycyxcclxuICAgICAgICBzdHVkZW50cyxcclxuICAgICAgICBjb3Vyc2VzLFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLy8gQ291cnNlIGVucm9sbG1lbnQgc2NlbmFyaW9cclxuICAgIGNvdXJzZUVucm9sbG1lbnQ6ICgpID0+IHtcclxuICAgICAgY29uc3QgaW5zdHJ1Y3RvciA9IHVzZXJGYWN0b3J5Lmluc3RydWN0b3IoKTtcclxuICAgICAgY29uc3QgY291cnNlID0gY291cnNlRmFjdG9yeS53aXRoSW5zdHJ1Y3RvcihpbnN0cnVjdG9yKTtcclxuICAgICAgY29uc3Qgc3R1ZGVudHMgPSB1c2VyRmFjdG9yeS5jcmVhdGVNYW55KDUsIHsgdHJhaXRzOiBbJ3N0dWRlbnQnXSB9KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5zdHJ1Y3RvcixcclxuICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgc3R1ZGVudHMsXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvLyBBdXRoZW50aWNhdGlvbiBzY2VuYXJpb1xyXG4gICAgYXV0aGVudGljYXRpb246ICgpID0+IHtcclxuICAgICAgY29uc3QgYWN0aXZlVXNlciA9IHVzZXJGYWN0b3J5LmZvckF1dGgoJ3Bhc3N3b3JkMTIzJyk7XHJcbiAgICAgIGNvbnN0IHVudmVyaWZpZWRVc2VyID0gdXNlckZhY3RvcnkudW52ZXJpZmllZCgpO1xyXG4gICAgICBjb25zdCBpbmFjdGl2ZVVzZXIgPSB1c2VyRmFjdG9yeS5pbmFjdGl2ZSgpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhY3RpdmVVc2VyLFxyXG4gICAgICAgIHVudmVyaWZpZWRVc2VyLFxyXG4gICAgICAgIGluYWN0aXZlVXNlcixcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8vIFBheW1lbnQgc2NlbmFyaW9cclxuICAgIHBheW1lbnQ6ICgpID0+IHtcclxuICAgICAgY29uc3Qgc3R1ZGVudCA9IHVzZXJGYWN0b3J5LnN0dWRlbnQoKTtcclxuICAgICAgY29uc3QgcHJlbWl1bUNvdXJzZSA9IGNvdXJzZUZhY3RvcnkucHJlbWl1bSgpO1xyXG4gICAgICBjb25zdCBmcmVlQ291cnNlID0gY291cnNlRmFjdG9yeS5mcmVlKCk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0dWRlbnQsXHJcbiAgICAgICAgcHJlbWl1bUNvdXJzZSxcclxuICAgICAgICBmcmVlQ291cnNlLFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICB9LFxyXG59O1xyXG5cclxuLy8gRGF0YWJhc2Ugc2VlZGluZyB1dGlsaXRpZXNcclxuZXhwb3J0IGNsYXNzIFRlc3RTZWVkZXIge1xyXG4gIHN0YXRpYyBhc3luYyBzZWVkVXNlcnMoY291bnQ6IG51bWJlciA9IDEwKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgY29uc3QgdXNlcnMgPSBbXTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIGFkbWluXHJcbiAgICB1c2Vycy5wdXNoKHVzZXJGYWN0b3J5LmFkbWluKHsgb3ZlcnJpZGVzOiB7IGVtYWlsOiAnYWRtaW5AdGVzdC5jb20nIH0gfSkpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgaW5zdHJ1Y3RvcnNcclxuICAgIHVzZXJzLnB1c2goLi4udXNlckZhY3RvcnkuY3JlYXRlTWFueSgyLCB7IHRyYWl0czogWydpbnN0cnVjdG9yJ10gfSkpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgc3R1ZGVudHNcclxuICAgIHVzZXJzLnB1c2goLi4udXNlckZhY3RvcnkuY3JlYXRlTWFueShjb3VudCAtIDMsIHsgdHJhaXRzOiBbJ3N0dWRlbnQnXSB9KSk7XHJcbiAgICBcclxuICAgIHJldHVybiB1c2VycztcclxuICB9XHJcbiAgXHJcbiAgc3RhdGljIGFzeW5jIHNlZWRDb3Vyc2VzKGluc3RydWN0b3JzOiBhbnlbXSwgY291bnQ6IG51bWJlciA9IDIwKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgY29uc3QgY291cnNlcyA9IFtdO1xyXG4gICAgXHJcbiAgICBpbnN0cnVjdG9ycy5mb3JFYWNoKChpbnN0cnVjdG9yLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBjb3Vyc2VzUGVySW5zdHJ1Y3RvciA9IE1hdGguY2VpbChjb3VudCAvIGluc3RydWN0b3JzLmxlbmd0aCk7XHJcbiAgICAgIGNvbnN0IGluc3RydWN0b3JDb3Vyc2VzID0gY291cnNlRmFjdG9yeS5jcmVhdGVNYW55KGNvdXJzZXNQZXJJbnN0cnVjdG9yLCB7XHJcbiAgICAgICAgb3ZlcnJpZGVzOiB7IGluc3RydWN0b3IgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvdXJzZXMucHVzaCguLi5pbnN0cnVjdG9yQ291cnNlcyk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGNvdXJzZXMuc2xpY2UoMCwgY291bnQpO1xyXG4gIH1cclxuICBcclxuICBzdGF0aWMgYXN5bmMgc2VlZENvbXBsZXRlRGF0YWJhc2UoKTogUHJvbWlzZTx7XHJcbiAgICB1c2VyczogYW55W107XHJcbiAgICBjb3Vyc2VzOiBhbnlbXTtcclxuICAgIGVucm9sbG1lbnRzOiBhbnlbXTtcclxuICB9PiB7XHJcbiAgICAvLyBSZXNldCBzZWVkIGZvciBjb25zaXN0ZW50IGRhdGFcclxuICAgIEJhc2VGYWN0b3J5LnJlc2V0U2VlZCgxMjM0NSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgdGhpcy5zZWVkVXNlcnMoNTApO1xyXG4gICAgY29uc3QgaW5zdHJ1Y3RvcnMgPSB1c2Vycy5maWx0ZXIodSA9PiB1LnJvbGUgPT09ICdpbnN0cnVjdG9yJyk7XHJcbiAgICBjb25zdCBjb3Vyc2VzID0gYXdhaXQgdGhpcy5zZWVkQ291cnNlcyhpbnN0cnVjdG9ycywgMTAwKTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIGVucm9sbG1lbnRzIChzaW1wbGlmaWVkKVxyXG4gICAgY29uc3QgZW5yb2xsbWVudHMgPSBbXTtcclxuICAgIGNvbnN0IHN0dWRlbnRzID0gdXNlcnMuZmlsdGVyKHUgPT4gdS5yb2xlID09PSAnc3R1ZGVudCcpO1xyXG4gICAgXHJcbiAgICBzdHVkZW50cy5mb3JFYWNoKHN0dWRlbnQgPT4ge1xyXG4gICAgICBjb25zdCBlbnJvbGxlZENvdXJzZXMgPSBjb3Vyc2VGYWN0b3J5LnBpY2tSYW5kb21NYW55KGNvdXJzZXMsIFxyXG4gICAgICAgIGNvdXJzZUZhY3RvcnkuZ2VuZXJhdGVOdW1iZXIoMSwgNSlcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIGVucm9sbGVkQ291cnNlcy5mb3JFYWNoKGNvdXJzZSA9PiB7XHJcbiAgICAgICAgZW5yb2xsbWVudHMucHVzaCh7XHJcbiAgICAgICAgICBpZDogY291cnNlRmFjdG9yeS5nZW5lcmF0ZUlkKCksXHJcbiAgICAgICAgICBzdHVkZW50LFxyXG4gICAgICAgICAgY291cnNlLFxyXG4gICAgICAgICAgZW5yb2xsZWRBdDogY291cnNlRmFjdG9yeS5nZW5lcmF0ZURhdGUoeyBwYXN0OiB0cnVlIH0pLFxyXG4gICAgICAgICAgcHJvZ3Jlc3M6IGNvdXJzZUZhY3RvcnkuZ2VuZXJhdGVOdW1iZXIoMCwgMTAwKSxcclxuICAgICAgICAgIGNvbXBsZXRlZDogY291cnNlRmFjdG9yeS5nZW5lcmF0ZUJvb2xlYW4oKSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdXNlcnMsXHJcbiAgICAgIGNvdXJzZXMsXHJcbiAgICAgIGVucm9sbG1lbnRzLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9