{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.controller.ts"],"sourcesContent":["/**\r\n * CertificatesController handles endpoints for managing certificates.\r\n */\r\nimport { Controller } from '@nestjs/common';\r\nimport { CreateCertificateDto } from './dto/create-certificate.dto';\r\nimport { Certificate } from './entity/certificate.entity';\r\nimport { CertificatesService } from './certificate.service';\r\nimport {\r\n  Delete,\r\n  Get,\r\n  Post,\r\n  Put,\r\n} from '@nestjs/common/decorators/http/request-mapping.decorator';\r\nimport {\r\n  Body,\r\n  Param,\r\n} from '@nestjs/common/decorators/http/route-params.decorator';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\r\n\r\n@ApiTags('certificates')\r\n@Controller('certificates')\r\nexport class CertificatesController {\r\n  constructor(private readonly certificatesService: CertificatesService) {}\r\n\r\n  // Create a new certificate\r\n  @ApiOperation({ summary: 'Create a new certificate' })\r\n  @ApiBody({ type: CreateCertificateDto })\r\n  @ApiResponse({ status: 201, description: 'Certificate created.' })\r\n  @Post()\r\n  async create(\r\n    @Body() createCertificateDto: CreateCertificateDto,\r\n  ): Promise<Certificate> {\r\n    return this.certificatesService.create(createCertificateDto);\r\n  }\r\n\r\n  // Get all certificates\r\n  @ApiOperation({ summary: 'Get all certificates' })\r\n  @ApiResponse({ status: 200, description: 'List of certificates.' })\r\n  @Get()\r\n  async findAll(): Promise<Certificate[]> {\r\n    return this.certificatesService.findAll();\r\n  }\r\n\r\n  // Get a single certificate by ID\r\n  @ApiOperation({ summary: 'Get a certificate by ID' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Certificate ID' })\r\n  @ApiResponse({ status: 200, description: 'Certificate found.' })\r\n  @Get(':id')\r\n  async findOne(@Param('id') id: string): Promise<Certificate> {\r\n    return this.certificatesService.findOne(id);\r\n  }\r\n\r\n  // Update an existing certificate\r\n  @ApiOperation({ summary: 'Update a certificate' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Certificate ID' })\r\n  @ApiBody({ type: CreateCertificateDto })\r\n  @ApiResponse({ status: 200, description: 'Certificate updated.' })\r\n  @Put(':id')\r\n  async update(\r\n    @Param('id') id: string,\r\n    @Body() updateCertificateDto: Partial<CreateCertificateDto>,\r\n  ): Promise<Certificate> {\r\n    return this.certificatesService.update(id, updateCertificateDto);\r\n  }\r\n\r\n  // Delete a certificate\r\n  @ApiOperation({ summary: 'Delete a certificate' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Certificate ID' })\r\n  @ApiResponse({ status: 200, description: 'Certificate deleted.' })\r\n  @Delete(':id')\r\n  async remove(@Param('id') id: string): Promise<void> {\r\n    return this.certificatesService.remove(id);\r\n  }\r\n}\r\n"],"version":3}