{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\factories\\index.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\factories\\index.ts"],"sourcesContent":["import { UserFactory } from './user.factory';\r\nimport { CourseFactory } from './course.factory';\r\nimport { BaseFactory } from './base.factory';\r\n\r\n// Factory registry for easy access\r\nexport class FactoryRegistry {\r\n  private static factories = new Map<string, BaseFactory<any>>();\r\n\r\n  static register<T>(name: string, factory: BaseFactory<T>): void {\r\n    this.factories.set(name, factory);\r\n  }\r\n\r\n  static get<T>(name: string): BaseFactory<T> {\r\n    const factory = this.factories.get(name);\r\n    if (!factory) {\r\n      throw new Error(`Factory '${name}' not found`);\r\n    }\r\n    return factory;\r\n  }\r\n\r\n  static create<T>(name: string, options: any = {}): T {\r\n    return this.get<T>(name).create(options);\r\n  }\r\n\r\n  static createMany<T>(name: string, count: number, options: any = {}): T[] {\r\n    return this.get<T>(name).createMany(count, options);\r\n  }\r\n\r\n  static build<T>(name: string, options: any = {}): Partial<T> {\r\n    return this.get<T>(name).build(options);\r\n  }\r\n\r\n  static buildMany<T>(name: string, count: number, options: any = {}): Partial<T>[] {\r\n    return this.get<T>(name).buildMany(count, options);\r\n  }\r\n\r\n  static resetSeed(seed: number = 12345): void {\r\n    BaseFactory.resetSeed(seed);\r\n  }\r\n}\r\n\r\n// Register all factories\r\nFactoryRegistry.register('user', new UserFactory());\r\nFactoryRegistry.register('course', new CourseFactory());\r\n\r\n// Export individual factories\r\nexport const userFactory = new UserFactory();\r\nexport const courseFactory = new CourseFactory();\r\n\r\n// Export factory registry\r\nexport { FactoryRegistry as Factory };\r\n\r\n// Export base factory for custom factories\r\nexport { BaseFactory };\r\n\r\n// Convenience functions\r\nexport const createUser = (options: any = {}) => userFactory.create(options);\r\nexport const createUsers = (count: number, options: any = {}) => userFactory.createMany(count, options);\r\nexport const createCourse = (options: any = {}) => courseFactory.create(options);\r\nexport const createCourses = (count: number, options: any = {}) => courseFactory.createMany(count, options);\r\n\r\n// Test data presets\r\nexport const testData = {\r\n  users: {\r\n    admin: () => userFactory.admin(),\r\n    instructor: () => userFactory.instructor(),\r\n    student: () => userFactory.student(),\r\n    unverified: () => userFactory.unverified(),\r\n    team: () => userFactory.createTeam(),\r\n  },\r\n  \r\n  courses: {\r\n    published: () => courseFactory.published(),\r\n    draft: () => courseFactory.draft(),\r\n    featured: () => courseFactory.featured(),\r\n    free: () => courseFactory.free(),\r\n    premium: () => courseFactory.premium(),\r\n    popular: () => courseFactory.popular(),\r\n    catalog: (count: number = 10) => courseFactory.createCatalog(count),\r\n  },\r\n  \r\n  scenarios: {\r\n    // Complete learning platform scenario\r\n    learningPlatform: () => {\r\n      const admin = userFactory.admin();\r\n      const instructors = userFactory.createMany(3, { traits: ['instructor'] });\r\n      const students = userFactory.createMany(10, { traits: ['student'] });\r\n      const courses = courseFactory.createCatalog(15);\r\n      \r\n      return {\r\n        admin,\r\n        instructors,\r\n        students,\r\n        courses,\r\n      };\r\n    },\r\n    \r\n    // Course enrollment scenario\r\n    courseEnrollment: () => {\r\n      const instructor = userFactory.instructor();\r\n      const course = courseFactory.withInstructor(instructor);\r\n      const students = userFactory.createMany(5, { traits: ['student'] });\r\n      \r\n      return {\r\n        instructor,\r\n        course,\r\n        students,\r\n      };\r\n    },\r\n    \r\n    // Authentication scenario\r\n    authentication: () => {\r\n      const activeUser = userFactory.forAuth('password123');\r\n      const unverifiedUser = userFactory.unverified();\r\n      const inactiveUser = userFactory.inactive();\r\n      \r\n      return {\r\n        activeUser,\r\n        unverifiedUser,\r\n        inactiveUser,\r\n      };\r\n    },\r\n    \r\n    // Payment scenario\r\n    payment: () => {\r\n      const student = userFactory.student();\r\n      const premiumCourse = courseFactory.premium();\r\n      const freeCourse = courseFactory.free();\r\n      \r\n      return {\r\n        student,\r\n        premiumCourse,\r\n        freeCourse,\r\n      };\r\n    },\r\n  },\r\n};\r\n\r\n// Database seeding utilities\r\nexport class TestSeeder {\r\n  static async seedUsers(count: number = 10): Promise<any[]> {\r\n    const users = [];\r\n    \r\n    // Create admin\r\n    users.push(userFactory.admin({ overrides: { email: 'admin@test.com' } }));\r\n    \r\n    // Create instructors\r\n    users.push(...userFactory.createMany(2, { traits: ['instructor'] }));\r\n    \r\n    // Create students\r\n    users.push(...userFactory.createMany(count - 3, { traits: ['student'] }));\r\n    \r\n    return users;\r\n  }\r\n  \r\n  static async seedCourses(instructors: any[], count: number = 20): Promise<any[]> {\r\n    const courses = [];\r\n    \r\n    instructors.forEach((instructor, index) => {\r\n      const coursesPerInstructor = Math.ceil(count / instructors.length);\r\n      const instructorCourses = courseFactory.createMany(coursesPerInstructor, {\r\n        overrides: { instructor },\r\n      });\r\n      courses.push(...instructorCourses);\r\n    });\r\n    \r\n    return courses.slice(0, count);\r\n  }\r\n  \r\n  static async seedCompleteDatabase(): Promise<{\r\n    users: any[];\r\n    courses: any[];\r\n    enrollments: any[];\r\n  }> {\r\n    // Reset seed for consistent data\r\n    BaseFactory.resetSeed(12345);\r\n    \r\n    const users = await this.seedUsers(50);\r\n    const instructors = users.filter(u => u.role === 'instructor');\r\n    const courses = await this.seedCourses(instructors, 100);\r\n    \r\n    // Create enrollments (simplified)\r\n    const enrollments = [];\r\n    const students = users.filter(u => u.role === 'student');\r\n    \r\n    students.forEach(student => {\r\n      const enrolledCourses = courseFactory.pickRandomMany(courses, \r\n        courseFactory.generateNumber(1, 5)\r\n      );\r\n      \r\n      enrolledCourses.forEach(course => {\r\n        enrollments.push({\r\n          id: courseFactory.generateId(),\r\n          student,\r\n          course,\r\n          enrolledAt: courseFactory.generateDate({ past: true }),\r\n          progress: courseFactory.generateNumber(0, 100),\r\n          completed: courseFactory.generateBoolean(),\r\n        });\r\n      });\r\n    });\r\n    \r\n    return {\r\n      users,\r\n      courses,\r\n      enrollments,\r\n    };\r\n  }\r\n}\r\n"],"version":3}