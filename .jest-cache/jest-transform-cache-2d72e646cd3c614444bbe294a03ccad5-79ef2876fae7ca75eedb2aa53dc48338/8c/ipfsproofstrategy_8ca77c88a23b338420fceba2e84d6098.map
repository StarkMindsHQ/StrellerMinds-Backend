{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\strategies\\ipfs-proof.strategy.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAqD;AACrD,2CAA4C;AAC5C,yCAA4C;AAC5C,+BAAqC;AACrC,+CAAiC;AAG1B,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAEhD,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAA,oBAAa,EAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC,CAAC;YAC1F,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAEpF,OAAO;gBACL,QAAQ,EAAE,IAAI;gBACd,IAAI;gBACJ,MAAM,EAAE,MAAM;aACf,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;CACF,CAAA;AAlBY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;yDAEsB,mBAAW,oBAAX,mBAAW;GADjC,iBAAiB,CAkB7B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\verification\\strategies\\ipfs-proof.strategy.ts"],"sourcesContent":["// src/verification/strategies/ipfs-proof.strategy.ts\r\nimport { Injectable } from '@nestjs/common';\r\nimport { HttpService } from '@nestjs/axios';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport * as crypto from 'crypto';\r\n\r\n@Injectable()\r\nexport class IpfsProofStrategy {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  async verify(cid: string): Promise<any> {\r\n    try {\r\n      const response = await lastValueFrom(this.httpService.get(`https://ipfs.io/ipfs/${cid}`));\r\n      const data = response.data;\r\n      const hash = crypto.createHash('sha256').update(JSON.stringify(data)).digest('hex');\r\n\r\n      return {\r\n        verified: true,\r\n        hash,\r\n        source: 'ipfs',\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch or validate IPFS data');\r\n    }\r\n  }\r\n}"],"version":3}