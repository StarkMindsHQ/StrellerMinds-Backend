{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\content-similarity.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,6CAAmD;AACnD,qCAAqC;AACrC,wEAA8D;AAC9D,iFAAuF;AACvF,6EAA6G;AAsBtG,IAAM,wBAAwB,gCAA9B,MAAM,wBAAwB;IAGnC,YAEE,gBAA4C,EAE5C,qBAA0D;QAFlD,qBAAgB,GAAhB,gBAAgB,CAAoB;QAEpC,0BAAqB,GAArB,qBAAqB,CAA6B;QAN3C,WAAM,GAAG,IAAI,eAAM,CAAC,0BAAwB,CAAC,IAAI,CAAC,CAAC;IAOjE,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,mCAAmC,CACvC,OAA8B,EAC9B,OAAiD;QAEjD,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qDAAqD,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvF,2DAA2D;YAC3D,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAEnE,wBAAwB;YACxB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAEpF,8BAA8B;YAC9B,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;YAEjG,wCAAwC;YACxC,MAAM,cAAc,GAAG,gBAAgB;iBACpC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,OAAO,CAAC,aAAa,CAAC;iBACrD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;iBACjC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;YAE3B,6BAA6B;YAC7B,OAAO,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;QAEhF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;YAC5E,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,QAAgB,EAAE,QAAgB,EAAE;QAC3D,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAChE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YAClD,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;SAC1B,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,UAAU;aAC5B,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC;aACxC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACd,MAAM;YACN,UAAU,EAAE,IAAI,CAAC,yBAAyB,CAAC,cAAc,EAAE,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;SAC/F,CAAC,CAAC;aACF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;aAC3C,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAEnB,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAAC,OAA8B;QASjE,MAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,IAAI,EAAE,CAAC;QAEtD,MAAM,WAAW,GAAG;YAClB,aAAa,EAAE,IAAI,GAAG,EAAkB;YACxC,eAAe,EAAE,IAAI,GAAG,EAAkB;YAC1C,mBAAmB,EAAE,IAAI,GAAG,EAAkB;YAC9C,mBAAmB,EAAE,IAAI,GAAG,EAAkB;YAC9C,oBAAoB,EAAE,IAAI,GAAG,EAAkB;YAC/C,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;SACb,CAAC;QAEF,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB,mDAAmD;QACnD,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;YAClC,IAAI,CAAC,MAAM;gBAAE,SAAS;YAEtB,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAEtD,mBAAmB;YACnB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACxB,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;gBACzF,CAAC,CAAC,CAAC;YACL,CAAC;YAED,qBAAqB;YACrB,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAClB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC5B,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;gBACjG,CAAC,CAAC,CAAC;YACL,CAAC;YAED,yBAAyB;YACzB,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;gBACtB,WAAW,CAAC,mBAAmB,CAAC,GAAG,CACjC,MAAM,CAAC,UAAU,EACjB,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CACvE,CAAC;YACJ,CAAC;YAED,uBAAuB;YACvB,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACpB,WAAW,CAAC,mBAAmB,CAAC,GAAG,CACjC,MAAM,CAAC,QAAQ,EACf,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CACrE,CAAC;YACJ,CAAC;YAED,yBAAyB;YACzB,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;gBACtB,WAAW,CAAC,oBAAoB,CAAC,GAAG,CAClC,MAAM,CAAC,UAAU,EACjB,CAAC,WAAW,CAAC,oBAAoB,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CACxE,CAAC;YACJ,CAAC;YAED,+BAA+B;YAC/B,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACpB,aAAa,IAAI,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;YAC5C,CAAC;YACD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAClB,WAAW,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YACxC,CAAC;YACD,WAAW,IAAI,MAAM,CAAC;QACxB,CAAC;QAED,qBAAqB;QACrB,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC;YACpB,WAAW,CAAC,WAAW,GAAG,aAAa,GAAG,WAAW,CAAC;YACtD,WAAW,CAAC,SAAS,GAAG,WAAW,GAAG,WAAW,CAAC;QACpD,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,WAA4B;QACvD,MAAM,OAAO,GAAG;YACd,CAAC,yCAAe,CAAC,IAAI,CAAC,EAAE,GAAG;YAC3B,CAAC,yCAAe,CAAC,KAAK,CAAC,EAAE,GAAG;YAC5B,CAAC,yCAAe,CAAC,MAAM,CAAC,EAAE,GAAG;YAC7B,CAAC,yCAAe,CAAC,KAAK,CAAC,EAAE,GAAG;YAC5B,CAAC,yCAAe,CAAC,QAAQ,CAAC,EAAE,GAAG;YAC/B,CAAC,yCAAe,CAAC,QAAQ,CAAC,EAAE,GAAG;YAC/B,CAAC,yCAAe,CAAC,IAAI,CAAC,EAAE,GAAG;YAC3B,CAAC,yCAAe,CAAC,QAAQ,CAAC,EAAE,GAAG;YAC/B,CAAC,yCAAe,CAAC,KAAK,CAAC,EAAE,GAAG;YAC5B,CAAC,yCAAe,CAAC,QAAQ,CAAC,EAAE,GAAG;SAChC,CAAC;QAEF,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC;IACrD,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB,CAAC,OAA8B,EAAE,KAAa;QAC7E,mDAAmD;QACnD,MAAM,eAAe,GAAG,OAAO,CAAC,kBAAkB;YAChD,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;aACxB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE9B,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC;aACpE,KAAK,CAAC,6BAA6B,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,YAAY,CAAC,QAAQ,CAAC,wCAAwC,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;QACvF,CAAC;QAED,kCAAkC;QAClC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAE9C,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,yBAAyB,CACrC,OAAiB,EACjB,eAAoB;QAEpB,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,KAAK,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;YACzE,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;YAEjF,OAAO;gBACL,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,KAAK;gBACL,OAAO;gBACP,QAAQ;aACT,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,MAAc;QAC1C,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;YACvB,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE;YAC3B,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,UAAU;YAC3C,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,CAAC;YAC9B,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,SAAS;YACtC,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,SAAS;YAC1C,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,CAAC;YAC1B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE;SAC5B,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,0BAA0B,CAChC,cAA+B,EAC/B,eAAoB;QAEpB,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB,iCAAiC;QACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,0BAA0B,CAC9C,cAAc,CAAC,IAAI,EACnB,eAAe,CAAC,aAAa,CAC9B,CAAC;QACF,UAAU,IAAI,QAAQ,GAAG,IAAI,CAAC;QAC9B,WAAW,IAAI,IAAI,CAAC;QAEpB,kCAAkC;QAClC,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAChD,cAAc,CAAC,MAAM,EACrB,eAAe,CAAC,eAAe,CAChC,CAAC;QACF,UAAU,IAAI,UAAU,GAAG,GAAG,CAAC;QAC/B,WAAW,IAAI,GAAG,CAAC;QAEnB,qCAAqC;QACrC,MAAM,aAAa,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC;YACpF,CAAC,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE;YACvE,CAAC,CAAC,CAAC,CAAC;QACN,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QAChD,WAAW,IAAI,IAAI,CAAC;QAEpB,sCAAsC;QACtC,MAAM,eAAe,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC;YACxF,CAAC,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE;YACzE,CAAC,CAAC,GAAG,CAAC,CAAC,2BAA2B;QACpC,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;QACjD,WAAW,IAAI,GAAG,CAAC;QAEnB,oCAAoC;QACpC,MAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CACpD,cAAc,CAAC,QAAQ,EACvB,eAAe,CAAC,WAAW,CAC5B,CAAC;QACF,UAAU,IAAI,aAAa,GAAG,GAAG,CAAC;QAClC,WAAW,IAAI,GAAG,CAAC;QAEnB,6BAA6B;QAC7B,MAAM,WAAW,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9C,UAAU,IAAI,WAAW,GAAG,GAAG,CAAC;QAChC,WAAW,IAAI,GAAG,CAAC;QAEnB,OAAO,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACK,0BAA0B,CAChC,cAAwB,EACxB,eAAoC;QAEpC,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,IAAI,eAAe,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YAC9D,OAAO,CAAC,CAAC;QACX,CAAC;QAED,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,gBAAgB,GAAG,CAAC,CAAC;QAEzB,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/B,MAAM,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1D,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,sBAAsB;YACvE,gBAAgB,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,OAAO,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACK,2BAA2B,CAAC,cAAsB,EAAE,oBAA4B;QACtF,IAAI,oBAAoB,KAAK,CAAC;YAAE,OAAO,GAAG,CAAC,CAAC,2BAA2B;QAEvE,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,oBAAoB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;QAC9G,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,yBAAyB,CAAC,SAA0B,EAAE,SAA0B;QACtF,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,kBAAkB;QAClB,MAAM,aAAa,GAAG,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;QACtF,UAAU,IAAI,aAAa,GAAG,GAAG,CAAC;QAClC,OAAO,IAAI,GAAG,CAAC;QAEf,oBAAoB;QACpB,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QAC5F,UAAU,IAAI,eAAe,GAAG,GAAG,CAAC;QACpC,OAAO,IAAI,GAAG,CAAC;QAEf,sBAAsB;QACtB,MAAM,kBAAkB,GAAG,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7E,UAAU,IAAI,kBAAkB,GAAG,GAAG,CAAC;QACvC,OAAO,IAAI,GAAG,CAAC;QAEf,wBAAwB;QACxB,MAAM,oBAAoB,GAAG,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACrF,UAAU,IAAI,oBAAoB,GAAG,GAAG,CAAC;QACzC,OAAO,IAAI,GAAG,CAAC;QAEf,sBAAsB;QACtB,MAAM,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpG,UAAU,IAAI,kBAAkB,GAAG,GAAG,CAAC;QACvC,OAAO,IAAI,GAAG,CAAC;QAEf,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,0BAA0B,CAAC,MAAgB,EAAE,MAAgB;QACnE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QACzD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAEzD,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAEvD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAE1C,OAAO,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;IACxC,CAAC;IAED;;OAEG;IACK,yBAAyB,CAC/B,QAAyB,EACzB,eAAoB,EACpB,KAAa;QAEb,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,+BAA+B;QAC/B,MAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAClD,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAClD,CAAC;QACF,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAChC,OAAO,CAAC,IAAI,CAAC,4BAA4B,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtF,CAAC;QAED,0BAA0B;QAC1B,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAClD,CAAC,eAAe,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CACtD,CAAC;QACF,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,kBAAkB,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/E,CAAC;QAED,gCAAgC;QAChC,IAAI,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC/D,OAAO,CAAC,IAAI,CAAC,qBAAqB,QAAQ,CAAC,QAAQ,WAAW,CAAC,CAAC;QAClE,CAAC;QAED,kCAAkC;QAClC,IAAI,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACjE,OAAO,CAAC,IAAI,CAAC,0BAA0B,QAAQ,CAAC,UAAU,mBAAmB,CAAC,CAAC;QACjF,CAAC;QAED,cAAc;QACd,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QACjD,CAAC;QAED,+CAA+C;QAC/C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBAChB,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;YAC1D,CAAC;iBAAM,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;YACnD,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YACpD,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAqB;IACnD,CAAC;IAED;;OAEG;IACK,oBAAoB,CAC1B,KAAsB,EACtB,OAA8B;QAE9B,OAAO;YACL,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,kBAAkB,EAAE,0CAAkB,CAAC,aAAa;YACpD,MAAM,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC;YACjD,eAAe,EAAE,KAAK,CAAC,KAAK;YAC5B,cAAc,EAAE,KAAK,CAAC,KAAK,GAAG,IAAI,EAAE,iCAAiC;YACrE,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC;YAC7C,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YACrC,QAAQ,EAAE;gBACR,aAAa,EAAE,oBAAoB;gBACnC,eAAe,EAAE,KAAK,CAAC,KAAK;gBAC5B,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,eAAe,EAAE;oBACf,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;oBACrC,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;oBACzC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ;oBACjC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU;iBACtC;aACF;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,6BAA6B,CAAC,KAAsB;QAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;YAC3D,OAAO,4CAAoB,CAAC,WAAW,CAAC;QAC1C,CAAC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YACrE,OAAO,4CAAoB,CAAC,cAAc,CAAC;QAC7C,CAAC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YACrE,OAAO,4CAAoB,CAAC,eAAe,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,OAAO,4CAAoB,CAAC,aAAa,CAAC;QAC5C,CAAC;IACH,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,KAAa;QACrC,IAAI,KAAK,IAAI,GAAG;YAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,KAAK,IAAI,GAAG;YAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,KAAK,IAAI,GAAG;YAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,KAAK,IAAI,GAAG;YAAE,OAAO,CAAC,CAAC;QAC3B,OAAO,CAAC,CAAC;IACX,CAAC;CACF,CAAA;AA3eY,4DAAwB;mCAAxB,wBAAwB;IADpC,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,0BAAgB,EAAC,sBAAM,CAAC,CAAA;IAExB,WAAA,IAAA,0BAAgB,EAAC,yCAAe,CAAC,CAAA;yDADR,oBAAU,oBAAV,oBAAU,oDAEL,oBAAU,oBAAV,oBAAU;GAPhC,wBAAwB,CA2epC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\content-similarity.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { UserInteraction, InteractionType } from '../entities/user-interaction.entity';\r\nimport { Recommendation, RecommendationType, RecommendationReason } from '../entities/recommendation.entity';\r\nimport { RecommendationContext } from './recommendation-engine.service';\r\n\r\ninterface ContentFeatures {\r\n  tags: string[];\r\n  skills: string[];\r\n  difficulty: string;\r\n  duration: number;\r\n  category: string;\r\n  instructor: string;\r\n  rating: number;\r\n  topics: string[];\r\n}\r\n\r\ninterface SimilarityScore {\r\n  courseId: string;\r\n  score: number;\r\n  reasons: string[];\r\n  features: ContentFeatures;\r\n}\r\n\r\n@Injectable()\r\nexport class ContentSimilarityService {\r\n  private readonly logger = new Logger(ContentSimilarityService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Course)\r\n    private courseRepository: Repository<Course>,\r\n    @InjectRepository(UserInteraction)\r\n    private interactionRepository: Repository<UserInteraction>,\r\n  ) {}\r\n\r\n  /**\r\n   * Generate content-based recommendations using similarity algorithms\r\n   */\r\n  async generateContentBasedRecommendations(\r\n    context: RecommendationContext,\r\n    options: { limit: number; minConfidence: number },\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    try {\r\n      this.logger.log(`Generating content-based recommendations for user ${context.userId}`);\r\n\r\n      // Get user's interaction history to understand preferences\r\n      const userPreferences = await this.extractUserPreferences(context);\r\n      \r\n      // Get candidate courses\r\n      const candidateCourses = await this.getCandidateCourses(context, options.limit * 4);\r\n      \r\n      // Calculate similarity scores\r\n      const similarityScores = await this.calculateSimilarityScores(candidateCourses, userPreferences);\r\n      \r\n      // Filter by minimum confidence and sort\r\n      const filteredScores = similarityScores\r\n        .filter(score => score.score >= options.minConfidence)\r\n        .sort((a, b) => b.score - a.score)\r\n        .slice(0, options.limit);\r\n\r\n      // Convert to recommendations\r\n      return filteredScores.map(score => this.createRecommendation(score, context));\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error generating content-based recommendations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find similar courses to a given course\r\n   */\r\n  async findSimilarCourses(courseId: string, limit: number = 10): Promise<Course[]> {\r\n    const targetCourse = await this.courseRepository.findOne({ where: { id: courseId } });\r\n    if (!targetCourse) {\r\n      throw new Error(`Course ${courseId} not found`);\r\n    }\r\n\r\n    const targetFeatures = this.extractCourseFeatures(targetCourse);\r\n    const allCourses = await this.courseRepository.find({\r\n      where: { isActive: true },\r\n    });\r\n\r\n    const similarities = allCourses\r\n      .filter(course => course.id !== courseId)\r\n      .map(course => ({\r\n        course,\r\n        similarity: this.calculateCourseSimilarity(targetFeatures, this.extractCourseFeatures(course)),\r\n      }))\r\n      .sort((a, b) => b.similarity - a.similarity)\r\n      .slice(0, limit);\r\n\r\n    return similarities.map(s => s.course);\r\n  }\r\n\r\n  /**\r\n   * Extract user preferences from interaction history\r\n   */\r\n  private async extractUserPreferences(context: RecommendationContext): Promise<{\r\n    preferredTags: Map<string, number>;\r\n    preferredSkills: Map<string, number>;\r\n    preferredDifficulty: Map<string, number>;\r\n    preferredCategories: Map<string, number>;\r\n    preferredInstructors: Map<string, number>;\r\n    avgDuration: number;\r\n    avgRating: number;\r\n  }> {\r\n    const interactions = context.recentInteractions || [];\r\n    \r\n    const preferences = {\r\n      preferredTags: new Map<string, number>(),\r\n      preferredSkills: new Map<string, number>(),\r\n      preferredDifficulty: new Map<string, number>(),\r\n      preferredCategories: new Map<string, number>(),\r\n      preferredInstructors: new Map<string, number>(),\r\n      avgDuration: 0,\r\n      avgRating: 0,\r\n    };\r\n\r\n    let totalDuration = 0;\r\n    let totalRating = 0;\r\n    let courseCount = 0;\r\n\r\n    // Analyze interactions to build preference profile\r\n    for (const interaction of interactions) {\r\n      const course = interaction.course;\r\n      if (!course) continue;\r\n\r\n      const weight = this.getInteractionWeight(interaction);\r\n      \r\n      // Tags preferences\r\n      if (course.tags) {\r\n        course.tags.forEach(tag => {\r\n          preferences.preferredTags.set(tag, (preferences.preferredTags.get(tag) || 0) + weight);\r\n        });\r\n      }\r\n\r\n      // Skills preferences\r\n      if (course.skills) {\r\n        course.skills.forEach(skill => {\r\n          preferences.preferredSkills.set(skill, (preferences.preferredSkills.get(skill) || 0) + weight);\r\n        });\r\n      }\r\n\r\n      // Difficulty preferences\r\n      if (course.difficulty) {\r\n        preferences.preferredDifficulty.set(\r\n          course.difficulty,\r\n          (preferences.preferredDifficulty.get(course.difficulty) || 0) + weight\r\n        );\r\n      }\r\n\r\n      // Category preferences\r\n      if (course.category) {\r\n        preferences.preferredCategories.set(\r\n          course.category,\r\n          (preferences.preferredCategories.get(course.category) || 0) + weight\r\n        );\r\n      }\r\n\r\n      // Instructor preferences\r\n      if (course.instructor) {\r\n        preferences.preferredInstructors.set(\r\n          course.instructor,\r\n          (preferences.preferredInstructors.get(course.instructor) || 0) + weight\r\n        );\r\n      }\r\n\r\n      // Duration and rating averages\r\n      if (course.duration) {\r\n        totalDuration += course.duration * weight;\r\n      }\r\n      if (course.rating) {\r\n        totalRating += course.rating * weight;\r\n      }\r\n      courseCount += weight;\r\n    }\r\n\r\n    // Calculate averages\r\n    if (courseCount > 0) {\r\n      preferences.avgDuration = totalDuration / courseCount;\r\n      preferences.avgRating = totalRating / courseCount;\r\n    }\r\n\r\n    return preferences;\r\n  }\r\n\r\n  /**\r\n   * Get weight for different interaction types\r\n   */\r\n  private getInteractionWeight(interaction: UserInteraction): number {\r\n    const weights = {\r\n      [InteractionType.VIEW]: 0.1,\r\n      [InteractionType.CLICK]: 0.2,\r\n      [InteractionType.ENROLL]: 0.8,\r\n      [InteractionType.START]: 0.6,\r\n      [InteractionType.PROGRESS]: 0.7,\r\n      [InteractionType.COMPLETE]: 1.0,\r\n      [InteractionType.RATE]: 0.9,\r\n      [InteractionType.BOOKMARK]: 0.5,\r\n      [InteractionType.SHARE]: 0.4,\r\n      [InteractionType.DOWNLOAD]: 0.3,\r\n    };\r\n\r\n    return weights[interaction.interactionType] || 0.1;\r\n  }\r\n\r\n  /**\r\n   * Get candidate courses for recommendation\r\n   */\r\n  private async getCandidateCourses(context: RecommendationContext, limit: number): Promise<Course[]> {\r\n    // Get courses user hasn't interacted with recently\r\n    const recentCourseIds = context.recentInteractions\r\n      ?.filter(i => i.courseId)\r\n      .map(i => i.courseId) || [];\r\n\r\n    const queryBuilder = this.courseRepository.createQueryBuilder('course')\r\n      .where('course.isActive = :isActive', { isActive: true });\r\n\r\n    if (recentCourseIds.length > 0) {\r\n      queryBuilder.andWhere('course.id NOT IN (:...recentCourseIds)', { recentCourseIds });\r\n    }\r\n\r\n    // Prioritize highly rated courses\r\n    queryBuilder.orderBy('course.rating', 'DESC');\r\n\r\n    return queryBuilder.take(limit).getMany();\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity scores for candidate courses\r\n   */\r\n  private async calculateSimilarityScores(\r\n    courses: Course[],\r\n    userPreferences: any,\r\n  ): Promise<SimilarityScore[]> {\r\n    return courses.map(course => {\r\n      const features = this.extractCourseFeatures(course);\r\n      const score = this.calculateContentSimilarity(features, userPreferences);\r\n      const reasons = this.generateSimilarityReasons(features, userPreferences, score);\r\n\r\n      return {\r\n        courseId: course.id,\r\n        score,\r\n        reasons,\r\n        features,\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Extract features from a course\r\n   */\r\n  private extractCourseFeatures(course: Course): ContentFeatures {\r\n    return {\r\n      tags: course.tags || [],\r\n      skills: course.skills || [],\r\n      difficulty: course.difficulty || 'beginner',\r\n      duration: course.duration || 0,\r\n      category: course.category || 'general',\r\n      instructor: course.instructor || 'unknown',\r\n      rating: course.rating || 0,\r\n      topics: course.topics || [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate content similarity score\r\n   */\r\n  private calculateContentSimilarity(\r\n    courseFeatures: ContentFeatures,\r\n    userPreferences: any,\r\n  ): number {\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n\r\n    // Tags similarity (weight: 0.25)\r\n    const tagScore = this.calculateFeatureSimilarity(\r\n      courseFeatures.tags,\r\n      userPreferences.preferredTags,\r\n    );\r\n    totalScore += tagScore * 0.25;\r\n    totalWeight += 0.25;\r\n\r\n    // Skills similarity (weight: 0.3)\r\n    const skillScore = this.calculateFeatureSimilarity(\r\n      courseFeatures.skills,\r\n      userPreferences.preferredSkills,\r\n    );\r\n    totalScore += skillScore * 0.3;\r\n    totalWeight += 0.3;\r\n\r\n    // Category similarity (weight: 0.15)\r\n    const categoryScore = userPreferences.preferredCategories.has(courseFeatures.category) \r\n      ? userPreferences.preferredCategories.get(courseFeatures.category) / 10 \r\n      : 0;\r\n    totalScore += Math.min(categoryScore, 1) * 0.15;\r\n    totalWeight += 0.15;\r\n\r\n    // Difficulty similarity (weight: 0.1)\r\n    const difficultyScore = userPreferences.preferredDifficulty.has(courseFeatures.difficulty)\r\n      ? userPreferences.preferredDifficulty.get(courseFeatures.difficulty) / 10\r\n      : 0.5; // Neutral if no preference\r\n    totalScore += Math.min(difficultyScore, 1) * 0.1;\r\n    totalWeight += 0.1;\r\n\r\n    // Duration similarity (weight: 0.1)\r\n    const durationScore = this.calculateDurationSimilarity(\r\n      courseFeatures.duration,\r\n      userPreferences.avgDuration,\r\n    );\r\n    totalScore += durationScore * 0.1;\r\n    totalWeight += 0.1;\r\n\r\n    // Rating boost (weight: 0.1)\r\n    const ratingScore = courseFeatures.rating / 5;\r\n    totalScore += ratingScore * 0.1;\r\n    totalWeight += 0.1;\r\n\r\n    return totalWeight > 0 ? totalScore / totalWeight : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity for list features (tags, skills, topics)\r\n   */\r\n  private calculateFeatureSimilarity(\r\n    courseFeatures: string[],\r\n    userPreferences: Map<string, number>,\r\n  ): number {\r\n    if (courseFeatures.length === 0 || userPreferences.size === 0) {\r\n      return 0;\r\n    }\r\n\r\n    let totalScore = 0;\r\n    let maxPossibleScore = 0;\r\n\r\n    courseFeatures.forEach(feature => {\r\n      const preferenceScore = userPreferences.get(feature) || 0;\r\n      totalScore += Math.min(preferenceScore / 10, 1); // Normalize to [0, 1]\r\n      maxPossibleScore += 1;\r\n    });\r\n\r\n    return maxPossibleScore > 0 ? totalScore / maxPossibleScore : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate duration similarity\r\n   */\r\n  private calculateDurationSimilarity(courseDuration: number, avgPreferredDuration: number): number {\r\n    if (avgPreferredDuration === 0) return 0.5; // Neutral if no preference\r\n\r\n    const ratio = Math.min(courseDuration, avgPreferredDuration) / Math.max(courseDuration, avgPreferredDuration);\r\n    return ratio;\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity between two courses\r\n   */\r\n  private calculateCourseSimilarity(features1: ContentFeatures, features2: ContentFeatures): number {\r\n    let totalScore = 0;\r\n    let weights = 0;\r\n\r\n    // Tags similarity\r\n    const tagSimilarity = this.calculateJaccardSimilarity(features1.tags, features2.tags);\r\n    totalScore += tagSimilarity * 0.3;\r\n    weights += 0.3;\r\n\r\n    // Skills similarity\r\n    const skillSimilarity = this.calculateJaccardSimilarity(features1.skills, features2.skills);\r\n    totalScore += skillSimilarity * 0.3;\r\n    weights += 0.3;\r\n\r\n    // Category similarity\r\n    const categorySimilarity = features1.category === features2.category ? 1 : 0;\r\n    totalScore += categorySimilarity * 0.2;\r\n    weights += 0.2;\r\n\r\n    // Difficulty similarity\r\n    const difficultySimilarity = features1.difficulty === features2.difficulty ? 1 : 0.5;\r\n    totalScore += difficultySimilarity * 0.1;\r\n    weights += 0.1;\r\n\r\n    // Duration similarity\r\n    const durationSimilarity = this.calculateDurationSimilarity(features1.duration, features2.duration);\r\n    totalScore += durationSimilarity * 0.1;\r\n    weights += 0.1;\r\n\r\n    return weights > 0 ? totalScore / weights : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate Jaccard similarity for string arrays\r\n   */\r\n  private calculateJaccardSimilarity(array1: string[], array2: string[]): number {\r\n    if (array1.length === 0 && array2.length === 0) return 1;\r\n    if (array1.length === 0 || array2.length === 0) return 0;\r\n\r\n    const set1 = new Set(array1.map(s => s.toLowerCase()));\r\n    const set2 = new Set(array2.map(s => s.toLowerCase()));\r\n\r\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\r\n    const union = new Set([...set1, ...set2]);\r\n\r\n    return intersection.size / union.size;\r\n  }\r\n\r\n  /**\r\n   * Generate reasons for similarity score\r\n   */\r\n  private generateSimilarityReasons(\r\n    features: ContentFeatures,\r\n    userPreferences: any,\r\n    score: number,\r\n  ): string[] {\r\n    const reasons: string[] = [];\r\n\r\n    // Check for strong tag matches\r\n    const strongTagMatches = features.tags.filter(tag => \r\n      (userPreferences.preferredTags.get(tag) || 0) > 5\r\n    );\r\n    if (strongTagMatches.length > 0) {\r\n      reasons.push(`Matches your interest in ${strongTagMatches.slice(0, 2).join(', ')}`);\r\n    }\r\n\r\n    // Check for skill matches\r\n    const skillMatches = features.skills.filter(skill =>\r\n      (userPreferences.preferredSkills.get(skill) || 0) > 3\r\n    );\r\n    if (skillMatches.length > 0) {\r\n      reasons.push(`Builds on your ${skillMatches.slice(0, 2).join(', ')} skills`);\r\n    }\r\n\r\n    // Check for category preference\r\n    if (userPreferences.preferredCategories.has(features.category)) {\r\n      reasons.push(`In your preferred ${features.category} category`);\r\n    }\r\n\r\n    // Check for difficulty preference\r\n    if (userPreferences.preferredDifficulty.has(features.difficulty)) {\r\n      reasons.push(`Matches your preferred ${features.difficulty} difficulty level`);\r\n    }\r\n\r\n    // High rating\r\n    if (features.rating >= 4.5) {\r\n      reasons.push('Highly rated by other learners');\r\n    }\r\n\r\n    // If no specific reasons, provide general ones\r\n    if (reasons.length === 0) {\r\n      if (score > 0.7) {\r\n        reasons.push('Strong match with your learning profile');\r\n      } else if (score > 0.5) {\r\n        reasons.push('Good fit based on your interests');\r\n      } else {\r\n        reasons.push('Recommended for skill development');\r\n      }\r\n    }\r\n\r\n    return reasons.slice(0, 3); // Limit to 3 reasons\r\n  }\r\n\r\n  /**\r\n   * Create recommendation from similarity score\r\n   */\r\n  private createRecommendation(\r\n    score: SimilarityScore,\r\n    context: RecommendationContext,\r\n  ): Partial<Recommendation> {\r\n    return {\r\n      userId: context.userId,\r\n      courseId: score.courseId,\r\n      recommendationType: RecommendationType.CONTENT_BASED,\r\n      reason: this.determineRecommendationReason(score),\r\n      confidenceScore: score.score,\r\n      relevanceScore: score.score * 0.95, // Slightly lower than confidence\r\n      priority: this.calculatePriority(score.score),\r\n      explanation: score.reasons.join('. '),\r\n      metadata: {\r\n        algorithmUsed: 'content_similarity',\r\n        similarityScore: score.score,\r\n        reasons: score.reasons,\r\n        matchedFeatures: {\r\n          tags: score.features.tags.slice(0, 5),\r\n          skills: score.features.skills.slice(0, 5),\r\n          category: score.features.category,\r\n          difficulty: score.features.difficulty,\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determine recommendation reason based on similarity\r\n   */\r\n  private determineRecommendationReason(score: SimilarityScore): RecommendationReason {\r\n    if (score.reasons.some(reason => reason.includes('skill'))) {\r\n      return RecommendationReason.SKILL_BASED;\r\n    } else if (score.reasons.some(reason => reason.includes('interest'))) {\r\n      return RecommendationReason.INTEREST_BASED;\r\n    } else if (score.reasons.some(reason => reason.includes('category'))) {\r\n      return RecommendationReason.SIMILAR_CONTENT;\r\n    } else {\r\n      return RecommendationReason.CONTENT_BASED;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate priority based on similarity score\r\n   */\r\n  private calculatePriority(score: number): number {\r\n    if (score >= 0.8) return 5;\r\n    if (score >= 0.6) return 4;\r\n    if (score >= 0.4) return 3;\r\n    if (score >= 0.2) return 2;\r\n    return 1;\r\n  }\r\n}\r\n"],"version":3}