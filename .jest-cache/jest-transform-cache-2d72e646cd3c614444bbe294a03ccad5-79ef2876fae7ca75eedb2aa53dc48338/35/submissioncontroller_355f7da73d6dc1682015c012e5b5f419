60a0b3d4b69cc3e1c228c73105fe44e1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmissionController = void 0;
// src/submission/submission.controller.ts
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const multer_1 = require("multer");
const path_1 = require("path");
const submission_service_1 = require("./provider/submission.service");
const createSubmission_dto_1 = require("./dtos/createSubmission.dto");
let SubmissionController = class SubmissionController {
    constructor(submissionService) {
        this.submissionService = submissionService;
    }
    create(createDto, file) {
        return this.submissionService.create(createDto, file);
    }
    findOne(id) {
        return this.submissionService.findOne(id);
    }
    update(id, updateDto, file) {
        return this.submissionService.update(id, updateDto, file);
    }
};
exports.SubmissionController = SubmissionController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file', {
        storage: (0, multer_1.diskStorage)({
            destination: './uploads',
            filename: (_, file, cb) => {
                cb(null, `${Date.now()}${(0, path_1.extname)(file.originalname)}`);
            },
        }),
    })),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.UploadedFile)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof createSubmission_dto_1.CreateSubmissionDto !== "undefined" && createSubmission_dto_1.CreateSubmissionDto) === "function" ? _b : Object, typeof (_d = typeof Express !== "undefined" && (_c = Express.Multer) !== void 0 && _c.File) === "function" ? _d : Object]),
    __metadata("design:returntype", void 0)
], SubmissionController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(':id'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], SubmissionController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file')),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.UploadedFile)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof Partial !== "undefined" && Partial) === "function" ? _e : Object, typeof (_g = typeof Express !== "undefined" && (_f = Express.Multer) !== void 0 && _f.File) === "function" ? _g : Object]),
    __metadata("design:returntype", void 0)
], SubmissionController.prototype, "update", null);
exports.SubmissionController = SubmissionController = __decorate([
    (0, common_1.Controller)('submissions'),
    __metadata("design:paramtypes", [typeof (_a = typeof submission_service_1.SubmissionService !== "undefined" && submission_service_1.SubmissionService) === "function" ? _a : Object])
], SubmissionController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzdWJtaXNzaW9uXFxzdWJtaXNzaW9uLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQywyQ0FFMEI7QUFDeEIsK0RBQTJEO0FBQzNELG1DQUFxQztBQUNyQywrQkFBK0I7QUFDakMsc0VBQWtFO0FBQ2xFLHNFQUFrRTtBQUd6RCxJQUFNLG9CQUFvQixHQUExQixNQUFNLG9CQUFvQjtJQUMvQixZQUE2QixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUFHLENBQUM7SUFXckUsTUFBTSxDQUNJLFNBQThCLEVBQ3RCLElBQXlCO1FBRXpDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUdELE9BQU8sQ0FBYyxFQUFVO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBSUQsTUFBTSxDQUNTLEVBQVUsRUFDZixTQUF1QyxFQUMvQixJQUEwQjtRQUUxQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0YsQ0FBQTtBQWpDWSxvREFBb0I7QUFZL0I7SUFUQyxJQUFBLGFBQUksR0FBRTtJQUNOLElBQUEsd0JBQWUsRUFBQyxJQUFBLGtDQUFlLEVBQUMsTUFBTSxFQUFFO1FBQ3ZDLE9BQU8sRUFBRSxJQUFBLG9CQUFXLEVBQUM7WUFDbkIsV0FBVyxFQUFFLFdBQVc7WUFDeEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRTtnQkFDeEIsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFBLGNBQU8sRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELENBQUM7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0lBRUEsV0FBQSxJQUFBLGFBQUksR0FBRSxDQUFBO0lBQ04sV0FBQSxJQUFBLHFCQUFZLEdBQUUsQ0FBQTs7eURBREksMENBQW1CLG9CQUFuQiwwQ0FBbUIsb0RBQ2hCLE9BQU8sMEJBQVAsT0FBTyxDQUFDLE1BQU0sbUJBQUMsSUFBSTs7a0RBRzFDO0FBR0Q7SUFEQyxJQUFBLFlBQUcsRUFBQyxLQUFLLENBQUM7SUFDRixXQUFBLElBQUEsY0FBSyxFQUFDLElBQUksQ0FBQyxDQUFBOzs7O21EQUVuQjtBQUlEO0lBRkMsSUFBQSxjQUFLLEVBQUMsS0FBSyxDQUFDO0lBQ1osSUFBQSx3QkFBZSxFQUFDLElBQUEsa0NBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUV0QyxXQUFBLElBQUEsY0FBSyxFQUFDLElBQUksQ0FBQyxDQUFBO0lBQ1gsV0FBQSxJQUFBLGFBQUksR0FBRSxDQUFBO0lBQ04sV0FBQSxJQUFBLHFCQUFZLEdBQUUsQ0FBQTs7aUVBREksT0FBTyxvQkFBUCxPQUFPLG9EQUNILE9BQU8sMEJBQVAsT0FBTyxDQUFDLE1BQU0sbUJBQUMsSUFBSTs7a0RBRzNDOytCQWhDVSxvQkFBb0I7SUFEaEMsSUFBQSxtQkFBVSxFQUFDLGFBQWEsQ0FBQzt5REFFd0Isc0NBQWlCLG9CQUFqQixzQ0FBaUI7R0FEdEQsb0JBQW9CLENBaUNoQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXHN1Ym1pc3Npb25cXHN1Ym1pc3Npb24uY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc3VibWlzc2lvbi9zdWJtaXNzaW9uLmNvbnRyb2xsZXIudHNcclxuaW1wb3J0IHtcclxuICAgIENvbnRyb2xsZXIsIFBvc3QsIEJvZHksIEdldCwgUGFyYW0sIFVwbG9hZGVkRmlsZSwgVXNlSW50ZXJjZXB0b3JzLCBQYXRjaCwgVXNlR3VhcmRzXHJcbiAgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbiAgaW1wb3J0IHsgRmlsZUludGVyY2VwdG9yIH0gZnJvbSAnQG5lc3Rqcy9wbGF0Zm9ybS1leHByZXNzJztcclxuICBpbXBvcnQgeyBkaXNrU3RvcmFnZSB9IGZyb20gJ211bHRlcic7XHJcbiAgaW1wb3J0IHsgZXh0bmFtZSB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBTdWJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXIvc3VibWlzc2lvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3JlYXRlU3VibWlzc2lvbkR0byB9IGZyb20gJy4vZHRvcy9jcmVhdGVTdWJtaXNzaW9uLmR0byc7XHJcbiAgXHJcbiAgQENvbnRyb2xsZXIoJ3N1Ym1pc3Npb25zJylcclxuICBleHBvcnQgY2xhc3MgU3VibWlzc2lvbkNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdWJtaXNzaW9uU2VydmljZTogU3VibWlzc2lvblNlcnZpY2UpIHt9XHJcbiAgXHJcbiAgICBAUG9zdCgpXHJcbiAgICBAVXNlSW50ZXJjZXB0b3JzKEZpbGVJbnRlcmNlcHRvcignZmlsZScsIHtcclxuICAgICAgc3RvcmFnZTogZGlza1N0b3JhZ2Uoe1xyXG4gICAgICAgIGRlc3RpbmF0aW9uOiAnLi91cGxvYWRzJyxcclxuICAgICAgICBmaWxlbmFtZTogKF8sIGZpbGUsIGNiKSA9PiB7XHJcbiAgICAgICAgICBjYihudWxsLCBgJHtEYXRlLm5vdygpfSR7ZXh0bmFtZShmaWxlLm9yaWdpbmFsbmFtZSl9YCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfSksXHJcbiAgICB9KSlcclxuICAgIGNyZWF0ZShcclxuICAgICAgQEJvZHkoKSBjcmVhdGVEdG86IENyZWF0ZVN1Ym1pc3Npb25EdG8sXHJcbiAgICAgIEBVcGxvYWRlZEZpbGUoKSBmaWxlOiBFeHByZXNzLk11bHRlci5GaWxlLFxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pc3Npb25TZXJ2aWNlLmNyZWF0ZShjcmVhdGVEdG8sIGZpbGUpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgQEdldCgnOmlkJylcclxuICAgIGZpbmRPbmUoQFBhcmFtKCdpZCcpIGlkOiBzdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3VibWlzc2lvblNlcnZpY2UuZmluZE9uZShpZCk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBAUGF0Y2goJzppZCcpXHJcbiAgICBAVXNlSW50ZXJjZXB0b3JzKEZpbGVJbnRlcmNlcHRvcignZmlsZScpKVxyXG4gICAgdXBkYXRlKFxyXG4gICAgICBAUGFyYW0oJ2lkJykgaWQ6IHN0cmluZyxcclxuICAgICAgQEJvZHkoKSB1cGRhdGVEdG86IFBhcnRpYWw8Q3JlYXRlU3VibWlzc2lvbkR0bz4sXHJcbiAgICAgIEBVcGxvYWRlZEZpbGUoKSBmaWxlPzogRXhwcmVzcy5NdWx0ZXIuRmlsZSxcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXNzaW9uU2VydmljZS51cGRhdGUoaWQsIHVwZGF0ZUR0bywgZmlsZSk7XHJcbiAgICB9XHJcbiAgfSAgIl0sInZlcnNpb24iOjN9