{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\database-optimization\\__tests__\\query-analyzer.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\database-optimization\\__tests__\\query-analyzer.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getDataSourceToken } from \"@nestjs/typeorm\"\r\nimport { QueryAnalyzerService } from \"../services/query-analyzer.service\"\r\nimport { DatabaseOptimizationConfig, DEFAULT_OPTIMIZATION_CONFIG } from \"../interfaces/optimization-config.interface\"\r\n\r\n// Mock jest if not available globally\r\nconst mockFn = () => {\r\n  const fn = (...args: any[]) => fn\r\n  fn.mockResolvedValue = (value: any) => {\r\n    fn._mockResolvedValue = value\r\n    return fn\r\n  }\r\n  fn.mockRejectedValue = (value: any) => {\r\n    fn._mockRejectedValue = value\r\n    return fn\r\n  }\r\n  fn.mockImplementationOnce = (impl: any) => {\r\n    fn._mockImplementationOnce = impl\r\n    return fn\r\n  }\r\n  fn.mockClear = () => {\r\n    delete fn._mockResolvedValue\r\n    delete fn._mockRejectedValue\r\n    return fn\r\n  }\r\n  return fn\r\n}\r\n\r\nconst jest = {\r\n  fn: mockFn,\r\n  clearAllMocks: () => {},\r\n}\r\n\r\ndescribe(\"QueryAnalyzerService\", () => {\r\n  let service: QueryAnalyzerService\r\n  let dataSource: any\r\n\r\n  const mockExecutionPlan = {\r\n    nodeType: \"Seq Scan\",\r\n    totalCost: 1500.0,\r\n    startupCost: 0.0,\r\n    planRows: 1000,\r\n    planWidth: 100,\r\n    actualRows: 950,\r\n    actualLoops: 1,\r\n    actualTotalTime: 25.5,\r\n    children: [],\r\n  }\r\n\r\n  const mockDataSource = {\r\n    query: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        QueryAnalyzerService,\r\n        {\r\n          provide: getDataSourceToken(),\r\n          useValue: mockDataSource,\r\n        },\r\n        {\r\n          provide: DatabaseOptimizationConfig,\r\n          useValue: DEFAULT_OPTIMIZATION_CONFIG,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<QueryAnalyzerService>(QueryAnalyzerService)\r\n    dataSource = module.get(getDataSourceToken())\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"analyzeQuery\", () => {\r\n    it(\"should analyze a query and return optimization suggestions\", async () => {\r\n      const testQuery = \"SELECT * FROM users WHERE age > 25\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [mockExecutionPlan] }])\r\n\r\n      const result = await service.analyzeQuery(testQuery)\r\n\r\n      expect(result).toBeDefined()\r\n      expect(result.query).toBe(testQuery)\r\n      expect(result.executionPlan).toEqual(mockExecutionPlan)\r\n      expect(result.suggestions).toBeInstanceOf(Array)\r\n      expect(result.indexRecommendations).toBeInstanceOf(Array)\r\n      expect(typeof result.performanceScore).toBe(\"number\")\r\n      expect(result.performanceScore).toBeGreaterThanOrEqual(0)\r\n      expect(result.performanceScore).toBeLessThanOrEqual(100)\r\n    })\r\n\r\n    it(\"should detect sequential scan and suggest index creation\", async () => {\r\n      const testQuery = \"SELECT * FROM large_table WHERE column1 = 123\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [mockExecutionPlan] }])\r\n\r\n      const result = await service.analyzeQuery(testQuery)\r\n\r\n      const indexSuggestion = result.suggestions.find((s) => s.type === \"INDEX\")\r\n      expect(indexSuggestion).toBeDefined()\r\n      expect(indexSuggestion?.priority).toBe(\"HIGH\")\r\n      expect(indexSuggestion?.description).toContain(\"Sequential scan detected\")\r\n    })\r\n\r\n    it(\"should detect SELECT * usage and suggest optimization\", async () => {\r\n      const testQuery = \"SELECT * FROM users\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [{ ...mockExecutionPlan, nodeType: \"Index Scan\" }] }])\r\n\r\n      const result = await service.analyzeQuery(testQuery)\r\n\r\n      const selectStarSuggestion = result.suggestions.find((s) => s.description.includes(\"SELECT * usage detected\"))\r\n      expect(selectStarSuggestion).toBeDefined()\r\n      expect(selectStarSuggestion?.priority).toBe(\"LOW\")\r\n    })\r\n\r\n    it(\"should detect missing WHERE clause\", async () => {\r\n      const testQuery = \"SELECT name, email FROM users\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [mockExecutionPlan] }])\r\n\r\n      const result = await service.analyzeQuery(testQuery)\r\n\r\n      const whereClauseSuggestion = result.suggestions.find((s) => s.description.includes(\"Query without WHERE clause\"))\r\n      expect(whereClauseSuggestion).toBeDefined()\r\n      expect(whereClauseSuggestion?.priority).toBe(\"CRITICAL\")\r\n    })\r\n\r\n    it(\"should handle query analysis errors gracefully\", async () => {\r\n      const testQuery = \"INVALID SQL QUERY\"\r\n\r\n      dataSource.query.mockRejectedValue(new Error(\"SQL syntax error\"))\r\n\r\n      await expect(service.analyzeQuery(testQuery)).rejects.toThrow(\"SQL syntax error\")\r\n    })\r\n  })\r\n\r\n  describe(\"query history management\", () => {\r\n    it(\"should track query performance metrics\", async () => {\r\n      const testQuery = \"SELECT id FROM users WHERE active = true\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [{ ...mockExecutionPlan, nodeType: \"Index Scan\" }] }])\r\n\r\n      // Execute the same query multiple times\r\n      await service.analyzeQuery(testQuery)\r\n      await service.analyzeQuery(testQuery)\r\n      await service.analyzeQuery(testQuery)\r\n\r\n      const history = service.getQueryHistory()\r\n      expect(history.length).toBe(1)\r\n\r\n      const queryMetrics = history[0]\r\n      expect(queryMetrics.totalExecutions).toBe(3)\r\n      expect(queryMetrics.query).toBe(testQuery)\r\n      expect(queryMetrics.avgExecutionTime).toBeGreaterThan(0)\r\n    })\r\n\r\n    it(\"should identify slow queries correctly\", async () => {\r\n      const fastQuery = \"SELECT id FROM users LIMIT 1\"\r\n      const slowQuery = \"SELECT * FROM large_table\"\r\n\r\n      // Mock fast execution\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [{ ...mockExecutionPlan, totalCost: 10 }] }])\r\n\r\n      await service.analyzeQuery(fastQuery)\r\n\r\n      // Mock slow execution by delaying\r\n      dataSource.query.mockImplementationOnce(\r\n        () => new Promise((resolve) => setTimeout(() => resolve([{ \"QUERY PLAN\": [mockExecutionPlan] }]), 1100)),\r\n      )\r\n\r\n      await service.analyzeQuery(slowQuery)\r\n\r\n      const slowQueries = service.getSlowQueries(1000)\r\n      expect(slowQueries.length).toBe(1)\r\n      expect(slowQueries[0].query).toBe(slowQuery)\r\n    })\r\n\r\n    it(\"should clear query history\", async () => {\r\n      const testQuery = \"SELECT * FROM test_table\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [mockExecutionPlan] }])\r\n\r\n      await service.analyzeQuery(testQuery)\r\n      expect(service.getQueryHistory().length).toBe(1)\r\n\r\n      service.clearQueryHistory()\r\n      expect(service.getQueryHistory().length).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe(\"performance scoring\", () => {\r\n    it(\"should calculate performance score based on execution time and cost\", async () => {\r\n      const efficientQuery = \"SELECT id FROM users WHERE id = 1\"\r\n\r\n      dataSource.query.mockResolvedValue([\r\n        { \"QUERY PLAN\": [{ ...mockExecutionPlan, totalCost: 10, nodeType: \"Index Scan\" }] },\r\n      ])\r\n\r\n      const result = await service.analyzeQuery(efficientQuery)\r\n      expect(result.performanceScore).toBeGreaterThan(80)\r\n    })\r\n\r\n    it(\"should penalize queries with sequential scans\", async () => {\r\n      const inefficientQuery = \"SELECT * FROM large_table WHERE column = value\"\r\n\r\n      dataSource.query.mockResolvedValue([\r\n        { \"QUERY PLAN\": [mockExecutionPlan] }, // Sequential scan with high cost\r\n      ])\r\n\r\n      const result = await service.analyzeQuery(inefficientQuery)\r\n      expect(result.performanceScore).toBeLessThan(80)\r\n    })\r\n  })\r\n\r\n  describe(\"index recommendations\", () => {\r\n    it(\"should recommend indexes for sequential scans\", async () => {\r\n      const testQuery = \"SELECT * FROM products WHERE category_id = 5\"\r\n\r\n      dataSource.query.mockResolvedValue([{ \"QUERY PLAN\": [mockExecutionPlan] }])\r\n\r\n      const result = await service.analyzeQuery(testQuery)\r\n\r\n      expect(result.indexRecommendations.length).toBeGreaterThan(0)\r\n      const recommendation = result.indexRecommendations[0]\r\n      expect(recommendation.indexType).toBe(\"BTREE\")\r\n      expect(recommendation.estimatedImprovement).toBeGreaterThan(0)\r\n      expect(recommendation.reason).toContain(\"Sequential scan detected\")\r\n    })\r\n  })\r\n})\r\n"],"version":3}