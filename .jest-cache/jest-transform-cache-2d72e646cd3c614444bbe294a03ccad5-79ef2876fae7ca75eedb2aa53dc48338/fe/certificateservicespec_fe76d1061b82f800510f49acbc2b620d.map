{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\certificate\\certificate.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { CertificatesService } from './certificate.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Certificate } from './entity/certificate.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { NotFoundException } from '@nestjs/common';\r\n\r\ndescribe('CertificatesService', () => {\r\n  let service: CertificatesService;\r\n  let repo: Repository<Certificate>;\r\n\r\n  const mockCertificate = {\r\n    id: '1',\r\n    certificateNumber: 'CERT123',\r\n    issueDate: new Date(),\r\n    pdfUrl: 'http://example.com/cert.pdf',\r\n    user: Promise.resolve({ id: 'user1' }),\r\n    course: Promise.resolve({ id: 'course1' }),\r\n  } as Certificate;\r\n\r\n  const mockRepo = {\r\n    create: jest.fn().mockReturnValue(mockCertificate),\r\n    save: jest.fn().mockResolvedValue(mockCertificate),\r\n    find: jest.fn().mockResolvedValue([mockCertificate]),\r\n    findOne: jest.fn().mockResolvedValue(mockCertificate),\r\n    update: jest.fn().mockResolvedValue(undefined),\r\n    delete: jest.fn().mockResolvedValue({ affected: 1 }),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CertificatesService,\r\n        {\r\n          provide: getRepositoryToken(Certificate),\r\n          useValue: mockRepo,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<CertificatesService>(CertificatesService);\r\n    repo = module.get<Repository<Certificate>>(getRepositoryToken(Certificate));\r\n  });\r\n\r\n  it('should create a certificate', async () => {\r\n    const dto = { certificateNumber: 'CERT123', issueDate: new Date(), userId: 'user1', courseId: 'course1' };\r\n    const result = await service.create(dto as any);\r\n    expect(result).toEqual(mockCertificate);\r\n    expect(repo.create).toHaveBeenCalledWith(dto);\r\n    expect(repo.save).toHaveBeenCalledWith(mockCertificate);\r\n  });\r\n\r\n  it('should return all certificates', async () => {\r\n    const result = await service.findAll();\r\n    expect(result).toEqual([mockCertificate]);\r\n  });\r\n\r\n  it('should return one certificate by ID', async () => {\r\n    const result = await service.findOne('1');\r\n    expect(result).toEqual(mockCertificate);\r\n  });\r\n\r\n  it('should throw NotFoundException if certificate not found', async () => {\r\n    jest.spyOn(repo, 'findOne').mockResolvedValue(null);\r\n    await expect(service.findOne('999')).rejects.toThrow(NotFoundException);\r\n  });\r\n\r\n  it('should update a certificate', async () => {\r\n    const updated = await service.update('1', { pdfUrl: 'new-url.pdf' });\r\n    expect(repo.update).toHaveBeenCalledWith('1', { pdfUrl: 'new-url.pdf' });\r\n    expect(updated).toEqual(mockCertificate);\r\n  });\r\n\r\n  it('should delete a certificate', async () => {\r\n    const result = await service.remove('1');\r\n    expect(result).toBeUndefined();\r\n    expect(repo.delete).toHaveBeenCalledWith('1');\r\n  });\r\n\r\n  it('should throw NotFoundException on delete if not found', async () => {\r\n    jest.spyOn(repo, 'delete').mockResolvedValue({ affected: 0 });\r\n    await expect(service.remove('999')).rejects.toThrow(NotFoundException);\r\n  });\r\n});\r\n"],"version":3}