c215ceb20355130fb806a1ef0044fc6d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const certificate_service_1 = require("./certificate.service");
const typeorm_1 = require("@nestjs/typeorm");
const certificate_entity_1 = require("./entity/certificate.entity");
const common_1 = require("@nestjs/common");
describe('CertificatesService', () => {
    let service;
    let repo;
    const mockCertificate = {
        id: '1',
        certificateNumber: 'CERT123',
        issueDate: new Date(),
        pdfUrl: 'http://example.com/cert.pdf',
        user: Promise.resolve({ id: 'user1' }),
        course: Promise.resolve({ id: 'course1' }),
    };
    const mockRepo = {
        create: jest.fn().mockReturnValue(mockCertificate),
        save: jest.fn().mockResolvedValue(mockCertificate),
        find: jest.fn().mockResolvedValue([mockCertificate]),
        findOne: jest.fn().mockResolvedValue(mockCertificate),
        update: jest.fn().mockResolvedValue(undefined),
        delete: jest.fn().mockResolvedValue({ affected: 1 }),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                certificate_service_1.CertificatesService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(certificate_entity_1.Certificate),
                    useValue: mockRepo,
                },
            ],
        }).compile();
        service = module.get(certificate_service_1.CertificatesService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(certificate_entity_1.Certificate));
    });
    it('should create a certificate', async () => {
        const dto = { certificateNumber: 'CERT123', issueDate: new Date(), userId: 'user1', courseId: 'course1' };
        const result = await service.create(dto);
        expect(result).toEqual(mockCertificate);
        expect(repo.create).toHaveBeenCalledWith(dto);
        expect(repo.save).toHaveBeenCalledWith(mockCertificate);
    });
    it('should return all certificates', async () => {
        const result = await service.findAll();
        expect(result).toEqual([mockCertificate]);
    });
    it('should return one certificate by ID', async () => {
        const result = await service.findOne('1');
        expect(result).toEqual(mockCertificate);
    });
    it('should throw NotFoundException if certificate not found', async () => {
        jest.spyOn(repo, 'findOne').mockResolvedValue(null);
        await expect(service.findOne('999')).rejects.toThrow(common_1.NotFoundException);
    });
    it('should update a certificate', async () => {
        const updated = await service.update('1', { pdfUrl: 'new-url.pdf' });
        expect(repo.update).toHaveBeenCalledWith('1', { pdfUrl: 'new-url.pdf' });
        expect(updated).toEqual(mockCertificate);
    });
    it('should delete a certificate', async () => {
        const result = await service.remove('1');
        expect(result).toBeUndefined();
        expect(repo.delete).toHaveBeenCalledWith('1');
    });
    it('should throw NotFoundException on delete if not found', async () => {
        jest.spyOn(repo, 'delete').mockResolvedValue({ affected: 0 });
        await expect(service.remove('999')).rejects.toThrow(common_1.NotFoundException);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,