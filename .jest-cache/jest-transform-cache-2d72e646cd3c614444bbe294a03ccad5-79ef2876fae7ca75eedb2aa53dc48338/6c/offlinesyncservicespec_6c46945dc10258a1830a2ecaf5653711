93d41feb28c61d1b833a0d9c571dd3be
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const offline_sync_service_1 = require("../services/offline-sync.service");
const offline_sync_entity_1 = require("../entities/offline-sync.entity");
describe("OfflineSyncService", () => {
    let service;
    let syncRepository;
    let syncQueue;
    const mockSyncRepository = {
        create: globals_1.jest.fn(),
        save: globals_1.jest.fn(),
        find: globals_1.jest.fn(),
        findOne: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        count: globals_1.jest.fn(),
        createQueryBuilder: globals_1.jest.fn(),
    };
    const mockQueue = {
        add: globals_1.jest.fn(),
        addBulk: globals_1.jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                offline_sync_service_1.OfflineSyncService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(offline_sync_entity_1.OfflineSync),
                    useValue: mockSyncRepository,
                },
                {
                    provide: (0, bull_1.getQueueToken)("background-sync"),
                    useValue: mockQueue,
                },
            ],
        }).compile();
        service = module.get(offline_sync_service_1.OfflineSyncService);
        syncRepository = module.get((0, typeorm_1.getRepositoryToken)(offline_sync_entity_1.OfflineSync));
        syncQueue = module.get((0, bull_1.getQueueToken)("background-sync"));
    });
    afterEach(() => {
        globals_1.jest.clearAllMocks();
    });
    describe("createSyncJob", () => {
        it("should create and queue a sync job", async () => {
            const syncJobDto = {
                userId: "user123",
                operation: "create",
                entityType: "analytics-event",
                data: { eventName: "test" },
            };
            const createdJob = {
                id: "job123",
                ...syncJobDto,
                status: "pending",
                priority: 5,
            };
            mockSyncRepository.create.mockReturnValue(createdJob);
            mockSyncRepository.save.mockResolvedValue(createdJob);
            mockQueue.add.mockResolvedValue({});
            const result = await service.createSyncJob(syncJobDto);
            expect(mockSyncRepository.create).toHaveBeenCalledWith(expect.objectContaining({
                userId: "user123",
                operation: "create",
                entityType: "analytics-event",
                status: "pending",
            }));
            expect(mockSyncRepository.save).toHaveBeenCalled();
            expect(mockQueue.add).toHaveBeenCalledWith("process-sync", { syncJobId: "job123" }, expect.objectContaining({
                priority: 5,
                attempts: 3,
            }));
            expect(result).toEqual(createdJob);
        });
    });
    describe("batchCreateSyncJobs", () => {
        it("should create multiple sync jobs", async () => {
            const jobs = [
                {
                    operation: "create",
                    entityType: "analytics-event",
                    data: { eventName: "test1" },
                },
                {
                    operation: "update",
                    entityType: "user-profile",
                    data: { name: "John" },
                },
            ];
            const createdJobs = [
                { id: "job1", ...jobs[0] },
                { id: "job2", ...jobs[1] },
            ];
            mockSyncRepository.create.mockImplementation((data) => data);
            mockSyncRepository.save.mockResolvedValue(createdJobs);
            mockQueue.addBulk.mockResolvedValue([]);
            const result = await service.batchCreateSyncJobs(jobs);
            expect(mockSyncRepository.save).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({ operation: "create" }),
                expect.objectContaining({ operation: "update" }),
            ]));
            expect(mockQueue.addBulk).toHaveBeenCalled();
            expect(result).toEqual(createdJobs);
        });
    });
    describe("updateSyncJobStatus", () => {
        it("should update job status to completed", async () => {
            const result = { success: true, data: { processed: true } };
            await service.updateSyncJobStatus("job123", "completed", result);
            expect(mockSyncRepository.update).toHaveBeenCalledWith("job123", expect.objectContaining({
                status: "completed",
                processedAt: expect.any(Date),
                result: result.data,
            }));
        });
        it("should handle failed status with retry logic", async () => {
            const syncJob = {
                id: "job123",
                retryCount: 1,
                maxRetries: 3,
            };
            mockSyncRepository.findOne.mockResolvedValue(syncJob);
            await service.updateSyncJobStatus("job123", "failed", undefined, "Test error");
            expect(mockSyncRepository.update).toHaveBeenCalledWith("job123", expect.objectContaining({
                status: "pending", // Should retry
                retryCount: 2,
                nextRetryAt: expect.any(Date),
                errorMessage: "Test error",
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,