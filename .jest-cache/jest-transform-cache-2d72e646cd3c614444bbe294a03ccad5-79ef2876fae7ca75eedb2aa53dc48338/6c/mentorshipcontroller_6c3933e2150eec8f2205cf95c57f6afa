18e3e0815d369101d0db5c725a1a7da3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MentorshipController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const mentorship_service_1 = require("./mentorship.service");
/**
 * Controller for mentorship operations: matching, creation, tracking, sessions, and analytics.
 */
let MentorshipController = class MentorshipController {
    constructor(mentorshipService) {
        this.mentorshipService = mentorshipService;
    }
    /**
     * Match a mentee to potential mentors based on criteria.
     */
    async matchMentor(body) {
        return this.mentorshipService.matchMentorMentee(body.menteeId, body.criteria);
    }
    /**
     * Create a new mentorship relationship.
     */
    async createMentorship(body) {
        return this.mentorshipService.createMentorship(body.mentorId, body.menteeId, body.goals);
    }
    /**
     * Track a mentorship by ID.
     */
    async trackMentorship(id) {
        return this.mentorshipService.trackMentorship(id);
    }
    /**
     * Create a session for a mentorship.
     */
    async createSession(mentorshipId, body) {
        return this.mentorshipService.createSession(mentorshipId, body.scheduledAt, body.durationMinutes, body.notes);
    }
    /**
     * Get mentorship analytics summary.
     */
    async getAnalytics() {
        return this.mentorshipService.getMentorshipAnalytics();
    }
};
exports.MentorshipController = MentorshipController;
__decorate([
    (0, common_1.Post)('match'),
    (0, swagger_1.ApiOperation)({ summary: 'Match mentee to mentors', description: 'Finds mentors for a mentee based on criteria.' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { menteeId: { type: 'string' }, criteria: { type: 'object' } } } }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of matched mentors.' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MentorshipController.prototype, "matchMentor", null);
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({ summary: 'Create mentorship', description: 'Creates a new mentorship between mentor and mentee.' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { mentorId: { type: 'string' }, menteeId: { type: 'string' }, goals: { type: 'string', required: false } } } }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Mentorship created.' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MentorshipController.prototype, "createMentorship", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Track mentorship', description: 'Get mentorship details by ID.' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Mentorship ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Mentorship details.' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MentorshipController.prototype, "trackMentorship", null);
__decorate([
    (0, common_1.Post)(':id/session'),
    (0, swagger_1.ApiOperation)({ summary: 'Create mentorship session', description: 'Schedules a new session for a mentorship.' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Mentorship ID' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { scheduledAt: { type: 'string', format: 'date-time' }, durationMinutes: { type: 'number', required: false }, notes: { type: 'string', required: false } } } }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Session created.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], MentorshipController.prototype, "createSession", null);
__decorate([
    (0, common_1.Get)('analytics/summary'),
    (0, swagger_1.ApiOperation)({ summary: 'Get mentorship analytics', description: 'Returns analytics summary for mentorships.' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Analytics summary.' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MentorshipController.prototype, "getAnalytics", null);
exports.MentorshipController = MentorshipController = __decorate([
    (0, swagger_1.ApiTags)('Mentorship'),
    (0, common_1.Controller)('mentorship'),
    __metadata("design:paramtypes", [typeof (_a = typeof mentorship_service_1.MentorshipService !== "undefined" && mentorship_service_1.MentorshipService) === "function" ? _a : Object])
], MentorshipController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,