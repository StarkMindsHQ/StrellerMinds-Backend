{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\__tests__\\offline-sync.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\__tests__\\offline-sync.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { OfflineSyncService } from \"../services/offline-sync.service\"\r\nimport { OfflineSync } from \"../entities/offline-sync.entity\"\r\n\r\ndescribe(\"OfflineSyncService\", () => {\r\n  let service: OfflineSyncService\r\n  let syncRepository: Repository<OfflineSync>\r\n  let syncQueue: Queue\r\n\r\n  const mockSyncRepository = {\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n    find: jest.fn(),\r\n    findOne: jest.fn(),\r\n    update: jest.fn(),\r\n    delete: jest.fn(),\r\n    count: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  }\r\n\r\n  const mockQueue = {\r\n    add: jest.fn(),\r\n    addBulk: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        OfflineSyncService,\r\n        {\r\n          provide: getRepositoryToken(OfflineSync),\r\n          useValue: mockSyncRepository,\r\n        },\r\n        {\r\n          provide: getQueueToken(\"background-sync\"),\r\n          useValue: mockQueue,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<OfflineSyncService>(OfflineSyncService)\r\n    syncRepository = module.get<Repository<OfflineSync>>(getRepositoryToken(OfflineSync))\r\n    syncQueue = module.get<Queue>(getQueueToken(\"background-sync\"))\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"createSyncJob\", () => {\r\n    it(\"should create and queue a sync job\", async () => {\r\n      const syncJobDto = {\r\n        userId: \"user123\",\r\n        operation: \"create\" as const,\r\n        entityType: \"analytics-event\",\r\n        data: { eventName: \"test\" },\r\n      }\r\n\r\n      const createdJob = {\r\n        id: \"job123\",\r\n        ...syncJobDto,\r\n        status: \"pending\",\r\n        priority: 5,\r\n      }\r\n\r\n      mockSyncRepository.create.mockReturnValue(createdJob)\r\n      mockSyncRepository.save.mockResolvedValue(createdJob)\r\n      mockQueue.add.mockResolvedValue({})\r\n\r\n      const result = await service.createSyncJob(syncJobDto)\r\n\r\n      expect(mockSyncRepository.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: \"user123\",\r\n          operation: \"create\",\r\n          entityType: \"analytics-event\",\r\n          status: \"pending\",\r\n        }),\r\n      )\r\n      expect(mockSyncRepository.save).toHaveBeenCalled()\r\n      expect(mockQueue.add).toHaveBeenCalledWith(\r\n        \"process-sync\",\r\n        { syncJobId: \"job123\" },\r\n        expect.objectContaining({\r\n          priority: 5,\r\n          attempts: 3,\r\n        }),\r\n      )\r\n      expect(result).toEqual(createdJob)\r\n    })\r\n  })\r\n\r\n  describe(\"batchCreateSyncJobs\", () => {\r\n    it(\"should create multiple sync jobs\", async () => {\r\n      const jobs = [\r\n        {\r\n          operation: \"create\" as const,\r\n          entityType: \"analytics-event\",\r\n          data: { eventName: \"test1\" },\r\n        },\r\n        {\r\n          operation: \"update\" as const,\r\n          entityType: \"user-profile\",\r\n          data: { name: \"John\" },\r\n        },\r\n      ]\r\n\r\n      const createdJobs = [\r\n        { id: \"job1\", ...jobs[0] },\r\n        { id: \"job2\", ...jobs[1] },\r\n      ]\r\n\r\n      mockSyncRepository.create.mockImplementation((data) => data)\r\n      mockSyncRepository.save.mockResolvedValue(createdJobs)\r\n      mockQueue.addBulk.mockResolvedValue([])\r\n\r\n      const result = await service.batchCreateSyncJobs(jobs)\r\n\r\n      expect(mockSyncRepository.save).toHaveBeenCalledWith(\r\n        expect.arrayContaining([\r\n          expect.objectContaining({ operation: \"create\" }),\r\n          expect.objectContaining({ operation: \"update\" }),\r\n        ]),\r\n      )\r\n      expect(mockQueue.addBulk).toHaveBeenCalled()\r\n      expect(result).toEqual(createdJobs)\r\n    })\r\n  })\r\n\r\n  describe(\"updateSyncJobStatus\", () => {\r\n    it(\"should update job status to completed\", async () => {\r\n      const result = { success: true, data: { processed: true } }\r\n\r\n      await service.updateSyncJobStatus(\"job123\", \"completed\", result)\r\n\r\n      expect(mockSyncRepository.update).toHaveBeenCalledWith(\r\n        \"job123\",\r\n        expect.objectContaining({\r\n          status: \"completed\",\r\n          processedAt: expect.any(Date),\r\n          result: result.data,\r\n        }),\r\n      )\r\n    })\r\n\r\n    it(\"should handle failed status with retry logic\", async () => {\r\n      const syncJob = {\r\n        id: \"job123\",\r\n        retryCount: 1,\r\n        maxRetries: 3,\r\n      }\r\n\r\n      mockSyncRepository.findOne.mockResolvedValue(syncJob)\r\n\r\n      await service.updateSyncJobStatus(\"job123\", \"failed\", undefined, \"Test error\")\r\n\r\n      expect(mockSyncRepository.update).toHaveBeenCalledWith(\r\n        \"job123\",\r\n        expect.objectContaining({\r\n          status: \"pending\", // Should retry\r\n          retryCount: 2,\r\n          nextRetryAt: expect.any(Date),\r\n          errorMessage: \"Test error\",\r\n        }),\r\n      )\r\n    })\r\n  })\r\n})\r\n"],"version":3}