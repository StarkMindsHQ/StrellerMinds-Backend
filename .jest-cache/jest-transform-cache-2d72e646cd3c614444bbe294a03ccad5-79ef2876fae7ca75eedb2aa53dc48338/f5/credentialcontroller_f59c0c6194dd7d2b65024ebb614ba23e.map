{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA;;GAEG;AACH,2CASwB;AACxB,6DAAyD;AACzD,qFAA+E;AAC/E,2FAAqF;AACrF,6CAMyB;AACzB,mEAA8D;AAE9D;;GAEG;AACU,QAAA,IAAI,GAAG,IAAA,6BAAoB,EACtC,CAAC,IAAa,EAAE,GAAqB,EAAE,EAAE;IACvC,MAAM,OAAO,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;IAChD,OAAO,OAAO,CAAC,IAAI,CAAC;AACtB,CAAC,CACF,CAAC;AAIK,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAA6B,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAG,CAAC;IAErE;;;;;;;;OAQG;IAiDG,AAAN,KAAK,CAAC,oBAAoB,CAChB,IAAS,EACR,WAAsC;QAE/C,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,MAAM,IAAI,sBAAa,CAAC,cAAc,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAC/E,CAAC;CACF,CAAA;AArEY,oDAAoB;AA4DzB;IAhDL,IAAA,YAAG,EAAC,SAAS,CAAC;IACd,IAAA,kBAAS,EAAC,6BAAY,CAAC;IACvB,IAAA,uBAAa,GAAE;IACf,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,qDAAqD;QAC9D,WAAW,EACT,oGAAoG;KACvG,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,mBAAU,CAAC,EAAE;QACrB,WAAW,EAAE,2CAA2C;QACxD,IAAI,EAAE,8DAA4B;KACnC,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,mBAAU,CAAC,YAAY,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;IAC7E,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,mBAAU,CAAC,WAAW;QAC9B,WAAW,EAAE,0BAA0B;KACxC,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,4BAA4B;KAC1C,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,0BAA0B;KACxC,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,gBAAgB;QACtB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,wBAAwB;KACtC,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,WAAW;QACjB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,6CAA6C;KAC3D,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,2CAA2C;KACzD,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,0BAA0B;KACxC,CAAC;IAEC,WAAA,IAAA,YAAI,GAAE,CAAA;IACN,WAAA,IAAA,cAAK,GAAE,CAAA;;iEAAc,wDAAyB,oBAAzB,wDAAyB;wDAC9C,OAAO,oBAAP,OAAO;gEAKT;+BApEU,oBAAoB;IAFhC,IAAA,iBAAO,EAAC,aAAa,CAAC;IACtB,IAAA,mBAAU,EAAC,aAAa,CAAC;yDAEwB,sCAAiB,oBAAjB,sCAAiB;GADtD,oBAAoB,CAqEhC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.controller.ts"],"sourcesContent":["/**\r\n * CredentialController handles endpoints for credential management and history.\r\n */\r\nimport {\r\n  Controller,\r\n  Get,\r\n  Query,\r\n  UseGuards,\r\n  HttpStatus,\r\n  HttpException,\r\n  createParamDecorator,\r\n  ExecutionContext,\r\n} from '@nestjs/common';\r\nimport { CredentialService } from './credential.service';\r\nimport { CredentialHistoryQueryDto } from './dto/credential-history-query.dto';\r\nimport { CredentialHistoryResponseDto } from './dto/credential-history-response.dto';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiQuery,\r\n} from '@nestjs/swagger';\r\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\r\n\r\n/**\r\n * Custom decorator to extract the user object from the request.\r\n */\r\nexport const User = createParamDecorator(\r\n  (data: unknown, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    return request.user;\r\n  },\r\n);\r\n\r\n@ApiTags('credentials')\r\n@Controller('credentials')\r\nexport class CredentialController {\r\n  constructor(private readonly credentialService: CredentialService) {}\r\n\r\n  /**\r\n   * Get user credential history from Stellar blockchain.\r\n   *\r\n   * Retrieves the credential history for the authenticated user, with optional filters and pagination.\r\n   *\r\n   * @param user - The user object, automatically injected\r\n   * @param queryParams - The query parameters for credential history\r\n   * @returns The credential history response DTO\r\n   */\r\n  @Get('history')\r\n  @UseGuards(JwtAuthGuard)\r\n  @ApiBearerAuth()\r\n  @ApiOperation({\r\n    summary: 'Get user credential history from Stellar blockchain',\r\n    description:\r\n      'Retrieves the credential history for the authenticated user, with optional filters and pagination.',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Credential history retrieved successfully',\r\n    type: CredentialHistoryResponseDto,\r\n  })\r\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Invalid query parameters',\r\n  })\r\n  @ApiQuery({\r\n    name: 'page',\r\n    required: false,\r\n    description: 'Page number for pagination',\r\n  })\r\n  @ApiQuery({\r\n    name: 'limit',\r\n    required: false,\r\n    description: 'Number of items per page',\r\n  })\r\n  @ApiQuery({\r\n    name: 'credentialType',\r\n    required: false,\r\n    description: 'Credential type filter',\r\n  })\r\n  @ApiQuery({\r\n    name: 'startDate',\r\n    required: false,\r\n    description: 'Start date for issued credentials (ISO8601)',\r\n  })\r\n  @ApiQuery({\r\n    name: 'endDate',\r\n    required: false,\r\n    description: 'End date for issued credentials (ISO8601)',\r\n  })\r\n  @ApiQuery({\r\n    name: 'status',\r\n    required: false,\r\n    description: 'Credential status filter',\r\n  })\r\n  async getCredentialHistory(\r\n    @User() user: any,\r\n    @Query() queryParams: CredentialHistoryQueryDto,\r\n  ): Promise<CredentialHistoryResponseDto> {\r\n    if (!user || !user.id) {\r\n      throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n    }\r\n    return this.credentialService.getUserCredentialHistory(user.id, queryParams);\r\n  }\r\n}\r\n"],"version":3}