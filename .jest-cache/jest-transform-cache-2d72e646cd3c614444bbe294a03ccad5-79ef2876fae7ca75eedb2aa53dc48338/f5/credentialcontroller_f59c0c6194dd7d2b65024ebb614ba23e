e95e1e1d9cd0692af31262f3f67bb027
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialController = exports.User = void 0;
/**
 * CredentialController handles endpoints for credential management and history.
 */
const common_1 = require("@nestjs/common");
const credential_service_1 = require("./credential.service");
const credential_history_query_dto_1 = require("./dto/credential-history-query.dto");
const credential_history_response_dto_1 = require("./dto/credential-history-response.dto");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("src/auth/guards/jwt-auth.guard");
/**
 * Custom decorator to extract the user object from the request.
 */
exports.User = (0, common_1.createParamDecorator)((data, ctx) => {
    const request = ctx.switchToHttp().getRequest();
    return request.user;
});
let CredentialController = class CredentialController {
    constructor(credentialService) {
        this.credentialService = credentialService;
    }
    /**
     * Get user credential history from Stellar blockchain.
     *
     * Retrieves the credential history for the authenticated user, with optional filters and pagination.
     *
     * @param user - The user object, automatically injected
     * @param queryParams - The query parameters for credential history
     * @returns The credential history response DTO
     */
    async getCredentialHistory(user, queryParams) {
        if (!user || !user.id) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return this.credentialService.getUserCredentialHistory(user.id, queryParams);
    }
};
exports.CredentialController = CredentialController;
__decorate([
    (0, common_1.Get)('history'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Get user credential history from Stellar blockchain',
        description: 'Retrieves the credential history for the authenticated user, with optional filters and pagination.',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Credential history retrieved successfully',
        type: credential_history_response_dto_1.CredentialHistoryResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.UNAUTHORIZED, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid query parameters',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        description: 'Page number for pagination',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        description: 'Number of items per page',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'credentialType',
        required: false,
        description: 'Credential type filter',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'startDate',
        required: false,
        description: 'Start date for issued credentials (ISO8601)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'endDate',
        required: false,
        description: 'End date for issued credentials (ISO8601)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'status',
        required: false,
        description: 'Credential status filter',
    }),
    __param(0, (0, exports.User)()),
    __param(1, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeof (_b = typeof credential_history_query_dto_1.CredentialHistoryQueryDto !== "undefined" && credential_history_query_dto_1.CredentialHistoryQueryDto) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CredentialController.prototype, "getCredentialHistory", null);
exports.CredentialController = CredentialController = __decorate([
    (0, swagger_1.ApiTags)('credentials'),
    (0, common_1.Controller)('credentials'),
    __metadata("design:paramtypes", [typeof (_a = typeof credential_service_1.CredentialService !== "undefined" && credential_service_1.CredentialService) === "function" ? _a : Object])
], CredentialController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxjcmVkZW50aWFsXFxjcmVkZW50aWFsLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsMkNBU3dCO0FBQ3hCLDZEQUF5RDtBQUN6RCxxRkFBK0U7QUFDL0UsMkZBQXFGO0FBQ3JGLDZDQU15QjtBQUN6QixtRUFBOEQ7QUFFOUQ7O0dBRUc7QUFDVSxRQUFBLElBQUksR0FBRyxJQUFBLDZCQUFvQixFQUN0QyxDQUFDLElBQWEsRUFBRSxHQUFxQixFQUFFLEVBQUU7SUFDdkMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2hELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztBQUN0QixDQUFDLENBQ0YsQ0FBQztBQUlLLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQW9CO0lBQy9CLFlBQTZCLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBQUcsQ0FBQztJQUVyRTs7Ozs7Ozs7T0FRRztJQWlERyxBQUFOLEtBQUssQ0FBQyxvQkFBb0IsQ0FDaEIsSUFBUyxFQUNSLFdBQXNDO1FBRS9DLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEIsTUFBTSxJQUFJLHNCQUFhLENBQUMsY0FBYyxFQUFFLG1CQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbkUsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDL0UsQ0FBQztDQUNGLENBQUE7QUFyRVksb0RBQW9CO0FBNER6QjtJQWhETCxJQUFBLFlBQUcsRUFBQyxTQUFTLENBQUM7SUFDZCxJQUFBLGtCQUFTLEVBQUMsNkJBQVksQ0FBQztJQUN2QixJQUFBLHVCQUFhLEdBQUU7SUFDZixJQUFBLHNCQUFZLEVBQUM7UUFDWixPQUFPLEVBQUUscURBQXFEO1FBQzlELFdBQVcsRUFDVCxvR0FBb0c7S0FDdkcsQ0FBQztJQUNELElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxtQkFBVSxDQUFDLEVBQUU7UUFDckIsV0FBVyxFQUFFLDJDQUEyQztRQUN4RCxJQUFJLEVBQUUsOERBQTRCO0tBQ25DLENBQUM7SUFDRCxJQUFBLHFCQUFXLEVBQUMsRUFBRSxNQUFNLEVBQUUsbUJBQVUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDO0lBQzdFLElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxtQkFBVSxDQUFDLFdBQVc7UUFDOUIsV0FBVyxFQUFFLDBCQUEwQjtLQUN4QyxDQUFDO0lBQ0QsSUFBQSxrQkFBUSxFQUFDO1FBQ1IsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsS0FBSztRQUNmLFdBQVcsRUFBRSw0QkFBNEI7S0FDMUMsQ0FBQztJQUNELElBQUEsa0JBQVEsRUFBQztRQUNSLElBQUksRUFBRSxPQUFPO1FBQ2IsUUFBUSxFQUFFLEtBQUs7UUFDZixXQUFXLEVBQUUsMEJBQTBCO0tBQ3hDLENBQUM7SUFDRCxJQUFBLGtCQUFRLEVBQUM7UUFDUixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLFFBQVEsRUFBRSxLQUFLO1FBQ2YsV0FBVyxFQUFFLHdCQUF3QjtLQUN0QyxDQUFDO0lBQ0QsSUFBQSxrQkFBUSxFQUFDO1FBQ1IsSUFBSSxFQUFFLFdBQVc7UUFDakIsUUFBUSxFQUFFLEtBQUs7UUFDZixXQUFXLEVBQUUsNkNBQTZDO0tBQzNELENBQUM7SUFDRCxJQUFBLGtCQUFRLEVBQUM7UUFDUixJQUFJLEVBQUUsU0FBUztRQUNmLFFBQVEsRUFBRSxLQUFLO1FBQ2YsV0FBVyxFQUFFLDJDQUEyQztLQUN6RCxDQUFDO0lBQ0QsSUFBQSxrQkFBUSxFQUFDO1FBQ1IsSUFBSSxFQUFFLFFBQVE7UUFDZCxRQUFRLEVBQUUsS0FBSztRQUNmLFdBQVcsRUFBRSwwQkFBMEI7S0FDeEMsQ0FBQztJQUVDLFdBQUEsSUFBQSxZQUFJLEdBQUUsQ0FBQTtJQUNOLFdBQUEsSUFBQSxjQUFLLEdBQUUsQ0FBQTs7aUVBQWMsd0RBQXlCLG9CQUF6Qix3REFBeUI7d0RBQzlDLE9BQU8sb0JBQVAsT0FBTztnRUFLVDsrQkFwRVUsb0JBQW9CO0lBRmhDLElBQUEsaUJBQU8sRUFBQyxhQUFhLENBQUM7SUFDdEIsSUFBQSxtQkFBVSxFQUFDLGFBQWEsQ0FBQzt5REFFd0Isc0NBQWlCLG9CQUFqQixzQ0FBaUI7R0FEdEQsb0JBQW9CLENBcUVoQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXGNyZWRlbnRpYWxcXGNyZWRlbnRpYWwuY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlZGVudGlhbENvbnRyb2xsZXIgaGFuZGxlcyBlbmRwb2ludHMgZm9yIGNyZWRlbnRpYWwgbWFuYWdlbWVudCBhbmQgaGlzdG9yeS5cclxuICovXHJcbmltcG9ydCB7XHJcbiAgQ29udHJvbGxlcixcclxuICBHZXQsXHJcbiAgUXVlcnksXHJcbiAgVXNlR3VhcmRzLFxyXG4gIEh0dHBTdGF0dXMsXHJcbiAgSHR0cEV4Y2VwdGlvbixcclxuICBjcmVhdGVQYXJhbURlY29yYXRvcixcclxuICBFeGVjdXRpb25Db250ZXh0LFxyXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgQ3JlZGVudGlhbFNlcnZpY2UgfSBmcm9tICcuL2NyZWRlbnRpYWwuc2VydmljZSc7XHJcbmltcG9ydCB7IENyZWRlbnRpYWxIaXN0b3J5UXVlcnlEdG8gfSBmcm9tICcuL2R0by9jcmVkZW50aWFsLWhpc3RvcnktcXVlcnkuZHRvJztcclxuaW1wb3J0IHsgQ3JlZGVudGlhbEhpc3RvcnlSZXNwb25zZUR0byB9IGZyb20gJy4vZHRvL2NyZWRlbnRpYWwtaGlzdG9yeS1yZXNwb25zZS5kdG8nO1xyXG5pbXBvcnQge1xyXG4gIEFwaUJlYXJlckF1dGgsXHJcbiAgQXBpVGFncyxcclxuICBBcGlPcGVyYXRpb24sXHJcbiAgQXBpUmVzcG9uc2UsXHJcbiAgQXBpUXVlcnksXHJcbn0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcclxuaW1wb3J0IHsgSnd0QXV0aEd1YXJkIH0gZnJvbSAnc3JjL2F1dGgvZ3VhcmRzL2p3dC1hdXRoLmd1YXJkJztcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gZGVjb3JhdG9yIHRvIGV4dHJhY3QgdGhlIHVzZXIgb2JqZWN0IGZyb20gdGhlIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVXNlciA9IGNyZWF0ZVBhcmFtRGVjb3JhdG9yKFxyXG4gIChkYXRhOiB1bmtub3duLCBjdHg6IEV4ZWN1dGlvbkNvbnRleHQpID0+IHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBjdHguc3dpdGNoVG9IdHRwKCkuZ2V0UmVxdWVzdCgpO1xyXG4gICAgcmV0dXJuIHJlcXVlc3QudXNlcjtcclxuICB9LFxyXG4pO1xyXG5cclxuQEFwaVRhZ3MoJ2NyZWRlbnRpYWxzJylcclxuQENvbnRyb2xsZXIoJ2NyZWRlbnRpYWxzJylcclxuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNyZWRlbnRpYWxTZXJ2aWNlOiBDcmVkZW50aWFsU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHVzZXIgY3JlZGVudGlhbCBoaXN0b3J5IGZyb20gU3RlbGxhciBibG9ja2NoYWluLlxyXG4gICAqXHJcbiAgICogUmV0cmlldmVzIHRoZSBjcmVkZW50aWFsIGhpc3RvcnkgZm9yIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIsIHdpdGggb3B0aW9uYWwgZmlsdGVycyBhbmQgcGFnaW5hdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIgb2JqZWN0LCBhdXRvbWF0aWNhbGx5IGluamVjdGVkXHJcbiAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zIC0gVGhlIHF1ZXJ5IHBhcmFtZXRlcnMgZm9yIGNyZWRlbnRpYWwgaGlzdG9yeVxyXG4gICAqIEByZXR1cm5zIFRoZSBjcmVkZW50aWFsIGhpc3RvcnkgcmVzcG9uc2UgRFRPXHJcbiAgICovXHJcbiAgQEdldCgnaGlzdG9yeScpXHJcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQpXHJcbiAgQEFwaUJlYXJlckF1dGgoKVxyXG4gIEBBcGlPcGVyYXRpb24oe1xyXG4gICAgc3VtbWFyeTogJ0dldCB1c2VyIGNyZWRlbnRpYWwgaGlzdG9yeSBmcm9tIFN0ZWxsYXIgYmxvY2tjaGFpbicsXHJcbiAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgJ1JldHJpZXZlcyB0aGUgY3JlZGVudGlhbCBoaXN0b3J5IGZvciB0aGUgYXV0aGVudGljYXRlZCB1c2VyLCB3aXRoIG9wdGlvbmFsIGZpbHRlcnMgYW5kIHBhZ2luYXRpb24uJyxcclxuICB9KVxyXG4gIEBBcGlSZXNwb25zZSh7XHJcbiAgICBzdGF0dXM6IEh0dHBTdGF0dXMuT0ssXHJcbiAgICBkZXNjcmlwdGlvbjogJ0NyZWRlbnRpYWwgaGlzdG9yeSByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyxcclxuICAgIHR5cGU6IENyZWRlbnRpYWxIaXN0b3J5UmVzcG9uc2VEdG8sXHJcbiAgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IEh0dHBTdGF0dXMuVU5BVVRIT1JJWkVELCBkZXNjcmlwdGlvbjogJ1VuYXV0aG9yaXplZCcgfSlcclxuICBAQXBpUmVzcG9uc2Uoe1xyXG4gICAgc3RhdHVzOiBIdHRwU3RhdHVzLkJBRF9SRVFVRVNULFxyXG4gICAgZGVzY3JpcHRpb246ICdJbnZhbGlkIHF1ZXJ5IHBhcmFtZXRlcnMnLFxyXG4gIH0pXHJcbiAgQEFwaVF1ZXJ5KHtcclxuICAgIG5hbWU6ICdwYWdlJyxcclxuICAgIHJlcXVpcmVkOiBmYWxzZSxcclxuICAgIGRlc2NyaXB0aW9uOiAnUGFnZSBudW1iZXIgZm9yIHBhZ2luYXRpb24nLFxyXG4gIH0pXHJcbiAgQEFwaVF1ZXJ5KHtcclxuICAgIG5hbWU6ICdsaW1pdCcsXHJcbiAgICByZXF1aXJlZDogZmFsc2UsXHJcbiAgICBkZXNjcmlwdGlvbjogJ051bWJlciBvZiBpdGVtcyBwZXIgcGFnZScsXHJcbiAgfSlcclxuICBAQXBpUXVlcnkoe1xyXG4gICAgbmFtZTogJ2NyZWRlbnRpYWxUeXBlJyxcclxuICAgIHJlcXVpcmVkOiBmYWxzZSxcclxuICAgIGRlc2NyaXB0aW9uOiAnQ3JlZGVudGlhbCB0eXBlIGZpbHRlcicsXHJcbiAgfSlcclxuICBAQXBpUXVlcnkoe1xyXG4gICAgbmFtZTogJ3N0YXJ0RGF0ZScsXHJcbiAgICByZXF1aXJlZDogZmFsc2UsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1N0YXJ0IGRhdGUgZm9yIGlzc3VlZCBjcmVkZW50aWFscyAoSVNPODYwMSknLFxyXG4gIH0pXHJcbiAgQEFwaVF1ZXJ5KHtcclxuICAgIG5hbWU6ICdlbmREYXRlJyxcclxuICAgIHJlcXVpcmVkOiBmYWxzZSxcclxuICAgIGRlc2NyaXB0aW9uOiAnRW5kIGRhdGUgZm9yIGlzc3VlZCBjcmVkZW50aWFscyAoSVNPODYwMSknLFxyXG4gIH0pXHJcbiAgQEFwaVF1ZXJ5KHtcclxuICAgIG5hbWU6ICdzdGF0dXMnLFxyXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgZGVzY3JpcHRpb246ICdDcmVkZW50aWFsIHN0YXR1cyBmaWx0ZXInLFxyXG4gIH0pXHJcbiAgYXN5bmMgZ2V0Q3JlZGVudGlhbEhpc3RvcnkoXHJcbiAgICBAVXNlcigpIHVzZXI6IGFueSxcclxuICAgIEBRdWVyeSgpIHF1ZXJ5UGFyYW1zOiBDcmVkZW50aWFsSGlzdG9yeVF1ZXJ5RHRvLFxyXG4gICk6IFByb21pc2U8Q3JlZGVudGlhbEhpc3RvcnlSZXNwb25zZUR0bz4ge1xyXG4gICAgaWYgKCF1c2VyIHx8ICF1c2VyLmlkKSB7XHJcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKCdVbmF1dGhvcml6ZWQnLCBIdHRwU3RhdHVzLlVOQVVUSE9SSVpFRCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFsU2VydmljZS5nZXRVc2VyQ3JlZGVudGlhbEhpc3RvcnkodXNlci5pZCwgcXVlcnlQYXJhbXMpO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=