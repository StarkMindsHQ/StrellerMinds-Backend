8a2334bfcf0394f0bad626675b187e6d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const ipfs_service_1 = require("./ipfs.service");
/**
 * Controller for IPFS operations: add and retrieve content from IPFS.
 */
let IpfsController = class IpfsController {
    constructor(ipfsService) {
        this.ipfsService = ipfsService;
    }
    /**
     * Add content to IPFS and return its CID.
     * @param content The content to store on IPFS.
     * @returns The CID of the stored content.
     */
    async addContent(content) {
        const cid = await this.ipfsService.addFile(Buffer.from(content));
        return { cid };
    }
    /**
     * Retrieve content from IPFS by CID.
     * @param cid The Content Identifier.
     * @returns The content retrieved from IPFS.
     */
    async getContent(cid) {
        const content = await this.ipfsService.getFile(cid);
        return { content };
    }
};
exports.IpfsController = IpfsController;
__decorate([
    (0, common_1.Post)('add'),
    (0, swagger_1.ApiOperation)({ summary: 'Add content to IPFS', description: 'Stores content on IPFS and returns the CID.' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { content: { type: 'string', description: 'Content to store on IPFS' } } } }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Content added to IPFS', schema: { properties: { cid: { type: 'string', description: 'Content Identifier (CID)' } } } }),
    __param(0, (0, common_1.Body)('content')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], IpfsController.prototype, "addContent", null);
__decorate([
    (0, common_1.Get)('get/:cid'),
    (0, swagger_1.ApiOperation)({ summary: 'Get content from IPFS', description: 'Retrieves content from IPFS using the CID.' }),
    (0, swagger_1.ApiParam)({ name: 'cid', description: 'Content Identifier (CID)' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Content retrieved from IPFS', schema: { properties: { content: { type: 'string', description: 'Content from IPFS' } } } }),
    __param(0, (0, common_1.Param)('cid')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], IpfsController.prototype, "getContent", null);
exports.IpfsController = IpfsController = __decorate([
    (0, swagger_1.ApiTags)('IPFS'),
    (0, common_1.Controller)('ipfs'),
    __metadata("design:paramtypes", [typeof (_a = typeof ipfs_service_1.IpfsService !== "undefined" && ipfs_service_1.IpfsService) === "function" ? _a : Object])
], IpfsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxpcGZzXFxpcGZzLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUFvRTtBQUNwRSw2Q0FBd0Y7QUFDeEYsaURBQTZDO0FBRTdDOztHQUVHO0FBR0ksSUFBTSxjQUFjLEdBQXBCLE1BQU0sY0FBYztJQUN6QixZQUE2QixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7SUFFekQ7Ozs7T0FJRztJQUtHLEFBQU4sS0FBSyxDQUFDLFVBQVUsQ0FBa0IsT0FBZTtRQUMvQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNqRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7O09BSUc7SUFLRyxBQUFOLEtBQUssQ0FBQyxVQUFVLENBQWUsR0FBVztRQUN4QyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0YsQ0FBQTtBQTlCWSx3Q0FBYztBQVluQjtJQUpMLElBQUEsYUFBSSxFQUFDLEtBQUssQ0FBQztJQUNYLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsNkNBQTZDLEVBQUUsQ0FBQztJQUM1RyxJQUFBLGlCQUFPLEVBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzdHLElBQUEscUJBQVcsRUFBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLDBCQUEwQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDL0ksV0FBQSxJQUFBLGFBQUksRUFBQyxTQUFTLENBQUMsQ0FBQTs7OztnREFHaEM7QUFXSztJQUpMLElBQUEsWUFBRyxFQUFDLFVBQVUsQ0FBQztJQUNmLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxXQUFXLEVBQUUsNENBQTRDLEVBQUUsQ0FBQztJQUM3RyxJQUFBLGtCQUFRLEVBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRSxDQUFDO0lBQ2xFLElBQUEscUJBQVcsRUFBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbEosV0FBQSxJQUFBLGNBQUssRUFBQyxLQUFLLENBQUMsQ0FBQTs7OztnREFHN0I7eUJBN0JVLGNBQWM7SUFGMUIsSUFBQSxpQkFBTyxFQUFDLE1BQU0sQ0FBQztJQUNmLElBQUEsbUJBQVUsRUFBQyxNQUFNLENBQUM7eURBRXlCLDBCQUFXLG9CQUFYLDBCQUFXO0dBRDFDLGNBQWMsQ0E4QjFCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZy1la29oXFxEZXNrdG9wXFxTdHJlbGxlck1pbmRzLUJhY2tlbmRcXHNyY1xcaXBmc1xcaXBmcy5jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xsZXIsIFBvc3QsIEdldCwgUGFyYW0sIEJvZHkgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEFwaVRhZ3MsIEFwaU9wZXJhdGlvbiwgQXBpUmVzcG9uc2UsIEFwaUJvZHksIEFwaVBhcmFtIH0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcclxuaW1wb3J0IHsgSXBmc1NlcnZpY2UgfSBmcm9tICcuL2lwZnMuc2VydmljZSc7XHJcblxyXG4vKipcclxuICogQ29udHJvbGxlciBmb3IgSVBGUyBvcGVyYXRpb25zOiBhZGQgYW5kIHJldHJpZXZlIGNvbnRlbnQgZnJvbSBJUEZTLlxyXG4gKi9cclxuQEFwaVRhZ3MoJ0lQRlMnKVxyXG5AQ29udHJvbGxlcignaXBmcycpXHJcbmV4cG9ydCBjbGFzcyBJcGZzQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBpcGZzU2VydmljZTogSXBmc1NlcnZpY2UpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBjb250ZW50IHRvIElQRlMgYW5kIHJldHVybiBpdHMgQ0lELlxyXG4gICAqIEBwYXJhbSBjb250ZW50IFRoZSBjb250ZW50IHRvIHN0b3JlIG9uIElQRlMuXHJcbiAgICogQHJldHVybnMgVGhlIENJRCBvZiB0aGUgc3RvcmVkIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgQFBvc3QoJ2FkZCcpXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdBZGQgY29udGVudCB0byBJUEZTJywgZGVzY3JpcHRpb246ICdTdG9yZXMgY29udGVudCBvbiBJUEZTIGFuZCByZXR1cm5zIHRoZSBDSUQuJyB9KVxyXG4gIEBBcGlCb2R5KHsgc2NoZW1hOiB7IHByb3BlcnRpZXM6IHsgY29udGVudDogeyB0eXBlOiAnc3RyaW5nJywgZGVzY3JpcHRpb246ICdDb250ZW50IHRvIHN0b3JlIG9uIElQRlMnIH0gfSB9IH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDEsIGRlc2NyaXB0aW9uOiAnQ29udGVudCBhZGRlZCB0byBJUEZTJywgc2NoZW1hOiB7IHByb3BlcnRpZXM6IHsgY2lkOiB7IHR5cGU6ICdzdHJpbmcnLCBkZXNjcmlwdGlvbjogJ0NvbnRlbnQgSWRlbnRpZmllciAoQ0lEKScgfSB9IH0gfSlcclxuICBhc3luYyBhZGRDb250ZW50KEBCb2R5KCdjb250ZW50JykgY29udGVudDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjaWQgPSBhd2FpdCB0aGlzLmlwZnNTZXJ2aWNlLmFkZEZpbGUoQnVmZmVyLmZyb20oY29udGVudCkpO1xyXG4gICAgcmV0dXJuIHsgY2lkIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXRyaWV2ZSBjb250ZW50IGZyb20gSVBGUyBieSBDSUQuXHJcbiAgICogQHBhcmFtIGNpZCBUaGUgQ29udGVudCBJZGVudGlmaWVyLlxyXG4gICAqIEByZXR1cm5zIFRoZSBjb250ZW50IHJldHJpZXZlZCBmcm9tIElQRlMuXHJcbiAgICovXHJcbiAgQEdldCgnZ2V0LzpjaWQnKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnR2V0IGNvbnRlbnQgZnJvbSBJUEZTJywgZGVzY3JpcHRpb246ICdSZXRyaWV2ZXMgY29udGVudCBmcm9tIElQRlMgdXNpbmcgdGhlIENJRC4nIH0pXHJcbiAgQEFwaVBhcmFtKHsgbmFtZTogJ2NpZCcsIGRlc2NyaXB0aW9uOiAnQ29udGVudCBJZGVudGlmaWVyIChDSUQpJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ0NvbnRlbnQgcmV0cmlldmVkIGZyb20gSVBGUycsIHNjaGVtYTogeyBwcm9wZXJ0aWVzOiB7IGNvbnRlbnQ6IHsgdHlwZTogJ3N0cmluZycsIGRlc2NyaXB0aW9uOiAnQ29udGVudCBmcm9tIElQRlMnIH0gfSB9IH0pXHJcbiAgYXN5bmMgZ2V0Q29udGVudChAUGFyYW0oJ2NpZCcpIGNpZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5pcGZzU2VydmljZS5nZXRGaWxlKGNpZCk7XHJcbiAgICByZXR1cm4geyBjb250ZW50IH07XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==