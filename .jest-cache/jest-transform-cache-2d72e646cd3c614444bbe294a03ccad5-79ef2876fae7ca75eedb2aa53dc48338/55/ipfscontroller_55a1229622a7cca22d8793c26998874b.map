{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\ipfs\\ipfs.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAAoE;AACpE,6CAAwF;AACxF,iDAA6C;AAE7C;;GAEG;AAGI,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAEzD;;;;OAIG;IAKG,AAAN,KAAK,CAAC,UAAU,CAAkB,OAAe;QAC/C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,OAAO,EAAE,GAAG,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IAKG,AAAN,KAAK,CAAC,UAAU,CAAe,GAAW;QACxC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpD,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;CACF,CAAA;AA9BY,wCAAc;AAYnB;IAJL,IAAA,aAAI,EAAC,KAAK,CAAC;IACX,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,6CAA6C,EAAE,CAAC;IAC5G,IAAA,iBAAO,EAAC,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,0BAA0B,EAAE,EAAE,EAAE,EAAE,CAAC;IAC7G,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,uBAAuB,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,0BAA0B,EAAE,EAAE,EAAE,EAAE,CAAC;IAC/I,WAAA,IAAA,aAAI,EAAC,SAAS,CAAC,CAAA;;;;gDAGhC;AAWK;IAJL,IAAA,YAAG,EAAC,UAAU,CAAC;IACf,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,WAAW,EAAE,4CAA4C,EAAE,CAAC;IAC7G,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IAClE,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,6BAA6B,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,CAAC;IAClJ,WAAA,IAAA,cAAK,EAAC,KAAK,CAAC,CAAA;;;;gDAG7B;yBA7BU,cAAc;IAF1B,IAAA,iBAAO,EAAC,MAAM,CAAC;IACf,IAAA,mBAAU,EAAC,MAAM,CAAC;yDAEyB,0BAAW,oBAAX,0BAAW;GAD1C,cAAc,CA8B1B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\ipfs\\ipfs.controller.ts"],"sourcesContent":["import { Controller, Post, Get, Param, Body } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { IpfsService } from './ipfs.service';\r\n\r\n/**\r\n * Controller for IPFS operations: add and retrieve content from IPFS.\r\n */\r\n@ApiTags('IPFS')\r\n@Controller('ipfs')\r\nexport class IpfsController {\r\n  constructor(private readonly ipfsService: IpfsService) {}\r\n\r\n  /**\r\n   * Add content to IPFS and return its CID.\r\n   * @param content The content to store on IPFS.\r\n   * @returns The CID of the stored content.\r\n   */\r\n  @Post('add')\r\n  @ApiOperation({ summary: 'Add content to IPFS', description: 'Stores content on IPFS and returns the CID.' })\r\n  @ApiBody({ schema: { properties: { content: { type: 'string', description: 'Content to store on IPFS' } } } })\r\n  @ApiResponse({ status: 201, description: 'Content added to IPFS', schema: { properties: { cid: { type: 'string', description: 'Content Identifier (CID)' } } } })\r\n  async addContent(@Body('content') content: string) {\r\n    const cid = await this.ipfsService.addFile(Buffer.from(content));\r\n    return { cid };\r\n  }\r\n\r\n  /**\r\n   * Retrieve content from IPFS by CID.\r\n   * @param cid The Content Identifier.\r\n   * @returns The content retrieved from IPFS.\r\n   */\r\n  @Get('get/:cid')\r\n  @ApiOperation({ summary: 'Get content from IPFS', description: 'Retrieves content from IPFS using the CID.' })\r\n  @ApiParam({ name: 'cid', description: 'Content Identifier (CID)' })\r\n  @ApiResponse({ status: 200, description: 'Content retrieved from IPFS', schema: { properties: { content: { type: 'string', description: 'Content from IPFS' } } } })\r\n  async getContent(@Param('cid') cid: string) {\r\n    const content = await this.ipfsService.getFile(cid);\r\n    return { content };\r\n  }\r\n}\r\n"],"version":3}