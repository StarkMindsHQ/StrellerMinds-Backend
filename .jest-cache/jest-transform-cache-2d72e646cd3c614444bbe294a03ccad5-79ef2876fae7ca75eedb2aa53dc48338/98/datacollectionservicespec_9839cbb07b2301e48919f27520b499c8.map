{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\data-collection.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\__tests__\\data-collection.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { DataCollectionService, type EventData } from \"../services/data-collection.service\"\r\nimport { RealTimeAnalyticsService } from \"../services/real-time-analytics.service\"\r\nimport { AnalyticsEvent, EventType } from \"../entities/analytics-event.entity\"\r\n\r\ndescribe(\"DataCollectionService\", () => {\r\n  let service: DataCollectionService\r\n  let repository: jest.Mocked<Repository<AnalyticsEvent>>\r\n  let queue: jest.Mocked<Queue>\r\n  let realTimeService: jest.Mocked<RealTimeAnalyticsService>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        DataCollectionService,\r\n        {\r\n          provide: getRepositoryToken(AnalyticsEvent),\r\n          useValue: {\r\n            createQueryBuilder: jest.fn(),\r\n            save: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getQueueToken(\"data-collection\"),\r\n          useValue: {\r\n            add: jest.fn(),\r\n            addBulk: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: RealTimeAnalyticsService,\r\n          useValue: {\r\n            processRealTimeEvent: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<DataCollectionService>(DataCollectionService)\r\n    repository = module.get(getRepositoryToken(AnalyticsEvent))\r\n    queue = module.get(getQueueToken(\"data-collection\"))\r\n    realTimeService = module.get(RealTimeAnalyticsService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"trackEvent\", () => {\r\n    it(\"should track an event successfully\", async () => {\r\n      const eventData: EventData = {\r\n        eventType: EventType.USER_ACTION,\r\n        eventName: \"button_click\",\r\n        userId: \"user123\",\r\n        properties: { button: \"submit\" },\r\n      }\r\n\r\n      queue.add.mockResolvedValue({} as any)\r\n      realTimeService.processRealTimeEvent.mockResolvedValue()\r\n\r\n      await service.trackEvent(eventData)\r\n\r\n      expect(queue.add).toHaveBeenCalledWith(\"process-event\", {\r\n        ...eventData,\r\n        timestamp: expect.any(Date),\r\n      })\r\n      expect(realTimeService.processRealTimeEvent).toHaveBeenCalledWith(eventData)\r\n    })\r\n\r\n    it(\"should handle tracking errors\", async () => {\r\n      const eventData: EventData = {\r\n        eventType: EventType.USER_ACTION,\r\n        eventName: \"button_click\",\r\n        userId: \"user123\",\r\n        properties: { button: \"submit\" },\r\n      }\r\n\r\n      queue.add.mockRejectedValue(new Error(\"Queue error\"))\r\n\r\n      await expect(service.trackEvent(eventData)).rejects.toThrow(\"Queue error\")\r\n    })\r\n  })\r\n\r\n  describe(\"batchTrackEvents\", () => {\r\n    it(\"should track multiple events successfully\", async () => {\r\n      const events: EventData[] = [\r\n        {\r\n          eventType: EventType.USER_ACTION,\r\n          eventName: \"button_click\",\r\n          userId: \"user123\",\r\n          properties: { button: \"submit\" },\r\n        },\r\n        {\r\n          eventType: EventType.SYSTEM_EVENT,\r\n          eventName: \"page_load\",\r\n          userId: \"user123\",\r\n          properties: { page: \"/dashboard\" },\r\n        },\r\n      ]\r\n\r\n      queue.addBulk.mockResolvedValue([{} as any, {} as any])\r\n      realTimeService.processRealTimeEvent.mockResolvedValue()\r\n\r\n      await service.batchTrackEvents(events)\r\n\r\n      expect(queue.addBulk).toHaveBeenCalledWith(\r\n        events.map((event) => ({\r\n          name: \"process-event\",\r\n          data: {\r\n            ...event,\r\n            timestamp: expect.any(Date),\r\n          },\r\n        })),\r\n      )\r\n      expect(realTimeService.processRealTimeEvent).toHaveBeenCalledTimes(2)\r\n    })\r\n  })\r\n\r\n  describe(\"getEvents\", () => {\r\n    it(\"should retrieve events with filters\", async () => {\r\n      const mockEvents = [\r\n        {\r\n          id: \"1\",\r\n          eventType: EventType.USER_ACTION,\r\n          eventName: \"button_click\",\r\n          userId: \"user123\",\r\n          properties: {},\r\n          timestamp: new Date(),\r\n        },\r\n      ]\r\n\r\n      const mockQueryBuilder = {\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockReturnThis(),\r\n        offset: jest.fn().mockReturnThis(),\r\n        getManyAndCount: jest.fn().mockResolvedValue([mockEvents, 1]),\r\n      }\r\n\r\n      repository.createQueryBuilder.mockReturnValue(mockQueryBuilder as any)\r\n\r\n      const result = await service.getEvents({\r\n        eventType: EventType.USER_ACTION,\r\n        userId: \"user123\",\r\n        limit: 10,\r\n      })\r\n\r\n      expect(result.events).toEqual(mockEvents)\r\n      expect(result.total).toBe(1)\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\"event.eventType = :eventType\", {\r\n        eventType: EventType.USER_ACTION,\r\n      })\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\"event.userId = :userId\", { userId: \"user123\" })\r\n    })\r\n  })\r\n})\r\n"],"version":3}