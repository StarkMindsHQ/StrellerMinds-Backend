aed64d01bb1e9ca88957b95e29f18c5c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const data_collection_service_1 = require("../services/data-collection.service");
const real_time_analytics_service_1 = require("../services/real-time-analytics.service");
const analytics_event_entity_1 = require("../entities/analytics-event.entity");
describe("DataCollectionService", () => {
    let service;
    let repository;
    let queue;
    let realTimeService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                data_collection_service_1.DataCollectionService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(analytics_event_entity_1.AnalyticsEvent),
                    useValue: {
                        createQueryBuilder: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                    },
                },
                {
                    provide: (0, bull_1.getQueueToken)("data-collection"),
                    useValue: {
                        add: globals_1.jest.fn(),
                        addBulk: globals_1.jest.fn(),
                    },
                },
                {
                    provide: real_time_analytics_service_1.RealTimeAnalyticsService,
                    useValue: {
                        processRealTimeEvent: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(data_collection_service_1.DataCollectionService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(analytics_event_entity_1.AnalyticsEvent));
        queue = module.get((0, bull_1.getQueueToken)("data-collection"));
        realTimeService = module.get(real_time_analytics_service_1.RealTimeAnalyticsService);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("trackEvent", () => {
        it("should track an event successfully", async () => {
            const eventData = {
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
                eventName: "button_click",
                userId: "user123",
                properties: { button: "submit" },
            };
            queue.add.mockResolvedValue({});
            realTimeService.processRealTimeEvent.mockResolvedValue();
            await service.trackEvent(eventData);
            expect(queue.add).toHaveBeenCalledWith("process-event", {
                ...eventData,
                timestamp: expect.any(Date),
            });
            expect(realTimeService.processRealTimeEvent).toHaveBeenCalledWith(eventData);
        });
        it("should handle tracking errors", async () => {
            const eventData = {
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
                eventName: "button_click",
                userId: "user123",
                properties: { button: "submit" },
            };
            queue.add.mockRejectedValue(new Error("Queue error"));
            await expect(service.trackEvent(eventData)).rejects.toThrow("Queue error");
        });
    });
    describe("batchTrackEvents", () => {
        it("should track multiple events successfully", async () => {
            const events = [
                {
                    eventType: analytics_event_entity_1.EventType.USER_ACTION,
                    eventName: "button_click",
                    userId: "user123",
                    properties: { button: "submit" },
                },
                {
                    eventType: analytics_event_entity_1.EventType.SYSTEM_EVENT,
                    eventName: "page_load",
                    userId: "user123",
                    properties: { page: "/dashboard" },
                },
            ];
            queue.addBulk.mockResolvedValue([{}, {}]);
            realTimeService.processRealTimeEvent.mockResolvedValue();
            await service.batchTrackEvents(events);
            expect(queue.addBulk).toHaveBeenCalledWith(events.map((event) => ({
                name: "process-event",
                data: {
                    ...event,
                    timestamp: expect.any(Date),
                },
            })));
            expect(realTimeService.processRealTimeEvent).toHaveBeenCalledTimes(2);
        });
    });
    describe("getEvents", () => {
        it("should retrieve events with filters", async () => {
            const mockEvents = [
                {
                    id: "1",
                    eventType: analytics_event_entity_1.EventType.USER_ACTION,
                    eventName: "button_click",
                    userId: "user123",
                    properties: {},
                    timestamp: new Date(),
                },
            ];
            const mockQueryBuilder = {
                andWhere: globals_1.jest.fn().mockReturnThis(),
                orderBy: globals_1.jest.fn().mockReturnThis(),
                limit: globals_1.jest.fn().mockReturnThis(),
                offset: globals_1.jest.fn().mockReturnThis(),
                getManyAndCount: globals_1.jest.fn().mockResolvedValue([mockEvents, 1]),
            };
            repository.createQueryBuilder.mockReturnValue(mockQueryBuilder);
            const result = await service.getEvents({
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
                userId: "user123",
                limit: 10,
            });
            expect(result.events).toEqual(mockEvents);
            expect(result.total).toBe(1);
            expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith("event.eventType = :eventType", {
                eventType: analytics_event_entity_1.EventType.USER_ACTION,
            });
            expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith("event.userId = :userId", { userId: "user123" });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,