{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.service.ts"],"sourcesContent":["import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, Between, FindManyOptions } from 'typeorm';\r\nimport { Credential } from './entities/credential.entity';\r\nimport { CredentialHistoryQueryDto, CredentialStatus } from './dto/credential-history-query.dto';\r\nimport { CredentialHistoryResponseDto, CredentialDto } from './dto/credential-history-response.dto';\r\nimport { StellarService } from '../blockchain/stellar/stellar.service';\r\n\r\n/**\r\n * CredentialService provides logic for credential management and history retrieval.\r\n */\r\n@Injectable()\r\nexport class CredentialService {\r\n  constructor(\r\n    @InjectRepository(Credential)\r\n    private credentialRepository: Repository<Credential>,\r\n    private readonly stellarService: StellarService,\r\n  ) {}\r\n\r\n  /**\r\n   * Get user credential history.\r\n   *\r\n   * @param userId - The ID of the user whose credential history is to be retrieved.\r\n   * @param queryParams - The query parameters for retrieving credential history, including pagination and filters.\r\n   * @returns A promise that resolves to the user's credential history response DTO.\r\n   */\r\n  async getUserCredentialHistory(\r\n    userId: string,\r\n    queryParams: CredentialHistoryQueryDto,\r\n  ): Promise<CredentialHistoryResponseDto> {\r\n    const { page = 1, limit = 10, credentialType, startDate, endDate, status } = queryParams;\r\n    \r\n    // Build query conditions\r\n    const findOptions: FindManyOptions<Credential> = {\r\n      where: { userId },\r\n      order: { issuedAt: 'DESC' },\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n    };\r\n\r\n    // Add filters if provided\r\n    if (credentialType) {\r\n      findOptions.where = { ...findOptions.where, type: credentialType };\r\n    }\r\n\r\n    if (startDate && endDate) {\r\n      findOptions.where = { \r\n        ...findOptions.where, \r\n        issuedAt: Between(startDate, endDate) \r\n      };\r\n    }\r\n\r\n    if (status && status !== CredentialStatus.ALL) {\r\n      findOptions.where = { ...findOptions.where, status };\r\n    }\r\n\r\n    // Execute query with pagination\r\n    const [credentials, totalItems] = await this.credentialRepository.findAndCount(findOptions);\r\n    \r\n    // Map to DTOs\r\n    const mappedCredentials = credentials.map(credential => this.mapToCredentialDto(credential));\r\n\r\n    return {\r\n      data: mappedCredentials,\r\n      meta: {\r\n        page,\r\n        limit,\r\n        totalItems,\r\n        totalPages: Math.ceil(totalItems / limit),\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Verify a user's credential by its ID.\r\n   * \r\n   * @param userId - The ID of the user who owns the credential.\r\n   * @param credentialId - The ID of the credential to be verified.\r\n   * @returns A promise that resolves to an object containing the verification result and the credential DTO.\r\n   */\r\n  async verifyCredential(userId: string, credentialId: string): Promise<{ verified: boolean; credential: CredentialDto }> {\r\n    // Find the credential\r\n    const credential = await this.credentialRepository.findOne({ \r\n      where: { id: credentialId, userId } \r\n    });\r\n\r\n    if (!credential) {\r\n      throw new HttpException('Credential not found', HttpStatus.NOT_FOUND);\r\n    }\r\n\r\n    // Verify on the blockchain using Stellar SDK\r\n    let verified = false;\r\n    try {\r\n      if (credential.network?.toLowerCase() !== 'stellar') {\r\n        // Currently only Stellar network is supported for on-chain verification\r\n        verified = false;\r\n      } else if (credential.txHash) {\r\n        const tx = await this.stellarService.monitorTransaction(credential.txHash);\r\n        if (tx) {\r\n          // If blockHeight is stored, ensure it matches the ledger sequence\r\n          if (credential.blockHeight && typeof tx.ledger === 'number') {\r\n            verified = Number(credential.blockHeight) === Number(tx.ledger);\r\n          } else {\r\n            verified = true;\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      verified = false;\r\n    }\r\n\r\n    // Update verification status in database\r\n    credential.verificationStatus = verified;\r\n    await this.credentialRepository.save(credential);\r\n\r\n    return {\r\n      verified,\r\n      credential: this.mapToCredentialDto(credential),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a Credential entity to a CredentialDto.\r\n   * @param credential - The Credential entity instance.\r\n   * @returns The mapped CredentialDto.\r\n   */\r\n  private mapToCredentialDto(credential: Credential): CredentialDto {\r\n    return {\r\n      id: credential.id,\r\n      type: credential.type,\r\n      name: credential.name,\r\n      issuedAt: credential.issuedAt,\r\n      expiresAt: credential.expiresAt,\r\n      issuer: {\r\n        id: credential.issuerId,\r\n        name: credential.issuerName,\r\n      },\r\n      status: credential.status,\r\n      verificationStatus: credential.verificationStatus,\r\n      metadata: credential.metadata,\r\n      blockchainReference: {\r\n        txHash: credential.txHash,\r\n        network: credential.network,\r\n        timestamp: credential.issuedAt,\r\n        blockHeight: credential.blockHeight,\r\n      },\r\n    };\r\n  }\r\n}"],"version":3}