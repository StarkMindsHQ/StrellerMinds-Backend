cfd503141397e70b71c75ecfa7784f30
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseFactory = void 0;
const faker_1 = require("@faker-js/faker");
class BaseFactory {
    constructor() {
        this.traits = {};
    }
    /**
     * Create a single instance
     */
    create(options = {}) {
        const { overrides = {}, traits = [] } = options;
        let data = this.definition();
        // Apply traits
        traits.forEach(trait => {
            if (this.traits[trait]) {
                data = { ...data, ...this.traits[trait]() };
            }
        });
        // Apply overrides
        data = { ...data, ...overrides };
        return data;
    }
    /**
     * Create multiple instances
     */
    createMany(count, options = {}) {
        return Array.from({ length: count }, () => this.create(options));
    }
    /**
     * Create with specific trait
     */
    withTrait(trait, options = {}) {
        return this.create({ ...options, traits: [...(options.traits || []), trait] });
    }
    /**
     * Create with multiple traits
     */
    withTraits(traits, options = {}) {
        return this.create({ ...options, traits: [...(options.traits || []), ...traits] });
    }
    /**
     * Build data without creating entity (useful for DTOs)
     */
    build(options = {}) {
        return this.create(options);
    }
    /**
     * Build many without creating entities
     */
    buildMany(count, options = {}) {
        return this.createMany(count, options);
    }
    /**
     * Create sequence of items with incremental values
     */
    sequence(count, callback) {
        return Array.from({ length: count }, (_, index) => {
            const sequenceData = callback(index);
            return this.create({ overrides: sequenceData });
        });
    }
    /**
     * Reset faker seed for consistent test data
     */
    static resetSeed(seed = 12345) {
        faker_1.faker.seed(seed);
    }
    /**
     * Generate random ID
     */
    generateId() {
        return faker_1.faker.string.uuid();
    }
    /**
     * Generate random email
     */
    generateEmail() {
        return faker_1.faker.internet.email().toLowerCase();
    }
    /**
     * Generate random name
     */
    generateName() {
        return faker_1.faker.person.fullName();
    }
    /**
     * Generate random text
     */
    generateText(sentences = 3) {
        return faker_1.faker.lorem.sentences(sentences);
    }
    /**
     * Generate random date
     */
    generateDate(options = {}) {
        if (options.past) {
            return faker_1.faker.date.past({ years: 1 });
        }
        if (options.future) {
            return faker_1.faker.date.future({ years: 1 });
        }
        return faker_1.faker.date.recent({ days: options.days || 30 });
    }
    /**
     * Generate random number
     */
    generateNumber(min = 1, max = 100) {
        return faker_1.faker.number.int({ min, max });
    }
    /**
     * Generate random boolean
     */
    generateBoolean() {
        return faker_1.faker.datatype.boolean();
    }
    /**
     * Generate random URL
     */
    generateUrl() {
        return faker_1.faker.internet.url();
    }
    /**
     * Generate random phone number
     */
    generatePhone() {
        return faker_1.faker.phone.number();
    }
    /**
     * Generate random address
     */
    generateAddress() {
        return {
            street: faker_1.faker.location.streetAddress(),
            city: faker_1.faker.location.city(),
            state: faker_1.faker.location.state(),
            zipCode: faker_1.faker.location.zipCode(),
            country: faker_1.faker.location.country(),
        };
    }
    /**
     * Pick random item from array
     */
    pickRandom(items) {
        return faker_1.faker.helpers.arrayElement(items);
    }
    /**
     * Pick multiple random items from array
     */
    pickRandomMany(items, count) {
        return faker_1.faker.helpers.arrayElements(items, count);
    }
    /**
     * Generate random slug
     */
    generateSlug() {
        return faker_1.faker.lorem.slug();
    }
    /**
     * Generate random price
     */
    generatePrice(min = 10, max = 1000) {
        return parseFloat(faker_1.faker.commerce.price({ min, max }));
    }
    /**
     * Generate random image URL
     */
    generateImageUrl(width = 400, height = 300) {
        return faker_1.faker.image.url({ width, height });
    }
}
exports.BaseFactory = BaseFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,