a3c0b3f6241a459198cb665e41ea5439
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const data_quality_decorators_1 = require("../decorators/data-quality.decorators");
var TestEnum;
(function (TestEnum) {
    TestEnum["VALUE1"] = "value1";
    TestEnum["VALUE2"] = "value2";
})(TestEnum || (TestEnum = {}));
let TestEntity = class TestEntity {
};
__decorate([
    (0, data_quality_decorators_1.RequiredField)('Name is required', data_quality_decorators_1.DataQualitySeverity.HIGH),
    __metadata("design:type", String)
], TestEntity.prototype, "name", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidEmail)(data_quality_decorators_1.DataQualitySeverity.HIGH),
    __metadata("design:type", String)
], TestEntity.prototype, "email", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidString)(3, 50, data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "description", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidNumber)(0, 100, data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", Number)
], TestEntity.prototype, "score", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidDate)(data_quality_decorators_1.DataQualitySeverity.LOW),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], TestEntity.prototype, "createdAt", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidUUID)(data_quality_decorators_1.DataQualitySeverity.HIGH),
    __metadata("design:type", String)
], TestEntity.prototype, "id", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidBoolean)(data_quality_decorators_1.DataQualitySeverity.LOW),
    __metadata("design:type", Boolean)
], TestEntity.prototype, "isActive", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidPattern)(/^[A-Z]{2,3}$/, 'Must be 2-3 uppercase letters', data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "code", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidEnum)(TestEnum, data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "status", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidPhoneNumber)(data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "phone", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidURL)(data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "website", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidCreditCard)(data_quality_decorators_1.DataQualitySeverity.HIGH),
    __metadata("design:type", String)
], TestEntity.prototype, "creditCard", void 0);
__decorate([
    (0, data_quality_decorators_1.ValidIPAddress)(data_quality_decorators_1.DataQualitySeverity.MEDIUM),
    __metadata("design:type", String)
], TestEntity.prototype, "ipAddress", void 0);
TestEntity = __decorate([
    (0, data_quality_decorators_1.DataQualityEntity)('test-entity')
], TestEntity);
describe('Data Quality Decorators', () => {
    describe('RequiredField', () => {
        it('should pass validation for non-empty values', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const nameErrors = errors.filter(error => error.property === 'name');
            expect(nameErrors).toHaveLength(0);
        });
        it('should fail validation for empty values', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: '',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const nameErrors = errors.filter(error => error.property === 'name');
            expect(nameErrors.length).toBeGreaterThan(0);
            expect(nameErrors[0].constraints).toHaveProperty('isNotEmpty');
        });
    });
    describe('ValidEmail', () => {
        it('should pass validation for valid email', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john.doe@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const emailErrors = errors.filter(error => error.property === 'email');
            expect(emailErrors).toHaveLength(0);
        });
        it('should fail validation for invalid email', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'invalid-email',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const emailErrors = errors.filter(error => error.property === 'email');
            expect(emailErrors.length).toBeGreaterThan(0);
            expect(emailErrors[0].constraints).toHaveProperty('isEmail');
        });
    });
    describe('ValidString', () => {
        it('should pass validation for string within length limits', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Valid description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const descriptionErrors = errors.filter(error => error.property === 'description');
            expect(descriptionErrors).toHaveLength(0);
        });
        it('should fail validation for string too short', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Hi',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const descriptionErrors = errors.filter(error => error.property === 'description');
            expect(descriptionErrors.length).toBeGreaterThan(0);
            expect(descriptionErrors[0].constraints).toHaveProperty('length');
        });
    });
    describe('ValidNumber', () => {
        it('should pass validation for number within range', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 75,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const scoreErrors = errors.filter(error => error.property === 'score');
            expect(scoreErrors).toHaveLength(0);
        });
        it('should fail validation for number out of range', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 150,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const scoreErrors = errors.filter(error => error.property === 'score');
            expect(scoreErrors.length).toBeGreaterThan(0);
            expect(scoreErrors[0].constraints).toHaveProperty('max');
        });
    });
    describe('ValidUUID', () => {
        it('should pass validation for valid UUID', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const idErrors = errors.filter(error => error.property === 'id');
            expect(idErrors).toHaveLength(0);
        });
        it('should fail validation for invalid UUID', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: 'invalid-uuid',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const idErrors = errors.filter(error => error.property === 'id');
            expect(idErrors.length).toBeGreaterThan(0);
            expect(idErrors[0].constraints).toHaveProperty('isUuid');
        });
    });
    describe('ValidPattern', () => {
        it('should pass validation for matching pattern', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const codeErrors = errors.filter(error => error.property === 'code');
            expect(codeErrors).toHaveLength(0);
        });
        it('should fail validation for non-matching pattern', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'abc',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const codeErrors = errors.filter(error => error.property === 'code');
            expect(codeErrors.length).toBeGreaterThan(0);
            expect(codeErrors[0].constraints).toHaveProperty('matches');
        });
    });
    describe('ValidPhoneNumber', () => {
        it('should pass validation for valid phone number', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const phoneErrors = errors.filter(error => error.property === 'phone');
            expect(phoneErrors).toHaveLength(0);
        });
        it('should fail validation for invalid phone number', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: 'invalid-phone',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const phoneErrors = errors.filter(error => error.property === 'phone');
            expect(phoneErrors.length).toBeGreaterThan(0);
            expect(phoneErrors[0].constraints).toHaveProperty('matches');
        });
    });
    describe('ValidURL', () => {
        it('should pass validation for valid URL', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://www.example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const websiteErrors = errors.filter(error => error.property === 'website');
            expect(websiteErrors).toHaveLength(0);
        });
        it('should fail validation for invalid URL', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'not-a-url',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const websiteErrors = errors.filter(error => error.property === 'website');
            expect(websiteErrors.length).toBeGreaterThan(0);
            expect(websiteErrors[0].constraints).toHaveProperty('matches');
        });
    });
    describe('ValidIPAddress', () => {
        it('should pass validation for valid IP address', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '192.168.1.1',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const ipErrors = errors.filter(error => error.property === 'ipAddress');
            expect(ipErrors).toHaveLength(0);
        });
        it('should fail validation for invalid IP address', async () => {
            const entity = (0, class_transformer_1.plainToClass)(TestEntity, {
                name: 'John Doe',
                email: 'john@example.com',
                description: 'Test description',
                score: 85,
                createdAt: new Date(),
                id: '123e4567-e89b-12d3-a456-426614174000',
                isActive: true,
                code: 'ABC',
                status: TestEnum.VALUE1,
                phone: '+1234567890',
                website: 'https://example.com',
                creditCard: '4111111111111111',
                ipAddress: '999.999.999.999',
            });
            const errors = await (0, class_validator_1.validate)(entity);
            const ipErrors = errors.filter(error => error.property === 'ipAddress');
            expect(ipErrors.length).toBeGreaterThan(0);
            expect(ipErrors[0].constraints).toHaveProperty('matches');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,