{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\factories\\base.factory.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\factories\\base.factory.ts"],"sourcesContent":["import { faker } from '@faker-js/faker';\r\n\r\nexport interface FactoryOptions {\r\n  count?: number;\r\n  overrides?: Record<string, any>;\r\n  traits?: string[];\r\n}\r\n\r\nexport abstract class BaseFactory<T> {\r\n  protected abstract definition(): Partial<T>;\r\n  protected traits: Record<string, () => Partial<T>> = {};\r\n\r\n  /**\r\n   * Create a single instance\r\n   */\r\n  create(options: FactoryOptions = {}): T {\r\n    const { overrides = {}, traits = [] } = options;\r\n    \r\n    let data = this.definition();\r\n    \r\n    // Apply traits\r\n    traits.forEach(trait => {\r\n      if (this.traits[trait]) {\r\n        data = { ...data, ...this.traits[trait]() };\r\n      }\r\n    });\r\n    \r\n    // Apply overrides\r\n    data = { ...data, ...overrides };\r\n    \r\n    return data as T;\r\n  }\r\n\r\n  /**\r\n   * Create multiple instances\r\n   */\r\n  createMany(count: number, options: Omit<FactoryOptions, 'count'> = {}): T[] {\r\n    return Array.from({ length: count }, () => this.create(options));\r\n  }\r\n\r\n  /**\r\n   * Create with specific trait\r\n   */\r\n  withTrait(trait: string, options: FactoryOptions = {}): T {\r\n    return this.create({ ...options, traits: [...(options.traits || []), trait] });\r\n  }\r\n\r\n  /**\r\n   * Create with multiple traits\r\n   */\r\n  withTraits(traits: string[], options: FactoryOptions = {}): T {\r\n    return this.create({ ...options, traits: [...(options.traits || []), ...traits] });\r\n  }\r\n\r\n  /**\r\n   * Build data without creating entity (useful for DTOs)\r\n   */\r\n  build(options: FactoryOptions = {}): Partial<T> {\r\n    return this.create(options);\r\n  }\r\n\r\n  /**\r\n   * Build many without creating entities\r\n   */\r\n  buildMany(count: number, options: Omit<FactoryOptions, 'count'> = {}): Partial<T>[] {\r\n    return this.createMany(count, options);\r\n  }\r\n\r\n  /**\r\n   * Create sequence of items with incremental values\r\n   */\r\n  sequence(count: number, callback: (index: number) => Partial<T>): T[] {\r\n    return Array.from({ length: count }, (_, index) => {\r\n      const sequenceData = callback(index);\r\n      return this.create({ overrides: sequenceData });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset faker seed for consistent test data\r\n   */\r\n  static resetSeed(seed: number = 12345): void {\r\n    faker.seed(seed);\r\n  }\r\n\r\n  /**\r\n   * Generate random ID\r\n   */\r\n  protected generateId(): string {\r\n    return faker.string.uuid();\r\n  }\r\n\r\n  /**\r\n   * Generate random email\r\n   */\r\n  protected generateEmail(): string {\r\n    return faker.internet.email().toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Generate random name\r\n   */\r\n  protected generateName(): string {\r\n    return faker.person.fullName();\r\n  }\r\n\r\n  /**\r\n   * Generate random text\r\n   */\r\n  protected generateText(sentences: number = 3): string {\r\n    return faker.lorem.sentences(sentences);\r\n  }\r\n\r\n  /**\r\n   * Generate random date\r\n   */\r\n  protected generateDate(options: { past?: boolean; future?: boolean; days?: number } = {}): Date {\r\n    if (options.past) {\r\n      return faker.date.past({ years: 1 });\r\n    }\r\n    if (options.future) {\r\n      return faker.date.future({ years: 1 });\r\n    }\r\n    return faker.date.recent({ days: options.days || 30 });\r\n  }\r\n\r\n  /**\r\n   * Generate random number\r\n   */\r\n  protected generateNumber(min: number = 1, max: number = 100): number {\r\n    return faker.number.int({ min, max });\r\n  }\r\n\r\n  /**\r\n   * Generate random boolean\r\n   */\r\n  protected generateBoolean(): boolean {\r\n    return faker.datatype.boolean();\r\n  }\r\n\r\n  /**\r\n   * Generate random URL\r\n   */\r\n  protected generateUrl(): string {\r\n    return faker.internet.url();\r\n  }\r\n\r\n  /**\r\n   * Generate random phone number\r\n   */\r\n  protected generatePhone(): string {\r\n    return faker.phone.number();\r\n  }\r\n\r\n  /**\r\n   * Generate random address\r\n   */\r\n  protected generateAddress(): any {\r\n    return {\r\n      street: faker.location.streetAddress(),\r\n      city: faker.location.city(),\r\n      state: faker.location.state(),\r\n      zipCode: faker.location.zipCode(),\r\n      country: faker.location.country(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Pick random item from array\r\n   */\r\n  protected pickRandom<K>(items: K[]): K {\r\n    return faker.helpers.arrayElement(items);\r\n  }\r\n\r\n  /**\r\n   * Pick multiple random items from array\r\n   */\r\n  protected pickRandomMany<K>(items: K[], count: number): K[] {\r\n    return faker.helpers.arrayElements(items, count);\r\n  }\r\n\r\n  /**\r\n   * Generate random slug\r\n   */\r\n  protected generateSlug(): string {\r\n    return faker.lorem.slug();\r\n  }\r\n\r\n  /**\r\n   * Generate random price\r\n   */\r\n  protected generatePrice(min: number = 10, max: number = 1000): number {\r\n    return parseFloat(faker.commerce.price({ min, max }));\r\n  }\r\n\r\n  /**\r\n   * Generate random image URL\r\n   */\r\n  protected generateImageUrl(width: number = 400, height: number = 300): string {\r\n    return faker.image.url({ width, height });\r\n  }\r\n}\r\n"],"version":3}