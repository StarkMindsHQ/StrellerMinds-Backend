a7b08a6938d424e1b0617d855d7d8ae7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const credential_entity_1 = require("./entities/credential.entity");
const credential_history_query_dto_1 = require("./dto/credential-history-query.dto");
const stellar_service_1 = require("../blockchain/stellar/stellar.service");
/**
 * CredentialService provides logic for credential management and history retrieval.
 */
let CredentialService = class CredentialService {
    constructor(credentialRepository, stellarService) {
        this.credentialRepository = credentialRepository;
        this.stellarService = stellarService;
    }
    /**
     * Get user credential history.
     *
     * @param userId - The ID of the user whose credential history is to be retrieved.
     * @param queryParams - The query parameters for retrieving credential history, including pagination and filters.
     * @returns A promise that resolves to the user's credential history response DTO.
     */
    async getUserCredentialHistory(userId, queryParams) {
        const { page = 1, limit = 10, credentialType, startDate, endDate, status } = queryParams;
        // Build query conditions
        const findOptions = {
            where: { userId },
            order: { issuedAt: 'DESC' },
            skip: (page - 1) * limit,
            take: limit,
        };
        // Add filters if provided
        if (credentialType) {
            findOptions.where = { ...findOptions.where, type: credentialType };
        }
        if (startDate && endDate) {
            findOptions.where = {
                ...findOptions.where,
                issuedAt: (0, typeorm_2.Between)(startDate, endDate)
            };
        }
        if (status && status !== credential_history_query_dto_1.CredentialStatus.ALL) {
            findOptions.where = { ...findOptions.where, status };
        }
        // Execute query with pagination
        const [credentials, totalItems] = await this.credentialRepository.findAndCount(findOptions);
        // Map to DTOs
        const mappedCredentials = credentials.map(credential => this.mapToCredentialDto(credential));
        return {
            data: mappedCredentials,
            meta: {
                page,
                limit,
                totalItems,
                totalPages: Math.ceil(totalItems / limit),
            },
        };
    }
    /**
     * Verify a user's credential by its ID.
     *
     * @param userId - The ID of the user who owns the credential.
     * @param credentialId - The ID of the credential to be verified.
     * @returns A promise that resolves to an object containing the verification result and the credential DTO.
     */
    async verifyCredential(userId, credentialId) {
        // Find the credential
        const credential = await this.credentialRepository.findOne({
            where: { id: credentialId, userId }
        });
        if (!credential) {
            throw new common_1.HttpException('Credential not found', common_1.HttpStatus.NOT_FOUND);
        }
        // Verify on the blockchain using Stellar SDK
        let verified = false;
        try {
            if (credential.network?.toLowerCase() !== 'stellar') {
                // Currently only Stellar network is supported for on-chain verification
                verified = false;
            }
            else if (credential.txHash) {
                const tx = await this.stellarService.monitorTransaction(credential.txHash);
                if (tx) {
                    // If blockHeight is stored, ensure it matches the ledger sequence
                    if (credential.blockHeight && typeof tx.ledger === 'number') {
                        verified = Number(credential.blockHeight) === Number(tx.ledger);
                    }
                    else {
                        verified = true;
                    }
                }
            }
        }
        catch (err) {
            verified = false;
        }
        // Update verification status in database
        credential.verificationStatus = verified;
        await this.credentialRepository.save(credential);
        return {
            verified,
            credential: this.mapToCredentialDto(credential),
        };
    }
    /**
     * Maps a Credential entity to a CredentialDto.
     * @param credential - The Credential entity instance.
     * @returns The mapped CredentialDto.
     */
    mapToCredentialDto(credential) {
        return {
            id: credential.id,
            type: credential.type,
            name: credential.name,
            issuedAt: credential.issuedAt,
            expiresAt: credential.expiresAt,
            issuer: {
                id: credential.issuerId,
                name: credential.issuerName,
            },
            status: credential.status,
            verificationStatus: credential.verificationStatus,
            metadata: credential.metadata,
            blockchainReference: {
                txHash: credential.txHash,
                network: credential.network,
                timestamp: credential.issuedAt,
                blockHeight: credential.blockHeight,
            },
        };
    }
};
exports.CredentialService = CredentialService;
exports.CredentialService = CredentialService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(credential_entity_1.Credential)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof stellar_service_1.StellarService !== "undefined" && stellar_service_1.StellarService) === "function" ? _b : Object])
], CredentialService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,