068764bb3a30d3cd960c5e4c4a15e7a0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GlobalExceptionsFilter_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalExceptionsFilter = void 0;
const common_1 = require("@nestjs/common");
const nestjs_i18n_1 = require("nestjs-i18n");
const error_codes_enum_1 = require("../errors/error-codes.enum");
const custom_exception_1 = require("../errors/custom.exception");
const logger_service_1 = require("../logging/logger.service");
const sentry_service_1 = require("../sentry/sentry.service");
const alerting_service_1 = require("../alerting/alerting.service");
const uuid_1 = require("uuid");
let GlobalExceptionsFilter = GlobalExceptionsFilter_1 = class GlobalExceptionsFilter {
    constructor(i18n, loggerService, sentryService, alertingService) {
        this.i18n = i18n;
        this.loggerService = loggerService;
        this.sentryService = sentryService;
        this.alertingService = alertingService;
        this.logger = new common_1.Logger(GlobalExceptionsFilter_1.name);
        this.loggerService.setContext('GlobalExceptionsFilter');
    }
    async catch(exception, host) {
        const ctx = host.switchToHttp();
        const response = ctx.getResponse();
        const request = ctx.getRequest();
        const lang = request.acceptsLanguages(['en', 'fr']) || 'en';
        // Generate correlation ID if not present
        const correlationId = request.headers['x-correlation-id'] || (0, uuid_1.v4)();
        // Extract user context
        const user = request.user;
        const userContext = user ? {
            userId: user.id,
            userEmail: user.email,
        } : {};
        // Build error context
        const errorContext = {
            correlationId,
            ...userContext,
            method: request.method,
            url: request.url,
            ip: request.ip,
            userAgent: request.get('User-Agent'),
            requestId: request.headers['x-request-id'],
            timestamp: new Date().toISOString(),
        };
        let errorResponse;
        if (exception instanceof custom_exception_1.CustomException) {
            const exceptionResponse = exception.getResponse();
            errorResponse = {
                errorCode: exceptionResponse.errorCode,
                statusCode: exception.getStatus(),
                message: await this.i18n.translate(`errors.${exceptionResponse.errorCode}`, {
                    lang,
                    args: exceptionResponse.args,
                }),
                details: exceptionResponse.details,
                timestamp: new Date().toISOString(),
                path: request.url,
                correlationId,
            };
            // Log custom exception with context
            this.loggerService.error('Custom Exception', {
                ...errorContext,
                errorCode: exceptionResponse.errorCode,
                errorType: 'CustomException',
                statusCode: exception.getStatus(),
                details: exceptionResponse.details,
            });
        }
        else if (exception instanceof common_1.HttpException) {
            const exceptionResponse = exception.getResponse();
            // Handle class-validator validation errors
            if (Array.isArray(exceptionResponse.message)) {
                errorResponse = {
                    errorCode: error_codes_enum_1.ErrorCode.INVALID_INPUT,
                    statusCode: exception.getStatus(),
                    message: await this.i18n.translate('errors.INVALID_INPUT', { lang }),
                    details: this.formatValidationErrors(exceptionResponse.message),
                    timestamp: new Date().toISOString(),
                    path: request.url,
                    correlationId,
                };
                // Log validation error
                this.loggerService.warn('Validation Error', {
                    ...errorContext,
                    errorCode: error_codes_enum_1.ErrorCode.INVALID_INPUT,
                    errorType: 'ValidationError',
                    statusCode: exception.getStatus(),
                    validationErrors: exceptionResponse.message,
                });
            }
            else {
                errorResponse = {
                    errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
                    statusCode: exception.getStatus(),
                    message: exceptionResponse.message || await this.i18n.translate('errors.INTERNAL_ERROR', { lang }),
                    timestamp: new Date().toISOString(),
                    path: request.url,
                    correlationId,
                };
                // Log HTTP exception
                this.loggerService.error('HTTP Exception', {
                    ...errorContext,
                    errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
                    errorType: 'HttpException',
                    statusCode: exception.getStatus(),
                    originalMessage: exceptionResponse.message,
                });
            }
        }
        else {
            // Handle unknown errors
            errorResponse = {
                errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
                statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
                message: await this.i18n.translate('errors.INTERNAL_ERROR', { lang }),
                timestamp: new Date().toISOString(),
                path: request.url,
                correlationId,
            };
            // Log unknown errors with full context
            const fatalErrorContext = {
                ...errorContext,
                errorCode: error_codes_enum_1.ErrorCode.INTERNAL_ERROR,
                errorType: exception instanceof Error ? exception.constructor.name : 'Unknown',
                statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
                stack: exception instanceof Error ? exception.stack : undefined,
                originalError: exception instanceof Error ? {
                    name: exception.name,
                    message: exception.message,
                } : { raw: String(exception) },
            };
            this.loggerService.fatal('Unhandled Exception', fatalErrorContext);
            // Send to Sentry
            if (exception instanceof Error) {
                this.sentryService.captureError(exception, fatalErrorContext);
            }
            // Send critical alert
            await this.alertingService.sendCriticalErrorAlert(exception instanceof Error ? exception : new Error(String(exception)), {
                ...fatalErrorContext,
                environment: process.env.NODE_ENV || 'development',
                service: 'strellerminds-backend',
            });
            // Also log with the original logger for backward compatibility
            this.logger.error(`Unhandled error: ${exception instanceof Error ? exception.message : 'Unknown error'}`, exception instanceof Error ? exception.stack : undefined);
        }
        // Add stack trace in development environment
        if (process.env.NODE_ENV === 'development' && exception instanceof Error) {
            errorResponse.stack = exception.stack;
        }
        // Set correlation ID in response headers
        response.setHeader('X-Correlation-ID', correlationId);
        // Log response for monitoring
        this.loggerService.logResponse('Error Response Sent', {
            correlationId,
            statusCode: errorResponse.statusCode,
            errorCode: errorResponse.errorCode,
            method: request.method,
            url: request.url,
        });
        response.status(errorResponse.statusCode).json(errorResponse);
    }
    formatValidationErrors(validationErrors) {
        return validationErrors.map(error => ({
            field: error.property,
            message: Object.values(error.constraints || {}).join(', '),
        }));
    }
};
exports.GlobalExceptionsFilter = GlobalExceptionsFilter;
exports.GlobalExceptionsFilter = GlobalExceptionsFilter = GlobalExceptionsFilter_1 = __decorate([
    (0, common_1.Catch)(),
    __metadata("design:paramtypes", [typeof (_a = typeof nestjs_i18n_1.I18nService !== "undefined" && nestjs_i18n_1.I18nService) === "function" ? _a : Object, typeof (_b = typeof logger_service_1.LoggerService !== "undefined" && logger_service_1.LoggerService) === "function" ? _b : Object, typeof (_c = typeof sentry_service_1.SentryService !== "undefined" && sentry_service_1.SentryService) === "function" ? _c : Object, typeof (_d = typeof alerting_service_1.AlertingService !== "undefined" && alerting_service_1.AlertingService) === "function" ? _d : Object])
], GlobalExceptionsFilter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,