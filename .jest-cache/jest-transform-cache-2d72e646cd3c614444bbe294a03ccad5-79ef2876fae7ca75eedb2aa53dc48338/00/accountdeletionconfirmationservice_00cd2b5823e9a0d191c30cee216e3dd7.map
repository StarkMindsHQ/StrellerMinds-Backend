{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\account.deletion.confirmation.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\services\\account.deletion.confirmation.service.ts"],"sourcesContent":["// // import { Injectable, Logger } from '@nestjs/common';\r\n// // import { InjectRepository } from '@nestjs/typeorm';\r\n// // import { Repository } from 'typeorm';\r\n// // import { User } from '../entities/user.entity';\r\n// // import { ConfigService } from '@nestjs/config';\r\n// // import { randomBytes } from 'crypto';\r\n// // import { EmailService } from 'src/email/email.service';\r\n\r\n\r\n\r\n\r\n// // /**\r\n// //  * Service to handle account deletion confirmation workflow\r\n// //  */\r\n// // @Injectable()\r\n// // export class AccountDeletionConfirmationService {\r\n// //   private readonly logger = new Logger(AccountDeletionConfirmationService.name);\r\n// //   private readonly tokenExpirationTime: number; // in hours\r\n// //   private readonly confirmationTokens: Map<\r\n// //     string,\r\n// //     { token: string; expires: Date }\r\n// //   > = new Map();\r\n\r\n// //   constructor(\r\n// //     @InjectRepository(User)\r\n// //     private readonly userRepository: Repository<User>,\r\n// //     private readonly configService: ConfigService,\r\n// //     private readonly emailService: EmailService,\r\n// //   ) {\r\n// //     this.tokenExpirationTime = this.configService.get<number>(\r\n// //       'DELETION_TOKEN_EXPIRY_HOURS',\r\n// //       24,\r\n// //     );\r\n// //   }\r\n\r\n// //   /**\r\n// //    * Start the deletion confirmation workflow\r\n// //    * @param userId User ID requesting deletion\r\n// //    */\r\n// //   async startDeletionConfirmationWorkflow(userId: string): Promise<void> {\r\n// //     const user = await this.userRepository.findOne({\r\n// //       where: { id: userId },\r\n// //     });\r\n\r\n// //     if (!user) {\r\n// //       this.logger.warn(\r\n// //         `Attempted to start deletion workflow for non-existent user: ${userId}`,\r\n// //       );\r\n// //       return;\r\n// //     }\r\n\r\n// //     // Generate a secure random token\r\n// //     const token = this.generateSecureToken();\r\n\r\n// //     // Set expiration time\r\n// //     const expiryTime = new Date();\r\n// //     expiryTime.setHours(expiryTime.getHours() + this.tokenExpirationTime);\r\n\r\n// //     // Store token with expiration\r\n// //     this.confirmationTokens.set(userId, {\r\n// //       token,\r\n// //       expires: expiryTime,\r\n// //     });\r\n\r\n// //     // Send confirmation email\r\n// //     await this.sendDeletionConfirmationEmail(user.email, token, expiryTime);\r\n\r\n// //     this.logger.log(\r\n// //       `Deletion confirmation workflow started for user ${userId}`,\r\n// //     );\r\n// //   }\r\n\r\n// //   /**\r\n// //    * Validate a deletion confirmation token\r\n// //    * @param userId User ID\r\n// //    * @param token Confirmation token to validate\r\n// //    */\r\n// //   async validateDeletionConfirmation(\r\n// //     userId: string,\r\n// //     token: string,\r\n// //   ): Promise<boolean> {\r\n// //     const storedToken = this.confirmationTokens.get(userId);\r\n\r\n// //     // Check if token exists and is valid\r\n// //     if (!storedToken) {\r\n// //       this.logger.warn(`No deletion token found for user ${userId}`);\r\n// //       return false;\r\n// //     }\r\n\r\n// //     // Check if token has expired\r\n// //     if (new Date() > storedToken.expires) {\r\n// //       this.logger.warn(`Deletion token for user ${userId} has expired`);\r\n// //       this.confirmationTokens.delete(userId); // Clean up expired token\r\n// //       return false;\r\n// //     }\r\n\r\n// //     // Check if token matches\r\n// //     const isValid = storedToken.token === token;\r\n\r\n// //     if (isValid) {\r\n// //       // Remove the token after successful validation\r\n// //       this.confirmationTokens.delete(userId);\r\n// //       this.logger.log(`Deletion confirmation validated for user ${userId}`);\r\n// //     } else {\r\n// //       this.logger.warn(`Invalid deletion token provided for user ${userId}`);\r\n// //     }\r\n\r\n// //     return isValid;\r\n// //   }\r\n\r\n// //   /**\r\n// //    * Generate a secure random token\r\n// //    */\r\n// //   private generateSecureToken(): string {\r\n// //     return randomBytes(32).toString('hex');\r\n// //   }\r\n\r\n// //   /**\r\n// //    * Send confirmation email with deletion token\r\n// //    * @param email User's email address\r\n// //    * @param token Confirmation token\r\n// //    * @param expiryTime Token expiration time\r\n// //    */\r\n// //   private async sendDeletionConfirmationEmail(\r\n// //     email: string,\r\n// //     token: string,\r\n// //     expiryTime: Date,\r\n// //   ): Promise<void> {\r\n// //     const subject = 'Confirm Your Account Deletion Request';\r\n\r\n// //     const body = `\r\n// //       <h2>Account Deletion Confirmation</h2>\r\n// //       <p>We received a request to delete your account. If you didn't make this request, please ignore this email or contact support immediately.</p>\r\n// //       <p>To confirm your account deletion, please click the link below:</p>\r\n// //       <p><a href=\"${this.configService.get('FRONTEND_URL')}/account/confirm-deletion?token=${token}\">Confirm Account Deletion</a></p>\r\n// //       <p>This link will expire on ${expiryTime.toLocaleString()}.</p>\r\n// //       <p>Please note that account deletion is permanent and cannot be undone. All your personal data will be removed according to our privacy policy.</p>\r\n// //       <p>If you have any questions, please contact our support team.</p>\r\n// //     `;\r\n\r\n// //     try {\r\n// //       // await this.emailService.sendEmail(email, subject, body);\r\n// //       await this.emailService.sendEmail({\r\n// //         to: email,\r\n// //         subject,\r\n// //         html:body\r\n// //       });\r\n\r\n// //       this.logger.log(`Deletion confirmation email sent to ${email}`);\r\n// //     } catch (error) {\r\n// //       this.logger.error(\r\n// //         `Failed to send deletion confirmation email to ${email}`,\r\n// //         error.stack,\r\n// //       );\r\n// //       throw error;\r\n// //     }\r\n// //   }\r\n// // }\r\n\r\n// import { Injectable, Logger } from '@nestjs/common';\r\n// import { InjectRepository } from '@nestjs/typeorm';\r\n// import { Repository } from 'typeorm';\r\n// import { User } from '../entities/user.entity';\r\n// import { ConfigService } from '@nestjs/config';\r\n// import { randomBytes } from 'crypto';\r\n// import { EmailService } from 'src/email/email.service';\r\n// import { AccountStatus } from '../enums/accountStatus.enum';\r\n\r\n// /**\r\n//  * Service to handle account deletion confirmation workflow\r\n//  */\r\n// @Injectable()\r\n// export class AccountDeletionConfirmationService {\r\n//   private readonly logger = new Logger(AccountDeletionConfirmationService.name);\r\n//   private readonly tokenExpirationTime: number; // in hours\r\n//   private readonly confirmationTokens: Map<\r\n//     string,\r\n//     { token: string; expires: Date }\r\n//   > = new Map();\r\n\r\n//   constructor(\r\n//     @InjectRepository(User)\r\n//     private readonly userRepository: Repository<User>,\r\n//     private readonly configService: ConfigService,\r\n//     private readonly emailService: EmailService,\r\n//   ) {\r\n//     this.tokenExpirationTime = this.configService.get<number>(\r\n//       'DELETION_TOKEN_EXPIRY_HOURS',\r\n//       24,\r\n//     );\r\n//   }\r\n\r\n//   /**\r\n//    * Start the deletion confirmation workflow\r\n//    * @param userId User ID requesting deletion\r\n//    */\r\n//   async startDeletionConfirmationWorkflow(userId: string): Promise<void> {\r\n//     const user = await this.userRepository.findOne({\r\n//       where: { id: userId },\r\n//     });\r\n\r\n//     if (!user) {\r\n//       this.logger.warn(\r\n//         `Attempted to start deletion workflow for non-existent user: ${userId}`,\r\n//       );\r\n//       return;\r\n//     }\r\n\r\n//     const token = this.generateSecureToken();\r\n\r\n//     const expiryTime = new Date();\r\n//     expiryTime.setHours(expiryTime.getHours() + this.tokenExpirationTime);\r\n\r\n//     this.confirmationTokens.set(userId, {\r\n//       token,\r\n//       expires: expiryTime,\r\n//     });\r\n\r\n//     await this.sendDeletionConfirmationEmail(user.email, token, expiryTime);\r\n\r\n//     this.logger.log(\r\n//       `Deletion confirmation workflow started for user ${userId}`,\r\n//     );\r\n//   }\r\n\r\n//   /**\r\n//    * Validate a deletion confirmation token and scrub user\r\n//    * @param userId User ID\r\n//    * @param token Confirmation token to validate\r\n//    */\r\n//   async validateAndDeleteAccount(\r\n//     userId: string,\r\n//     token: string,\r\n//   ): Promise<boolean> {\r\n//     const storedToken = this.confirmationTokens.get(userId);\r\n\r\n//     if (!storedToken) {\r\n//       this.logger.warn(`No deletion token found for user ${userId}`);\r\n//       return false;\r\n//     }\r\n\r\n//     if (new Date() > storedToken.expires) {\r\n//       this.logger.warn(`Deletion token for user ${userId} has expired`);\r\n//       this.confirmationTokens.delete(userId);\r\n//       return false;\r\n//     }\r\n\r\n//     if (storedToken.token !== token) {\r\n//       this.logger.warn(`Invalid deletion token provided for user ${userId}`);\r\n//       return false;\r\n//     }\r\n\r\n//     const user = await this.userRepository.findOne({\r\n//       where: { id: userId },\r\n//     });\r\n\r\n//     if (!user) {\r\n//       this.logger.warn(\r\n//         `User not found during deletion confirmation: ${userId}`,\r\n//       );\r\n//       return false;\r\n//     }\r\n\r\n//     // Scrub sensitive data\r\n//     user.firstName = 'Deleted';\r\n//     user.lastName = 'User';\r\n//     user.email = `${user.id}@deleted.example.com`; // anonymize email\r\n//     user.bio = null;\r\n//     user.profileImageUrl = null;\r\n//     user.status = AccountStatus.DELETED;\r\n//     user.deactivatedAt = new Date();\r\n//     user.deletionRequestedAt = new Date();\r\n//     user.deletedAt = new Date();\r\n\r\n//     await this.userRepository.save(user);\r\n\r\n//     // Clean up token\r\n//     this.confirmationTokens.delete(userId);\r\n\r\n//     this.logger.log(`User ${userId} account deletion confirmed and scrubbed`);\r\n//     return true;\r\n//   }\r\n\r\n//   /**\r\n//    * Generate a secure random token\r\n//    */\r\n//   private generateSecureToken(): string {\r\n//     return randomBytes(32).toString('hex');\r\n//   }\r\n\r\n//   /**\r\n//    * Send confirmation email with deletion token\r\n//    */\r\n//   private async sendDeletionConfirmationEmail(\r\n//     email: string,\r\n//     token: string,\r\n//     expiryTime: Date,\r\n//   ): Promise<void> {\r\n//     const subject = 'Confirm Your Account Deletion Request';\r\n//     const body = `\r\n//       <h2>Account Deletion Confirmation</h2>\r\n//       <p>We received a request to delete your account. If you didn't make this request, please ignore this email or contact support immediately.</p>\r\n//       <p>To confirm your account deletion, please click the link below:</p>\r\n//       <p><a href=\"${this.configService.get('FRONTEND_URL')}/account/confirm-deletion?token=${token}\">Confirm Account Deletion</a></p>\r\n//       <p>This link will expire on ${expiryTime.toLocaleString()}.</p>\r\n//       <p>Please note that account deletion is permanent and cannot be undone. All your personal data will be removed according to our privacy policy.</p>\r\n//       <p>If you have any questions, please contact our support team.</p>\r\n//     `;\r\n\r\n//     try {\r\n     \r\n//       // await this.emailService.sendEmail({\r\n//       //   to: user.email,\r\n//       //   subject: 'Confirm Your Account Deletion',\r\n//       //   templateName: 'account-deletion-confirmation', \r\n//       //   context: {\r\n//       //     name: user.firstName,\r\n//       //     confirmationUrl,\r\n//       //     companyName: 'YourCompanyName', // customize if needed\r\n//       //     unsubscribeUrl,\r\n//       //     year: new Date().getFullYear(),\r\n//       //   },\r\n//       //   html: body,\r\n\r\n//       await this.emailService.sendEmail({\r\n//       to: email,\r\n//       subject: 'Confirm Your Account Deletion',\r\n//       templateName: 'account-deletion-confirmation',\r\n//       context: {\r\n//         name: user.firstName,\r\n//         confirmationUrl,\r\n//         companyName: 'YourCompanyName',\r\n//         unsubscribeUrl,\r\n//         year: new Date().getFullYear(),\r\n//       },\r\n//     });\r\n//       });\r\n\r\n//       this.logger.log(`Deletion confirmation email sent to ${email}`);\r\n//     } catch (error) {\r\n//       this.logger.error(\r\n//         `Failed to send deletion confirmation email to ${email}`,\r\n//         error.stack,\r\n//       );\r\n//       throw error;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\nimport { Injectable } from '@nestjs/common';\r\nimport { EmailService } from 'src/email/email.service';\r\n\r\n@Injectable()\r\nexport class AccountDeletionConfirmationService {\r\n  constructor(private readonly emailService: EmailService) {}\r\n\r\n  async sendAccountDeletionEmail({\r\n    email,\r\n    firstName,\r\n    confirmationUrl,\r\n    unsubscribeUrl,\r\n  }: {\r\n    email: string;\r\n    firstName: string;\r\n    confirmationUrl: string;\r\n    unsubscribeUrl: string;\r\n  }) {\r\n    await this.emailService.sendEmail({\r\n      to: email,\r\n      subject: 'Confirm Your Account Deletion',\r\n      templateName: 'account-deletion-confirmation',\r\n      context: {\r\n        name: firstName,\r\n        confirmationUrl,\r\n        companyName: 'YourCompanyName', // You can make this dynamic too\r\n        unsubscribeUrl,\r\n        year: new Date().getFullYear(),\r\n      },\r\n    });\r\n  }\r\n\r\n   async validateAndDeleteAccount(token: string): Promise<boolean> {\r\n    // Your validation and deletion logic here\r\n    return true; // or false\r\n  }\r\n}\r\n\r\n"],"version":3}