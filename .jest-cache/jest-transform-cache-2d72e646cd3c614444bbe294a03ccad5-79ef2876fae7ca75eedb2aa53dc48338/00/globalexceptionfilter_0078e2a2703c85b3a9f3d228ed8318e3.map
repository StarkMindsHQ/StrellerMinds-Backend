{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\filters\\global-exception.filter.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\common\\filters\\global-exception.filter.ts"],"sourcesContent":["import {\r\n  Catch,\r\n  ArgumentsHost,\r\n  HttpException,\r\n  ExceptionFilter,\r\n  HttpStatus,\r\n  Logger,\r\n  Inject,\r\n} from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\nimport { I18nService } from 'nestjs-i18n';\r\nimport { ErrorCode } from '../errors/error-codes.enum';\r\nimport { ErrorResponseDto } from '../errors/error-response.dto';\r\nimport { ValidationError } from 'class-validator';\r\nimport { CustomException } from '../errors/custom.exception';\r\nimport { LoggerService, ErrorLogContext } from '../logging/logger.service';\r\nimport { SentryService } from '../sentry/sentry.service';\r\nimport { AlertingService } from '../alerting/alerting.service';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Catch()\r\nexport class GlobalExceptionsFilter implements ExceptionFilter {\r\n  private readonly logger = new Logger(GlobalExceptionsFilter.name);\r\n\r\n  constructor(\r\n    private readonly i18n: I18nService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly sentryService: SentryService,\r\n    private readonly alertingService: AlertingService,\r\n  ) {\r\n    this.loggerService.setContext('GlobalExceptionsFilter');\r\n  }\r\n\r\n  async catch(exception: unknown, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse<Response>();\r\n    const request = ctx.getRequest<Request>();\r\n    const lang = request.acceptsLanguages(['en', 'fr']) || 'en';\r\n\r\n    // Generate correlation ID if not present\r\n    const correlationId = request.headers['x-correlation-id'] as string || uuidv4();\r\n\r\n    // Extract user context\r\n    const user = (request as any).user;\r\n    const userContext = user ? {\r\n      userId: user.id,\r\n      userEmail: user.email,\r\n    } : {};\r\n\r\n    // Build error context\r\n    const errorContext: ErrorLogContext = {\r\n      correlationId,\r\n      ...userContext,\r\n      method: request.method,\r\n      url: request.url,\r\n      ip: request.ip,\r\n      userAgent: request.get('User-Agent'),\r\n      requestId: request.headers['x-request-id'] as string,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    let errorResponse: ErrorResponseDto;\r\n\r\n    if (exception instanceof CustomException) {\r\n      const exceptionResponse = exception.getResponse() as any;\r\n      errorResponse = {\r\n        errorCode: exceptionResponse.errorCode,\r\n        statusCode: exception.getStatus(),\r\n        message: await this.i18n.translate(`errors.${exceptionResponse.errorCode}`, {\r\n          lang,\r\n          args: exceptionResponse.args,\r\n        }),\r\n        details: exceptionResponse.details,\r\n        timestamp: new Date().toISOString(),\r\n        path: request.url,\r\n        correlationId,\r\n      };\r\n\r\n      // Log custom exception with context\r\n      this.loggerService.error('Custom Exception', {\r\n        ...errorContext,\r\n        errorCode: exceptionResponse.errorCode,\r\n        errorType: 'CustomException',\r\n        statusCode: exception.getStatus(),\r\n        details: exceptionResponse.details,\r\n      });\r\n    } else if (exception instanceof HttpException) {\r\n      const exceptionResponse = exception.getResponse() as any;\r\n      \r\n      // Handle class-validator validation errors\r\n      if (Array.isArray(exceptionResponse.message)) {\r\n        errorResponse = {\r\n          errorCode: ErrorCode.INVALID_INPUT,\r\n          statusCode: exception.getStatus(),\r\n          message: await this.i18n.translate('errors.INVALID_INPUT', { lang }),\r\n          details: this.formatValidationErrors(exceptionResponse.message),\r\n          timestamp: new Date().toISOString(),\r\n          path: request.url,\r\n          correlationId,\r\n        };\r\n\r\n        // Log validation error\r\n        this.loggerService.warn('Validation Error', {\r\n          ...errorContext,\r\n          errorCode: ErrorCode.INVALID_INPUT,\r\n          errorType: 'ValidationError',\r\n          statusCode: exception.getStatus(),\r\n          validationErrors: exceptionResponse.message,\r\n        });\r\n      } else {\r\n        errorResponse = {\r\n          errorCode: ErrorCode.INTERNAL_ERROR,\r\n          statusCode: exception.getStatus(),\r\n          message: exceptionResponse.message || await this.i18n.translate('errors.INTERNAL_ERROR', { lang }),\r\n          timestamp: new Date().toISOString(),\r\n          path: request.url,\r\n          correlationId,\r\n        };\r\n\r\n        // Log HTTP exception\r\n        this.loggerService.error('HTTP Exception', {\r\n          ...errorContext,\r\n          errorCode: ErrorCode.INTERNAL_ERROR,\r\n          errorType: 'HttpException',\r\n          statusCode: exception.getStatus(),\r\n          originalMessage: exceptionResponse.message,\r\n        });\r\n      }\r\n    } else {\r\n      // Handle unknown errors\r\n      errorResponse = {\r\n        errorCode: ErrorCode.INTERNAL_ERROR,\r\n        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        message: await this.i18n.translate('errors.INTERNAL_ERROR', { lang }),\r\n        timestamp: new Date().toISOString(),\r\n        path: request.url,\r\n        correlationId,\r\n      };\r\n\r\n      // Log unknown errors with full context\r\n      const fatalErrorContext = {\r\n        ...errorContext,\r\n        errorCode: ErrorCode.INTERNAL_ERROR,\r\n        errorType: exception instanceof Error ? exception.constructor.name : 'Unknown',\r\n        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        stack: exception instanceof Error ? exception.stack : undefined,\r\n        originalError: exception instanceof Error ? {\r\n          name: exception.name,\r\n          message: exception.message,\r\n        } : { raw: String(exception) },\r\n      };\r\n\r\n      this.loggerService.fatal('Unhandled Exception', fatalErrorContext);\r\n\r\n      // Send to Sentry\r\n      if (exception instanceof Error) {\r\n        this.sentryService.captureError(exception, fatalErrorContext);\r\n      }\r\n\r\n      // Send critical alert\r\n      await this.alertingService.sendCriticalErrorAlert(\r\n        exception instanceof Error ? exception : new Error(String(exception)),\r\n        {\r\n          ...fatalErrorContext,\r\n          environment: process.env.NODE_ENV || 'development',\r\n          service: 'strellerminds-backend',\r\n        }\r\n      );\r\n\r\n      // Also log with the original logger for backward compatibility\r\n      this.logger.error(\r\n        `Unhandled error: ${exception instanceof Error ? exception.message : 'Unknown error'}`,\r\n        exception instanceof Error ? exception.stack : undefined,\r\n      );\r\n    }\r\n\r\n    // Add stack trace in development environment\r\n    if (process.env.NODE_ENV === 'development' && exception instanceof Error) {\r\n      errorResponse.stack = exception.stack;\r\n    }\r\n\r\n    // Set correlation ID in response headers\r\n    response.setHeader('X-Correlation-ID', correlationId);\r\n\r\n    // Log response for monitoring\r\n    this.loggerService.logResponse('Error Response Sent', {\r\n      correlationId,\r\n      statusCode: errorResponse.statusCode,\r\n      errorCode: errorResponse.errorCode,\r\n      method: request.method,\r\n      url: request.url,\r\n    });\r\n\r\n    response.status(errorResponse.statusCode).json(errorResponse);\r\n  }\r\n\r\n  private formatValidationErrors(validationErrors: ValidationError[]): Array<{ field: string; message: string }> {\r\n    return validationErrors.map(error => ({\r\n      field: error.property,\r\n      message: Object.values(error.constraints || {}).join(', '),\r\n    }));\r\n  }\r\n}\r\n"],"version":3}