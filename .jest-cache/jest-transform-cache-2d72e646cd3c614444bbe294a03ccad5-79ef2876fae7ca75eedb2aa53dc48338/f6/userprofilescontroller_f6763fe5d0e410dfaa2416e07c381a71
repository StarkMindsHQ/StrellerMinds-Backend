765aaf6e958a3fbdabc677fd6e761e4f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProfilesController = void 0;
const common_1 = require("@nestjs/common");
const user_profiles_service_1 = require("./user-profiles.service");
const create_user_profile_dto_1 = require("./dto/create-user-profile.dto");
const update_user_profile_dto_1 = require("./dto/update-user-profile.dto");
const jwt_auth_guard_1 = require("../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../auth/guards/roles.guard");
const roles_decorator_1 = require("../auth/decorators/roles.decorator");
const swagger_1 = require("@nestjs/swagger");
const language_detector_util_1 = require("src/common/util/language-detector.util");
let UserProfilesController = class UserProfilesController {
    constructor(userProfilesService) {
        this.userProfilesService = userProfilesService;
    }
    create(req, createUserProfileDto) {
        return this.userProfilesService.create(req.user.id, createUserProfileDto);
    }
    findAll() {
        return this.userProfilesService.findAll();
    }
    findOne(id, req) {
        return this.userProfilesService.findOne(id);
    }
    findByUserId(userId, req) {
        return this.userProfilesService.findByUserId(userId, req.user.id);
    }
    update(id, req, updateUserProfileDto) {
        return this.userProfilesService.update(id, req.user.id, updateUserProfileDto);
    }
    patch(id, req, updateUserProfileDto) {
        return this.userProfilesService.patch(id, req.user.id, updateUserProfileDto);
    }
    remove(id, req) {
        return this.userProfilesService.remove(id, req.user.id);
    }
    adminRemove(id, req) {
        // Admin can delete any profile
        return this.userProfilesService.remove(id, req.user.id);
    }
    async detectLanguage(req, acceptLanguage) {
        const detectedLang = (0, language_detector_util_1.detectLanguageFromHeader)(acceptLanguage) || 'en';
        // Save to user's profile
        await this.userProfilesService.setPreferredLanguage(req.user.id, detectedLang);
        return { detectedLanguage: detectedLang };
    }
};
exports.UserProfilesController = UserProfilesController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Create a new user profile' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'The profile has been successfully created.',
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Bad Request.' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden.' }),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeof (_b = typeof create_user_profile_dto_1.CreateUserProfileDto !== "undefined" && create_user_profile_dto_1.CreateUserProfileDto) === "function" ? _b : Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get all public profiles' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Return all public profiles.' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get a profile by id' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Return the profile.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)('user/:userId'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get a profile by user id' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Return the profile.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "findByUserId", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Update a profile' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'The profile has been successfully updated.',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Request)()),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, typeof (_c = typeof update_user_profile_dto_1.UpdateUserProfileDto !== "undefined" && update_user_profile_dto_1.UpdateUserProfileDto) === "function" ? _c : Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "update", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Partially update a profile' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'The profile has been successfully updated.',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Request)()),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, typeof (_d = typeof update_user_profile_dto_1.UpdateUserProfileDto !== "undefined" && update_user_profile_dto_1.UpdateUserProfileDto) === "function" ? _d : Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "patch", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Delete a profile' }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'The profile has been successfully deleted.',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "remove", null);
__decorate([
    (0, common_1.Delete)(':id/admin'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)('admin'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Admin delete a profile' }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'The profile has been successfully deleted.',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden.' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Profile not found.' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], UserProfilesController.prototype, "adminRemove", null);
__decorate([
    (0, common_1.Get)('detect-language'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: 'Detect and store preferred language' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Detected language returned and saved.' }),
    (0, swagger_1.ApiBearerAuth)(),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Headers)('accept-language')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], UserProfilesController.prototype, "detectLanguage", null);
exports.UserProfilesController = UserProfilesController = __decorate([
    (0, swagger_1.ApiTags)('user-profiles'),
    (0, common_1.Controller)('user-profiles'),
    __metadata("design:paramtypes", [typeof (_a = typeof user_profiles_service_1.UserProfilesService !== "undefined" && user_profiles_service_1.UserProfilesService) === "function" ? _a : Object])
], UserProfilesController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,