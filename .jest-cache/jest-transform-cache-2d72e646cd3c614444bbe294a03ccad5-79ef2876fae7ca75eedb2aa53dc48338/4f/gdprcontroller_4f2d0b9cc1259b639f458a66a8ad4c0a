2b49ecda02229dc4bb144b3e14fe5628
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GdprController = void 0;
/**
 * GdprController handles endpoints for user consent, data export, and deletion requests.
 */
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const gdpr_service_1 = require("./gdpr.service");
const consent_dto_1 = require("./dto/consent.dto");
const data_export_dto_1 = require("./dto/data-export.dto");
const deletion_request_dto_1 = require("./dto/deletion-request.dto");
let GdprController = class GdprController {
    constructor(gdprService) {
        this.gdprService = gdprService;
    }
    // ==================== CONSENT ENDPOINTS ====================
    /**
     * Get user consents by user ID.
     */
    async getUserConsents(userId) {
        return this.gdprService.getConsentService().getUserConsents(userId);
    }
    /**
     * Update user consent by user ID.
     */
    async updateConsent(userId, updateConsentDto) {
        return this.gdprService
            .getConsentService()
            .updateConsent(userId, updateConsentDto);
    }
    /**
     * Update user consent preferences by user ID.
     */
    async updateConsentPreferences(userId, preferences) {
        return this.gdprService
            .getConsentService()
            .updateConsentPreferences(userId, preferences);
    }
    /**
     * Withdraw all consents for a user.
     */
    async withdrawAllConsents(userId) {
        await this.gdprService.getConsentService().withdrawAllConsents(userId);
    }
    // ==================== DATA EXPORT ENDPOINTS ====================
    /**
     * Request data export for a user.
     */
    async exportUserData(userId, dataExportRequestDto) {
        return this.gdprService.getDataExportService().exportUserData(userId, dataExportRequestDto);
    }
    // ==================== DELETION REQUEST ENDPOINTS ====================
    /**
     * Create a deletion request for a user.
     */
    async createDeletionRequest(userId, createDeletionRequestDto) {
        return this.gdprService.getDataDeletionService().createDeletionRequest(userId, createDeletionRequestDto);
    }
};
exports.GdprController = GdprController;
__decorate([
    (0, common_1.Get)('consents/:userId'),
    (0, swagger_1.ApiOperation)({ summary: 'Get user consents' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User consents retrieved' }),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "getUserConsents", null);
__decorate([
    (0, common_1.Put)('consents/:userId'),
    (0, swagger_1.ApiOperation)({ summary: 'Update user consent' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: consent_dto_1.UpdateConsentDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User consent updated' }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof consent_dto_1.UpdateConsentDto !== "undefined" && consent_dto_1.UpdateConsentDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "updateConsent", null);
__decorate([
    (0, common_1.Put)('consents/:userId/preferences'),
    (0, swagger_1.ApiOperation)({ summary: 'Update user consent preferences' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: consent_dto_1.ConsentPreferencesDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User consent preferences updated' }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof consent_dto_1.ConsentPreferencesDto !== "undefined" && consent_dto_1.ConsentPreferencesDto) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "updateConsentPreferences", null);
__decorate([
    (0, common_1.Post)('consents/:userId/withdraw-all'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Withdraw all consents' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'All consents withdrawn' }),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "withdrawAllConsents", null);
__decorate([
    (0, common_1.Post)('export/:userId'),
    (0, swagger_1.ApiOperation)({ summary: 'Request data export' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: data_export_dto_1.DataExportRequestDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Data export requested' }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof data_export_dto_1.DataExportRequestDto !== "undefined" && data_export_dto_1.DataExportRequestDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "exportUserData", null);
__decorate([
    (0, common_1.Post)('deletion/:userId'),
    (0, swagger_1.ApiOperation)({ summary: 'Create deletion request' }),
    (0, swagger_1.ApiParam)({ name: 'userId', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: deletion_request_dto_1.CreateDeletionRequestDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Deletion request created' }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof deletion_request_dto_1.CreateDeletionRequestDto !== "undefined" && deletion_request_dto_1.CreateDeletionRequestDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], GdprController.prototype, "createDeletionRequest", null);
exports.GdprController = GdprController = __decorate([
    (0, swagger_1.ApiTags)('GDPR'),
    (0, common_1.Controller)('gdpr'),
    __metadata("design:paramtypes", [typeof (_a = typeof gdpr_service_1.GdprService !== "undefined" && gdpr_service_1.GdprService) === "function" ? _a : Object])
], GdprController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,