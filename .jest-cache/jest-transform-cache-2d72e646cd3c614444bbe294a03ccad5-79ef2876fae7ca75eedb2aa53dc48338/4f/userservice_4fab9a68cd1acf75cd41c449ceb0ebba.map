{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\modules\\user\\services\\user.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\modules\\user\\services\\user.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ForbiddenException } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\n\r\nimport type { User } from \"../entities/user.entity\"\r\nimport type { CreateUserInput } from \"../dto/create-user.input\"\r\nimport type { UpdateUserInput } from \"../dto/update-user.input\"\r\nimport type { UsersArgs } from \"../dto/users.args\"\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private readonly userRepository: Repository<User>\r\n\r\n  constructor(userRepository: Repository<User>) {\r\n    this.userRepository = userRepository\r\n  }\r\n\r\n  async findAll(args: UsersArgs): Promise<User[]> {\r\n    const { limit = 20, offset = 0, search, isActive } = args\r\n\r\n    const query = this.userRepository.createQueryBuilder(\"user\")\r\n\r\n    if (search) {\r\n      query.andWhere(\"(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)\", {\r\n        search: `%${search}%`,\r\n      })\r\n    }\r\n\r\n    if (isActive !== undefined) {\r\n      query.andWhere(\"user.isActive = :isActive\", { isActive })\r\n    }\r\n\r\n    return query.orderBy(\"user.createdAt\", \"DESC\").limit(limit).offset(offset).getMany()\r\n  }\r\n\r\n  async findById(id: string): Promise<User | null> {\r\n    return this.userRepository.findOne({ where: { id } })\r\n  }\r\n\r\n  async findByIds(ids: string[]): Promise<User[]> {\r\n    return this.userRepository.findByIds(ids)\r\n  }\r\n\r\n  async create(input: CreateUserInput): Promise<User> {\r\n    const user = this.userRepository.create(input)\r\n    return this.userRepository.save(user)\r\n  }\r\n\r\n  async update(id: string, input: UpdateUserInput, currentUser: User): Promise<User> {\r\n    const user = await this.findById(id)\r\n\r\n    if (!user) {\r\n      throw new NotFoundException(`User with ID ${id} not found`)\r\n    }\r\n\r\n    // Authorization check\r\n    if (user.id !== currentUser.id && !this.isAdmin(currentUser)) {\r\n      throw new ForbiddenException(\"You can only update your own profile\")\r\n    }\r\n\r\n    Object.assign(user, input)\r\n    return this.userRepository.save(user)\r\n  }\r\n\r\n  async delete(id: string, currentUser: User): Promise<void> {\r\n    const user = await this.findById(id)\r\n\r\n    if (!user) {\r\n      throw new NotFoundException(`User with ID ${id} not found`)\r\n    }\r\n\r\n    // Authorization check\r\n    if (user.id !== currentUser.id && !this.isAdmin(currentUser)) {\r\n      throw new ForbiddenException(\"You can only delete your own profile\")\r\n    }\r\n\r\n    await this.userRepository.remove(user)\r\n  }\r\n\r\n  async getLastLoginAt(userId: string): Promise<Date | null> {\r\n    // This would typically fetch from a sessions table or cache\r\n    // For now, return null as placeholder\r\n    return null\r\n  }\r\n\r\n  private isAdmin(user: User): boolean {\r\n    // Check if user has admin role\r\n    return user.metadata?.roles?.includes(\"admin\") || false\r\n  }\r\n}\r\n"],"version":3}