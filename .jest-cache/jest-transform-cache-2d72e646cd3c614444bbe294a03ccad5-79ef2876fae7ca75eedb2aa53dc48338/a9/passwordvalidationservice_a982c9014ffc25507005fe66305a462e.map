{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\password-validation.service.ts","mappings":";;;;;;;;;;;;AAAA,2CAA4C;AAC5C,oDAA4B;AASrB,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAA/B;QACY,eAAU,GAAG,CAAC,CAAC;QACf,cAAS,GAAG,CAAC,CAAC,CAAC,qBAAqB;IA2DvD,CAAC;IAzDC,gBAAgB,CAAC,QAAgB;QAC/B,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,uBAAuB;QACvB,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QAE9C,eAAe;QACf,IAAI,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,UAAU,kBAAkB,CAAC,CAAC;QAC9E,CAAC;QAED,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;QACtE,CAAC;QAED,iDAAiD;QAEjD,8CAA8C;QAC9C,MAAM,QAAQ,GAAG,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE3E,IAAI,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;QAE1C,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,MAAM;YACN,KAAK,EAAE,QAAQ,CAAC,KAAK;SACtB,CAAC;IACJ,CAAC;IAED,uBAAuB;QACrB,OAAO;YACL,YAAY,IAAI,CAAC,UAAU,kBAAkB;YAC7C,wCAAwC;YACxC,wCAAwC;YACxC,8BAA8B;YAC9B,yCAAyC;YACzC,8BAA8B;SAC/B,CAAC;IACJ,CAAC;CACF,CAAA;AA7DY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;GACA,yBAAyB,CA6DrC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\password-validation.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport zxcvbn from 'zxcvbn';\r\n\r\nexport interface PasswordValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n  score: number;\r\n}\r\n\r\n@Injectable()\r\nexport class PasswordValidationService {\r\n  private readonly MIN_LENGTH = 8;\r\n  private readonly MIN_SCORE = 3; // zxcvbn score (0-4)\r\n\r\n  validatePassword(password: string): PasswordValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    // Debug info for tests\r\n    console.log('Validating password:', password);\r\n    \r\n    // Check length\r\n    if (password.length < this.MIN_LENGTH) {\r\n      errors.push(`Password must be at least ${this.MIN_LENGTH} characters long`);\r\n    }\r\n    \r\n    // Check complexity\r\n    if (!/[A-Z]/.test(password)) {\r\n      errors.push('Password must contain at least one uppercase letter');\r\n    }\r\n    \r\n    if (!/[a-z]/.test(password)) {\r\n      errors.push('Password must contain at least one lowercase letter');\r\n    }\r\n    \r\n    if (!/[0-9]/.test(password)) {\r\n      errors.push('Password must contain at least one number');\r\n    }\r\n    \r\n    if (!/[^A-Za-z0-9]/.test(password)) {\r\n      errors.push('Password must contain at least one special character');\r\n    }\r\n    \r\n    // Common password check is commented out for now\r\n    \r\n    // Using zxcvbn for advanced strength analysis\r\n    const analysis = zxcvbn(password);\r\n    console.log('zxcvbn score:', analysis.score, 'MIN_SCORE:', this.MIN_SCORE);\r\n    \r\n    if (analysis.score < this.MIN_SCORE) {\r\n      errors.push('Password is too weak. Please choose a stronger password');\r\n    }\r\n    \r\n    console.log('Validation errors:', errors);\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      score: analysis.score\r\n    };\r\n  }\r\n  \r\n  getPasswordRequirements(): string[] {\r\n    return [\r\n      `At least ${this.MIN_LENGTH} characters long`,\r\n      'Contains at least one uppercase letter',\r\n      'Contains at least one lowercase letter',\r\n      'Contains at least one number',\r\n      'Contains at least one special character',\r\n      'Not a commonly used password'\r\n    ];\r\n  }\r\n}"],"version":3}