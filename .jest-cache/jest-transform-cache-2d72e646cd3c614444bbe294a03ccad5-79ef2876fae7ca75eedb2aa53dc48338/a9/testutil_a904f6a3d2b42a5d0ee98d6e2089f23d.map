{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\utils\\test.util.ts","mappings":";;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,oDAAgD;AAGzC,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAE3D,KAAK,CAAC,YAAY,CAChB,YAAoB,EACpB,SAAiB,EACjB,OAA4B;QAE5B,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YACjC,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS,YAAY,EAAE;YAChC,YAAY;YACZ,OAAO;YACP,gDAAgD;YAChD,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,YAAoB,EACpB,OAA4B;QAE5B,IAAI,CAAC;YACH,mEAAmE;YACnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACnE,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;YACzC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;YAEtC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QACzB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;aACxB,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,YAAoB,EACpB,OAA4B;QAE5B,IAAI,CAAC;YACH,4DAA4D;YAC5D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACnE,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;YACzC,MAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAEtD,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;;aAEA,KAAK,CAAC,OAAO;aACb,CAAC;QACV,CAAC;IACH,CAAC;CACF,CAAA;AAvDY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;yDAEgC,4BAAY,oBAAZ,4BAAY;GAD5C,gBAAgB,CAuD5B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\utils\\test.util.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { EmailService } from '../email.service';\r\n\r\n@Injectable()\r\nexport class EmailTestService {\r\n  constructor(private readonly emailService: EmailService) {}\r\n\r\n  async testTemplate(\r\n    templateName: string,\r\n    testEmail: string,\r\n    context: Record<string, any>,\r\n  ): Promise<boolean> {\r\n    return this.emailService.sendEmail({\r\n      to: testEmail,\r\n      subject: `TEST: ${templateName}`,\r\n      templateName,\r\n      context,\r\n      // Add a header to indicate this is a test email\r\n      skipTracking: true,\r\n    });\r\n  }\r\n\r\n  async validateTemplate(\r\n    templateName: string,\r\n    context: Record<string, any>,\r\n  ): Promise<{ valid: boolean; errors?: string[] }> {\r\n    try {\r\n      // Get the template and try to compile it with the provided context\r\n      const template = await this.emailService.getTemplate(templateName);\r\n      const handlebars = require('handlebars');\r\n      handlebars.compile(template)(context);\r\n\r\n      return { valid: true };\r\n    } catch (error) {\r\n      return {\r\n        valid: false,\r\n        errors: [error.message],\r\n      };\r\n    }\r\n  }\r\n\r\n  async generatePreview(\r\n    templateName: string,\r\n    context: Record<string, any>,\r\n  ): Promise<string> {\r\n    try {\r\n      // Get the template and compile it with the provided context\r\n      const template = await this.emailService.getTemplate(templateName);\r\n      const handlebars = require('handlebars');\r\n      const compiledTemplate = handlebars.compile(template);\r\n\r\n      return compiledTemplate(context);\r\n    } catch (error) {\r\n      return `<div style=\"color: red; padding: 20px; border: 1px solid red;\">\r\n        <h3>Error Rendering Template</h3>\r\n        <p>${error.message}</p>\r\n      </div>`;\r\n    }\r\n  }\r\n}\r\n"],"version":3}