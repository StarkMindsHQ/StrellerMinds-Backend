1d09c8b91f3ae8c166bc07f54333d8e7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const email_service_1 = require("./email.service");
const typeorm_1 = require("@nestjs/typeorm");
const email_template_entity_1 = require("./entities/email-template.entity");
const email_log_entity_1 = require("./entities/email-log.entity");
const email_preference_entity_1 = require("./entities/email-preference.entity");
const jwt_1 = require("@nestjs/jwt");
describe('EmailService.verifyUnsubscribeToken', () => {
    let service;
    let config;
    let jwt;
    beforeEach(async () => {
        config = {
            get: jest.fn((key) => {
                if (key === 'UNSUBSCRIBE_JWT_SECRET')
                    return 'secret-x';
                if (key === 'JWT_SECRET')
                    return 'fallback';
                return undefined;
            }),
        };
        jwt = { sign: jest.fn(), verify: jest.fn() };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_service_1.EmailService,
                { provide: config_1.ConfigService, useValue: config },
                { provide: 'BullQueue_email', useValue: { add: jest.fn() } },
                { provide: (0, typeorm_1.getRepositoryToken)(email_template_entity_1.EmailTemplate), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(email_preference_entity_1.EmailPreference), useValue: {} },
                { provide: jwt_1.JwtService, useValue: jwt },
            ],
        }).compile();
        service = module.get(email_service_1.EmailService);
    });
    it('returns true when token payload email matches', async () => {
        jwt.verify.mockReturnValue({ email: 'user@example.com' });
        const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');
        expect(ok).toBe(true);
    });
    it('returns false on invalid token', async () => {
        jwt.verify.mockImplementation(() => { throw new Error('bad'); });
        const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');
        expect(ok).toBe(false);
    });
});
describe('EmailService', () => {
    let service;
    let mockQueue;
    const mockEmailTemplateRepo = {
        findOne: jest.fn(),
    };
    const mockEmailLogRepo = {
        create: jest.fn().mockImplementation((data) => data),
        save: jest.fn(),
        update: jest.fn(),
        findOne: jest.fn(),
    };
    const mockEmailPreferenceRepo = {
        findOne: jest.fn(),
        find: jest.fn(),
        create: jest.fn(),
        save: jest.fn(),
    };
    beforeEach(async () => {
        mockQueue = {
            add: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_service_1.EmailService,
                { provide: config_1.ConfigService, useValue: { get: jest.fn(() => 'mock') } },
                { provide: (0, typeorm_1.getRepositoryToken)(email_template_entity_1.EmailTemplate), useValue: mockEmailTemplateRepo },
                { provide: (0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog), useValue: mockEmailLogRepo },
                { provide: (0, typeorm_1.getRepositoryToken)(email_preference_entity_1.EmailPreference), useValue: mockEmailPreferenceRepo },
                { provide: 'BullQueue_email', useValue: mockQueue },
            ],
        }).compile();
        service = module.get(email_service_1.EmailService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('sendEmail', () => {
        it('should queue the email if user has not opted out', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue(null);
            const result = await service.sendEmail({
                to: 'user@example.com',
                subject: 'Test',
                templateName: 'email-verification',
                context: {},
            });
            expect(result).toBe(true);
            expect(mockQueue.add).toHaveBeenCalled();
        });
        it('should not send email if user has opted out', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue({ optOut: true });
            const result = await service.sendEmail({
                to: 'user@example.com',
                subject: 'Test',
                templateName: 'email-verification',
                context: {},
            });
            expect(result).toBe(false);
            expect(mockQueue.add).not.toHaveBeenCalled();
        });
    });
    describe('updateEmailPreference', () => {
        it('should create a new preference if none exists', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue(null);
            await service.updateEmailPreference('user@example.com', 'email-verification', true);
            expect(mockEmailPreferenceRepo.create).toHaveBeenCalled();
            expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();
        });
        it('should update existing preference', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue({ email: 'user@example.com', optOut: false });
            await service.updateEmailPreference('user@example.com', 'email-verification', true);
            expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();
        });
    });
    describe('getTemplate', () => {
        it('should fetch template from database if exists', async () => {
            mockEmailTemplateRepo.findOne.mockResolvedValue({ content: '<p>Hello</p>' });
            const template = await service.getTemplate('email-verification');
            expect(template).toBe('<p>Hello</p>');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,