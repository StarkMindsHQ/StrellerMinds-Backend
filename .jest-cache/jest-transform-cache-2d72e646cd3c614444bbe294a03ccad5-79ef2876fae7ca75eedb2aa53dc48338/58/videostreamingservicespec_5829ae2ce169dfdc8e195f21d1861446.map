{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\video-streaming.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\video-streaming\\video-streaming.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { VideoStreamingService } from './services/video-streaming.service';\r\nimport { Video, VideoStatus, VideoVisibility } from './entities/video.entity';\r\nimport { VideoQuality } from './entities/video-quality.entity';\r\nimport { User } from '../users/entities/user.entity';\r\nimport { AwsCloudFrontService } from './services/aws-cloudfront.service';\r\nimport { VideoProcessingService } from './services/video-processing.service';\r\nimport { VideoSecurityService } from './services/video-security.service';\r\nimport { VideoAnalyticsService } from './services/video-analytics.service';\r\nimport { CreateVideoDto } from './dto/create-video.dto';\r\n\r\ndescribe('VideoStreamingService', () => {\r\n  let service: VideoStreamingService;\r\n  let videoRepository: Repository<Video>;\r\n  let qualityRepository: Repository<VideoQuality>;\r\n  let userRepository: Repository<User>;\r\n  let cloudFrontService: AwsCloudFrontService;\r\n  let processingService: VideoProcessingService;\r\n  let securityService: VideoSecurityService;\r\n  let analyticsService: VideoAnalyticsService;\r\n\r\n  const mockUser: User = {\r\n    id: 'user-123',\r\n    email: 'test@example.com',\r\n    name: 'Test User',\r\n    isActive: true,\r\n  } as User;\r\n\r\n  const mockVideo: Video = {\r\n    id: 'video-123',\r\n    title: 'Test Video',\r\n    description: 'Test Description',\r\n    originalFilename: 'test.mp4',\r\n    status: VideoStatus.READY,\r\n    visibility: VideoVisibility.PRIVATE,\r\n    duration: 120,\r\n    fileSize: 1024000,\r\n    width: 1920,\r\n    height: 1080,\r\n    frameRate: 30,\r\n    bitrate: 5000,\r\n    codec: 'h264',\r\n    audioCodec: 'aac',\r\n    streamingUrl: 'https://cdn.example.com/video-123.mp4',\r\n    thumbnailUrl: 'https://cdn.example.com/video-123-thumb.jpg',\r\n    s3Key: 'videos/video-123/original.mp4',\r\n    s3Bucket: 'test-bucket',\r\n    cdnDomain: 'cdn.example.com',\r\n    viewCount: 0,\r\n    uploadedBy: mockUser,\r\n    qualityVariants: [],\r\n    analytics: [],\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n  } as Video;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        VideoStreamingService,\r\n        {\r\n          provide: getRepositoryToken(Video),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            findOne: jest.fn(),\r\n            update: jest.fn(),\r\n            remove: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(VideoQuality),\r\n          useValue: {\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            find: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: AwsCloudFrontService,\r\n          useValue: {\r\n            generateVideoKey: jest.fn(),\r\n            uploadVideo: jest.fn(),\r\n            deleteVideo: jest.fn(),\r\n            generateSignedUrl: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: VideoProcessingService,\r\n          useValue: {\r\n            queueVideoProcessing: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: VideoSecurityService,\r\n          useValue: {\r\n            validateVideoAccess: jest.fn(),\r\n            generateDRMConfig: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: VideoAnalyticsService,\r\n          useValue: {\r\n            getEngagementMetrics: jest.fn(),\r\n            getPerformanceMetrics: jest.fn(),\r\n            getGeographicMetrics: jest.fn(),\r\n            getDeviceMetrics: jest.fn(),\r\n            getQualityMetrics: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<VideoStreamingService>(VideoStreamingService);\r\n    videoRepository = module.get<Repository<Video>>(getRepositoryToken(Video));\r\n    qualityRepository = module.get<Repository<VideoQuality>>(getRepositoryToken(VideoQuality));\r\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\r\n    cloudFrontService = module.get<AwsCloudFrontService>(AwsCloudFrontService);\r\n    processingService = module.get<VideoProcessingService>(VideoProcessingService);\r\n    securityService = module.get<VideoSecurityService>(VideoSecurityService);\r\n    analyticsService = module.get<VideoAnalyticsService>(VideoAnalyticsService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('createVideo', () => {\r\n    it('should create a new video successfully', async () => {\r\n      const createVideoDto: CreateVideoDto = {\r\n        title: 'Test Video',\r\n        description: 'Test Description',\r\n        originalFilename: 'test.mp4',\r\n        visibility: VideoVisibility.PRIVATE,\r\n      };\r\n\r\n      jest.spyOn(videoRepository, 'create').mockReturnValue(mockVideo);\r\n      jest.spyOn(videoRepository, 'save').mockResolvedValue(mockVideo);\r\n      jest.spyOn(cloudFrontService, 'generateVideoKey').mockReturnValue('videos/video-123/original.mp4');\r\n\r\n      const result = await service.createVideo(createVideoDto, mockUser);\r\n\r\n      expect(result.video).toBeDefined();\r\n      expect(result.video.title).toBe(createVideoDto.title);\r\n      expect(result.uploadUrl).toContain('s3.amazonaws.com');\r\n      expect(videoRepository.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          title: createVideoDto.title,\r\n          uploadedBy: mockUser,\r\n          status: VideoStatus.UPLOADING,\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('uploadVideoFile', () => {\r\n    it('should upload video file successfully', async () => {\r\n      const mockFile = {\r\n        buffer: Buffer.from('test video content'),\r\n        mimetype: 'video/mp4',\r\n        originalname: 'test.mp4',\r\n      } as Express.Multer.File;\r\n\r\n      const uploadResult = {\r\n        key: 'videos/video-123/original.mp4',\r\n        url: 'https://s3.amazonaws.com/bucket/videos/video-123/original.mp4',\r\n        cdnUrl: 'https://cdn.example.com/videos/video-123/original.mp4',\r\n        etag: 'abc123',\r\n        size: 1024000,\r\n      };\r\n\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue({\r\n        ...mockVideo,\r\n        status: VideoStatus.UPLOADING,\r\n      });\r\n      jest.spyOn(cloudFrontService, 'generateVideoKey').mockReturnValue('videos/video-123/original.mp4');\r\n      jest.spyOn(cloudFrontService, 'uploadVideo').mockResolvedValue(uploadResult);\r\n      jest.spyOn(processingService, 'queueVideoProcessing').mockResolvedValue();\r\n\r\n      await service.uploadVideoFile('video-123', mockFile);\r\n\r\n      expect(cloudFrontService.uploadVideo).toHaveBeenCalledWith(\r\n        mockFile.buffer,\r\n        'videos/video-123/original.mp4',\r\n        mockFile.mimetype,\r\n        expect.any(Object),\r\n      );\r\n      expect(processingService.queueVideoProcessing).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('getVideoStreamingInfo', () => {\r\n    it('should return streaming info for authorized user', async () => {\r\n      const accessResult = {\r\n        allowed: true,\r\n        accessToken: 'test-token',\r\n        streamingUrl: 'https://cdn.example.com/video-123.mp4',\r\n      };\r\n\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);\r\n      jest.spyOn(securityService, 'validateVideoAccess').mockResolvedValue(accessResult);\r\n      jest.spyOn(securityService, 'generateDRMConfig').mockResolvedValue(null);\r\n\r\n      const result = await service.getVideoStreamingInfo('video-123', 'user-123');\r\n\r\n      expect(result.video).toBeDefined();\r\n      expect(result.streamingUrls.primary).toBe(accessResult.streamingUrl);\r\n      expect(result.security.accessToken).toBe(accessResult.accessToken);\r\n      expect(result.analytics.sessionId).toBeDefined();\r\n    });\r\n\r\n    it('should throw error for unauthorized access', async () => {\r\n      const accessResult = {\r\n        allowed: false,\r\n        reason: 'Access denied',\r\n      };\r\n\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);\r\n      jest.spyOn(securityService, 'validateVideoAccess').mockResolvedValue(accessResult);\r\n\r\n      await expect(\r\n        service.getVideoStreamingInfo('video-123', 'user-456'),\r\n      ).rejects.toThrow('Access denied');\r\n    });\r\n  });\r\n\r\n  describe('getVideoAnalytics', () => {\r\n    it('should return analytics for video owner', async () => {\r\n      const mockAnalytics = {\r\n        engagement: { totalViews: 100, uniqueViewers: 80 },\r\n        performance: { averageLoadTime: 2.5, errorRate: 0.1 },\r\n        geographic: { viewsByCountry: { US: 50, UK: 30 } },\r\n        device: { deviceTypes: { desktop: 60, mobile: 40 } },\r\n        quality: { qualityDistribution: { '720p': 70, '480p': 30 } },\r\n      };\r\n\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);\r\n      jest.spyOn(analyticsService, 'getEngagementMetrics').mockResolvedValue(mockAnalytics.engagement as any);\r\n      jest.spyOn(analyticsService, 'getPerformanceMetrics').mockResolvedValue(mockAnalytics.performance as any);\r\n      jest.spyOn(analyticsService, 'getGeographicMetrics').mockResolvedValue(mockAnalytics.geographic as any);\r\n      jest.spyOn(analyticsService, 'getDeviceMetrics').mockResolvedValue(mockAnalytics.device as any);\r\n      jest.spyOn(analyticsService, 'getQualityMetrics').mockResolvedValue(mockAnalytics.quality as any);\r\n\r\n      const result = await service.getVideoAnalytics('video-123', 'user-123');\r\n\r\n      expect(result.video.id).toBe('video-123');\r\n      expect(result.engagement).toBeDefined();\r\n      expect(result.performance).toBeDefined();\r\n      expect(result.geographic).toBeDefined();\r\n      expect(result.device).toBeDefined();\r\n      expect(result.quality).toBeDefined();\r\n    });\r\n\r\n    it('should throw error for non-owner', async () => {\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);\r\n\r\n      await expect(\r\n        service.getVideoAnalytics('video-123', 'user-456'),\r\n      ).rejects.toThrow('You do not have permission to view analytics for this video');\r\n    });\r\n  });\r\n\r\n  describe('deleteVideo', () => {\r\n    it('should delete video and associated files', async () => {\r\n      const videoWithQualities = {\r\n        ...mockVideo,\r\n        qualityVariants: [\r\n          {\r\n            id: 'quality-1',\r\n            s3Key: 'videos/video-123/720p.mp4',\r\n            quality: '720p',\r\n          },\r\n        ],\r\n      };\r\n\r\n      jest.spyOn(service, 'findVideoById').mockResolvedValue(videoWithQualities as any);\r\n      jest.spyOn(cloudFrontService, 'deleteVideo').mockResolvedValue();\r\n      jest.spyOn(videoRepository, 'remove').mockResolvedValue(videoWithQualities as any);\r\n\r\n      await service.deleteVideo('video-123', 'user-123');\r\n\r\n      expect(cloudFrontService.deleteVideo).toHaveBeenCalledWith(mockVideo.s3Key);\r\n      expect(cloudFrontService.deleteVideo).toHaveBeenCalledWith('videos/video-123/720p.mp4');\r\n      expect(videoRepository.remove).toHaveBeenCalledWith(videoWithQualities);\r\n    });\r\n  });\r\n});\r\n"],"version":3}