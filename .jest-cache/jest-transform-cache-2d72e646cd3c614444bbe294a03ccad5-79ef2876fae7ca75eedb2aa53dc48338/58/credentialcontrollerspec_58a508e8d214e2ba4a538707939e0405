2155ac6b57690678c52dfd4258d1bc54
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const credential_controller_1 = require("../credential.controller");
const credential_service_1 = require("../credential.service");
const credential_history_query_dto_1 = require("../dto/credential-history-query.dto");
describe('CredentialController', () => {
    let controller;
    let service;
    const mockCredentialService = {
        getUserCredentialHistory: jest.fn(),
        verifyCredential: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [credential_controller_1.CredentialController],
            providers: [
                {
                    provide: credential_service_1.CredentialService,
                    useValue: mockCredentialService,
                },
            ],
        }).compile();
        controller = module.get(credential_controller_1.CredentialController);
        service = module.get(credential_service_1.CredentialService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('getCredentialHistory', () => {
        it('should return credential history for the authenticated user', async () => {
            const user = { id: 'user-123' };
            const queryParams = {
                page: 1,
                limit: 10,
                status: credential_history_query_dto_1.CredentialStatus.ALL,
            };
            const expectedResponse = {
                data: [
                    {
                        id: '123e4567-e89b-12d3-a456-426614174000',
                        type: 'academic',
                        name: 'Computer Science Degree',
                        // other fields...
                    },
                ],
                meta: {
                    page: 1,
                    limit: 10,
                    totalItems: 1,
                    totalPages: 1,
                },
            };
            mockCredentialService.getUserCredentialHistory.mockResolvedValue(expectedResponse);
            const result = await controller.getCredentialHistory(user, queryParams);
            expect(service.getUserCredentialHistory).toHaveBeenCalledWith('user-123', queryParams);
            expect(result).toEqual(expectedResponse);
        });
        it('should handle errors from service', async () => {
            const user = { id: 'user-123' };
            const queryParams = {
                page: 1,
                limit: 10,
            };
            mockCredentialService.getUserCredentialHistory.mockRejectedValue(new Error('Database error'));
            await expect(controller.getCredentialHistory(user, queryParams)).rejects.toThrow(common_1.HttpException);
        });
    });
    describe('verifyCredential', () => {
        it('should verify a credential and return the result', async () => {
            const user = { id: 'user-123' };
            const credentialId = '123e4567-e89b-12d3-a456-426614174000';
            const expectedResponse = {
                verified: true,
                credential: {
                    id: credentialId,
                    // other fields...
                },
            };
            mockCredentialService.verifyCredential.mockResolvedValue(expectedResponse);
            const result = await controller.verifyCredential(user, credentialId);
            expect(service.verifyCredential).toHaveBeenCalledWith('user-123', credentialId);
            expect(result).toEqual(expectedResponse);
        });
        it('should handle not found errors', async () => {
            const user = { id: 'user-123' };
            const credentialId = 'non-existent-id';
            mockCredentialService.verifyCredential.mockRejectedValue(new common_1.HttpException('Credential not found', common_1.HttpStatus.NOT_FOUND));
            await expect(controller.verifyCredential(user, credentialId)).rejects.toThrow(common_1.HttpException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,