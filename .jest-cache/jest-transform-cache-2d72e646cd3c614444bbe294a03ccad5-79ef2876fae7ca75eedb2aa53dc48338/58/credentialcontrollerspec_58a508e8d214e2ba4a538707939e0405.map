{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\credential\\credential.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { HttpException, HttpStatus } from '@nestjs/common';\r\nimport { CredentialController } from '../credential.controller';\r\nimport { CredentialService } from '../credential.service';\r\nimport { CredentialStatus } from '../dto/credential-history-query.dto';\r\n\r\ndescribe('CredentialController', () => {\r\n  let controller: CredentialController;\r\n  let service: CredentialService;\r\n\r\n  const mockCredentialService = {\r\n    getUserCredentialHistory: jest.fn(),\r\n    verifyCredential: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [CredentialController],\r\n      providers: [\r\n        {\r\n          provide: CredentialService,\r\n          useValue: mockCredentialService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<CredentialController>(CredentialController);\r\n    service = module.get<CredentialService>(CredentialService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n\r\n  describe('getCredentialHistory', () => {\r\n    it('should return credential history for the authenticated user', async () => {\r\n      const user = { id: 'user-123' };\r\n      const queryParams = {\r\n        page: 1,\r\n        limit: 10,\r\n        status: CredentialStatus.ALL,\r\n      };\r\n      const expectedResponse = {\r\n        data: [\r\n          {\r\n            id: '123e4567-e89b-12d3-a456-426614174000',\r\n            type: 'academic',\r\n            name: 'Computer Science Degree',\r\n            // other fields...\r\n          },\r\n        ],\r\n        meta: {\r\n          page: 1,\r\n          limit: 10,\r\n          totalItems: 1,\r\n          totalPages: 1,\r\n        },\r\n      };\r\n\r\n      mockCredentialService.getUserCredentialHistory.mockResolvedValue(expectedResponse);\r\n\r\n      const result = await controller.getCredentialHistory(user, queryParams);\r\n\r\n      expect(service.getUserCredentialHistory).toHaveBeenCalledWith('user-123', queryParams);\r\n      expect(result).toEqual(expectedResponse);\r\n    });\r\n\r\n    it('should handle errors from service', async () => {\r\n      const user = { id: 'user-123' };\r\n      const queryParams = {\r\n        page: 1,\r\n        limit: 10,\r\n      };\r\n\r\n      mockCredentialService.getUserCredentialHistory.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(controller.getCredentialHistory(user, queryParams)).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n\r\n  describe('verifyCredential', () => {\r\n    it('should verify a credential and return the result', async () => {\r\n      const user = { id: 'user-123' };\r\n      const credentialId = '123e4567-e89b-12d3-a456-426614174000';\r\n      const expectedResponse = {\r\n        verified: true,\r\n        credential: {\r\n          id: credentialId,\r\n          // other fields...\r\n        },\r\n      };\r\n\r\n      mockCredentialService.verifyCredential.mockResolvedValue(expectedResponse);\r\n\r\n      const result = await controller.verifyCredential(user, credentialId);\r\n\r\n      expect(service.verifyCredential).toHaveBeenCalledWith('user-123', credentialId);\r\n      expect(result).toEqual(expectedResponse);\r\n    });\r\n\r\n    it('should handle not found errors', async () => {\r\n      const user = { id: 'user-123' };\r\n      const credentialId = 'non-existent-id';\r\n\r\n      mockCredentialService.verifyCredential.mockRejectedValue(\r\n        new HttpException('Credential not found', HttpStatus.NOT_FOUND),\r\n      );\r\n\r\n      await expect(controller.verifyCredential(user, credentialId)).rejects.toThrow(HttpException);\r\n    });\r\n  });\r\n});"],"version":3}