83ad53b703b1ff1a9da69974a32230c3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const video_streaming_service_1 = require("./services/video-streaming.service");
const video_entity_1 = require("./entities/video.entity");
const video_quality_entity_1 = require("./entities/video-quality.entity");
const user_entity_1 = require("../users/entities/user.entity");
const aws_cloudfront_service_1 = require("./services/aws-cloudfront.service");
const video_processing_service_1 = require("./services/video-processing.service");
const video_security_service_1 = require("./services/video-security.service");
const video_analytics_service_1 = require("./services/video-analytics.service");
describe('VideoStreamingService', () => {
    let service;
    let videoRepository;
    let qualityRepository;
    let userRepository;
    let cloudFrontService;
    let processingService;
    let securityService;
    let analyticsService;
    const mockUser = {
        id: 'user-123',
        email: 'test@example.com',
        name: 'Test User',
        isActive: true,
    };
    const mockVideo = {
        id: 'video-123',
        title: 'Test Video',
        description: 'Test Description',
        originalFilename: 'test.mp4',
        status: video_entity_1.VideoStatus.READY,
        visibility: video_entity_1.VideoVisibility.PRIVATE,
        duration: 120,
        fileSize: 1024000,
        width: 1920,
        height: 1080,
        frameRate: 30,
        bitrate: 5000,
        codec: 'h264',
        audioCodec: 'aac',
        streamingUrl: 'https://cdn.example.com/video-123.mp4',
        thumbnailUrl: 'https://cdn.example.com/video-123-thumb.jpg',
        s3Key: 'videos/video-123/original.mp4',
        s3Bucket: 'test-bucket',
        cdnDomain: 'cdn.example.com',
        viewCount: 0,
        uploadedBy: mockUser,
        qualityVariants: [],
        analytics: [],
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                video_streaming_service_1.VideoStreamingService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(video_entity_1.Video),
                    useValue: {
                        create: jest.fn(),
                        save: jest.fn(),
                        findOne: jest.fn(),
                        update: jest.fn(),
                        remove: jest.fn(),
                        createQueryBuilder: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(video_quality_entity_1.VideoQuality),
                    useValue: {
                        create: jest.fn(),
                        save: jest.fn(),
                        find: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: {
                        findOne: jest.fn(),
                    },
                },
                {
                    provide: aws_cloudfront_service_1.AwsCloudFrontService,
                    useValue: {
                        generateVideoKey: jest.fn(),
                        uploadVideo: jest.fn(),
                        deleteVideo: jest.fn(),
                        generateSignedUrl: jest.fn(),
                    },
                },
                {
                    provide: video_processing_service_1.VideoProcessingService,
                    useValue: {
                        queueVideoProcessing: jest.fn(),
                    },
                },
                {
                    provide: video_security_service_1.VideoSecurityService,
                    useValue: {
                        validateVideoAccess: jest.fn(),
                        generateDRMConfig: jest.fn(),
                    },
                },
                {
                    provide: video_analytics_service_1.VideoAnalyticsService,
                    useValue: {
                        getEngagementMetrics: jest.fn(),
                        getPerformanceMetrics: jest.fn(),
                        getGeographicMetrics: jest.fn(),
                        getDeviceMetrics: jest.fn(),
                        getQualityMetrics: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(video_streaming_service_1.VideoStreamingService);
        videoRepository = module.get((0, typeorm_1.getRepositoryToken)(video_entity_1.Video));
        qualityRepository = module.get((0, typeorm_1.getRepositoryToken)(video_quality_entity_1.VideoQuality));
        userRepository = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
        cloudFrontService = module.get(aws_cloudfront_service_1.AwsCloudFrontService);
        processingService = module.get(video_processing_service_1.VideoProcessingService);
        securityService = module.get(video_security_service_1.VideoSecurityService);
        analyticsService = module.get(video_analytics_service_1.VideoAnalyticsService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('createVideo', () => {
        it('should create a new video successfully', async () => {
            const createVideoDto = {
                title: 'Test Video',
                description: 'Test Description',
                originalFilename: 'test.mp4',
                visibility: video_entity_1.VideoVisibility.PRIVATE,
            };
            jest.spyOn(videoRepository, 'create').mockReturnValue(mockVideo);
            jest.spyOn(videoRepository, 'save').mockResolvedValue(mockVideo);
            jest.spyOn(cloudFrontService, 'generateVideoKey').mockReturnValue('videos/video-123/original.mp4');
            const result = await service.createVideo(createVideoDto, mockUser);
            expect(result.video).toBeDefined();
            expect(result.video.title).toBe(createVideoDto.title);
            expect(result.uploadUrl).toContain('s3.amazonaws.com');
            expect(videoRepository.create).toHaveBeenCalledWith(expect.objectContaining({
                title: createVideoDto.title,
                uploadedBy: mockUser,
                status: video_entity_1.VideoStatus.UPLOADING,
            }));
        });
    });
    describe('uploadVideoFile', () => {
        it('should upload video file successfully', async () => {
            const mockFile = {
                buffer: Buffer.from('test video content'),
                mimetype: 'video/mp4',
                originalname: 'test.mp4',
            };
            const uploadResult = {
                key: 'videos/video-123/original.mp4',
                url: 'https://s3.amazonaws.com/bucket/videos/video-123/original.mp4',
                cdnUrl: 'https://cdn.example.com/videos/video-123/original.mp4',
                etag: 'abc123',
                size: 1024000,
            };
            jest.spyOn(service, 'findVideoById').mockResolvedValue({
                ...mockVideo,
                status: video_entity_1.VideoStatus.UPLOADING,
            });
            jest.spyOn(cloudFrontService, 'generateVideoKey').mockReturnValue('videos/video-123/original.mp4');
            jest.spyOn(cloudFrontService, 'uploadVideo').mockResolvedValue(uploadResult);
            jest.spyOn(processingService, 'queueVideoProcessing').mockResolvedValue();
            await service.uploadVideoFile('video-123', mockFile);
            expect(cloudFrontService.uploadVideo).toHaveBeenCalledWith(mockFile.buffer, 'videos/video-123/original.mp4', mockFile.mimetype, expect.any(Object));
            expect(processingService.queueVideoProcessing).toHaveBeenCalled();
        });
    });
    describe('getVideoStreamingInfo', () => {
        it('should return streaming info for authorized user', async () => {
            const accessResult = {
                allowed: true,
                accessToken: 'test-token',
                streamingUrl: 'https://cdn.example.com/video-123.mp4',
            };
            jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);
            jest.spyOn(securityService, 'validateVideoAccess').mockResolvedValue(accessResult);
            jest.spyOn(securityService, 'generateDRMConfig').mockResolvedValue(null);
            const result = await service.getVideoStreamingInfo('video-123', 'user-123');
            expect(result.video).toBeDefined();
            expect(result.streamingUrls.primary).toBe(accessResult.streamingUrl);
            expect(result.security.accessToken).toBe(accessResult.accessToken);
            expect(result.analytics.sessionId).toBeDefined();
        });
        it('should throw error for unauthorized access', async () => {
            const accessResult = {
                allowed: false,
                reason: 'Access denied',
            };
            jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);
            jest.spyOn(securityService, 'validateVideoAccess').mockResolvedValue(accessResult);
            await expect(service.getVideoStreamingInfo('video-123', 'user-456')).rejects.toThrow('Access denied');
        });
    });
    describe('getVideoAnalytics', () => {
        it('should return analytics for video owner', async () => {
            const mockAnalytics = {
                engagement: { totalViews: 100, uniqueViewers: 80 },
                performance: { averageLoadTime: 2.5, errorRate: 0.1 },
                geographic: { viewsByCountry: { US: 50, UK: 30 } },
                device: { deviceTypes: { desktop: 60, mobile: 40 } },
                quality: { qualityDistribution: { '720p': 70, '480p': 30 } },
            };
            jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);
            jest.spyOn(analyticsService, 'getEngagementMetrics').mockResolvedValue(mockAnalytics.engagement);
            jest.spyOn(analyticsService, 'getPerformanceMetrics').mockResolvedValue(mockAnalytics.performance);
            jest.spyOn(analyticsService, 'getGeographicMetrics').mockResolvedValue(mockAnalytics.geographic);
            jest.spyOn(analyticsService, 'getDeviceMetrics').mockResolvedValue(mockAnalytics.device);
            jest.spyOn(analyticsService, 'getQualityMetrics').mockResolvedValue(mockAnalytics.quality);
            const result = await service.getVideoAnalytics('video-123', 'user-123');
            expect(result.video.id).toBe('video-123');
            expect(result.engagement).toBeDefined();
            expect(result.performance).toBeDefined();
            expect(result.geographic).toBeDefined();
            expect(result.device).toBeDefined();
            expect(result.quality).toBeDefined();
        });
        it('should throw error for non-owner', async () => {
            jest.spyOn(service, 'findVideoById').mockResolvedValue(mockVideo);
            await expect(service.getVideoAnalytics('video-123', 'user-456')).rejects.toThrow('You do not have permission to view analytics for this video');
        });
    });
    describe('deleteVideo', () => {
        it('should delete video and associated files', async () => {
            const videoWithQualities = {
                ...mockVideo,
                qualityVariants: [
                    {
                        id: 'quality-1',
                        s3Key: 'videos/video-123/720p.mp4',
                        quality: '720p',
                    },
                ],
            };
            jest.spyOn(service, 'findVideoById').mockResolvedValue(videoWithQualities);
            jest.spyOn(cloudFrontService, 'deleteVideo').mockResolvedValue();
            jest.spyOn(videoRepository, 'remove').mockResolvedValue(videoWithQualities);
            await service.deleteVideo('video-123', 'user-123');
            expect(cloudFrontService.deleteVideo).toHaveBeenCalledWith(mockVideo.s3Key);
            expect(cloudFrontService.deleteVideo).toHaveBeenCalledWith('videos/video-123/720p.mp4');
            expect(videoRepository.remove).toHaveBeenCalledWith(videoWithQualities);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,