{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality.decorators.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\__tests__\\data-quality.decorators.spec.ts"],"sourcesContent":["import { validate } from 'class-validator';\r\nimport { plainToClass } from 'class-transformer';\r\nimport {\r\n  RequiredField,\r\n  ValidEmail,\r\n  ValidString,\r\n  ValidNumber,\r\n  ValidDate,\r\n  ValidUUID,\r\n  ValidBoolean,\r\n  ValidPattern,\r\n  ValidEnum,\r\n  ValidPhoneNumber,\r\n  ValidURL,\r\n  ValidCreditCard,\r\n  ValidIPAddress,\r\n  DataQualityEntity,\r\n  DataQualitySeverity,\r\n} from '../decorators/data-quality.decorators';\r\n\r\nenum TestEnum {\r\n  VALUE1 = 'value1',\r\n  VALUE2 = 'value2',\r\n}\r\n\r\n@DataQualityEntity('test-entity')\r\nclass TestEntity {\r\n  @RequiredField('Name is required', DataQualitySeverity.HIGH)\r\n  name: string;\r\n\r\n  @ValidEmail(DataQualitySeverity.HIGH)\r\n  email: string;\r\n\r\n  @ValidString(3, 50, DataQualitySeverity.MEDIUM)\r\n  description: string;\r\n\r\n  @ValidNumber(0, 100, DataQualitySeverity.MEDIUM)\r\n  score: number;\r\n\r\n  @ValidDate(DataQualitySeverity.LOW)\r\n  createdAt: Date;\r\n\r\n  @ValidUUID(DataQualitySeverity.HIGH)\r\n  id: string;\r\n\r\n  @ValidBoolean(DataQualitySeverity.LOW)\r\n  isActive: boolean;\r\n\r\n  @ValidPattern(/^[A-Z]{2,3}$/, 'Must be 2-3 uppercase letters', DataQualitySeverity.MEDIUM)\r\n  code: string;\r\n\r\n  @ValidEnum(TestEnum, DataQualitySeverity.MEDIUM)\r\n  status: TestEnum;\r\n\r\n  @ValidPhoneNumber(DataQualitySeverity.MEDIUM)\r\n  phone: string;\r\n\r\n  @ValidURL(DataQualitySeverity.MEDIUM)\r\n  website: string;\r\n\r\n  @ValidCreditCard(DataQualitySeverity.HIGH)\r\n  creditCard: string;\r\n\r\n  @ValidIPAddress(DataQualitySeverity.MEDIUM)\r\n  ipAddress: string;\r\n}\r\n\r\ndescribe('Data Quality Decorators', () => {\r\n  describe('RequiredField', () => {\r\n    it('should pass validation for non-empty values', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const nameErrors = errors.filter(error => error.property === 'name');\r\n      expect(nameErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for empty values', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: '',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const nameErrors = errors.filter(error => error.property === 'name');\r\n      expect(nameErrors.length).toBeGreaterThan(0);\r\n      expect(nameErrors[0].constraints).toHaveProperty('isNotEmpty');\r\n    });\r\n  });\r\n\r\n  describe('ValidEmail', () => {\r\n    it('should pass validation for valid email', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john.doe@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const emailErrors = errors.filter(error => error.property === 'email');\r\n      expect(emailErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for invalid email', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'invalid-email',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const emailErrors = errors.filter(error => error.property === 'email');\r\n      expect(emailErrors.length).toBeGreaterThan(0);\r\n      expect(emailErrors[0].constraints).toHaveProperty('isEmail');\r\n    });\r\n  });\r\n\r\n  describe('ValidString', () => {\r\n    it('should pass validation for string within length limits', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Valid description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const descriptionErrors = errors.filter(error => error.property === 'description');\r\n      expect(descriptionErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for string too short', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Hi',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const descriptionErrors = errors.filter(error => error.property === 'description');\r\n      expect(descriptionErrors.length).toBeGreaterThan(0);\r\n      expect(descriptionErrors[0].constraints).toHaveProperty('length');\r\n    });\r\n  });\r\n\r\n  describe('ValidNumber', () => {\r\n    it('should pass validation for number within range', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 75,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const scoreErrors = errors.filter(error => error.property === 'score');\r\n      expect(scoreErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for number out of range', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 150,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const scoreErrors = errors.filter(error => error.property === 'score');\r\n      expect(scoreErrors.length).toBeGreaterThan(0);\r\n      expect(scoreErrors[0].constraints).toHaveProperty('max');\r\n    });\r\n  });\r\n\r\n  describe('ValidUUID', () => {\r\n    it('should pass validation for valid UUID', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const idErrors = errors.filter(error => error.property === 'id');\r\n      expect(idErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for invalid UUID', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: 'invalid-uuid',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const idErrors = errors.filter(error => error.property === 'id');\r\n      expect(idErrors.length).toBeGreaterThan(0);\r\n      expect(idErrors[0].constraints).toHaveProperty('isUuid');\r\n    });\r\n  });\r\n\r\n  describe('ValidPattern', () => {\r\n    it('should pass validation for matching pattern', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const codeErrors = errors.filter(error => error.property === 'code');\r\n      expect(codeErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for non-matching pattern', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'abc',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const codeErrors = errors.filter(error => error.property === 'code');\r\n      expect(codeErrors.length).toBeGreaterThan(0);\r\n      expect(codeErrors[0].constraints).toHaveProperty('matches');\r\n    });\r\n  });\r\n\r\n  describe('ValidPhoneNumber', () => {\r\n    it('should pass validation for valid phone number', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const phoneErrors = errors.filter(error => error.property === 'phone');\r\n      expect(phoneErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for invalid phone number', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: 'invalid-phone',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const phoneErrors = errors.filter(error => error.property === 'phone');\r\n      expect(phoneErrors.length).toBeGreaterThan(0);\r\n      expect(phoneErrors[0].constraints).toHaveProperty('matches');\r\n    });\r\n  });\r\n\r\n  describe('ValidURL', () => {\r\n    it('should pass validation for valid URL', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://www.example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const websiteErrors = errors.filter(error => error.property === 'website');\r\n      expect(websiteErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for invalid URL', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'not-a-url',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const websiteErrors = errors.filter(error => error.property === 'website');\r\n      expect(websiteErrors.length).toBeGreaterThan(0);\r\n      expect(websiteErrors[0].constraints).toHaveProperty('matches');\r\n    });\r\n  });\r\n\r\n  describe('ValidIPAddress', () => {\r\n    it('should pass validation for valid IP address', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '192.168.1.1',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const ipErrors = errors.filter(error => error.property === 'ipAddress');\r\n      expect(ipErrors).toHaveLength(0);\r\n    });\r\n\r\n    it('should fail validation for invalid IP address', async () => {\r\n      const entity = plainToClass(TestEntity, {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        description: 'Test description',\r\n        score: 85,\r\n        createdAt: new Date(),\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        isActive: true,\r\n        code: 'ABC',\r\n        status: TestEnum.VALUE1,\r\n        phone: '+1234567890',\r\n        website: 'https://example.com',\r\n        creditCard: '4111111111111111',\r\n        ipAddress: '999.999.999.999',\r\n      });\r\n\r\n      const errors = await validate(entity);\r\n      const ipErrors = errors.filter(error => error.property === 'ipAddress');\r\n      expect(ipErrors.length).toBeGreaterThan(0);\r\n      expect(ipErrors[0].constraints).toHaveProperty('matches');\r\n    });\r\n  });\r\n});\r\n"],"version":3}