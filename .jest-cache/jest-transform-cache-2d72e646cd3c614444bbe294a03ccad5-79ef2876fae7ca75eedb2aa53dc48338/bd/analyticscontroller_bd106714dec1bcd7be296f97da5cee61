43f01b097e4ed82417ab2cc5a22abc53
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailAnalyticsController = void 0;
const common_1 = require("@nestjs/common");
const email_service_1 = require("../email.service");
let EmailAnalyticsController = class EmailAnalyticsController {
    constructor(emailService) {
        this.emailService = emailService;
    }
    async getOverview(startDate, endDate) {
        const start = new Date(startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
        const end = new Date(endDate || new Date());
        const analytics = await this.emailService.getEmailAnalytics(start, end);
        // Calculate overall metrics
        const totalSent = analytics.reduce((sum, item) => {
            return sum + (item.status === 'sent' ? Number.parseInt(item.count) : 0);
        }, 0);
        const totalOpened = analytics.reduce((sum, item) => {
            return sum + (item.status === 'opened' ? Number.parseInt(item.count) : 0);
        }, 0);
        const totalClicked = analytics.reduce((sum, item) => {
            return (sum + (item.status === 'clicked' ? Number.parseInt(item.count) : 0));
        }, 0);
        const totalFailed = analytics.reduce((sum, item) => {
            return sum + (item.status === 'failed' ? Number.parseInt(item.count) : 0);
        }, 0);
        // Calculate open and click rates
        const openRate = totalSent > 0 ? (totalOpened / totalSent) * 100 : 0;
        const clickRate = totalOpened > 0 ? (totalClicked / totalOpened) * 100 : 0;
        return {
            totalSent,
            totalOpened,
            totalClicked,
            totalFailed,
            openRate: openRate.toFixed(2) + '%',
            clickRate: clickRate.toFixed(2) + '%',
            byTemplate: analytics,
        };
    }
    async getByTemplate(startDate, endDate, templateName) {
        const start = new Date(startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
        const end = new Date(endDate || new Date());
        return this.emailService.getEmailAnalytics(start, end, templateName);
    }
    async getDailyStats(startDate, endDate, templateName) {
        const start = new Date(startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
        const end = new Date(endDate || new Date());
        // Get daily stats for the date range
        return this.emailService.getDailyEmailStats(start, end, templateName);
    }
};
exports.EmailAnalyticsController = EmailAnalyticsController;
__decorate([
    (0, common_1.Get)('overview'),
    __param(0, (0, common_1.Query)('startDate')),
    __param(1, (0, common_1.Query)('endDate')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], EmailAnalyticsController.prototype, "getOverview", null);
__decorate([
    (0, common_1.Get)('by-template'),
    __param(0, (0, common_1.Query)('startDate')),
    __param(1, (0, common_1.Query)('endDate')),
    __param(2, (0, common_1.Query)('templateName')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], EmailAnalyticsController.prototype, "getByTemplate", null);
__decorate([
    (0, common_1.Get)('daily'),
    __param(0, (0, common_1.Query)('startDate')),
    __param(1, (0, common_1.Query)('endDate')),
    __param(2, (0, common_1.Query)('templateName')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], EmailAnalyticsController.prototype, "getDailyStats", null);
exports.EmailAnalyticsController = EmailAnalyticsController = __decorate([
    (0, common_1.Controller)('admin/email-analytics'),
    __metadata("design:paramtypes", [typeof (_a = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _a : Object])
], EmailAnalyticsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,