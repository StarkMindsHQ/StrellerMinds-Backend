d3cf9de56478d9c36adf89e695f5811b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_entity_1 = require("../entities/user.entity");
const wallet_info_entity_1 = require("../entities/wallet-info.entity");
const config_1 = require("@nestjs/config");
const common_1 = require("@nestjs/common");
const user_progress_entity_1 = require("../entities/user-progress.entity");
const users_deletion_service_1 = require("./users.deletion.service");
const audit_log_service_1 = require("src/audit/services/audit.log.service");
const account_deletion_confirmation_service_1 = require("./account.deletion.confirmation.service");
const accountStatus_enum_1 = require("../enums/accountStatus.enum");
describe('UserDeletionService', () => {
    let service;
    let userRepository;
    let walletInfoRepository;
    let userProgressRepository;
    let auditLogService;
    let confirmationService;
    let connection;
    const mockQueryRunner = {
        connect: jest.fn(),
        startTransaction: jest.fn(),
        commitTransaction: jest.fn(),
        rollbackTransaction: jest.fn(),
        release: jest.fn(),
        manager: {
            update: jest.fn(),
            save: jest.fn(),
            softDelete: jest.fn(),
            delete: jest.fn(),
        },
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                users_deletion_service_1.UserDeletionService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: {
                        findOne: jest.fn(),
                        save: jest.fn(),
                        update: jest.fn(),
                        delete: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(wallet_info_entity_1.WalletInfo),
                    useValue: {
                        findOne: jest.fn(),
                        update: jest.fn(),
                        delete: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_progress_entity_1.UserProgress),
                    useValue: {
                        delete: jest.fn(),
                    },
                },
                {
                    provide: audit_log_service_1.AuditLogService,
                    useValue: {
                        createLog: jest.fn().mockResolvedValue({}),
                    },
                },
                {
                    provide: account_deletion_confirmation_service_1.AccountDeletionConfirmationService,
                    useValue: {
                        startDeletionConfirmationWorkflow: jest
                            .fn()
                            .mockResolvedValue(undefined),
                        validateDeletionConfirmation: jest.fn().mockResolvedValue(true),
                    },
                },
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn().mockImplementation((key, defaultValue) => {
                            if (key === 'DATA_RETENTION_PERIOD')
                                return 30;
                            return defaultValue;
                        }),
                    },
                },
                {
                    provide: typeorm_2.Connection,
                    useValue: {
                        createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),
                    },
                },
            ],
        }).compile();
        service = module.get(users_deletion_service_1.UserDeletionService);
        userRepository = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
        walletInfoRepository = module.get((0, typeorm_1.getRepositoryToken)(wallet_info_entity_1.WalletInfo));
        userProgressRepository = module.get((0, typeorm_1.getRepositoryToken)(user_progress_entity_1.UserProgress));
        auditLogService = module.get(audit_log_service_1.AuditLogService);
        confirmationService = module.get(account_deletion_confirmation_service_1.AccountDeletionConfirmationService);
        connection = module.get(typeorm_2.Connection);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('deactivateAccount', () => {
        it('should deactivate user account', async () => {
            const mockUser = { id: 'user-id', email: 'test@example.com' };
            jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);
            await service.deactivateAccount('user-id', 'requester-id');
            expect(mockQueryRunner.connect).toHaveBeenCalled();
            expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
            expect(mockQueryRunner.manager.save).toHaveBeenCalledWith({
                ...mockUser,
                status: accountStatus_enum_1.AccountStatus.DEACTIVATED,
                deactivatedAt: expect.any(Date),
            });
            expect(auditLogService.createLog).toHaveBeenCalledWith({
                action: 'ACCOUNT_DEACTIVATION',
                entityType: 'USER',
                entityId: 'user-id',
                performedBy: 'requester-id',
                details: expect.any(Object),
            });
            expect(mockQueryRunner.commitTransaction).toHaveBeenCalled();
            expect(mockQueryRunner.release).toHaveBeenCalled();
        });
        it('should throw NotFoundException if user not found', async () => {
            jest.spyOn(userRepository, 'findOne').mockResolvedValue(null);
            await expect(service.deactivateAccount('non-existent-id', 'requester-id')).rejects.toThrow(common_1.NotFoundException);
        });
        it('should rollback transaction on error', async () => {
            const mockUser = { id: 'user-id', email: 'test@example.com' };
            jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);
            jest
                .spyOn(mockQueryRunner.manager, 'save')
                .mockRejectedValue(new Error('Database error'));
            await expect(service.deactivateAccount('user-id', 'requester-id')).rejects.toThrow('Database error');
            expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
            expect(mockQueryRunner.release).toHaveBeenCalled();
        });
    });
    describe('requestAccountDeletion', () => {
        it('should start deletion workflow', async () => {
            const mockUser = {
                id: 'user-id',
                email: 'test@example.com',
                role: 'STUDENT',
            };
            jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);
            await service.requestAccountDeletion('user-id', 'user-id');
            expect(userRepository.save).toHaveBeenCalledWith({
                ...mockUser,
                status: accountStatus_enum_1.AccountStatus.PENDING_DELETION,
                deletionRequestedAt: expect.any(Date),
            });
            expect(confirmationService.startDeletionConfirmationWorkflow).toHaveBeenCalledWith('user-id');
            expect(auditLogService.createLog).toHaveBeenCalled();
        });
        it('should throw error if user tries to delete another user without admin rights', async () => {
            const mockUser = {
                id: 'user-id',
                email: 'test@example.com',
                role: 'STUDENT',
            };
            const mockRequester = {
                id: 'requester-id',
                email: 'requester@example.com',
                role: 'STUDENT',
            };
            jest
                .spyOn(userRepository, 'findOne')
                .mockResolvedValueOnce(mockUser)
                .mockResolvedValueOnce(mockRequester);
            await expect(service.requestAccountDeletion('user-id', 'requester-id')).rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('confirmAccountDeletion', () => {
        it('should confirm and perform deletion with valid token', async () => {
            jest
                .spyOn(confirmationService, 'validateDeletionConfirmation')
                .mockResolvedValue(true);
            jest
                .spyOn(service, 'performAccountDeletion')
                .mockResolvedValue(undefined);
            await service.confirmAccountDeletion('user-id', 'valid-token');
            expect(confirmationService.validateDeletionConfirmation).toHaveBeenCalledWith('user-id', 'valid-token');
            expect(service.performAccountDeletion).toHaveBeenCalledWith('user-id', 'user-id');
        });
        it('should throw error with invalid token', async () => {
            jest
                .spyOn(confirmationService, 'validateDeletionConfirmation')
                .mockResolvedValue(false);
            await expect(service.confirmAccountDeletion('user-id', 'invalid-token')).rejects.toThrow(common_1.BadRequestException);
            expect(service.performAccountDeletion).not.toHaveBeenCalled();
        });
    });
    describe('performAccountDeletion', () => {
        it('should perform full deletion process', async () => {
            const mockUser = { id: 'user-id', email: 'test@example.com' };
            const mockWallet = { id: 'wallet-id', walletAddress: '0x123' };
            jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);
            jest
                .spyOn(walletInfoRepository, 'findOne')
                .mockResolvedValue(mockWallet);
            jest
                .spyOn(service, 'scheduleDataPurge')
                .mockImplementation(() => { });
            await service.performAccountDeletion('user-id', 'requester-id');
            expect(mockQueryRunner.manager.update).toHaveBeenCalledWith(user_entity_1.User, 'user-id', expect.objectContaining({
                firstName: '[REDACTED]',
                lastName: '[REDACTED]',
            }));
            expect(mockQueryRunner.manager.update).toHaveBeenCalledWith(wallet_info_entity_1.WalletInfo, 'wallet-id', expect.objectContaining({
                orphaned: true,
                orphanedAt: expect.any(Date),
            }));
            expect(mockQueryRunner.manager.softDelete).toHaveBeenCalledWith(user_progress_entity_1.UserProgress, { user: { id: 'user-id' } });
            expect(mockQueryRunner.manager.save).toHaveBeenCalled();
            expect(auditLogService.createLog).toHaveBeenCalled();
            expect(service.scheduleDataPurge).toHaveBeenCalledWith('user-id');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,