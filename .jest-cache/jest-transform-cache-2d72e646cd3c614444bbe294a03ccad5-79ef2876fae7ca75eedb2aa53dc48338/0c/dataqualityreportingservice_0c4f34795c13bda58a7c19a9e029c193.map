{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-quality-reporting.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-quality-reporting.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { Cron, CronExpression } from \"@nestjs/schedule\"\r\n\r\nimport { type DataQualityReport, ReportType, ReportStatus } from \"../entities/data-quality-report.entity\"\r\nimport type { DataQualityMetric } from \"../entities/data-quality-metric.entity\"\r\nimport type { DataQualityIssue } from \"../entities/data-quality-issue.entity\"\r\nimport type { DataQualityMonitoringService } from \"./data-quality-monitoring.service\"\r\n\r\n@Injectable()\r\nexport class DataQualityReportingService {\r\n  private readonly logger = new Logger(DataQualityReportingService.name)\r\n\r\n  constructor(\r\n    private readonly reportRepository: Repository<DataQualityReport>,\r\n    private readonly metricRepository: Repository<DataQualityMetric>,\r\n    private readonly issueRepository: Repository<DataQualityIssue>,\r\n    private readonly monitoringService: DataQualityMonitoringService,\r\n  ) {}\r\n\r\n  async generateReport(reportType: ReportType, startDate: Date, endDate: Date): Promise<DataQualityReport> {\r\n    try {\r\n      const report = this.reportRepository.create({\r\n        name: `Data Quality Report - ${reportType}`,\r\n        reportType,\r\n        status: ReportStatus.GENERATING,\r\n        reportDate: new Date(),\r\n        startDate,\r\n        endDate,\r\n        summary: {},\r\n        metrics: {},\r\n      })\r\n\r\n      const savedReport = await this.reportRepository.save(report)\r\n\r\n      // Generate report content\r\n      const reportData = await this.generateReportData(startDate, endDate)\r\n\r\n      savedReport.summary = reportData.summary\r\n      savedReport.metrics = reportData.metrics\r\n      savedReport.issues = reportData.issues\r\n      savedReport.recommendations = reportData.recommendations\r\n      savedReport.status = ReportStatus.COMPLETED\r\n\r\n      return this.reportRepository.save(savedReport)\r\n    } catch (error) {\r\n      this.logger.error(`Report generation failed: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async generateReportData(\r\n    startDate: Date,\r\n    endDate: Date,\r\n  ): Promise<{\r\n    summary: Record<string, any>\r\n    metrics: Record<string, any>\r\n    issues: Record<string, any>\r\n    recommendations: Record<string, any>\r\n  }> {\r\n    // Get overall metrics\r\n    const overallScore = await this.calculateOverallScore(startDate, endDate)\r\n    const categoryScores = await this.calculateCategoryScores(startDate, endDate)\r\n\r\n    // Get issue statistics\r\n    const totalIssues = await this.issueRepository.count({\r\n      where: {\r\n        createdAt: new Date(startDate.getTime()),\r\n      },\r\n    })\r\n\r\n    const resolvedIssues = await this.issueRepository.count({\r\n      where: {\r\n        status: \"resolved\",\r\n        resolvedAt: new Date(startDate.getTime()),\r\n      },\r\n    })\r\n\r\n    const criticalIssues = await this.issueRepository.count({\r\n      where: {\r\n        priority: \"critical\",\r\n        status: \"open\",\r\n      },\r\n    })\r\n\r\n    // Get top issues\r\n    const topIssues = await this.issueRepository.find({\r\n      where: {\r\n        createdAt: new Date(startDate.getTime()),\r\n      },\r\n      order: { occurrenceCount: \"DESC\" },\r\n      take: 10,\r\n    })\r\n\r\n    // Get metric trends\r\n    const metricTrends = await this.getMetricTrends(startDate, endDate)\r\n\r\n    // Generate recommendations\r\n    const recommendations = this.generateRecommendations(overallScore, categoryScores, criticalIssues)\r\n\r\n    return {\r\n      summary: {\r\n        reportPeriod: {\r\n          startDate: startDate.toISOString(),\r\n          endDate: endDate.toISOString(),\r\n        },\r\n        overallScore,\r\n        totalIssues,\r\n        resolvedIssues,\r\n        criticalIssues,\r\n        resolutionRate: totalIssues > 0 ? (resolvedIssues / totalIssues) * 100 : 100,\r\n      },\r\n      metrics: {\r\n        categoryScores,\r\n        trends: metricTrends,\r\n        topPerformingCategories: this.getTopCategories(categoryScores, true),\r\n        underPerformingCategories: this.getTopCategories(categoryScores, false),\r\n      },\r\n      issues: {\r\n        topIssues: topIssues.map((issue) => ({\r\n          id: issue.id,\r\n          title: issue.title,\r\n          priority: issue.priority,\r\n          occurrenceCount: issue.occurrenceCount,\r\n          entityType: issue.entityType,\r\n        })),\r\n        issuesByCategory: await this.getIssuesByCategory(startDate, endDate),\r\n        issuesByPriority: await this.getIssuesByPriority(startDate, endDate),\r\n      },\r\n      recommendations: {\r\n        immediate: recommendations.immediate,\r\n        shortTerm: recommendations.shortTerm,\r\n        longTerm: recommendations.longTerm,\r\n      },\r\n    }\r\n  }\r\n\r\n  private async calculateOverallScore(startDate: Date, endDate: Date): Promise<number> {\r\n    const result = await this.metricRepository\r\n      .createQueryBuilder(\"metric\")\r\n      .select(\"AVG(metric.value)\", \"avgScore\")\r\n      .where(\"metric.timestamp >= :startDate\", { startDate })\r\n      .andWhere(\"metric.timestamp <= :endDate\", { endDate })\r\n      .getRawOne()\r\n\r\n    return Number.parseFloat(result.avgScore) || 0\r\n  }\r\n\r\n  private async calculateCategoryScores(startDate: Date, endDate: Date): Promise<Record<string, number>> {\r\n    const results = await this.metricRepository\r\n      .createQueryBuilder(\"metric\")\r\n      .select(\"metric.metricCategory\", \"category\")\r\n      .addSelect(\"AVG(metric.value)\", \"avgScore\")\r\n      .where(\"metric.timestamp >= :startDate\", { startDate })\r\n      .andWhere(\"metric.timestamp <= :endDate\", { endDate })\r\n      .groupBy(\"metric.metricCategory\")\r\n      .getRawMany()\r\n\r\n    const categoryScores: Record<string, number> = {}\r\n    for (const result of results) {\r\n      categoryScores[result.category] = Number.parseFloat(result.avgScore) || 0\r\n    }\r\n\r\n    return categoryScores\r\n  }\r\n\r\n  private async getMetricTrends(\r\n    startDate: Date,\r\n    endDate: Date,\r\n  ): Promise<\r\n    Array<{\r\n      date: string\r\n      category: string\r\n      score: number\r\n    }>\r\n  > {\r\n    const results = await this.metricRepository\r\n      .createQueryBuilder(\"metric\")\r\n      .select(\"DATE(metric.timestamp)\", \"date\")\r\n      .addSelect(\"metric.metricCategory\", \"category\")\r\n      .addSelect(\"AVG(metric.value)\", \"score\")\r\n      .where(\"metric.timestamp >= :startDate\", { startDate })\r\n      .andWhere(\"metric.timestamp <= :endDate\", { endDate })\r\n      .groupBy(\"DATE(metric.timestamp), metric.metricCategory\")\r\n      .orderBy(\"DATE(metric.timestamp)\", \"ASC\")\r\n      .getRawMany()\r\n\r\n    return results.map((result) => ({\r\n      date: result.date,\r\n      category: result.category,\r\n      score: Number.parseFloat(result.score) || 0,\r\n    }))\r\n  }\r\n\r\n  private getTopCategories(\r\n    categoryScores: Record<string, number>,\r\n    topPerforming: boolean,\r\n  ): Array<{\r\n    category: string\r\n    score: number\r\n  }> {\r\n    const sorted = Object.entries(categoryScores)\r\n      .map(([category, score]) => ({ category, score }))\r\n      .sort((a, b) => (topPerforming ? b.score - a.score : a.score - b.score))\r\n\r\n    return sorted.slice(0, 3)\r\n  }\r\n\r\n  private async getIssuesByCategory(startDate: Date, endDate: Date): Promise<Record<string, number>> {\r\n    const results = await this.issueRepository\r\n      .createQueryBuilder(\"issue\")\r\n      .select(\"issue.entityType\", \"category\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .where(\"issue.createdAt >= :startDate\", { startDate })\r\n      .andWhere(\"issue.createdAt <= :endDate\", { endDate })\r\n      .groupBy(\"issue.entityType\")\r\n      .getRawMany()\r\n\r\n    const issuesByCategory: Record<string, number> = {}\r\n    for (const result of results) {\r\n      issuesByCategory[result.category] = Number.parseInt(result.count)\r\n    }\r\n\r\n    return issuesByCategory\r\n  }\r\n\r\n  private async getIssuesByPriority(startDate: Date, endDate: Date): Promise<Record<string, number>> {\r\n    const results = await this.issueRepository\r\n      .createQueryBuilder(\"issue\")\r\n      .select(\"issue.priority\", \"priority\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .where(\"issue.createdAt >= :startDate\", { startDate })\r\n      .andWhere(\"issue.createdAt <= :endDate\", { endDate })\r\n      .groupBy(\"issue.priority\")\r\n      .getRawMany()\r\n\r\n    const issuesByPriority: Record<string, number> = {}\r\n    for (const result of results) {\r\n      issuesByPriority[result.priority] = Number.parseInt(result.count)\r\n    }\r\n\r\n    return issuesByPriority\r\n  }\r\n\r\n  private generateRecommendations(\r\n    overallScore: number,\r\n    categoryScores: Record<string, number>,\r\n    criticalIssues: number,\r\n  ): {\r\n    immediate: string[]\r\n    shortTerm: string[]\r\n    longTerm: string[]\r\n  } {\r\n    const recommendations = {\r\n      immediate: [],\r\n      shortTerm: [],\r\n      longTerm: [],\r\n    }\r\n\r\n    // Immediate recommendations\r\n    if (criticalIssues > 0) {\r\n      recommendations.immediate.push(`Address ${criticalIssues} critical data quality issues immediately`)\r\n    }\r\n\r\n    if (overallScore < 70) {\r\n      recommendations.immediate.push(\"Overall data quality score is below acceptable threshold (70%)\")\r\n    }\r\n\r\n    // Short-term recommendations\r\n    const underPerformingCategories = Object.entries(categoryScores)\r\n      .filter(([, score]) => score < 80)\r\n      .map(([category]) => category)\r\n\r\n    if (underPerformingCategories.length > 0) {\r\n      recommendations.shortTerm.push(`Focus on improving ${underPerformingCategories.join(\", \")} categories`)\r\n    }\r\n\r\n    recommendations.shortTerm.push(\"Implement automated data quality monitoring\")\r\n    recommendations.shortTerm.push(\"Establish data quality SLAs and thresholds\")\r\n\r\n    // Long-term recommendations\r\n    recommendations.longTerm.push(\"Develop comprehensive data governance framework\")\r\n    recommendations.longTerm.push(\"Implement data quality training for data stewards\")\r\n    recommendations.longTerm.push(\"Establish data quality metrics and KPIs\")\r\n    recommendations.longTerm.push(\"Create data quality dashboard for stakeholders\")\r\n\r\n    return recommendations\r\n  }\r\n\r\n  async getReports(filters: {\r\n    reportType?: ReportType\r\n    status?: ReportStatus\r\n    startDate?: Date\r\n    endDate?: Date\r\n  }): Promise<DataQualityReport[]> {\r\n    const query = this.reportRepository.createQueryBuilder(\"report\")\r\n\r\n    if (filters.reportType) {\r\n      query.andWhere(\"report.reportType = :reportType\", { reportType: filters.reportType })\r\n    }\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"report.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.startDate) {\r\n      query.andWhere(\"report.createdAt >= :startDate\", { startDate: filters.startDate })\r\n    }\r\n\r\n    if (filters.endDate) {\r\n      query.andWhere(\"report.createdAt <= :endDate\", { endDate: filters.endDate })\r\n    }\r\n\r\n    return query.orderBy(\"report.createdAt\", \"DESC\").getMany()\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\r\n  async generateDailyReport(): Promise<void> {\r\n    this.logger.log(\"Generating daily data quality report\")\r\n\r\n    try {\r\n      const endDate = new Date()\r\n      const startDate = new Date()\r\n      startDate.setDate(startDate.getDate() - 1)\r\n\r\n      await this.generateReport(ReportType.DAILY, startDate, endDate)\r\n      this.logger.log(\"Daily report generated successfully\")\r\n    } catch (error) {\r\n      this.logger.error(`Daily report generation failed: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_WEEK)\r\n  async generateWeeklyReport(): Promise<void> {\r\n    this.logger.log(\"Generating weekly data quality report\")\r\n\r\n    try {\r\n      const endDate = new Date()\r\n      const startDate = new Date()\r\n      startDate.setDate(startDate.getDate() - 7)\r\n\r\n      await this.generateReport(ReportType.WEEKLY, startDate, endDate)\r\n      this.logger.log(\"Weekly report generated successfully\")\r\n    } catch (error) {\r\n      this.logger.error(`Weekly report generation failed: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT)\r\n  async generateMonthlyReport(): Promise<void> {\r\n    this.logger.log(\"Generating monthly data quality report\")\r\n\r\n    try {\r\n      const endDate = new Date()\r\n      const startDate = new Date()\r\n      startDate.setMonth(startDate.getMonth() - 1)\r\n\r\n      await this.generateReport(ReportType.MONTHLY, startDate, endDate)\r\n      this.logger.log(\"Monthly report generated successfully\")\r\n    } catch (error) {\r\n      this.logger.error(`Monthly report generation failed: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n}\r\n"],"version":3}