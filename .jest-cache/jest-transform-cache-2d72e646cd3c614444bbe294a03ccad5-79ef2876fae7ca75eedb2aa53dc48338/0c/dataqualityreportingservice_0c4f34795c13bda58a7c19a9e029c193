25a8bd229eceb65359f23d78953f68b3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataQualityReportingService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataQualityReportingService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
const data_quality_report_entity_1 = require("../entities/data-quality-report.entity");
let DataQualityReportingService = DataQualityReportingService_1 = class DataQualityReportingService {
    constructor(reportRepository, metricRepository, issueRepository, monitoringService) {
        this.reportRepository = reportRepository;
        this.metricRepository = metricRepository;
        this.issueRepository = issueRepository;
        this.monitoringService = monitoringService;
        this.logger = new common_1.Logger(DataQualityReportingService_1.name);
    }
    async generateReport(reportType, startDate, endDate) {
        try {
            const report = this.reportRepository.create({
                name: `Data Quality Report - ${reportType}`,
                reportType,
                status: data_quality_report_entity_1.ReportStatus.GENERATING,
                reportDate: new Date(),
                startDate,
                endDate,
                summary: {},
                metrics: {},
            });
            const savedReport = await this.reportRepository.save(report);
            // Generate report content
            const reportData = await this.generateReportData(startDate, endDate);
            savedReport.summary = reportData.summary;
            savedReport.metrics = reportData.metrics;
            savedReport.issues = reportData.issues;
            savedReport.recommendations = reportData.recommendations;
            savedReport.status = data_quality_report_entity_1.ReportStatus.COMPLETED;
            return this.reportRepository.save(savedReport);
        }
        catch (error) {
            this.logger.error(`Report generation failed: ${error.message}`, error.stack);
            throw error;
        }
    }
    async generateReportData(startDate, endDate) {
        // Get overall metrics
        const overallScore = await this.calculateOverallScore(startDate, endDate);
        const categoryScores = await this.calculateCategoryScores(startDate, endDate);
        // Get issue statistics
        const totalIssues = await this.issueRepository.count({
            where: {
                createdAt: new Date(startDate.getTime()),
            },
        });
        const resolvedIssues = await this.issueRepository.count({
            where: {
                status: "resolved",
                resolvedAt: new Date(startDate.getTime()),
            },
        });
        const criticalIssues = await this.issueRepository.count({
            where: {
                priority: "critical",
                status: "open",
            },
        });
        // Get top issues
        const topIssues = await this.issueRepository.find({
            where: {
                createdAt: new Date(startDate.getTime()),
            },
            order: { occurrenceCount: "DESC" },
            take: 10,
        });
        // Get metric trends
        const metricTrends = await this.getMetricTrends(startDate, endDate);
        // Generate recommendations
        const recommendations = this.generateRecommendations(overallScore, categoryScores, criticalIssues);
        return {
            summary: {
                reportPeriod: {
                    startDate: startDate.toISOString(),
                    endDate: endDate.toISOString(),
                },
                overallScore,
                totalIssues,
                resolvedIssues,
                criticalIssues,
                resolutionRate: totalIssues > 0 ? (resolvedIssues / totalIssues) * 100 : 100,
            },
            metrics: {
                categoryScores,
                trends: metricTrends,
                topPerformingCategories: this.getTopCategories(categoryScores, true),
                underPerformingCategories: this.getTopCategories(categoryScores, false),
            },
            issues: {
                topIssues: topIssues.map((issue) => ({
                    id: issue.id,
                    title: issue.title,
                    priority: issue.priority,
                    occurrenceCount: issue.occurrenceCount,
                    entityType: issue.entityType,
                })),
                issuesByCategory: await this.getIssuesByCategory(startDate, endDate),
                issuesByPriority: await this.getIssuesByPriority(startDate, endDate),
            },
            recommendations: {
                immediate: recommendations.immediate,
                shortTerm: recommendations.shortTerm,
                longTerm: recommendations.longTerm,
            },
        };
    }
    async calculateOverallScore(startDate, endDate) {
        const result = await this.metricRepository
            .createQueryBuilder("metric")
            .select("AVG(metric.value)", "avgScore")
            .where("metric.timestamp >= :startDate", { startDate })
            .andWhere("metric.timestamp <= :endDate", { endDate })
            .getRawOne();
        return Number.parseFloat(result.avgScore) || 0;
    }
    async calculateCategoryScores(startDate, endDate) {
        const results = await this.metricRepository
            .createQueryBuilder("metric")
            .select("metric.metricCategory", "category")
            .addSelect("AVG(metric.value)", "avgScore")
            .where("metric.timestamp >= :startDate", { startDate })
            .andWhere("metric.timestamp <= :endDate", { endDate })
            .groupBy("metric.metricCategory")
            .getRawMany();
        const categoryScores = {};
        for (const result of results) {
            categoryScores[result.category] = Number.parseFloat(result.avgScore) || 0;
        }
        return categoryScores;
    }
    async getMetricTrends(startDate, endDate) {
        const results = await this.metricRepository
            .createQueryBuilder("metric")
            .select("DATE(metric.timestamp)", "date")
            .addSelect("metric.metricCategory", "category")
            .addSelect("AVG(metric.value)", "score")
            .where("metric.timestamp >= :startDate", { startDate })
            .andWhere("metric.timestamp <= :endDate", { endDate })
            .groupBy("DATE(metric.timestamp), metric.metricCategory")
            .orderBy("DATE(metric.timestamp)", "ASC")
            .getRawMany();
        return results.map((result) => ({
            date: result.date,
            category: result.category,
            score: Number.parseFloat(result.score) || 0,
        }));
    }
    getTopCategories(categoryScores, topPerforming) {
        const sorted = Object.entries(categoryScores)
            .map(([category, score]) => ({ category, score }))
            .sort((a, b) => (topPerforming ? b.score - a.score : a.score - b.score));
        return sorted.slice(0, 3);
    }
    async getIssuesByCategory(startDate, endDate) {
        const results = await this.issueRepository
            .createQueryBuilder("issue")
            .select("issue.entityType", "category")
            .addSelect("COUNT(*)", "count")
            .where("issue.createdAt >= :startDate", { startDate })
            .andWhere("issue.createdAt <= :endDate", { endDate })
            .groupBy("issue.entityType")
            .getRawMany();
        const issuesByCategory = {};
        for (const result of results) {
            issuesByCategory[result.category] = Number.parseInt(result.count);
        }
        return issuesByCategory;
    }
    async getIssuesByPriority(startDate, endDate) {
        const results = await this.issueRepository
            .createQueryBuilder("issue")
            .select("issue.priority", "priority")
            .addSelect("COUNT(*)", "count")
            .where("issue.createdAt >= :startDate", { startDate })
            .andWhere("issue.createdAt <= :endDate", { endDate })
            .groupBy("issue.priority")
            .getRawMany();
        const issuesByPriority = {};
        for (const result of results) {
            issuesByPriority[result.priority] = Number.parseInt(result.count);
        }
        return issuesByPriority;
    }
    generateRecommendations(overallScore, categoryScores, criticalIssues) {
        const recommendations = {
            immediate: [],
            shortTerm: [],
            longTerm: [],
        };
        // Immediate recommendations
        if (criticalIssues > 0) {
            recommendations.immediate.push(`Address ${criticalIssues} critical data quality issues immediately`);
        }
        if (overallScore < 70) {
            recommendations.immediate.push("Overall data quality score is below acceptable threshold (70%)");
        }
        // Short-term recommendations
        const underPerformingCategories = Object.entries(categoryScores)
            .filter(([, score]) => score < 80)
            .map(([category]) => category);
        if (underPerformingCategories.length > 0) {
            recommendations.shortTerm.push(`Focus on improving ${underPerformingCategories.join(", ")} categories`);
        }
        recommendations.shortTerm.push("Implement automated data quality monitoring");
        recommendations.shortTerm.push("Establish data quality SLAs and thresholds");
        // Long-term recommendations
        recommendations.longTerm.push("Develop comprehensive data governance framework");
        recommendations.longTerm.push("Implement data quality training for data stewards");
        recommendations.longTerm.push("Establish data quality metrics and KPIs");
        recommendations.longTerm.push("Create data quality dashboard for stakeholders");
        return recommendations;
    }
    async getReports(filters) {
        const query = this.reportRepository.createQueryBuilder("report");
        if (filters.reportType) {
            query.andWhere("report.reportType = :reportType", { reportType: filters.reportType });
        }
        if (filters.status) {
            query.andWhere("report.status = :status", { status: filters.status });
        }
        if (filters.startDate) {
            query.andWhere("report.createdAt >= :startDate", { startDate: filters.startDate });
        }
        if (filters.endDate) {
            query.andWhere("report.createdAt <= :endDate", { endDate: filters.endDate });
        }
        return query.orderBy("report.createdAt", "DESC").getMany();
    }
    async generateDailyReport() {
        this.logger.log("Generating daily data quality report");
        try {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 1);
            await this.generateReport(data_quality_report_entity_1.ReportType.DAILY, startDate, endDate);
            this.logger.log("Daily report generated successfully");
        }
        catch (error) {
            this.logger.error(`Daily report generation failed: ${error.message}`, error.stack);
        }
    }
    async generateWeeklyReport() {
        this.logger.log("Generating weekly data quality report");
        try {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 7);
            await this.generateReport(data_quality_report_entity_1.ReportType.WEEKLY, startDate, endDate);
            this.logger.log("Weekly report generated successfully");
        }
        catch (error) {
            this.logger.error(`Weekly report generation failed: ${error.message}`, error.stack);
        }
    }
    async generateMonthlyReport() {
        this.logger.log("Generating monthly data quality report");
        try {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setMonth(startDate.getMonth() - 1);
            await this.generateReport(data_quality_report_entity_1.ReportType.MONTHLY, startDate, endDate);
            this.logger.log("Monthly report generated successfully");
        }
        catch (error) {
            this.logger.error(`Monthly report generation failed: ${error.message}`, error.stack);
        }
    }
};
exports.DataQualityReportingService = DataQualityReportingService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], DataQualityReportingService.prototype, "generateDailyReport", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_WEEK),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], DataQualityReportingService.prototype, "generateWeeklyReport", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], DataQualityReportingService.prototype, "generateMonthlyReport", null);
exports.DataQualityReportingService = DataQualityReportingService = DataQualityReportingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], DataQualityReportingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,