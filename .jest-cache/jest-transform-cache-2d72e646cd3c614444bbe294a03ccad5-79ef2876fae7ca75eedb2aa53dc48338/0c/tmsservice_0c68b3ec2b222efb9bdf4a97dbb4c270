17bed53b91a4bd26b77782125b06b80f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TmsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TmsService = void 0;
const common_1 = require("@nestjs/common");
let TmsService = TmsService_1 = class TmsService {
    constructor(configService) {
        this.configService = configService;
        this.logger = new common_1.Logger(TmsService_1.name);
        this.apiUrl = this.configService.get("TMS_API_URL", "");
        this.apiKey = this.configService.get("TMS_API_KEY", "");
        this.projectId = this.configService.get("TMS_PROJECT_ID", "");
    }
    async getTranslations(locale, namespace) {
        if (!this.isConfigured()) {
            this.logger.warn("TMS not configured, returning empty translations");
            return [];
        }
        try {
            const url = new URL(`${this.apiUrl}/projects/${this.projectId}/translations`);
            url.searchParams.set("locale", locale);
            if (namespace) {
                url.searchParams.set("namespace", namespace);
            }
            const response = await fetch(url.toString(), {
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    "Content-Type": "application/json",
                },
            });
            if (!response.ok) {
                throw new Error(`TMS API error: ${response.status} ${response.statusText}`);
            }
            const data = await response.json();
            return this.mapTmsResponse(data);
        }
        catch (error) {
            this.logger.error(`Failed to fetch translations from TMS:`, error);
            throw error;
        }
    }
    async uploadTranslations(translations) {
        if (!this.isConfigured()) {
            this.logger.warn("TMS not configured, skipping upload");
            return;
        }
        try {
            const response = await fetch(`${this.apiUrl}/projects/${this.projectId}/translations`, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    translations: translations.map(this.mapToTmsFormat),
                }),
            });
            if (!response.ok) {
                throw new Error(`TMS API error: ${response.status} ${response.statusText}`);
            }
            this.logger.log(`Uploaded ${translations.length} translations to TMS`);
        }
        catch (error) {
            this.logger.error(`Failed to upload translations to TMS:`, error);
            throw error;
        }
    }
    async getProject() {
        if (!this.isConfigured()) {
            return null;
        }
        try {
            const response = await fetch(`${this.apiUrl}/projects/${this.projectId}`, {
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    "Content-Type": "application/json",
                },
            });
            if (!response.ok) {
                throw new Error(`TMS API error: ${response.status} ${response.statusText}`);
            }
            return response.json();
        }
        catch (error) {
            this.logger.error(`Failed to fetch project from TMS:`, error);
            return null;
        }
    }
    async requestTranslation(key, sourceLocale, targetLocales, context) {
        if (!this.isConfigured()) {
            this.logger.warn("TMS not configured, skipping translation request");
            return;
        }
        try {
            const response = await fetch(`${this.apiUrl}/projects/${this.projectId}/translation-requests`, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    key,
                    sourceLocale,
                    targetLocales,
                    context,
                }),
            });
            if (!response.ok) {
                throw new Error(`TMS API error: ${response.status} ${response.statusText}`);
            }
            this.logger.log(`Requested translation for key: ${key}`);
        }
        catch (error) {
            this.logger.error(`Failed to request translation from TMS:`, error);
            throw error;
        }
    }
    async getTranslationStatus(key, locale) {
        if (!this.isConfigured()) {
            return null;
        }
        try {
            const response = await fetch(`${this.apiUrl}/projects/${this.projectId}/translations/${key}/status?locale=${locale}`, {
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    "Content-Type": "application/json",
                },
            });
            if (!response.ok) {
                return null;
            }
            const data = await response.json();
            return data.status;
        }
        catch (error) {
            this.logger.error(`Failed to get translation status from TMS:`, error);
            return null;
        }
    }
    isConfigured() {
        return !!(this.apiUrl && this.apiKey && this.projectId);
    }
    mapTmsResponse(data) {
        // Map TMS-specific response format to our internal format
        if (!data.translations || !Array.isArray(data.translations)) {
            return [];
        }
        return data.translations.map((item) => ({
            key: item.key || item.identifier,
            locale: item.locale || item.language,
            namespace: item.namespace || item.file || "common",
            value: item.value || item.translation,
            description: item.description || item.comment,
            context: item.context,
            metadata: {
                tmsId: item.id,
                lastModified: item.updatedAt,
                status: item.status,
            },
        }));
    }
    mapToTmsFormat(translation) {
        // Map our internal format to TMS-specific format
        return {
            key: translation.key,
            locale: translation.locale,
            namespace: translation.namespace,
            value: translation.value,
            description: translation.description,
            context: translation.context,
        };
    }
};
exports.TmsService = TmsService;
exports.TmsService = TmsService = TmsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object])
], TmsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,