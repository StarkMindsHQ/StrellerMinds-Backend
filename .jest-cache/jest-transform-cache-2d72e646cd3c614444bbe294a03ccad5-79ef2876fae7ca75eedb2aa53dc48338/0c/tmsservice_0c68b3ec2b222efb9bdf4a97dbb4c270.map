{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\tms.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\tms.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { ConfigService } from \"@nestjs/config\"\r\n\r\nexport interface TmsTranslation {\r\n  key: string\r\n  locale: string\r\n  namespace: string\r\n  value: string\r\n  description?: string\r\n  context?: string\r\n  metadata?: any\r\n}\r\n\r\nexport interface TmsProject {\r\n  id: string\r\n  name: string\r\n  sourceLocale: string\r\n  targetLocales: string[]\r\n  status: string\r\n}\r\n\r\n@Injectable()\r\nexport class TmsService {\r\n  private readonly logger = new Logger(TmsService.name)\r\n  private readonly apiUrl: string\r\n  private readonly apiKey: string\r\n  private readonly projectId: string\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    this.apiUrl = this.configService.get<string>(\"TMS_API_URL\", \"\")\r\n    this.apiKey = this.configService.get<string>(\"TMS_API_KEY\", \"\")\r\n    this.projectId = this.configService.get<string>(\"TMS_PROJECT_ID\", \"\")\r\n  }\r\n\r\n  async getTranslations(locale: string, namespace?: string): Promise<TmsTranslation[]> {\r\n    if (!this.isConfigured()) {\r\n      this.logger.warn(\"TMS not configured, returning empty translations\")\r\n      return []\r\n    }\r\n\r\n    try {\r\n      const url = new URL(`${this.apiUrl}/projects/${this.projectId}/translations`)\r\n      url.searchParams.set(\"locale\", locale)\r\n      if (namespace) {\r\n        url.searchParams.set(\"namespace\", namespace)\r\n      }\r\n\r\n      const response = await fetch(url.toString(), {\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`TMS API error: ${response.status} ${response.statusText}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      return this.mapTmsResponse(data)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to fetch translations from TMS:`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async uploadTranslations(translations: TmsTranslation[]): Promise<void> {\r\n    if (!this.isConfigured()) {\r\n      this.logger.warn(\"TMS not configured, skipping upload\")\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/projects/${this.projectId}/translations`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          translations: translations.map(this.mapToTmsFormat),\r\n        }),\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`TMS API error: ${response.status} ${response.statusText}`)\r\n      }\r\n\r\n      this.logger.log(`Uploaded ${translations.length} translations to TMS`)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to upload translations to TMS:`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getProject(): Promise<TmsProject | null> {\r\n    if (!this.isConfigured()) {\r\n      return null\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/projects/${this.projectId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`TMS API error: ${response.status} ${response.statusText}`)\r\n      }\r\n\r\n      return response.json()\r\n    } catch (error) {\r\n      this.logger.error(`Failed to fetch project from TMS:`, error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  async requestTranslation(\r\n    key: string,\r\n    sourceLocale: string,\r\n    targetLocales: string[],\r\n    context?: string,\r\n  ): Promise<void> {\r\n    if (!this.isConfigured()) {\r\n      this.logger.warn(\"TMS not configured, skipping translation request\")\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/projects/${this.projectId}/translation-requests`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          key,\r\n          sourceLocale,\r\n          targetLocales,\r\n          context,\r\n        }),\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`TMS API error: ${response.status} ${response.statusText}`)\r\n      }\r\n\r\n      this.logger.log(`Requested translation for key: ${key}`)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to request translation from TMS:`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getTranslationStatus(key: string, locale: string): Promise<string | null> {\r\n    if (!this.isConfigured()) {\r\n      return null\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${this.apiUrl}/projects/${this.projectId}/translations/${key}/status?locale=${locale}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        },\r\n      )\r\n\r\n      if (!response.ok) {\r\n        return null\r\n      }\r\n\r\n      const data = await response.json()\r\n      return data.status\r\n    } catch (error) {\r\n      this.logger.error(`Failed to get translation status from TMS:`, error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  private isConfigured(): boolean {\r\n    return !!(this.apiUrl && this.apiKey && this.projectId)\r\n  }\r\n\r\n  private mapTmsResponse(data: any): TmsTranslation[] {\r\n    // Map TMS-specific response format to our internal format\r\n    if (!data.translations || !Array.isArray(data.translations)) {\r\n      return []\r\n    }\r\n\r\n    return data.translations.map((item: any) => ({\r\n      key: item.key || item.identifier,\r\n      locale: item.locale || item.language,\r\n      namespace: item.namespace || item.file || \"common\",\r\n      value: item.value || item.translation,\r\n      description: item.description || item.comment,\r\n      context: item.context,\r\n      metadata: {\r\n        tmsId: item.id,\r\n        lastModified: item.updatedAt,\r\n        status: item.status,\r\n      },\r\n    }))\r\n  }\r\n\r\n  private mapToTmsFormat(translation: TmsTranslation): any {\r\n    // Map our internal format to TMS-specific format\r\n    return {\r\n      key: translation.key,\r\n      locale: translation.locale,\r\n      namespace: translation.namespace,\r\n      value: translation.value,\r\n      description: translation.description,\r\n      context: translation.context,\r\n    }\r\n  }\r\n}\r\n"],"version":3}