{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\ml-personalization.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\recommendation\\services\\ml-personalization.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserInteraction, InteractionType } from '../entities/user-interaction.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { Course } from '../../courses/entities/course.entity';\r\nimport { Recommendation, RecommendationType, RecommendationReason } from '../entities/recommendation.entity';\r\nimport { RecommendationContext } from './recommendation-engine.service';\r\n\r\ninterface MLFeatures {\r\n  userEmbedding: number[];\r\n  contentEmbedding: number[];\r\n  interactionHistory: Record<string, number>;\r\n  skillVector: number[];\r\n  preferenceVector: number[];\r\n  contextualFeatures: Record<string, number>;\r\n}\r\n\r\ninterface PersonalizationModel {\r\n  version: string;\r\n  weights: number[][];\r\n  biases: number[];\r\n  featureNames: string[];\r\n  lastTrained: Date;\r\n}\r\n\r\n@Injectable()\r\nexport class MLPersonalizationService {\r\n  private readonly logger = new Logger(MLPersonalizationService.name);\r\n  private model: PersonalizationModel | null = null;\r\n  private readonly EMBEDDING_SIZE = 64;\r\n  private readonly SKILL_VECTOR_SIZE = 50;\r\n  private readonly PREFERENCE_VECTOR_SIZE = 30;\r\n\r\n  constructor(\r\n    @InjectRepository(UserInteraction)\r\n    private interactionRepository: Repository<UserInteraction>,\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n    @InjectRepository(Course)\r\n    private courseRepository: Repository<Course>,\r\n  ) {\r\n    this.initializeModel();\r\n  }\r\n\r\n  /**\r\n   * Generate personalized recommendations using ML models\r\n   */\r\n  async generatePersonalizedRecommendations(\r\n    context: RecommendationContext,\r\n    options: { limit: number; minConfidence: number },\r\n  ): Promise<Partial<Recommendation>[]> {\r\n    try {\r\n      this.logger.log(`Generating ML-based recommendations for user ${context.userId}`);\r\n\r\n      // Extract features for the user\r\n      const userFeatures = await this.extractUserFeatures(context);\r\n      \r\n      // Get candidate courses\r\n      const candidateCourses = await this.getCandidateCourses(context, options.limit * 3);\r\n      \r\n      // Score each candidate course\r\n      const scoredRecommendations: Array<{\r\n        course: Course;\r\n        score: number;\r\n        features: MLFeatures;\r\n      }> = [];\r\n\r\n      for (const course of candidateCourses) {\r\n        const contentFeatures = await this.extractContentFeatures(course);\r\n        const combinedFeatures = this.combineFeatures(userFeatures, contentFeatures, context);\r\n        const score = await this.predictScore(combinedFeatures);\r\n        \r\n        if (score >= options.minConfidence) {\r\n          scoredRecommendations.push({\r\n            course,\r\n            score,\r\n            features: combinedFeatures,\r\n          });\r\n        }\r\n      }\r\n\r\n      // Sort by score and take top recommendations\r\n      scoredRecommendations.sort((a, b) => b.score - a.score);\r\n      const topRecommendations = scoredRecommendations.slice(0, options.limit);\r\n\r\n      // Convert to recommendation format\r\n      return topRecommendations.map(({ course, score, features }) => ({\r\n        userId: context.userId,\r\n        courseId: course.id,\r\n        recommendationType: RecommendationType.CONTENT_BASED,\r\n        reason: this.determineRecommendationReason(features, context),\r\n        confidenceScore: score,\r\n        relevanceScore: score * 0.9, // Slight adjustment for relevance\r\n        priority: this.calculateMLPriority(score, features),\r\n        explanation: this.generateExplanation(course, features, score),\r\n        metadata: {\r\n          algorithmUsed: 'ml_personalization',\r\n          modelVersion: this.model?.version || 'v1.0',\r\n          features: {\r\n            userEmbedding: features.userEmbedding.slice(0, 5), // Store first 5 dimensions\r\n            contentEmbedding: features.contentEmbedding.slice(0, 5),\r\n            topSkills: this.getTopSkillsFromVector(features.skillVector),\r\n            topPreferences: this.getTopPreferencesFromVector(features.preferenceVector),\r\n          },\r\n          mlScore: score,\r\n        },\r\n        mlFeatures: {\r\n          userEmbedding: features.userEmbedding,\r\n          contentEmbedding: features.contentEmbedding,\r\n          interactionHistory: features.interactionHistory,\r\n          skillVector: features.skillVector,\r\n          preferenceVector: features.preferenceVector,\r\n        },\r\n      }));\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error generating ML recommendations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update model with user feedback\r\n   */\r\n  async updateModelWithFeedback(userId: string, recommendationId: string, score: number): Promise<void> {\r\n    try {\r\n      // Store feedback for batch training\r\n      await this.storeFeedbackForTraining(userId, recommendationId, score);\r\n      \r\n      // If we have enough feedback, trigger model retraining\r\n      const feedbackCount = await this.getFeedbackCount();\r\n      if (feedbackCount % 1000 === 0) { // Retrain every 1000 feedback points\r\n        await this.retrainModel();\r\n      }\r\n    } catch (error) {\r\n      this.logger.error('Error updating model with feedback:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract user features for ML model\r\n   */\r\n  private async extractUserFeatures(context: RecommendationContext): Promise<MLFeatures> {\r\n    const { userId, userProfile, recentInteractions } = context;\r\n\r\n    // User embedding based on interaction history\r\n    const userEmbedding = await this.generateUserEmbedding(userId, recentInteractions || []);\r\n    \r\n    // Skill vector based on user's current skills\r\n    const skillVector = this.generateSkillVector(userProfile?.skills || []);\r\n    \r\n    // Preference vector based on user preferences and behavior\r\n    const preferenceVector = await this.generatePreferenceVector(userId, recentInteractions || []);\r\n    \r\n    // Interaction history features\r\n    const interactionHistory = this.generateInteractionHistoryFeatures(recentInteractions || []);\r\n    \r\n    // Contextual features\r\n    const contextualFeatures = this.generateContextualFeatures(context);\r\n\r\n    return {\r\n      userEmbedding,\r\n      contentEmbedding: [], // Will be filled when combining with content\r\n      interactionHistory,\r\n      skillVector,\r\n      preferenceVector,\r\n      contextualFeatures,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Extract content features for courses\r\n   */\r\n  private async extractContentFeatures(course: Course): Promise<Partial<MLFeatures>> {\r\n    // Content embedding based on course metadata\r\n    const contentEmbedding = this.generateContentEmbedding(course);\r\n    \r\n    // Skill vector for course requirements/outcomes\r\n    const skillVector = this.generateSkillVector(course.skills || []);\r\n\r\n    return {\r\n      contentEmbedding,\r\n      skillVector,\r\n      interactionHistory: {},\r\n      userEmbedding: [],\r\n      preferenceVector: [],\r\n      contextualFeatures: {},\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Combine user and content features\r\n   */\r\n  private combineFeatures(\r\n    userFeatures: MLFeatures,\r\n    contentFeatures: Partial<MLFeatures>,\r\n    context: RecommendationContext,\r\n  ): MLFeatures {\r\n    return {\r\n      userEmbedding: userFeatures.userEmbedding,\r\n      contentEmbedding: contentFeatures.contentEmbedding || [],\r\n      interactionHistory: userFeatures.interactionHistory,\r\n      skillVector: this.combineSkillVectors(userFeatures.skillVector, contentFeatures.skillVector || []),\r\n      preferenceVector: userFeatures.preferenceVector,\r\n      contextualFeatures: {\r\n        ...userFeatures.contextualFeatures,\r\n        skillAlignment: this.calculateSkillAlignment(userFeatures.skillVector, contentFeatures.skillVector || []),\r\n        contentPopularity: Math.random(), // Placeholder for actual popularity score\r\n        userExperience: this.calculateUserExperience(context),\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict score using ML model\r\n   */\r\n  private async predictScore(features: MLFeatures): Promise<number> {\r\n    if (!this.model) {\r\n      // Fallback to simple heuristic if model not available\r\n      return this.calculateHeuristicScore(features);\r\n    }\r\n\r\n    try {\r\n      // Convert features to input vector\r\n      const inputVector = this.featuresToVector(features);\r\n      \r\n      // Apply model weights and biases\r\n      let score = 0;\r\n      for (let i = 0; i < inputVector.length; i++) {\r\n        for (let j = 0; j < this.model.weights[i].length; j++) {\r\n          score += inputVector[i] * this.model.weights[i][j];\r\n        }\r\n      }\r\n      \r\n      // Add bias and apply sigmoid activation\r\n      score += this.model.biases[0];\r\n      score = 1 / (1 + Math.exp(-score));\r\n      \r\n      return Math.max(0, Math.min(1, score));\r\n    } catch (error) {\r\n      this.logger.error('Error in ML prediction:', error);\r\n      return this.calculateHeuristicScore(features);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate user embedding from interaction history\r\n   */\r\n  private async generateUserEmbedding(userId: string, interactions: UserInteraction[]): Promise<number[]> {\r\n    const embedding = new Array(this.EMBEDDING_SIZE).fill(0);\r\n    \r\n    // Simple approach: aggregate interaction patterns\r\n    const interactionCounts = new Map<InteractionType, number>();\r\n    const courseCounts = new Map<string, number>();\r\n    \r\n    interactions.forEach(interaction => {\r\n      interactionCounts.set(\r\n        interaction.interactionType,\r\n        (interactionCounts.get(interaction.interactionType) || 0) + 1\r\n      );\r\n      \r\n      if (interaction.courseId) {\r\n        courseCounts.set(\r\n          interaction.courseId,\r\n          (courseCounts.get(interaction.courseId) || 0) + 1\r\n        );\r\n      }\r\n    });\r\n\r\n    // Encode interaction patterns into embedding\r\n    let idx = 0;\r\n    for (const [type, count] of interactionCounts.entries()) {\r\n      if (idx < this.EMBEDDING_SIZE) {\r\n        embedding[idx] = Math.log(count + 1) / 10; // Normalize\r\n        idx++;\r\n      }\r\n    }\r\n\r\n    // Add randomness for diversity (in real implementation, this would be learned)\r\n    for (let i = idx; i < this.EMBEDDING_SIZE; i++) {\r\n      embedding[i] = (Math.random() - 0.5) * 0.1;\r\n    }\r\n\r\n    return embedding;\r\n  }\r\n\r\n  /**\r\n   * Generate content embedding for courses\r\n   */\r\n  private generateContentEmbedding(course: Course): number[] {\r\n    const embedding = new Array(this.EMBEDDING_SIZE).fill(0);\r\n    \r\n    // Encode course properties\r\n    embedding[0] = course.difficulty === 'beginner' ? 0.2 : course.difficulty === 'intermediate' ? 0.5 : 0.8;\r\n    embedding[1] = Math.log((course.duration || 60) + 1) / 10;\r\n    embedding[2] = (course.rating || 0) / 5;\r\n    embedding[3] = course.isPaid ? 1 : 0;\r\n    \r\n    // Encode tags/categories (simplified)\r\n    const tags = course.tags || [];\r\n    for (let i = 0; i < Math.min(tags.length, 10); i++) {\r\n      embedding[4 + i] = this.hashStringToFloat(tags[i]);\r\n    }\r\n\r\n    // Fill remaining with course-specific features\r\n    for (let i = 14; i < this.EMBEDDING_SIZE; i++) {\r\n      embedding[i] = (Math.random() - 0.5) * 0.1;\r\n    }\r\n\r\n    return embedding;\r\n  }\r\n\r\n  /**\r\n   * Generate skill vector\r\n   */\r\n  private generateSkillVector(skills: string[]): number[] {\r\n    const vector = new Array(this.SKILL_VECTOR_SIZE).fill(0);\r\n    \r\n    // Map skills to vector positions (simplified)\r\n    skills.forEach(skill => {\r\n      const index = this.hashStringToIndex(skill, this.SKILL_VECTOR_SIZE);\r\n      vector[index] = Math.min(vector[index] + 0.2, 1.0);\r\n    });\r\n\r\n    return vector;\r\n  }\r\n\r\n  /**\r\n   * Generate preference vector from user behavior\r\n   */\r\n  private async generatePreferenceVector(userId: string, interactions: UserInteraction[]): Promise<number[]> {\r\n    const vector = new Array(this.PREFERENCE_VECTOR_SIZE).fill(0);\r\n    \r\n    // Analyze interaction patterns to infer preferences\r\n    const preferences = new Map<string, number>();\r\n    \r\n    interactions.forEach(interaction => {\r\n      const weight = interaction.weightedValue;\r\n      const course = interaction.course;\r\n      \r\n      if (course?.tags) {\r\n        course.tags.forEach(tag => {\r\n          preferences.set(tag, (preferences.get(tag) || 0) + weight);\r\n        });\r\n      }\r\n    });\r\n\r\n    // Convert preferences to vector\r\n    let idx = 0;\r\n    for (const [preference, score] of preferences.entries()) {\r\n      if (idx < this.PREFERENCE_VECTOR_SIZE) {\r\n        vector[idx] = Math.tanh(score / 10); // Normalize\r\n        idx++;\r\n      }\r\n    }\r\n\r\n    return vector;\r\n  }\r\n\r\n  /**\r\n   * Generate interaction history features\r\n   */\r\n  private generateInteractionHistoryFeatures(interactions: UserInteraction[]): Record<string, number> {\r\n    const features: Record<string, number> = {};\r\n    \r\n    // Count interactions by type\r\n    Object.values(InteractionType).forEach(type => {\r\n      features[`${type}_count`] = interactions.filter(i => i.interactionType === type).length;\r\n    });\r\n\r\n    // Time-based features\r\n    const now = new Date();\r\n    features.recent_activity = interactions.filter(i => \r\n      (now.getTime() - i.createdAt.getTime()) < 7 * 24 * 60 * 60 * 1000\r\n    ).length;\r\n\r\n    features.total_interactions = interactions.length;\r\n    features.avg_session_length = this.calculateAverageSessionLength(interactions);\r\n    features.completion_rate = this.calculateCompletionRate(interactions);\r\n\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Generate contextual features\r\n   */\r\n  private generateContextualFeatures(context: RecommendationContext): Record<string, number> {\r\n    const features: Record<string, number> = {};\r\n    \r\n    features.time_of_day = new Date().getHours() / 24;\r\n    features.day_of_week = new Date().getDay() / 7;\r\n    features.is_mobile = context.deviceType === 'mobile' ? 1 : 0;\r\n    features.session_length = Math.random(); // Placeholder\r\n    \r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get candidate courses for recommendation\r\n   */\r\n  private async getCandidateCourses(context: RecommendationContext, limit: number): Promise<Course[]> {\r\n    // Get courses user hasn't interacted with recently\r\n    const recentCourseIds = context.recentInteractions\r\n      ?.filter(i => i.courseId)\r\n      .map(i => i.courseId) || [];\r\n\r\n    const queryBuilder = this.courseRepository.createQueryBuilder('course')\r\n      .where('course.isActive = :isActive', { isActive: true });\r\n\r\n    if (recentCourseIds.length > 0) {\r\n      queryBuilder.andWhere('course.id NOT IN (:...recentCourseIds)', { recentCourseIds });\r\n    }\r\n\r\n    return queryBuilder\r\n      .orderBy('RANDOM()')\r\n      .take(limit)\r\n      .getMany();\r\n  }\r\n\r\n  /**\r\n   * Initialize ML model\r\n   */\r\n  private initializeModel(): void {\r\n    // In a real implementation, this would load a trained model\r\n    // For now, we'll use a simple placeholder model\r\n    this.model = {\r\n      version: 'v1.0',\r\n      weights: Array(100).fill(0).map(() => Array(10).fill(0).map(() => Math.random() - 0.5)),\r\n      biases: Array(10).fill(0).map(() => Math.random() - 0.5),\r\n      featureNames: ['user_embedding', 'content_embedding', 'skill_alignment', 'preference_match'],\r\n      lastTrained: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert features to input vector for ML model\r\n   */\r\n  private featuresToVector(features: MLFeatures): number[] {\r\n    const vector: number[] = [];\r\n    \r\n    // Add user embedding (first 10 dimensions)\r\n    vector.push(...features.userEmbedding.slice(0, 10));\r\n    \r\n    // Add content embedding (first 10 dimensions)\r\n    vector.push(...features.contentEmbedding.slice(0, 10));\r\n    \r\n    // Add skill vector (first 10 dimensions)\r\n    vector.push(...features.skillVector.slice(0, 10));\r\n    \r\n    // Add preference vector (first 10 dimensions)\r\n    vector.push(...features.preferenceVector.slice(0, 10));\r\n    \r\n    // Add contextual features\r\n    const contextValues = Object.values(features.contextualFeatures);\r\n    vector.push(...contextValues.slice(0, 10));\r\n    \r\n    // Pad to fixed size\r\n    while (vector.length < 50) {\r\n      vector.push(0);\r\n    }\r\n    \r\n    return vector.slice(0, 50);\r\n  }\r\n\r\n  /**\r\n   * Calculate heuristic score as fallback\r\n   */\r\n  private calculateHeuristicScore(features: MLFeatures): number {\r\n    let score = 0.5; // Base score\r\n    \r\n    // Skill alignment boost\r\n    const skillAlignment = features.contextualFeatures.skillAlignment || 0;\r\n    score += skillAlignment * 0.3;\r\n    \r\n    // User experience factor\r\n    const userExperience = features.contextualFeatures.userExperience || 0.5;\r\n    score += (userExperience - 0.5) * 0.2;\r\n    \r\n    // Content popularity\r\n    const popularity = features.contextualFeatures.contentPopularity || 0.5;\r\n    score += popularity * 0.1;\r\n    \r\n    return Math.max(0, Math.min(1, score));\r\n  }\r\n\r\n  /**\r\n   * Utility functions\r\n   */\r\n  private hashStringToFloat(str: string): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash) / 2147483647; // Normalize to [0, 1]\r\n  }\r\n\r\n  private hashStringToIndex(str: string, maxIndex: number): number {\r\n    return Math.floor(this.hashStringToFloat(str) * maxIndex);\r\n  }\r\n\r\n  private combineSkillVectors(userSkills: number[], contentSkills: number[]): number[] {\r\n    const combined = new Array(Math.max(userSkills.length, contentSkills.length)).fill(0);\r\n    \r\n    for (let i = 0; i < combined.length; i++) {\r\n      const userVal = userSkills[i] || 0;\r\n      const contentVal = contentSkills[i] || 0;\r\n      combined[i] = (userVal + contentVal) / 2;\r\n    }\r\n    \r\n    return combined;\r\n  }\r\n\r\n  private calculateSkillAlignment(userSkills: number[], contentSkills: number[]): number {\r\n    if (userSkills.length === 0 || contentSkills.length === 0) return 0;\r\n    \r\n    let dotProduct = 0;\r\n    let userNorm = 0;\r\n    let contentNorm = 0;\r\n    \r\n    const minLength = Math.min(userSkills.length, contentSkills.length);\r\n    \r\n    for (let i = 0; i < minLength; i++) {\r\n      dotProduct += userSkills[i] * contentSkills[i];\r\n      userNorm += userSkills[i] * userSkills[i];\r\n      contentNorm += contentSkills[i] * contentSkills[i];\r\n    }\r\n    \r\n    if (userNorm === 0 || contentNorm === 0) return 0;\r\n    \r\n    return dotProduct / (Math.sqrt(userNorm) * Math.sqrt(contentNorm));\r\n  }\r\n\r\n  private calculateUserExperience(context: RecommendationContext): number {\r\n    const interactions = context.recentInteractions || [];\r\n    if (interactions.length === 0) return 0.1; // New user\r\n    \r\n    const completions = interactions.filter(i => i.interactionType === InteractionType.COMPLETE).length;\r\n    const enrollments = interactions.filter(i => i.interactionType === InteractionType.ENROLL).length;\r\n    \r\n    if (enrollments === 0) return 0.3;\r\n    \r\n    const completionRate = completions / enrollments;\r\n    return Math.min(0.9, 0.3 + completionRate * 0.6);\r\n  }\r\n\r\n  private calculateAverageSessionLength(interactions: UserInteraction[]): number {\r\n    const sessions = new Map<string, UserInteraction[]>();\r\n    \r\n    interactions.forEach(interaction => {\r\n      const sessionId = interaction.sessionId || 'default';\r\n      if (!sessions.has(sessionId)) {\r\n        sessions.set(sessionId, []);\r\n      }\r\n      sessions.get(sessionId)!.push(interaction);\r\n    });\r\n    \r\n    let totalLength = 0;\r\n    let sessionCount = 0;\r\n    \r\n    for (const sessionInteractions of sessions.values()) {\r\n      if (sessionInteractions.length > 1) {\r\n        const start = Math.min(...sessionInteractions.map(i => i.createdAt.getTime()));\r\n        const end = Math.max(...sessionInteractions.map(i => i.createdAt.getTime()));\r\n        totalLength += (end - start) / 1000 / 60; // Convert to minutes\r\n        sessionCount++;\r\n      }\r\n    }\r\n    \r\n    return sessionCount > 0 ? totalLength / sessionCount : 5; // Default 5 minutes\r\n  }\r\n\r\n  private calculateCompletionRate(interactions: UserInteraction[]): number {\r\n    const enrollments = interactions.filter(i => i.interactionType === InteractionType.ENROLL).length;\r\n    const completions = interactions.filter(i => i.interactionType === InteractionType.COMPLETE).length;\r\n    \r\n    return enrollments > 0 ? completions / enrollments : 0;\r\n  }\r\n\r\n  private determineRecommendationReason(features: MLFeatures, context: RecommendationContext): RecommendationReason {\r\n    const skillAlignment = features.contextualFeatures.skillAlignment || 0;\r\n    \r\n    if (skillAlignment > 0.7) {\r\n      return RecommendationReason.SKILL_GAP;\r\n    } else if (context.recentInteractions?.length && context.recentInteractions.length > 10) {\r\n      return RecommendationReason.LEARNING_HISTORY;\r\n    } else {\r\n      return RecommendationReason.INTEREST_BASED;\r\n    }\r\n  }\r\n\r\n  private calculateMLPriority(score: number, features: MLFeatures): number {\r\n    let priority = Math.floor(score * 5); // Base priority from score\r\n    \r\n    // Boost for high skill alignment\r\n    if ((features.contextualFeatures.skillAlignment || 0) > 0.8) {\r\n      priority += 2;\r\n    }\r\n    \r\n    return Math.min(priority, 10);\r\n  }\r\n\r\n  private generateExplanation(course: Course, features: MLFeatures, score: number): string {\r\n    const skillAlignment = features.contextualFeatures.skillAlignment || 0;\r\n    \r\n    if (skillAlignment > 0.7) {\r\n      return `This course aligns well with your skill development goals`;\r\n    } else if (score > 0.8) {\r\n      return `Highly recommended based on your learning patterns`;\r\n    } else {\r\n      return `Recommended based on your interests and activity`;\r\n    }\r\n  }\r\n\r\n  private getTopSkillsFromVector(skillVector: number[]): string[] {\r\n    // This would map vector indices back to skill names in a real implementation\r\n    return ['JavaScript', 'React', 'Node.js'].slice(0, 3);\r\n  }\r\n\r\n  private getTopPreferencesFromVector(preferenceVector: number[]): string[] {\r\n    // This would map vector indices back to preference names in a real implementation\r\n    return ['Web Development', 'Frontend', 'Backend'].slice(0, 3);\r\n  }\r\n\r\n  private async storeFeedbackForTraining(userId: string, recommendationId: string, score: number): Promise<void> {\r\n    // Store feedback in a training data table (implementation would depend on your setup)\r\n    this.logger.log(`Storing feedback: user=${userId}, rec=${recommendationId}, score=${score}`);\r\n  }\r\n\r\n  private async getFeedbackCount(): Promise<number> {\r\n    // Return count of feedback records for retraining decision\r\n    return Math.floor(Math.random() * 2000); // Placeholder\r\n  }\r\n\r\n  private async retrainModel(): Promise<void> {\r\n    this.logger.log('Triggering model retraining...');\r\n    // In a real implementation, this would trigger an ML pipeline\r\n    // For now, just update the model timestamp\r\n    if (this.model) {\r\n      this.model.lastTrained = new Date();\r\n    }\r\n  }\r\n}\r\n"],"version":3}