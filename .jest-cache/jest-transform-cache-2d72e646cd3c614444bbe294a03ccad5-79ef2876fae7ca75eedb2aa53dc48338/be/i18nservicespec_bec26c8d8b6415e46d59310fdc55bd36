98340d30c0ab23f62f204a7e4afa63de
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const nestjs_i18n_1 = require("nestjs-i18n");
const i18n_service_1 = require("../services/i18n.service");
const translation_service_1 = require("../services/translation.service");
const locale_service_1 = require("../services/locale.service");
const translation_entity_1 = require("../entities/translation.entity");
describe("I18nService", () => {
    let service;
    let translationRepository;
    let nestI18nService;
    let translationService;
    let localeService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                i18n_service_1.I18nService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(translation_entity_1.Translation),
                    useValue: {
                        findOne: globals_1.jest.fn(),
                        find: globals_1.jest.fn(),
                        save: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                    },
                },
                {
                    provide: nestjs_i18n_1.I18nService,
                    useValue: {
                        translate: globals_1.jest.fn(),
                    },
                },
                {
                    provide: translation_service_1.TranslationService,
                    useValue: {
                        getTranslations: globals_1.jest.fn(),
                    },
                },
                {
                    provide: locale_service_1.LocaleService,
                    useValue: {
                        getUserLocale: globals_1.jest.fn(),
                        setUserLocale: globals_1.jest.fn(),
                        getSupportedLocales: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(i18n_service_1.I18nService);
        translationRepository = module.get((0, typeorm_1.getRepositoryToken)(translation_entity_1.Translation));
        nestI18nService = module.get(nestjs_i18n_1.I18nService);
        translationService = module.get(translation_service_1.TranslationService);
        localeService = module.get(locale_service_1.LocaleService);
    });
    it("should be defined", () => {
        expect(service).toBeDefined();
    });
    describe("translate", () => {
        it("should return translation from database", async () => {
            const mockTranslation = {
                id: "1",
                key: "hello",
                locale: "en",
                namespace: "common",
                value: "Hello World",
                status: "published",
            };
            translationRepository.findOne.mockResolvedValue(mockTranslation);
            const result = await service.translate("hello", { locale: "en" });
            expect(result).toBe("Hello World");
            expect(translationRepository.findOne).toHaveBeenCalledWith({
                where: {
                    key: "hello",
                    locale: "en",
                    namespace: "common",
                    status: "published",
                },
            });
        });
        it("should fallback to file-based translation", async () => {
            translationRepository.findOne.mockResolvedValue(null);
            nestI18nService.translate.mockResolvedValue("Hello from file");
            const result = await service.translate("hello", { locale: "en" });
            expect(result).toBe("Hello from file");
            expect(nestI18nService.translate).toHaveBeenCalledWith("common.hello", {
                lang: "en",
                args: undefined,
                defaultValue: undefined,
            });
        });
        it("should interpolate variables in translation", async () => {
            const mockTranslation = {
                id: "1",
                key: "welcome",
                locale: "en",
                namespace: "common",
                value: "Welcome {{name}}!",
                status: "published",
            };
            translationRepository.findOne.mockResolvedValue(mockTranslation);
            const result = await service.translate("welcome", {
                locale: "en",
                args: { name: "John" },
            });
            expect(result).toBe("Welcome John!");
        });
        it("should return default value when translation not found", async () => {
            translationRepository.findOne.mockResolvedValue(null);
            nestI18nService.translate.mockResolvedValue("welcome");
            const result = await service.translate("welcome", {
                locale: "en",
                defaultValue: "Default Welcome",
            });
            expect(result).toBe("Default Welcome");
        });
    });
    describe("translateMultiple", () => {
        it("should translate multiple keys", async () => {
            const mockTranslations = [
                {
                    id: "1",
                    key: "hello",
                    locale: "en",
                    namespace: "common",
                    value: "Hello",
                    status: "published",
                },
                {
                    id: "2",
                    key: "goodbye",
                    locale: "en",
                    namespace: "common",
                    value: "Goodbye",
                    status: "published",
                },
            ];
            translationRepository.findOne
                .mockResolvedValueOnce(mockTranslations[0])
                .mockResolvedValueOnce(mockTranslations[1]);
            const result = await service.translateMultiple(["hello", "goodbye"], { locale: "en" });
            expect(result).toEqual({
                hello: "Hello",
                goodbye: "Goodbye",
            });
        });
    });
    describe("detectLocaleFromRequest", () => {
        it("should detect locale from query parameter", async () => {
            const request = {
                query: { lang: "fr" },
                headers: {},
            };
            const result = await service.detectLocaleFromRequest(request);
            expect(result).toBe("fr");
        });
        it("should detect locale from custom header", async () => {
            const request = {
                query: {},
                headers: { "x-custom-lang": "de" },
            };
            const result = await service.detectLocaleFromRequest(request);
            expect(result).toBe("de");
        });
        it("should detect locale from Accept-Language header", async () => {
            const request = {
                query: {},
                headers: { "accept-language": "es-ES,es;q=0.9,en;q=0.8" },
            };
            localeService.getSupportedLocales.mockResolvedValue([
                { code: "es-ES", status: "active" },
                { code: "en", status: "active" },
            ]);
            const result = await service.detectLocaleFromRequest(request);
            expect(result).toBe("es-ES");
        });
        it("should fallback to default locale", async () => {
            const request = {
                query: {},
                headers: {},
            };
            localeService.getSupportedLocales.mockResolvedValue([]);
            const result = await service.detectLocaleFromRequest(request);
            expect(result).toBe("en");
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,