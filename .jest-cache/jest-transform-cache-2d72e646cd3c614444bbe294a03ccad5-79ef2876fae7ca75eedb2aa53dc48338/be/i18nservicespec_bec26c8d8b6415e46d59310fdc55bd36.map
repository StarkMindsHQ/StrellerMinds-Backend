{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\i18n.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\__tests__\\i18n.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { I18nService as NestI18nService } from \"nestjs-i18n\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { I18nService } from \"../services/i18n.service\"\r\nimport { TranslationService } from \"../services/translation.service\"\r\nimport { LocaleService } from \"../services/locale.service\"\r\nimport { Translation } from \"../entities/translation.entity\"\r\n\r\ndescribe(\"I18nService\", () => {\r\n  let service: I18nService\r\n  let translationRepository: jest.Mocked<Repository<Translation>>\r\n  let nestI18nService: jest.Mocked<NestI18nService>\r\n  let translationService: jest.Mocked<TranslationService>\r\n  let localeService: jest.Mocked<LocaleService>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        I18nService,\r\n        {\r\n          provide: getRepositoryToken(Translation),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            find: jest.fn(),\r\n            save: jest.fn(),\r\n            create: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: NestI18nService,\r\n          useValue: {\r\n            translate: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: TranslationService,\r\n          useValue: {\r\n            getTranslations: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: LocaleService,\r\n          useValue: {\r\n            getUserLocale: jest.fn(),\r\n            setUserLocale: jest.fn(),\r\n            getSupportedLocales: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<I18nService>(I18nService)\r\n    translationRepository = module.get(getRepositoryToken(Translation))\r\n    nestI18nService = module.get(NestI18nService)\r\n    translationService = module.get(TranslationService)\r\n    localeService = module.get(LocaleService)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(service).toBeDefined()\r\n  })\r\n\r\n  describe(\"translate\", () => {\r\n    it(\"should return translation from database\", async () => {\r\n      const mockTranslation = {\r\n        id: \"1\",\r\n        key: \"hello\",\r\n        locale: \"en\",\r\n        namespace: \"common\",\r\n        value: \"Hello World\",\r\n        status: \"published\",\r\n      } as Translation\r\n\r\n      translationRepository.findOne.mockResolvedValue(mockTranslation)\r\n\r\n      const result = await service.translate(\"hello\", { locale: \"en\" })\r\n\r\n      expect(result).toBe(\"Hello World\")\r\n      expect(translationRepository.findOne).toHaveBeenCalledWith({\r\n        where: {\r\n          key: \"hello\",\r\n          locale: \"en\",\r\n          namespace: \"common\",\r\n          status: \"published\",\r\n        },\r\n      })\r\n    })\r\n\r\n    it(\"should fallback to file-based translation\", async () => {\r\n      translationRepository.findOne.mockResolvedValue(null)\r\n      nestI18nService.translate.mockResolvedValue(\"Hello from file\")\r\n\r\n      const result = await service.translate(\"hello\", { locale: \"en\" })\r\n\r\n      expect(result).toBe(\"Hello from file\")\r\n      expect(nestI18nService.translate).toHaveBeenCalledWith(\"common.hello\", {\r\n        lang: \"en\",\r\n        args: undefined,\r\n        defaultValue: undefined,\r\n      })\r\n    })\r\n\r\n    it(\"should interpolate variables in translation\", async () => {\r\n      const mockTranslation = {\r\n        id: \"1\",\r\n        key: \"welcome\",\r\n        locale: \"en\",\r\n        namespace: \"common\",\r\n        value: \"Welcome {{name}}!\",\r\n        status: \"published\",\r\n      } as Translation\r\n\r\n      translationRepository.findOne.mockResolvedValue(mockTranslation)\r\n\r\n      const result = await service.translate(\"welcome\", {\r\n        locale: \"en\",\r\n        args: { name: \"John\" },\r\n      })\r\n\r\n      expect(result).toBe(\"Welcome John!\")\r\n    })\r\n\r\n    it(\"should return default value when translation not found\", async () => {\r\n      translationRepository.findOne.mockResolvedValue(null)\r\n      nestI18nService.translate.mockResolvedValue(\"welcome\")\r\n\r\n      const result = await service.translate(\"welcome\", {\r\n        locale: \"en\",\r\n        defaultValue: \"Default Welcome\",\r\n      })\r\n\r\n      expect(result).toBe(\"Default Welcome\")\r\n    })\r\n  })\r\n\r\n  describe(\"translateMultiple\", () => {\r\n    it(\"should translate multiple keys\", async () => {\r\n      const mockTranslations = [\r\n        {\r\n          id: \"1\",\r\n          key: \"hello\",\r\n          locale: \"en\",\r\n          namespace: \"common\",\r\n          value: \"Hello\",\r\n          status: \"published\",\r\n        },\r\n        {\r\n          id: \"2\",\r\n          key: \"goodbye\",\r\n          locale: \"en\",\r\n          namespace: \"common\",\r\n          value: \"Goodbye\",\r\n          status: \"published\",\r\n        },\r\n      ] as Translation[]\r\n\r\n      translationRepository.findOne\r\n        .mockResolvedValueOnce(mockTranslations[0])\r\n        .mockResolvedValueOnce(mockTranslations[1])\r\n\r\n      const result = await service.translateMultiple([\"hello\", \"goodbye\"], { locale: \"en\" })\r\n\r\n      expect(result).toEqual({\r\n        hello: \"Hello\",\r\n        goodbye: \"Goodbye\",\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"detectLocaleFromRequest\", () => {\r\n    it(\"should detect locale from query parameter\", async () => {\r\n      const request = {\r\n        query: { lang: \"fr\" },\r\n        headers: {},\r\n      }\r\n\r\n      const result = await service.detectLocaleFromRequest(request)\r\n\r\n      expect(result).toBe(\"fr\")\r\n    })\r\n\r\n    it(\"should detect locale from custom header\", async () => {\r\n      const request = {\r\n        query: {},\r\n        headers: { \"x-custom-lang\": \"de\" },\r\n      }\r\n\r\n      const result = await service.detectLocaleFromRequest(request)\r\n\r\n      expect(result).toBe(\"de\")\r\n    })\r\n\r\n    it(\"should detect locale from Accept-Language header\", async () => {\r\n      const request = {\r\n        query: {},\r\n        headers: { \"accept-language\": \"es-ES,es;q=0.9,en;q=0.8\" },\r\n      }\r\n\r\n      localeService.getSupportedLocales.mockResolvedValue([\r\n        { code: \"es-ES\", status: \"active\" } as any,\r\n        { code: \"en\", status: \"active\" } as any,\r\n      ])\r\n\r\n      const result = await service.detectLocaleFromRequest(request)\r\n\r\n      expect(result).toBe(\"es-ES\")\r\n    })\r\n\r\n    it(\"should fallback to default locale\", async () => {\r\n      const request = {\r\n        query: {},\r\n        headers: {},\r\n      }\r\n\r\n      localeService.getSupportedLocales.mockResolvedValue([])\r\n\r\n      const result = await service.detectLocaleFromRequest(request)\r\n\r\n      expect(result).toBe(\"en\")\r\n    })\r\n  })\r\n})\r\n"],"version":3}