{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,mEAA+D;AAC/D,6DAAyD;AACzD,qFAAqF;AACrF,+CAA6C;AAG7C,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,UAAgC,CAAC;IACrC,IAAI,OAA0B,CAAC;IAE/B,MAAM,OAAO,GAAG;QACd,EAAE,EAAE,QAAQ;QACZ,MAAM,EAAE,SAAS;QACjB,UAAU,EAAE,yCAAU,CAAC,IAAI;QAC3B,QAAQ,EAAE,WAAW;QACrB,SAAS,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE;QACjC,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,MAAM,WAAW,GAAG;QAClB,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC;KAC1D,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,4CAAoB,CAAC;YACnC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,sCAAiB;oBAC1B,QAAQ,EAAE,WAAW;iBACtB;aACF;SACF,CAAC;aACC,aAAa,CAAC,IAAA,oBAAS,EAAC,KAAK,CAAC,CAAC;aAC/B,QAAQ,CAAC;YACR,WAAW,EAAE,CAAC,OAAyB,EAAE,EAAE;gBACzC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;gBACpD,OAAO,CAAC,IAAI,GAAG,EAAE,EAAE,EAAE,cAAc,EAAE,CAAC;gBACtC,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC;aACD,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAuB,4CAAoB,CAAC,CAAC;QACpE,OAAO,GAAG,MAAM,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,GAAG,GAAwB;YAC/B,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,yCAAU,CAAC,IAAI;YAC3B,QAAQ,EAAE,WAAW;SACtB,CAAC;QAEF,MAAM,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,EAAS,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE9D,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CACtD,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,UAAU,EACd,GAAG,CAAC,QAAQ,EACZ,cAAc,CACf,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,GAAG,GAAwB;YAC/B,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,yCAAU,CAAC,IAAI;YAC3B,QAAQ,EAAE,WAAW;SACtB,CAAC;QAEF,MAAM,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,EAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC1E,2BAA2B,CAC5B,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\moderation\\moderation.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ModerationController } from './moderation.controller';\r\nimport { ModerationService } from './moderation.service';\r\nimport { ModerationActionDto, EntityType } from './dto/create-moderation-action.dto';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { ExecutionContext } from '@nestjs/common';\r\n\r\ndescribe('ModerationController', () => {\r\n  let controller: ModerationController;\r\n  let service: ModerationService;\r\n\r\n  const mockLog = {\r\n    id: 'log-id',\r\n    action: 'approve',\r\n    entityType: EntityType.POST,\r\n    entityId: 'entity-id',\r\n    moderator: { id: 'moderator-id' },\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  const mockService = {\r\n    logModerationAction: jest.fn().mockResolvedValue(mockLog),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [ModerationController],\r\n      providers: [\r\n        {\r\n          provide: ModerationService,\r\n          useValue: mockService,\r\n        },\r\n      ],\r\n    })\r\n      .overrideGuard(AuthGuard('jwt'))\r\n      .useValue({\r\n        canActivate: (context: ExecutionContext) => {\r\n          const request = context.switchToHttp().getRequest();\r\n          request.user = { id: 'moderator-id' };\r\n          return true;\r\n        },\r\n      })\r\n      .compile();\r\n\r\n    controller = module.get<ModerationController>(ModerationController);\r\n    service = module.get<ModerationService>(ModerationService);\r\n  });\r\n\r\n  it('should log moderation action with authenticated user', async () => {\r\n    const dto: ModerationActionDto = {\r\n      action: 'approve',\r\n      entityType: EntityType.POST,\r\n      entityId: 'entity-id',\r\n    };\r\n\r\n    const req = { user: { id: 'moderator-id' } } as any;\r\n    const result = await controller.logModerationAction(dto, req);\r\n\r\n    expect(service.logModerationAction).toHaveBeenCalledWith(\r\n      dto.action,\r\n      dto.entityType,\r\n      dto.entityId,\r\n      'moderator-id',\r\n    );\r\n\r\n    expect(result).toEqual(mockLog);\r\n  });\r\n\r\n  it('should throw if user is not in request', async () => {\r\n    const dto: ModerationActionDto = {\r\n      action: 'approve',\r\n      entityType: EntityType.POST,\r\n      entityId: 'entity-id',\r\n    };\r\n\r\n    await expect(controller.logModerationAction(dto, {} as any)).rejects.toThrow(\r\n      'User not found in request',\r\n    );\r\n  });\r\n});\r\n"],"version":3}