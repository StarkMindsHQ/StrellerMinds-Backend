{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses\\courses.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,uDAAkD;AAClD,6CAAqD;AACrD,4DAAkD;AAGlD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,OAAsB,CAAC;IAC3B,IAAI,UAA8B,CAAC;IAEnC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,+BAAa;gBACb;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,sBAAM,CAAC;oBACnC,QAAQ,EAAE;wBACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;wBACrC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;wBACxC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;wBACrC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;wBACrC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;wBACvC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;qBACxC;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAgB,+BAAa,CAAC,CAAC;QACnD,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,IAAA,4BAAkB,EAAC,sBAAM,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses\\courses.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { CourseService } from './courses.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Course } from './entities/course.entity';\r\nimport { Repository } from 'typeorm';\r\n\r\ndescribe('CourseService', () => {\r\n  let service: CourseService;\r\n  let repository: Repository<Course>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CourseService,\r\n        {\r\n          provide: getRepositoryToken(Course),\r\n          useValue: {\r\n            find: jest.fn().mockResolvedValue([]),\r\n            findOne: jest.fn().mockResolvedValue({}),\r\n            create: jest.fn().mockReturnValue({}),\r\n            save: jest.fn().mockResolvedValue({}),\r\n            update: jest.fn().mockResolvedValue({}),\r\n            delete: jest.fn().mockResolvedValue({}),\r\n          }\r\n        }\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<CourseService>(CourseService);\r\n    repository = module.get<Repository<Course>>(getRepositoryToken(Course));\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n});\r\n"],"version":3}