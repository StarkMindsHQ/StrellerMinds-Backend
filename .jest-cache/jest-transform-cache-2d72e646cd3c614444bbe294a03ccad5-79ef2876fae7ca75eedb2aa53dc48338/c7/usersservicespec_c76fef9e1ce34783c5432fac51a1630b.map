{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\unit\\users\\users.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\test\\unit\\users\\users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NotFoundException, ConflictException } from '@nestjs/common';\r\n\r\nimport { UsersService } from '../../../src/users/users.service';\r\nimport { User } from '../../../src/users/entities/user.entity';\r\nimport { UserRole } from '../../../src/users/enums/user-role.enum';\r\nimport { userFactory } from '../../factories';\r\n\r\ndescribe('UsersService', () => {\r\n  let service: UsersService;\r\n  let repository: Repository<User>;\r\n\r\n  const mockUser = userFactory.create();\r\n  const mockUsers = userFactory.createMany(5);\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UsersService,\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: {\r\n            find: jest.fn(),\r\n            findOne: jest.fn(),\r\n            findOneBy: jest.fn(),\r\n            create: jest.fn(),\r\n            save: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n            count: jest.fn(),\r\n            createQueryBuilder: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<UsersService>(UsersService);\r\n    repository = module.get<Repository<User>>(getRepositoryToken(User));\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('create', () => {\r\n    const createUserDto = {\r\n      email: 'test@example.com',\r\n      password: 'password123',\r\n      name: 'Test User',\r\n      firstName: 'Test',\r\n      lastName: 'User',\r\n    };\r\n\r\n    it('should create a new user', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n      jest.spyOn(repository, 'create').mockReturnValue(mockUser);\r\n      jest.spyOn(repository, 'save').mockResolvedValue(mockUser);\r\n\r\n      const result = await service.create(createUserDto);\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect(repository.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          email: createUserDto.email,\r\n          name: createUserDto.name,\r\n        }),\r\n      );\r\n      expect(repository.save).toHaveBeenCalledWith(mockUser);\r\n    });\r\n\r\n    it('should throw ConflictException when email already exists', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n\r\n      await expect(service.create(createUserDto)).rejects.toThrow(ConflictException);\r\n      expect(repository.save).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should hash password before saving', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n      jest.spyOn(repository, 'create').mockReturnValue(mockUser);\r\n      jest.spyOn(repository, 'save').mockResolvedValue(mockUser);\r\n\r\n      await service.create(createUserDto);\r\n\r\n      expect(repository.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          password: expect.not.stringMatching(createUserDto.password),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return paginated users', async () => {\r\n      const mockQueryBuilder = {\r\n        where: jest.fn().mockReturnThis(),\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        skip: jest.fn().mockReturnThis(),\r\n        take: jest.fn().mockReturnThis(),\r\n        getManyAndCount: jest.fn().mockResolvedValue([mockUsers, mockUsers.length]),\r\n      };\r\n\r\n      jest.spyOn(repository, 'createQueryBuilder').mockReturnValue(mockQueryBuilder as any);\r\n\r\n      const result = await service.findAll({ page: 1, limit: 10 });\r\n\r\n      expect(result).toEqual({\r\n        data: mockUsers,\r\n        total: mockUsers.length,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 1,\r\n      });\r\n    });\r\n\r\n    it('should filter by role when provided', async () => {\r\n      const mockQueryBuilder = {\r\n        where: jest.fn().mockReturnThis(),\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        skip: jest.fn().mockReturnThis(),\r\n        take: jest.fn().mockReturnThis(),\r\n        getManyAndCount: jest.fn().mockResolvedValue([mockUsers, mockUsers.length]),\r\n      };\r\n\r\n      jest.spyOn(repository, 'createQueryBuilder').mockReturnValue(mockQueryBuilder as any);\r\n\r\n      await service.findAll({ page: 1, limit: 10, role: UserRole.INSTRUCTOR });\r\n\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith('user.role = :role', {\r\n        role: UserRole.INSTRUCTOR,\r\n      });\r\n    });\r\n\r\n    it('should search by name or email when search term provided', async () => {\r\n      const mockQueryBuilder = {\r\n        where: jest.fn().mockReturnThis(),\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        orderBy: jest.fn().mockReturnThis(),\r\n        skip: jest.fn().mockReturnThis(),\r\n        take: jest.fn().mockReturnThis(),\r\n        getManyAndCount: jest.fn().mockResolvedValue([mockUsers, mockUsers.length]),\r\n      };\r\n\r\n      jest.spyOn(repository, 'createQueryBuilder').mockReturnValue(mockQueryBuilder as any);\r\n\r\n      await service.findAll({ page: 1, limit: 10, search: 'john' });\r\n\r\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\r\n        '(user.name ILIKE :search OR user.email ILIKE :search)',\r\n        { search: '%john%' },\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('findById', () => {\r\n    it('should return user when found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n\r\n      const result = await service.findById(mockUser.id);\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect(repository.findOne).toHaveBeenCalledWith({\r\n        where: { id: mockUser.id },\r\n      });\r\n    });\r\n\r\n    it('should throw NotFoundException when user not found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(service.findById('non-existent-id')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('findByEmail', () => {\r\n    it('should return user when found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n\r\n      const result = await service.findByEmail(mockUser.email);\r\n\r\n      expect(result).toEqual(mockUser);\r\n      expect(repository.findOne).toHaveBeenCalledWith({\r\n        where: { email: mockUser.email },\r\n      });\r\n    });\r\n\r\n    it('should return null when user not found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n\r\n      const result = await service.findByEmail('nonexistent@test.com');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    const updateData = {\r\n      name: 'Updated Name',\r\n      bio: 'Updated bio',\r\n    };\r\n\r\n    it('should update user successfully', async () => {\r\n      const updatedUser = { ...mockUser, ...updateData };\r\n      \r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n      jest.spyOn(repository, 'save').mockResolvedValue(updatedUser);\r\n\r\n      const result = await service.update(mockUser.id, updateData);\r\n\r\n      expect(result).toEqual(updatedUser);\r\n      expect(repository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining(updateData),\r\n      );\r\n    });\r\n\r\n    it('should throw NotFoundException when user not found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(service.update('non-existent-id', updateData)).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n    });\r\n\r\n    it('should hash password when updating password', async () => {\r\n      const passwordUpdate = { password: 'newpassword123' };\r\n      \r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n      jest.spyOn(repository, 'save').mockResolvedValue(mockUser);\r\n\r\n      await service.update(mockUser.id, passwordUpdate);\r\n\r\n      expect(repository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          password: expect.not.stringMatching(passwordUpdate.password),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('delete', () => {\r\n    it('should delete user successfully', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(mockUser);\r\n      jest.spyOn(repository, 'delete').mockResolvedValue({ affected: 1 } as any);\r\n\r\n      await service.delete(mockUser.id);\r\n\r\n      expect(repository.delete).toHaveBeenCalledWith(mockUser.id);\r\n    });\r\n\r\n    it('should throw NotFoundException when user not found', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(service.delete('non-existent-id')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getUserStats', () => {\r\n    it('should return user statistics', async () => {\r\n      const mockStats = {\r\n        totalUsers: 100,\r\n        activeUsers: 80,\r\n        newUsersThisMonth: 15,\r\n        usersByRole: {\r\n          [UserRole.ADMIN]: 5,\r\n          [UserRole.INSTRUCTOR]: 20,\r\n          [UserRole.STUDENT]: 75,\r\n        },\r\n      };\r\n\r\n      const mockQueryBuilder = {\r\n        select: jest.fn().mockReturnThis(),\r\n        where: jest.fn().mockReturnThis(),\r\n        andWhere: jest.fn().mockReturnThis(),\r\n        groupBy: jest.fn().mockReturnThis(),\r\n        getRawMany: jest.fn().mockResolvedValue([\r\n          { role: UserRole.ADMIN, count: '5' },\r\n          { role: UserRole.INSTRUCTOR, count: '20' },\r\n          { role: UserRole.STUDENT, count: '75' },\r\n        ]),\r\n      };\r\n\r\n      jest.spyOn(repository, 'count')\r\n        .mockResolvedValueOnce(100) // total users\r\n        .mockResolvedValueOnce(80)  // active users\r\n        .mockResolvedValueOnce(15); // new users this month\r\n\r\n      jest.spyOn(repository, 'createQueryBuilder').mockReturnValue(mockQueryBuilder as any);\r\n\r\n      const result = await service.getUserStats();\r\n\r\n      expect(result).toEqual(mockStats);\r\n    });\r\n  });\r\n\r\n  describe('verifyEmail', () => {\r\n    it('should verify user email with valid token', async () => {\r\n      const unverifiedUser = userFactory.unverified();\r\n      const verifiedUser = { ...unverifiedUser, isEmailVerified: true };\r\n\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(unverifiedUser);\r\n      jest.spyOn(repository, 'save').mockResolvedValue(verifiedUser);\r\n\r\n      const result = await service.verifyEmail(unverifiedUser.emailVerificationToken);\r\n\r\n      expect(result).toEqual(verifiedUser);\r\n      expect(repository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          isEmailVerified: true,\r\n          emailVerificationToken: null,\r\n          emailVerificationExpires: null,\r\n        }),\r\n      );\r\n    });\r\n\r\n    it('should throw error for invalid verification token', async () => {\r\n      jest.spyOn(repository, 'findOne').mockResolvedValue(null);\r\n\r\n      await expect(service.verifyEmail('invalid-token')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n});\r\n"],"version":3}