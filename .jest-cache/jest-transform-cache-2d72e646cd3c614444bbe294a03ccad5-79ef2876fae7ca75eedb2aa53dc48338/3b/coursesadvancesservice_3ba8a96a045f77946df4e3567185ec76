0e6756307f223ead0036b32919082292
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoursesAdvancesService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const courses_advance_entity_1 = require("../entities/courses-advance.entity");
let CoursesAdvancesService = class CoursesAdvancesService {
    constructor(courseRepository) {
        this.courseRepository = courseRepository;
    }
    async create(createCourseDto, instructorId) {
        const course = this.courseRepository.create({
            ...createCourseDto,
            instructorId,
        });
        return this.courseRepository.save(course);
    }
    async findAll(instructorId) {
        const queryBuilder = this.courseRepository
            .createQueryBuilder('course')
            .leftJoinAndSelect('course.instructor', 'instructor')
            .leftJoinAndSelect('course.versions', 'versions')
            .orderBy('course.createdAt', 'DESC');
        if (instructorId) {
            queryBuilder.where('course.instructorId = :instructorId', {
                instructorId,
            });
        }
        return queryBuilder.getMany();
    }
    async findOne(id) {
        const course = await this.courseRepository.findOne({
            where: { id },
            relations: ['instructor', 'versions', 'analytics'],
        });
        if (!course) {
            throw new common_1.NotFoundException('Course not found');
        }
        return course;
    }
    async update(id, updateCourseDto, userId) {
        const course = await this.findOne(id);
        if (course.instructorId !== userId) {
            throw new common_1.ForbiddenException('You can only update your own courses');
        }
        Object.assign(course, updateCourseDto);
        return this.courseRepository.save(course);
    }
    async remove(id, userId) {
        const course = await this.findOne(id);
        if (course.instructorId !== userId) {
            throw new common_1.ForbiddenException('You can only delete your own courses');
        }
        await this.courseRepository.remove(course);
    }
    async getCoursesByCategory(category) {
        return this.courseRepository.find({
            where: { category, status: 'published' },
            relations: ['instructor'],
        });
    }
    async getPopularCourses(limit = 10) {
        return this.courseRepository.find({
            where: { status: 'published' },
            order: { enrollmentCount: 'DESC', averageRating: 'DESC' },
            take: limit,
            relations: ['instructor'],
        });
    }
    async searchCourses(query) {
        return this.courseRepository
            .createQueryBuilder('course')
            .where('course.title ILIKE :query OR course.description ILIKE :query', {
            query: `%${query}%`,
        })
            .andWhere('course.status = :status', { status: 'published' })
            .leftJoinAndSelect('course.instructor', 'instructor')
            .getMany();
    }
};
exports.CoursesAdvancesService = CoursesAdvancesService;
exports.CoursesAdvancesService = CoursesAdvancesService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(courses_advance_entity_1.CoursesAdvance)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CoursesAdvancesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,