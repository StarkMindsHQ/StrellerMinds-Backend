{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses-advances\\services\\courses-advances.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses-advances\\services\\courses-advances.service.ts"],"sourcesContent":["import {\r\n  ForbiddenException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CoursesAdvance } from '../entities/courses-advance.entity';\r\nimport { CreateCoursesAdvanceDto } from '../dto/create-courses-advance.dto';\r\nimport { UpdateCoursesAdvanceDto } from '../dto/update-courses-advance.dto';\r\n\r\n@Injectable()\r\nexport class CoursesAdvancesService {\r\n  constructor(\r\n    @InjectRepository(CoursesAdvance)\r\n    private courseRepository: Repository<CoursesAdvance>,\r\n  ) {}\r\n\r\n  async create(\r\n    createCourseDto: CreateCoursesAdvanceDto,\r\n    instructorId: string,\r\n  ): Promise<CoursesAdvance> {\r\n    const course = this.courseRepository.create({\r\n      ...createCourseDto,\r\n      instructorId,\r\n    });\r\n    return this.courseRepository.save(course);\r\n  }\r\n\r\n  async findAll(instructorId?: string): Promise<CoursesAdvance[]> {\r\n    const queryBuilder = this.courseRepository\r\n      .createQueryBuilder('course')\r\n      .leftJoinAndSelect('course.instructor', 'instructor')\r\n      .leftJoinAndSelect('course.versions', 'versions')\r\n      .orderBy('course.createdAt', 'DESC');\r\n\r\n    if (instructorId) {\r\n      queryBuilder.where('course.instructorId = :instructorId', {\r\n        instructorId,\r\n      });\r\n    }\r\n\r\n    return queryBuilder.getMany();\r\n  }\r\n\r\n  async findOne(id: string): Promise<CoursesAdvance> {\r\n    const course = await this.courseRepository.findOne({\r\n      where: { id },\r\n      relations: ['instructor', 'versions', 'analytics'],\r\n    });\r\n\r\n    if (!course) {\r\n      throw new NotFoundException('Course not found');\r\n    }\r\n\r\n    return course;\r\n  }\r\n\r\n  async update(\r\n    id: string,\r\n    updateCourseDto: UpdateCoursesAdvanceDto,\r\n    userId: string,\r\n  ): Promise<CoursesAdvance> {\r\n    const course = await this.findOne(id);\r\n\r\n    if (course.instructorId !== userId) {\r\n      throw new ForbiddenException('You can only update your own courses');\r\n    }\r\n\r\n    Object.assign(course, updateCourseDto);\r\n    return this.courseRepository.save(course);\r\n  }\r\n\r\n  async remove(id: string, userId: string): Promise<void> {\r\n    const course = await this.findOne(id);\r\n\r\n    if (course.instructorId !== userId) {\r\n      throw new ForbiddenException('You can only delete your own courses');\r\n    }\r\n\r\n    await this.courseRepository.remove(course);\r\n  }\r\n\r\n  async getCoursesByCategory(category: string): Promise<CoursesAdvance[]> {\r\n    return this.courseRepository.find({\r\n      where: { category, status: 'published' },\r\n      relations: ['instructor'],\r\n    });\r\n  }\r\n\r\n  async getPopularCourses(limit: number = 10): Promise<CoursesAdvance[]> {\r\n    return this.courseRepository.find({\r\n      where: { status: 'published' },\r\n      order: { enrollmentCount: 'DESC', averageRating: 'DESC' },\r\n      take: limit,\r\n      relations: ['instructor'],\r\n    });\r\n  }\r\n\r\n  async searchCourses(query: string): Promise<CoursesAdvance[]> {\r\n    return this.courseRepository\r\n      .createQueryBuilder('course')\r\n      .where('course.title ILIKE :query OR course.description ILIKE :query', {\r\n        query: `%${query}%`,\r\n      })\r\n      .andWhere('course.status = :status', { status: 'published' })\r\n      .leftJoinAndSelect('course.instructor', 'instructor')\r\n      .getMany();\r\n  }\r\n}\r\n"],"version":3}