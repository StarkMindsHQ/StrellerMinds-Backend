{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\audit\\services\\audit.log.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,6CAAmD;AACnD,qCAAqC;AACrC,mEAAwD;AAGxD;;GAEG;AAEI,IAAM,eAAe,uBAArB,MAAM,eAAe;IAG1B,YAEE,kBAAyD;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;QAJ1C,WAAM,GAAG,IAAI,eAAM,CAAC,iBAAe,CAAC,IAAI,CAAC,CAAC;IAKxD,CAAC;IAEJ;;;OAGG;IACH,KAAK,CAAC,SAAS,CAAC,OAMf;QACC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,2BAAQ,EAAE,CAAC;YAChC,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YACjC,QAAQ,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YACzC,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YACrC,QAAQ,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAC3C,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;YACzC,QAAQ,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAEhC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,sBAAsB,OAAO,CAAC,MAAM,OAAO,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,QAAQ,EAAE,CACpF,CAAC;YAEF,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YAC7D,4DAA4D;YAC5D,qCAAqC;YACrC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB,CACpB,UAAkB,EAClB,QAAgB;QAEhB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAClC,KAAK,EAAE;gBACL,UAAU;gBACV,QAAQ;aACT;YACD,KAAK,EAAE;gBACL,SAAS,EAAE,MAAM;aAClB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAClC,KAAK,EAAE;gBACL,EAAE,MAAM,EAAE,sBAAsB,EAAE;gBAClC,EAAE,MAAM,EAAE,4BAA4B,EAAE;gBACxC,EAAE,MAAM,EAAE,iBAAiB,EAAE;gBAC7B,EAAE,MAAM,EAAE,gBAAgB,EAAE;aAC7B;YACD,KAAK,EAAE;gBACL,SAAS,EAAE,MAAM;aAClB;SACF,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA9EY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,0BAAgB,EAAC,2BAAQ,CAAC,CAAA;yDACU,oBAAU,oBAAV,oBAAU;GALtC,eAAe,CA8E3B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\audit\\services\\audit.log.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { AuditLog } from '../entities/audit.log.entity';\r\n\r\n\r\n/**\r\n * AuditLogService provides logic for creating and retrieving audit logs.\r\n */\r\n@Injectable()\r\nexport class AuditLogService {\r\n  private readonly logger = new Logger(AuditLogService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(AuditLog)\r\n    private readonly auditLogRepository: Repository<AuditLog>,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new audit log entry.\r\n   * @param logData Log data to record\r\n   */\r\n  async createLog(logData: {\r\n    action: string;\r\n    entityType: string;\r\n    entityId: string;\r\n    performedBy: string;\r\n    details?: any;\r\n  }): Promise<AuditLog> {\r\n    try {\r\n      const auditLog = new AuditLog();\r\n      auditLog.action = logData.action;\r\n      auditLog.entityType = logData.entityType;\r\n      auditLog.entityId = logData.entityId;\r\n      auditLog.performedBy = logData.performedBy;\r\n      auditLog.details = logData.details || {};\r\n      auditLog.timestamp = new Date();\r\n\r\n      const savedLog = await this.auditLogRepository.save(auditLog);\r\n      this.logger.log(\r\n        `Audit log created: ${logData.action} on ${logData.entityType}:${logData.entityId}`,\r\n      );\r\n\r\n      return savedLog;\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create audit log`, error.stack);\r\n      // We don't want to fail the main operation if logging fails\r\n      // Just log the error and return null\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get audit logs for a specific entity.\r\n   * @param entityType Type of entity\r\n   * @param entityId Entity ID\r\n   */\r\n  async getLogsForEntity(\r\n    entityType: string,\r\n    entityId: string,\r\n  ): Promise<AuditLog[]> {\r\n    return this.auditLogRepository.find({\r\n      where: {\r\n        entityType,\r\n        entityId,\r\n      },\r\n      order: {\r\n        timestamp: 'DESC',\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all user deletion logs.\r\n   */\r\n  async getUserDeletionLogs(): Promise<AuditLog[]> {\r\n    return this.auditLogRepository.find({\r\n      where: [\r\n        { action: 'ACCOUNT_DEACTIVATION' },\r\n        { action: 'ACCOUNT_DELETION_REQUESTED' },\r\n        { action: 'ACCOUNT_DELETED' },\r\n        { action: 'ACCOUNT_PURGED' },\r\n      ],\r\n      order: {\r\n        timestamp: 'DESC',\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"version":3}