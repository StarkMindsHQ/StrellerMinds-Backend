db0b9348cbf3ce934d9487fb7caf9653
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportsController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
let ReportsController = class ReportsController {
    constructor(reportingService) {
        this.reportingService = reportingService;
    }
    async createReport(reportData) {
        return this.reportingService.createReport(reportData);
    }
    async getReports(type, createdBy, isActive) {
        return this.reportingService.getReports({
            type,
            createdBy,
            isActive: isActive !== undefined ? isActive === true : undefined,
        });
    }
    async executeReport(id, res) {
        const result = await this.reportingService.executeReport(id);
        // Set appropriate headers based on format
        if (typeof result === "string") {
            res.setHeader("Content-Type", "text/csv");
            res.setHeader("Content-Disposition", `attachment; filename="report-${id}.csv"`);
        }
        else if (Buffer.isBuffer(result)) {
            res.setHeader("Content-Type", "application/octet-stream");
            res.setHeader("Content-Disposition", `attachment; filename="report-${id}"`);
        }
        else {
            res.setHeader("Content-Type", "application/json");
        }
        res.send(result);
    }
    async updateReport(id, updateData) {
        // Implementation would update the report
        return { success: true, message: "Report updated successfully" };
    }
    async deleteReport(id) {
        // Implementation would delete the report
        return { success: true, message: 'Report deleted successfully' };
    }
};
exports.ReportsController = ReportsController;
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({ summary: "Create a new report" }),
    (0, swagger_1.ApiResponse)({ status: 201, description: "Report created successfully" }),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof Partial !== "undefined" && Partial) === "function" ? _a : Object]),
    __metadata("design:returntype", Promise)
], ReportsController.prototype, "createReport", null);
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: "Get all reports" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Reports retrieved successfully" }),
    __param(0, (0, common_1.Query)('type')),
    __param(1, (0, common_1.Query)('createdBy')),
    __param(2, (0, common_1.Query)('isActive')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Boolean]),
    __metadata("design:returntype", Promise)
], ReportsController.prototype, "getReports", null);
__decorate([
    (0, common_1.Post)(":id/execute"),
    (0, swagger_1.ApiOperation)({ summary: "Execute a report" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Report executed successfully" }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], ReportsController.prototype, "executeReport", null);
__decorate([
    (0, common_1.Put)(":id"),
    (0, swagger_1.ApiOperation)({ summary: "Update a report" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Report updated successfully" }),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof Partial !== "undefined" && Partial) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], ReportsController.prototype, "updateReport", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Delete a report' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Report deleted successfully' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ReportsController.prototype, "deleteReport", null);
exports.ReportsController = ReportsController = __decorate([
    (0, swagger_1.ApiTags)("Reports"),
    (0, common_1.Controller)("analytics/reports"),
    __metadata("design:paramtypes", [Object])
], ReportsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,