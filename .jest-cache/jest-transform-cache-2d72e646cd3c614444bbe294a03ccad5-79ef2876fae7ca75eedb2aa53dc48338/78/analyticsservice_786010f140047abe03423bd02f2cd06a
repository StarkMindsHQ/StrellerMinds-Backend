1019182e21f1da287d6083da9d6856d1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AnalyticsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsService = void 0;
const common_1 = require("@nestjs/common");
let AnalyticsService = AnalyticsService_1 = class AnalyticsService {
    constructor(analyticsDataService, realtimeAnalyticsService, predictiveAnalyticsService, reportingService, courseCompletionPredictionRepository) {
        this.analyticsDataService = analyticsDataService;
        this.realtimeAnalyticsService = realtimeAnalyticsService;
        this.predictiveAnalyticsService = predictiveAnalyticsService;
        this.reportingService = reportingService;
        this.courseCompletionPredictionRepository = courseCompletionPredictionRepository;
        this.logger = new common_1.Logger(AnalyticsService_1.name);
    }
    async getCoursePerformance(dto) {
        const startDate = dto.startDate ? new Date(dto.startDate) : undefined;
        const endDate = dto.endDate ? new Date(dto.endDate) : undefined;
        if (!dto.courseId) {
            throw new Error("Course ID is required for course performance analytics.");
        }
        return this.reportingService.getCoursePerformanceMetrics(dto.courseId, startDate, endDate);
    }
    async getUserEngagement(dto) {
        const startDate = dto.startDate ? new Date(dto.startDate) : undefined;
        const endDate = dto.endDate ? new Date(dto.endDate) : undefined;
        if (!dto.userId) {
            throw new Error("User ID is required for user engagement analytics.");
        }
        return this.reportingService.getUserEngagementMetrics(dto.userId, startDate, endDate);
    }
    async getInstructorPerformance(dto) {
        const startDate = dto.startDate ? new Date(dto.startDate) : undefined;
        const endDate = dto.endDate ? new Date(dto.endDate) : undefined;
        if (!dto.instructorId) {
            throw new Error("Instructor ID is required for instructor performance analytics.");
        }
        return this.reportingService.getInstructorPerformanceMetrics(dto.instructorId, startDate, endDate);
    }
    async getPlatformOverview(dto) {
        const startDate = dto.startDate ? new Date(dto.startDate) : undefined;
        const endDate = dto.endDate ? new Date(dto.endDate) : undefined;
        return this.reportingService["getPlatformOverviewMetrics"](startDate, endDate); // Access private method for now
    }
    async getRealtimeData() {
        return this.realtimeAnalyticsService.getRealtimeDashboardData();
    }
    async predictCompletion(dto) {
        return this.predictiveAnalyticsService.predictCourseCompletion(dto);
    }
    async getUserPredictions(userId) {
        return this.predictiveAnalyticsService.getUserCompletionPredictions(userId);
    }
    async getCoursePredictions(courseId) {
        return this.predictiveAnalyticsService.getCourseCompletionPredictions(courseId);
    }
    async generateReport(dto, userId) {
        const { jobId, status } = await this.reportingService.generateReport(dto, userId);
        return { jobId, status };
    }
    async getReportStatus(jobId) {
        return this.reportingService.getReportJobStatus(jobId);
    }
    async getPredictiveSummary(dto) {
        const startDate = dto.startDate ? new Date(dto.startDate) : undefined;
        const endDate = dto.endDate ? new Date(dto.endDate) : undefined;
        const summary = await this.reportingService["getPredictiveSummary"](startDate, endDate);
        return summary[0]; // It returns an array, but we want the single summary object
    }
};
exports.AnalyticsService = AnalyticsService;
exports.AnalyticsService = AnalyticsService = AnalyticsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object])
], AnalyticsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,