{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\analytics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\analytics.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { AnalyticsQueryDto } from \"./dto/analytics-query.dto\"\r\nimport type { PredictCompletionDto } from \"./dto/predict-completion.dto\"\r\nimport type { GenerateReportDto } from \"./dto/generate-report.dto\"\r\nimport type {\r\n  CoursePerformanceMetrics,\r\n  UserEngagementMetrics,\r\n  InstructorPerformanceMetrics,\r\n  PredictiveAnalyticsResult,\r\n  RealtimeDashboardData,\r\n  GeneratedReport,\r\n} from \"./interfaces/analytics.interface\"\r\nimport type { AnalyticsDataService } from \"./services/analytics-data.service\"\r\nimport type { RealtimeAnalyticsService } from \"./services/realtime-analytics.service\"\r\nimport type { PredictiveAnalyticsService } from \"./services/predictive-analytics.service\"\r\nimport type { ReportingService } from \"./services/reporting.service\"\r\nimport type { ReportGenerationJob } from \"./entities/report-generation-job.entity\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { CourseCompletionPrediction } from \"./entities/course-completion-prediction.entity\"\r\n\r\n@Injectable()\r\nexport class AnalyticsService {\r\n  private readonly logger = new Logger(AnalyticsService.name)\r\n\r\n  constructor(\r\n    private readonly analyticsDataService: AnalyticsDataService,\r\n    private readonly realtimeAnalyticsService: RealtimeAnalyticsService,\r\n    private readonly predictiveAnalyticsService: PredictiveAnalyticsService,\r\n    private readonly reportingService: ReportingService,\r\n    private readonly courseCompletionPredictionRepository: Repository<CourseCompletionPrediction>,\r\n  ) {}\r\n\r\n  async getCoursePerformance(dto: AnalyticsQueryDto): Promise<CoursePerformanceMetrics> {\r\n    const startDate = dto.startDate ? new Date(dto.startDate) : undefined\r\n    const endDate = dto.endDate ? new Date(dto.endDate) : undefined\r\n    if (!dto.courseId) {\r\n      throw new Error(\"Course ID is required for course performance analytics.\")\r\n    }\r\n    return this.reportingService.getCoursePerformanceMetrics(dto.courseId, startDate, endDate)\r\n  }\r\n\r\n  async getUserEngagement(dto: AnalyticsQueryDto): Promise<UserEngagementMetrics> {\r\n    const startDate = dto.startDate ? new Date(dto.startDate) : undefined\r\n    const endDate = dto.endDate ? new Date(dto.endDate) : undefined\r\n    if (!dto.userId) {\r\n      throw new Error(\"User ID is required for user engagement analytics.\")\r\n    }\r\n    return this.reportingService.getUserEngagementMetrics(dto.userId, startDate, endDate)\r\n  }\r\n\r\n  async getInstructorPerformance(dto: AnalyticsQueryDto): Promise<InstructorPerformanceMetrics> {\r\n    const startDate = dto.startDate ? new Date(dto.startDate) : undefined\r\n    const endDate = dto.endDate ? new Date(dto.endDate) : undefined\r\n    if (!dto.instructorId) {\r\n      throw new Error(\"Instructor ID is required for instructor performance analytics.\")\r\n    }\r\n    return this.reportingService.getInstructorPerformanceMetrics(dto.instructorId, startDate, endDate)\r\n  }\r\n\r\n  async getPlatformOverview(dto: AnalyticsQueryDto): Promise<any> {\r\n    const startDate = dto.startDate ? new Date(dto.startDate) : undefined\r\n    const endDate = dto.endDate ? new Date(dto.endDate) : undefined\r\n    return this.reportingService[\"getPlatformOverviewMetrics\"](startDate, endDate) // Access private method for now\r\n  }\r\n\r\n  async getRealtimeData(): Promise<RealtimeDashboardData> {\r\n    return this.realtimeAnalyticsService.getRealtimeDashboardData()\r\n  }\r\n\r\n  async predictCompletion(dto: PredictCompletionDto): Promise<PredictiveAnalyticsResult> {\r\n    return this.predictiveAnalyticsService.predictCourseCompletion(dto)\r\n  }\r\n\r\n  async getUserPredictions(userId: string): Promise<CourseCompletionPrediction[]> {\r\n    return this.predictiveAnalyticsService.getUserCompletionPredictions(userId)\r\n  }\r\n\r\n  async getCoursePredictions(courseId: string): Promise<CourseCompletionPrediction[]> {\r\n    return this.predictiveAnalyticsService.getCourseCompletionPredictions(courseId)\r\n  }\r\n\r\n  async generateReport(dto: GenerateReportDto, userId: string): Promise<GeneratedReport> {\r\n    const { jobId, status } = await this.reportingService.generateReport(dto, userId)\r\n    return { jobId, status }\r\n  }\r\n\r\n  async getReportStatus(jobId: string): Promise<ReportGenerationJob | null> {\r\n    return this.reportingService.getReportJobStatus(jobId)\r\n  }\r\n\r\n  async getPredictiveSummary(dto: AnalyticsQueryDto): Promise<any> {\r\n    const startDate = dto.startDate ? new Date(dto.startDate) : undefined\r\n    const endDate = dto.endDate ? new Date(dto.endDate) : undefined\r\n    const summary = await this.reportingService[\"getPredictiveSummary\"](startDate, endDate)\r\n    return summary[0] // It returns an array, but we want the single summary object\r\n  }\r\n}\r\n"],"version":3}