{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\cms\\cms.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,4DAAkD;AAClD,4EAAiE;AAM1D,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,YAEU,WAAgC,EAEhC,WAAuC;QAFvC,gBAAW,GAAX,WAAW,CAAqB;QAEhC,gBAAW,GAAX,WAAW,CAA4B;IAC9C,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,IAAsB,EAAE,QAAgB;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC/E,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtC,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAsB;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtC,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,GAAoB;QACjD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAU;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAC3B,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE;YAC1B,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;SAC7B,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA7CY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,wBAAO,CAAC,CAAA;IAEzB,WAAA,IAAA,0BAAgB,EAAC,uCAAc,CAAC,CAAA;yDADZ,oBAAU,oBAAV,oBAAU,oDAEV,oBAAU,oBAAV,oBAAU;GALtB,UAAU,CA6CtB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\cms\\cms.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Content } from './entity/content.entity';\r\nimport { ContentVersion } from './entity/content-version.entity';\r\nimport { CreateContentDto } from './dto/create-content.dto';\r\nimport { UpdateContentDto } from './dto/update-content.dto';\r\nimport { UpdateStatusDto } from './dto/update-status.dto';\r\n\r\n@Injectable()\r\nexport class CmsService {\r\n  constructor(\r\n    @InjectRepository(Content)\r\n    private contentRepo: Repository<Content>,\r\n    @InjectRepository(ContentVersion)\r\n    private versionRepo: Repository<ContentVersion>,\r\n  ) {}\r\n\r\n  async create(data: CreateContentDto, authorId: string): Promise<Content> {\r\n    const content = this.contentRepo.create({ ...data, author: { id: authorId } });\r\n    const saved = await this.contentRepo.save(content);\r\n    const version = this.versionRepo.create({\r\n      content: saved,\r\n      title: saved.title,\r\n      body: saved.body,\r\n    });\r\n    await this.versionRepo.save(version);\r\n    return saved;\r\n  }\r\n\r\n  async update(id: string, data: UpdateContentDto): Promise<Content> {\r\n    const content = await this.contentRepo.findOneBy({ id });\r\n    Object.assign(content, data);\r\n    const updated = await this.contentRepo.save(content);\r\n    const version = this.versionRepo.create({\r\n      content: updated,\r\n      title: updated.title,\r\n      body: updated.body,\r\n    });\r\n    await this.versionRepo.save(version);\r\n    return updated;\r\n  }\r\n\r\n  async updateStatus(id: string, dto: UpdateStatusDto): Promise<Content> {\r\n    const content = await this.contentRepo.findOneBy({ id });\r\n    content.status = dto.status;\r\n    return this.contentRepo.save(content);\r\n  }\r\n\r\n  async findVersions(id: string): Promise<ContentVersion[]> {\r\n    return this.versionRepo.find({\r\n      where: { content: { id } },\r\n      order: { createdAt: 'DESC' },\r\n    });\r\n  }\r\n}"],"version":3}