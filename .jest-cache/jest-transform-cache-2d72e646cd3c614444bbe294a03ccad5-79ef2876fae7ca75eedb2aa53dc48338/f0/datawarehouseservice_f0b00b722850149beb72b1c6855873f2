40af3244b2b53ad246828b79b8b41e02
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataWarehouseService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataWarehouseService = void 0;
const common_1 = require("@nestjs/common");
const data_warehouse_metric_entity_1 = require("../entities/data-warehouse-metric.entity");
let DataWarehouseService = DataWarehouseService_1 = class DataWarehouseService {
    constructor(metricRepository) {
        this.metricRepository = metricRepository;
        this.logger = new common_1.Logger(DataWarehouseService_1.name);
    }
    async recordMetric(metricData) {
        try {
            const metric = this.metricRepository.create({
                ...metricData,
                aggregationType: metricData.aggregationType || data_warehouse_metric_entity_1.AggregationType.SUM,
                granularity: metricData.granularity || "1h",
            });
            await this.metricRepository.save(metric);
        }
        catch (error) {
            this.logger.error(`Failed to record metric: ${error.message}`, error.stack);
            throw error;
        }
    }
    async getMetrics(filters) {
        const query = this.metricRepository.createQueryBuilder("metric");
        if (filters.metricName) {
            query.andWhere("metric.metricName = :metricName", {
                metricName: filters.metricName,
            });
        }
        if (filters.metricType) {
            query.andWhere("metric.metricType = :metricType", {
                metricType: filters.metricType,
            });
        }
        if (filters.dimensions) {
            for (const [key, value] of Object.entries(filters.dimensions)) {
                query.andWhere(`metric.dimensions ->> :key = :value`, {
                    key,
                    value,
                });
            }
        }
        if (filters.startDate) {
            query.andWhere("metric.timestamp >= :startDate", {
                startDate: filters.startDate,
            });
        }
        if (filters.endDate) {
            query.andWhere("metric.timestamp <= :endDate", {
                endDate: filters.endDate,
            });
        }
        if (filters.granularity) {
            query.andWhere("metric.granularity = :granularity", {
                granularity: filters.granularity,
            });
        }
        query.orderBy("metric.timestamp", "DESC");
        if (filters.limit) {
            query.limit(filters.limit);
        }
        return query.getMany();
    }
    async aggregateMetrics(startTime, endTime, granularity) {
        this.logger.log(`Aggregating metrics from ${startTime.toISOString()} to ${endTime.toISOString()} with granularity ${granularity}`);
        // Get unique metric names and dimensions combinations
        const uniqueMetrics = await this.metricRepository
            .createQueryBuilder("metric")
            .select(["metric.metricName", "metric.dimensions", "metric.aggregationType"])
            .where("metric.timestamp >= :startTime", { startTime })
            .andWhere("metric.timestamp < :endTime", { endTime })
            .andWhere("metric.granularity != :granularity", { granularity })
            .groupBy("metric.metricName, metric.dimensions, metric.aggregationType")
            .getRawMany();
        for (const uniqueMetric of uniqueMetrics) {
            await this.aggregateMetricGroup(uniqueMetric.metric_metricName, JSON.parse(uniqueMetric.metric_dimensions), uniqueMetric.metric_aggregationType, startTime, endTime, granularity);
        }
    }
    async aggregateMetricGroup(metricName, dimensions, aggregationType, startTime, endTime, granularity) {
        const query = this.metricRepository
            .createQueryBuilder("metric")
            .where("metric.metricName = :metricName", { metricName })
            .andWhere("metric.timestamp >= :startTime", { startTime })
            .andWhere("metric.timestamp < :endTime", { endTime })
            .andWhere("metric.granularity != :granularity", { granularity });
        // Add dimensions filter
        for (const [key, value] of Object.entries(dimensions)) {
            query.andWhere(`metric.dimensions ->> :key = :value`, {
                key: `dim_${key}`,
                value,
            });
        }
        let aggregatedValue;
        switch (aggregationType) {
            case data_warehouse_metric_entity_1.AggregationType.SUM:
                const sumResult = await query.select("SUM(metric.value)", "sum").getRawOne();
                aggregatedValue = Number.parseFloat(sumResult.sum) || 0;
                break;
            case data_warehouse_metric_entity_1.AggregationType.AVG:
                const avgResult = await query.select("AVG(metric.value)", "avg").getRawOne();
                aggregatedValue = Number.parseFloat(avgResult.avg) || 0;
                break;
            case data_warehouse_metric_entity_1.AggregationType.COUNT:
                aggregatedValue = await query.getCount();
                break;
            case data_warehouse_metric_entity_1.AggregationType.MIN:
                const minResult = await query.select("MIN(metric.value)", "min").getRawOne();
                aggregatedValue = Number.parseFloat(minResult.min) || 0;
                break;
            case data_warehouse_metric_entity_1.AggregationType.MAX:
                const maxResult = await query.select("MAX(metric.value)", "max").getRawOne();
                aggregatedValue = Number.parseFloat(maxResult.max) || 0;
                break;
            default:
                aggregatedValue = 0;
        }
        // Save aggregated metric
        const aggregatedMetric = this.metricRepository.create({
            metricName,
            metricType: data_warehouse_metric_entity_1.MetricType.GAUGE,
            value: aggregatedValue,
            dimensions,
            timestamp: startTime,
            aggregationType,
            granularity,
        });
        await this.metricRepository.save(aggregatedMetric);
    }
};
exports.DataWarehouseService = DataWarehouseService;
exports.DataWarehouseService = DataWarehouseService = DataWarehouseService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object])
], DataWarehouseService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,