f45c71e1711ff3b61cd0d09267c44780
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const typeorm_1 = require("@nestjs/typeorm");
const bcrypt = __importStar(require("bcrypt"));
const auth_service_1 = require("../../../src/auth/auth.service");
const users_service_1 = require("../../../src/users/users.service");
const refresh_token_entity_1 = require("../../../src/auth/entities/refresh-token.entity");
const factories_1 = require("../../factories");
const common_1 = require("@nestjs/common");
describe('AuthService', () => {
    let service;
    let usersService;
    let jwtService;
    let refreshTokenRepository;
    let configService;
    const mockUser = factories_1.userFactory.forAuth('password123');
    const mockRefreshToken = {
        id: 'refresh-token-id',
        token: 'refresh-token',
        user: mockUser,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                {
                    provide: users_service_1.UsersService,
                    useValue: {
                        findByEmail: jest.fn(),
                        create: jest.fn(),
                        findById: jest.fn(),
                        update: jest.fn(),
                    },
                },
                {
                    provide: jwt_1.JwtService,
                    useValue: {
                        sign: jest.fn(),
                        verify: jest.fn(),
                    },
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(refresh_token_entity_1.RefreshToken),
                    useValue: {
                        create: jest.fn(),
                        save: jest.fn(),
                        findOne: jest.fn(),
                        delete: jest.fn(),
                        createQueryBuilder: jest.fn(),
                    },
                },
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn((key) => {
                            const config = {
                                JWT_SECRET: 'test-secret',
                                JWT_EXPIRES_IN: '15m',
                                JWT_REFRESH_SECRET: 'test-refresh-secret',
                                JWT_REFRESH_EXPIRES_IN: '7d',
                            };
                            return config[key];
                        }),
                    },
                },
            ],
        }).compile();
        service = module.get(auth_service_1.AuthService);
        usersService = module.get(users_service_1.UsersService);
        jwtService = module.get(jwt_1.JwtService);
        refreshTokenRepository = module.get((0, typeorm_1.getRepositoryToken)(refresh_token_entity_1.RefreshToken));
        configService = module.get(config_1.ConfigService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('validateUser', () => {
        it('should return user data when credentials are valid', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(bcrypt, 'compare').mockResolvedValue(true);
            const result = await service.validateUser(mockUser.email, 'password123');
            expect(result).toEqual({
                id: mockUser.id,
                email: mockUser.email,
                name: mockUser.name,
                role: mockUser.role,
            });
            expect(usersService.findByEmail).toHaveBeenCalledWith(mockUser.email);
        });
        it('should return null when user is not found', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);
            const result = await service.validateUser('nonexistent@test.com', 'password');
            expect(result).toBeNull();
        });
        it('should return null when password is invalid', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(bcrypt, 'compare').mockResolvedValue(false);
            const result = await service.validateUser(mockUser.email, 'wrongpassword');
            expect(result).toBeNull();
        });
        it('should return null when user is inactive', async () => {
            const inactiveUser = factories_1.userFactory.inactive();
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(inactiveUser);
            const result = await service.validateUser(inactiveUser.email, 'password123');
            expect(result).toBeNull();
        });
    });
    describe('login', () => {
        it('should return access and refresh tokens for valid user', async () => {
            const accessToken = 'access-token';
            const refreshToken = 'refresh-token';
            jest.spyOn(jwtService, 'sign')
                .mockReturnValueOnce(accessToken)
                .mockReturnValueOnce(refreshToken);
            jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken);
            jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken);
            const result = await service.login(mockUser);
            expect(result).toEqual({
                access_token: accessToken,
                refresh_token: refreshToken,
                user: {
                    id: mockUser.id,
                    email: mockUser.email,
                    name: mockUser.name,
                    role: mockUser.role,
                },
            });
            expect(jwtService.sign).toHaveBeenCalledTimes(2);
            expect(refreshTokenRepository.save).toHaveBeenCalled();
        });
        it('should update last login timestamp', async () => {
            jest.spyOn(jwtService, 'sign').mockReturnValue('token');
            jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken);
            jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken);
            jest.spyOn(usersService, 'update').mockResolvedValue(mockUser);
            await service.login(mockUser);
            expect(usersService.update).toHaveBeenCalledWith(mockUser.id, expect.objectContaining({
                lastLoginAt: expect.any(Date),
            }));
        });
    });
    describe('register', () => {
        const registerDto = {
            email: 'newuser@test.com',
            password: 'password123',
            name: 'New User',
            firstName: 'New',
            lastName: 'User',
        };
        it('should create new user and return tokens', async () => {
            const newUser = factories_1.userFactory.create({ overrides: registerDto });
            const accessToken = 'access-token';
            const refreshToken = 'refresh-token';
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);
            jest.spyOn(usersService, 'create').mockResolvedValue(newUser);
            jest.spyOn(jwtService, 'sign')
                .mockReturnValueOnce(accessToken)
                .mockReturnValueOnce(refreshToken);
            jest.spyOn(refreshTokenRepository, 'create').mockReturnValue(mockRefreshToken);
            jest.spyOn(refreshTokenRepository, 'save').mockResolvedValue(mockRefreshToken);
            const result = await service.register(registerDto);
            expect(result).toEqual({
                access_token: accessToken,
                refresh_token: refreshToken,
                user: expect.objectContaining({
                    email: registerDto.email,
                    name: registerDto.name,
                }),
            });
            expect(usersService.create).toHaveBeenCalledWith(expect.objectContaining({
                email: registerDto.email,
                name: registerDto.name,
            }));
        });
        it('should throw error when email already exists', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);
            await expect(service.register(registerDto)).rejects.toThrow(common_1.BadRequestException);
            expect(usersService.create).not.toHaveBeenCalled();
        });
    });
    describe('refreshToken', () => {
        it('should return new access token for valid refresh token', async () => {
            const newAccessToken = 'new-access-token';
            jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: mockUser.id });
            jest.spyOn(refreshTokenRepository, 'findOne').mockResolvedValue(mockRefreshToken);
            jest.spyOn(usersService, 'findById').mockResolvedValue(mockUser);
            jest.spyOn(jwtService, 'sign').mockReturnValue(newAccessToken);
            const result = await service.refreshToken('refresh-token');
            expect(result).toEqual({
                access_token: newAccessToken,
            });
            expect(jwtService.verify).toHaveBeenCalledWith('refresh-token', {
                secret: 'test-refresh-secret',
            });
        });
        it('should throw error for invalid refresh token', async () => {
            jest.spyOn(jwtService, 'verify').mockImplementation(() => {
                throw new Error('Invalid token');
            });
            await expect(service.refreshToken('invalid-token')).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('should throw error for expired refresh token', async () => {
            const expiredToken = {
                ...mockRefreshToken,
                expiresAt: new Date(Date.now() - 1000),
            };
            jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: mockUser.id });
            jest.spyOn(refreshTokenRepository, 'findOne').mockResolvedValue(expiredToken);
            await expect(service.refreshToken('expired-token')).rejects.toThrow(common_1.UnauthorizedException);
        });
    });
    describe('logout', () => {
        it('should delete refresh token', async () => {
            jest.spyOn(refreshTokenRepository, 'delete').mockResolvedValue({ affected: 1 });
            await service.logout('refresh-token');
            expect(refreshTokenRepository.delete).toHaveBeenCalledWith({
                token: 'refresh-token',
            });
        });
    });
    describe('forgotPassword', () => {
        it('should generate reset token for existing user', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(usersService, 'update').mockResolvedValue(mockUser);
            await service.forgotPassword(mockUser.email);
            expect(usersService.update).toHaveBeenCalledWith(mockUser.id, expect.objectContaining({
                passwordResetToken: expect.any(String),
                passwordResetExpires: expect.any(Date),
            }));
        });
        it('should not throw error for non-existent email', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);
            await expect(service.forgotPassword('nonexistent@test.com')).resolves.not.toThrow();
        });
    });
    describe('resetPassword', () => {
        it('should reset password with valid token', async () => {
            const userWithResetToken = factories_1.userFactory.withTrait('withResetToken');
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(userWithResetToken);
            jest.spyOn(usersService, 'update').mockResolvedValue(userWithResetToken);
            await service.resetPassword('reset-token', 'newpassword123');
            expect(usersService.update).toHaveBeenCalledWith(userWithResetToken.id, expect.objectContaining({
                password: expect.any(String),
                passwordResetToken: null,
                passwordResetExpires: null,
            }));
        });
        it('should throw error for invalid reset token', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);
            await expect(service.resetPassword('invalid-token', 'newpassword')).rejects.toThrow(common_1.BadRequestException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,