{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\data-processing.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\data-processing.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport { Cron, CronExpression } from \"@nestjs/schedule\"\r\n\r\nimport type { AnalyticsEvent } from \"../entities/analytics-event.entity\"\r\nimport type { DataWarehouseService } from \"./data-warehouse.service\"\r\n\r\n@Injectable()\r\nexport class DataProcessingService {\r\n  private readonly logger = new Logger(DataProcessingService.name)\r\n\r\n  constructor(\r\n    private readonly analyticsEventRepository: Repository<AnalyticsEvent>,\r\n    private readonly dataWarehouseService: DataWarehouseService,\r\n  ) {}\r\n\r\n  async processEvent(event: AnalyticsEvent): Promise<void> {\r\n    try {\r\n      // Save raw event\r\n      await this.analyticsEventRepository.save(event)\r\n\r\n      // Extract metrics for data warehouse\r\n      await this.extractMetrics(event)\r\n\r\n      this.logger.log(`Processed event: ${event.eventName}`)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to process event: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async extractMetrics(event: AnalyticsEvent): Promise<void> {\r\n    const timestamp = event.timestamp\r\n    const dimensions = {\r\n      eventType: event.eventType,\r\n      eventName: event.eventName,\r\n      source: event.source || \"unknown\",\r\n      channel: event.channel || \"unknown\",\r\n    }\r\n\r\n    // Event count metric\r\n    await this.dataWarehouseService.recordMetric({\r\n      metricName: \"event_count\",\r\n      metricType: \"counter\",\r\n      value: 1,\r\n      dimensions,\r\n      timestamp,\r\n    })\r\n\r\n    // User activity metrics\r\n    if (event.userId) {\r\n      await this.dataWarehouseService.recordMetric({\r\n        metricName: \"active_users\",\r\n        metricType: \"gauge\",\r\n        value: 1,\r\n        dimensions: { ...dimensions, userId: event.userId },\r\n        timestamp,\r\n      })\r\n    }\r\n\r\n    // Session metrics\r\n    if (event.sessionId) {\r\n      await this.dataWarehouseService.recordMetric({\r\n        metricName: \"active_sessions\",\r\n        metricType: \"gauge\",\r\n        value: 1,\r\n        dimensions: { ...dimensions, sessionId: event.sessionId },\r\n        timestamp,\r\n      })\r\n    }\r\n\r\n    // Custom property metrics\r\n    if (event.properties) {\r\n      for (const [key, value] of Object.entries(event.properties)) {\r\n        if (typeof value === \"number\") {\r\n          await this.dataWarehouseService.recordMetric({\r\n            metricName: `property_${key}`,\r\n            metricType: \"gauge\",\r\n            value,\r\n            dimensions: { ...dimensions, property: key },\r\n            timestamp,\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_HOUR)\r\n  async aggregateHourlyMetrics(): Promise<void> {\r\n    this.logger.log(\"Starting hourly metrics aggregation\")\r\n\r\n    try {\r\n      const endTime = new Date()\r\n      const startTime = new Date(endTime.getTime() - 60 * 60 * 1000) // 1 hour ago\r\n\r\n      await this.dataWarehouseService.aggregateMetrics(startTime, endTime, \"1h\")\r\n\r\n      this.logger.log(\"Completed hourly metrics aggregation\")\r\n    } catch (error) {\r\n      this.logger.error(`Hourly aggregation failed: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n\r\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\r\n  async aggregateDailyMetrics(): Promise<void> {\r\n    this.logger.log(\"Starting daily metrics aggregation\")\r\n\r\n    try {\r\n      const endTime = new Date()\r\n      const startTime = new Date(endTime.getTime() - 24 * 60 * 60 * 1000) // 1 day ago\r\n\r\n      await this.dataWarehouseService.aggregateMetrics(startTime, endTime, \"1d\")\r\n\r\n      this.logger.log(\"Completed daily metrics aggregation\")\r\n    } catch (error) {\r\n      this.logger.error(`Daily aggregation failed: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n}\r\n"],"version":3}