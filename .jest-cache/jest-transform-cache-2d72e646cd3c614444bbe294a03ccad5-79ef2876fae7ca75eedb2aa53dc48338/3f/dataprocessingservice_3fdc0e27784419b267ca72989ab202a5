f12d8643f943b9e638911767e376c982
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataProcessingService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataProcessingService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
let DataProcessingService = DataProcessingService_1 = class DataProcessingService {
    constructor(analyticsEventRepository, dataWarehouseService) {
        this.analyticsEventRepository = analyticsEventRepository;
        this.dataWarehouseService = dataWarehouseService;
        this.logger = new common_1.Logger(DataProcessingService_1.name);
    }
    async processEvent(event) {
        try {
            // Save raw event
            await this.analyticsEventRepository.save(event);
            // Extract metrics for data warehouse
            await this.extractMetrics(event);
            this.logger.log(`Processed event: ${event.eventName}`);
        }
        catch (error) {
            this.logger.error(`Failed to process event: ${error.message}`, error.stack);
            throw error;
        }
    }
    async extractMetrics(event) {
        const timestamp = event.timestamp;
        const dimensions = {
            eventType: event.eventType,
            eventName: event.eventName,
            source: event.source || "unknown",
            channel: event.channel || "unknown",
        };
        // Event count metric
        await this.dataWarehouseService.recordMetric({
            metricName: "event_count",
            metricType: "counter",
            value: 1,
            dimensions,
            timestamp,
        });
        // User activity metrics
        if (event.userId) {
            await this.dataWarehouseService.recordMetric({
                metricName: "active_users",
                metricType: "gauge",
                value: 1,
                dimensions: { ...dimensions, userId: event.userId },
                timestamp,
            });
        }
        // Session metrics
        if (event.sessionId) {
            await this.dataWarehouseService.recordMetric({
                metricName: "active_sessions",
                metricType: "gauge",
                value: 1,
                dimensions: { ...dimensions, sessionId: event.sessionId },
                timestamp,
            });
        }
        // Custom property metrics
        if (event.properties) {
            for (const [key, value] of Object.entries(event.properties)) {
                if (typeof value === "number") {
                    await this.dataWarehouseService.recordMetric({
                        metricName: `property_${key}`,
                        metricType: "gauge",
                        value,
                        dimensions: { ...dimensions, property: key },
                        timestamp,
                    });
                }
            }
        }
    }
    async aggregateHourlyMetrics() {
        this.logger.log("Starting hourly metrics aggregation");
        try {
            const endTime = new Date();
            const startTime = new Date(endTime.getTime() - 60 * 60 * 1000); // 1 hour ago
            await this.dataWarehouseService.aggregateMetrics(startTime, endTime, "1h");
            this.logger.log("Completed hourly metrics aggregation");
        }
        catch (error) {
            this.logger.error(`Hourly aggregation failed: ${error.message}`, error.stack);
        }
    }
    async aggregateDailyMetrics() {
        this.logger.log("Starting daily metrics aggregation");
        try {
            const endTime = new Date();
            const startTime = new Date(endTime.getTime() - 24 * 60 * 60 * 1000); // 1 day ago
            await this.dataWarehouseService.aggregateMetrics(startTime, endTime, "1d");
            this.logger.log("Completed daily metrics aggregation");
        }
        catch (error) {
            this.logger.error(`Daily aggregation failed: ${error.message}`, error.stack);
        }
    }
};
exports.DataProcessingService = DataProcessingService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_HOUR),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], DataProcessingService.prototype, "aggregateHourlyMetrics", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], DataProcessingService.prototype, "aggregateDailyMetrics", null);
exports.DataProcessingService = DataProcessingService = DataProcessingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], DataProcessingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,