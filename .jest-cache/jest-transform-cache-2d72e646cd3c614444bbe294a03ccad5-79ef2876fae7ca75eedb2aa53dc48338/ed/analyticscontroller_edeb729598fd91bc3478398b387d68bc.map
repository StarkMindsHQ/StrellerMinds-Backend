{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\controllers\\analytics.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\controllers\\analytics.controller.ts"],"sourcesContent":["import { Controller, Post, Get, Query, Param, ValidationPipe, UsePipes } from \"@nestjs/common\"\r\nimport { ApiTags, ApiOperation, ApiResponse } from \"@nestjs/swagger\"\r\n\r\nimport type { DataCollectionService, EventData } from \"../services/data-collection.service\"\r\nimport type { BusinessIntelligenceService, AnalyticsQuery } from \"../services/business-intelligence.service\"\r\nimport type { RealTimeAnalyticsService } from \"../services/real-time-analytics.service\"\r\n\r\nimport type { TrackEventDto } from \"../dto/track-event.dto\"\r\nimport type { AnalyticsQueryDto } from \"../dto/analytics-query.dto\"\r\n\r\n@ApiTags(\"Analytics\")\r\n@Controller(\"analytics\")\r\nexport class AnalyticsController {\r\n  constructor(\r\n    private readonly dataCollectionService: DataCollectionService,\r\n    private readonly businessIntelligenceService: BusinessIntelligenceService,\r\n    private readonly realTimeAnalyticsService: RealTimeAnalyticsService,\r\n  ) {}\r\n\r\n  @Post(\"track\")\r\n  @ApiOperation({ summary: \"Track a single analytics event\" })\r\n  @ApiResponse({ status: 201, description: \"Event tracked successfully\" })\r\n  @UsePipes(new ValidationPipe({ transform: true }))\r\n  async trackEvent(trackEventDto: TrackEventDto) {\r\n    await this.dataCollectionService.trackEvent(trackEventDto as EventData)\r\n    return { success: true, message: \"Event tracked successfully\" }\r\n  }\r\n\r\n  @Post(\"track/batch\")\r\n  @ApiOperation({ summary: \"Track multiple analytics events\" })\r\n  @ApiResponse({ status: 201, description: \"Events tracked successfully\" })\r\n  @UsePipes(new ValidationPipe({ transform: true }))\r\n  async trackEvents(events: TrackEventDto[]) {\r\n    await this.dataCollectionService.batchTrackEvents(events as EventData[])\r\n    return { success: true, message: `${events.length} events tracked successfully` }\r\n  }\r\n\r\n  @Post(\"query\")\r\n  @ApiOperation({ summary: \"Execute analytics query\" })\r\n  @ApiResponse({ status: 200, description: \"Query executed successfully\" })\r\n  @UsePipes(new ValidationPipe({ transform: true }))\r\n  async executeQuery(queryDto: AnalyticsQueryDto) {\r\n    const result = await this.businessIntelligenceService.executeQuery(queryDto as AnalyticsQuery)\r\n    return result\r\n  }\r\n\r\n  @Get(\"events\")\r\n  @ApiOperation({ summary: \"Get analytics events with filters\" })\r\n  @ApiResponse({ status: 200, description: \"Events retrieved successfully\" })\r\n  async getEvents(\r\n    @Query('eventType') eventType?: string,\r\n    @Query('userId') userId?: string,\r\n    @Query('sessionId') sessionId?: string,\r\n    @Query('startDate') startDate?: string,\r\n    @Query('endDate') endDate?: string,\r\n    @Query('limit') limit?: number,\r\n    @Query('offset') offset?: number,\r\n  ) {\r\n    const filters = {\r\n      eventType: eventType as any,\r\n      userId,\r\n      sessionId,\r\n      startDate: startDate ? new Date(startDate) : undefined,\r\n      endDate: endDate ? new Date(endDate) : undefined,\r\n      limit: limit ? Number.parseInt(limit.toString()) : undefined,\r\n      offset: offset ? Number.parseInt(offset.toString()) : undefined,\r\n    }\r\n\r\n    return this.dataCollectionService.getEvents(filters)\r\n  }\r\n\r\n  @Get(\"user/:userId\")\r\n  @ApiOperation({ summary: \"Get user analytics\" })\r\n  @ApiResponse({ status: 200, description: \"User analytics retrieved successfully\" })\r\n  async getUserAnalytics(\r\n    @Param('userId') userId: string,\r\n    @Query('startDate') startDate?: string,\r\n    @Query('endDate') endDate?: string,\r\n  ) {\r\n    const timeRange = {\r\n      start: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\r\n      end: endDate ? new Date(endDate) : new Date(),\r\n    }\r\n\r\n    return this.businessIntelligenceService.getUserAnalytics(userId, timeRange)\r\n  }\r\n\r\n  @Get(\"top/:metricName\")\r\n  @ApiOperation({ summary: \"Get top metrics by dimension\" })\r\n  @ApiResponse({ status: 200, description: \"Top metrics retrieved successfully\" })\r\n  async getTopMetrics(\r\n    @Param('metricName') metricName: string,\r\n    @Query('dimension') dimension: string,\r\n    @Query('startDate') startDate?: string,\r\n    @Query('endDate') endDate?: string,\r\n    @Query('limit') limit?: number,\r\n  ) {\r\n    const timeRange = {\r\n      start: startDate ? new Date(startDate) : new Date(Date.now() - 24 * 60 * 60 * 1000),\r\n      end: endDate ? new Date(endDate) : new Date(),\r\n    }\r\n\r\n    return this.businessIntelligenceService.getTopMetrics(\r\n      metricName,\r\n      dimension,\r\n      timeRange,\r\n      limit ? Number.parseInt(limit.toString()) : 10,\r\n    )\r\n  }\r\n\r\n  @Post(\"funnel\")\r\n  @ApiOperation({ summary: \"Get funnel analysis\" })\r\n  @ApiResponse({ status: 200, description: \"Funnel analysis completed successfully\" })\r\n  async getFunnelAnalysis(body: { steps: string[]; startDate?: string; endDate?: string }) {\r\n    const timeRange = {\r\n      start: body.startDate ? new Date(body.startDate) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\r\n      end: body.endDate ? new Date(body.endDate) : new Date(),\r\n    }\r\n\r\n    return this.businessIntelligenceService.getFunnelAnalysis(body.steps, timeRange)\r\n  }\r\n\r\n  @Get(\"real-time/metrics\")\r\n  @ApiOperation({ summary: \"Get current real-time metrics\" })\r\n  @ApiResponse({ status: 200, description: \"Real-time metrics retrieved successfully\" })\r\n  async getRealTimeMetrics() {\r\n    const metrics = await this.realTimeAnalyticsService.getCurrentMetrics()\r\n    const activeUsers = await this.realTimeAnalyticsService.getActiveUsers()\r\n    const eventsPerSecond = await this.realTimeAnalyticsService.getEventsPerSecond()\r\n\r\n    return {\r\n      metrics,\r\n      summary: {\r\n        activeUsers,\r\n        eventsPerSecond,\r\n        timestamp: new Date(),\r\n      },\r\n    }\r\n  }\r\n}\r\n"],"version":3}