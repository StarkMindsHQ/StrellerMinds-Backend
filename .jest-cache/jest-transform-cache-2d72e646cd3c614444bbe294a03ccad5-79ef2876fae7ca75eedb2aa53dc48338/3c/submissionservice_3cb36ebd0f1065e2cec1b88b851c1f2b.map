{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\submission\\provider\\submission.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,uCAAuC;AACvC,2CAAoF;AACpF,6CAAmD;AACnD,qCAAqC;AAGrC,4DAAkD;AAG3C,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEU,cAAsC;QAAtC,mBAAc,GAAd,cAAc,CAAwB;IAC7C,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,SAA8B,EAAE,IAA0B;QACrE,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;YAC5C,GAAG,SAAS;YACZ,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;YAChC,MAAM,EAAE,WAAW;SACpB,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAU;QACtB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,0BAAiB,CAAC,sBAAsB,CAAC,CAAC;QACrE,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,SAAuC,EAAE,IAA0B;QAC1F,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,MAAM,oBAAoB,GAAG,CAAC,CAAC;QAC/B,MAAM,SAAS,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QAC/F,IAAI,SAAS,GAAG,oBAAoB,EAAE,CAAC;YACrC,MAAM,IAAI,4BAAmB,CAAC,qBAAqB,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrC,IAAI,IAAI;YAAE,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QACzC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;CACF,CAAA;AAnCY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8BAAU,CAAC,CAAA;yDACL,oBAAU,oBAAV,oBAAU;GAHzB,iBAAiB,CAmC7B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\submission\\provider\\submission.service.ts"],"sourcesContent":["// src/submission/submission.service.ts\r\nimport { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Express } from 'express';\r\nimport { CreateSubmissionDto } from '../dtos/createSubmission.dto';\r\nimport { Submission } from '../submission.entity';\r\n\r\n@Injectable()\r\nexport class SubmissionService {\r\n  constructor(\r\n    @InjectRepository(Submission)\r\n    private submissionRepo: Repository<Submission>,\r\n  ) {}\r\n\r\n  async create(createDto: CreateSubmissionDto, file?: Express.Multer.File) {\r\n    const submission = this.submissionRepo.create({\r\n      ...createDto,\r\n      fileUrl: file ? file.path : null,\r\n      status: 'submitted',\r\n    });\r\n    return this.submissionRepo.save(submission);\r\n  }\r\n\r\n  async findOne(id: string) {\r\n    const submission = await this.submissionRepo.findOne({ where: { id } });\r\n    if (!submission) throw new NotFoundException('Submission not found');\r\n    return submission;\r\n  }\r\n\r\n  async update(id: string, updateDto: Partial<CreateSubmissionDto>, file?: Express.Multer.File) {\r\n    const submission = await this.findOne(id);\r\n    const now = new Date();\r\n\r\n    const allowedPeriodInHours = 6;\r\n    const diffHours = (now.getTime() - new Date(submission.submittedAt).getTime()) / (1000 * 3600);\r\n    if (diffHours > allowedPeriodInHours) {\r\n      throw new BadRequestException('Update time expired');\r\n    }\r\n\r\n    Object.assign(submission, updateDto);\r\n    if (file) submission.fileUrl = file.path;\r\n    return this.submissionRepo.save(submission);\r\n  }\r\n}"],"version":3}