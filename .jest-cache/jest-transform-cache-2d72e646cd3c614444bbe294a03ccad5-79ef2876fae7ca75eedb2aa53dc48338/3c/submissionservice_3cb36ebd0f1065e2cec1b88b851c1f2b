8ef457bf9dc21338876a649e1f56fe2a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmissionService = void 0;
// src/submission/submission.service.ts
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const submission_entity_1 = require("../submission.entity");
let SubmissionService = class SubmissionService {
    constructor(submissionRepo) {
        this.submissionRepo = submissionRepo;
    }
    async create(createDto, file) {
        const submission = this.submissionRepo.create({
            ...createDto,
            fileUrl: file ? file.path : null,
            status: 'submitted',
        });
        return this.submissionRepo.save(submission);
    }
    async findOne(id) {
        const submission = await this.submissionRepo.findOne({ where: { id } });
        if (!submission)
            throw new common_1.NotFoundException('Submission not found');
        return submission;
    }
    async update(id, updateDto, file) {
        const submission = await this.findOne(id);
        const now = new Date();
        const allowedPeriodInHours = 6;
        const diffHours = (now.getTime() - new Date(submission.submittedAt).getTime()) / (1000 * 3600);
        if (diffHours > allowedPeriodInHours) {
            throw new common_1.BadRequestException('Update time expired');
        }
        Object.assign(submission, updateDto);
        if (file)
            submission.fileUrl = file.path;
        return this.submissionRepo.save(submission);
    }
};
exports.SubmissionService = SubmissionService;
exports.SubmissionService = SubmissionService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(submission_entity_1.Submission)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], SubmissionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxzdWJtaXNzaW9uXFxwcm92aWRlclxcc3VibWlzc2lvbi5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsMkNBQW9GO0FBQ3BGLDZDQUFtRDtBQUNuRCxxQ0FBcUM7QUFHckMsNERBQWtEO0FBRzNDLElBQU0saUJBQWlCLEdBQXZCLE1BQU0saUJBQWlCO0lBQzVCLFlBRVUsY0FBc0M7UUFBdEMsbUJBQWMsR0FBZCxjQUFjLENBQXdCO0lBQzdDLENBQUM7SUFFSixLQUFLLENBQUMsTUFBTSxDQUFDLFNBQThCLEVBQUUsSUFBMEI7UUFDckUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFDNUMsR0FBRyxTQUFTO1lBQ1osT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUNoQyxNQUFNLEVBQUUsV0FBVztTQUNwQixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQVU7UUFDdEIsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsVUFBVTtZQUFFLE1BQU0sSUFBSSwwQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVUsRUFBRSxTQUF1QyxFQUFFLElBQTBCO1FBQzFGLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRXZCLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQy9GLElBQUksU0FBUyxHQUFHLG9CQUFvQixFQUFFLENBQUM7WUFDckMsTUFBTSxJQUFJLDRCQUFtQixDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksSUFBSTtZQUFFLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRixDQUFBO0FBbkNZLDhDQUFpQjs0QkFBakIsaUJBQWlCO0lBRDdCLElBQUEsbUJBQVUsR0FBRTtJQUdSLFdBQUEsSUFBQSwwQkFBZ0IsRUFBQyw4QkFBVSxDQUFDLENBQUE7eURBQ0wsb0JBQVUsb0JBQVYsb0JBQVU7R0FIekIsaUJBQWlCLENBbUM3QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGctZWtvaFxcRGVza3RvcFxcU3RyZWxsZXJNaW5kcy1CYWNrZW5kXFxzcmNcXHN1Ym1pc3Npb25cXHByb3ZpZGVyXFxzdWJtaXNzaW9uLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3N1Ym1pc3Npb24vc3VibWlzc2lvbi5zZXJ2aWNlLnRzXHJcbmltcG9ydCB7IEluamVjdGFibGUsIE5vdEZvdW5kRXhjZXB0aW9uLCBCYWRSZXF1ZXN0RXhjZXB0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RSZXBvc2l0b3J5IH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBFeHByZXNzIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCB7IENyZWF0ZVN1Ym1pc3Npb25EdG8gfSBmcm9tICcuLi9kdG9zL2NyZWF0ZVN1Ym1pc3Npb24uZHRvJztcclxuaW1wb3J0IHsgU3VibWlzc2lvbiB9IGZyb20gJy4uL3N1Ym1pc3Npb24uZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN1Ym1pc3Npb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFN1Ym1pc3Npb24pXHJcbiAgICBwcml2YXRlIHN1Ym1pc3Npb25SZXBvOiBSZXBvc2l0b3J5PFN1Ym1pc3Npb24+LFxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgY3JlYXRlKGNyZWF0ZUR0bzogQ3JlYXRlU3VibWlzc2lvbkR0bywgZmlsZT86IEV4cHJlc3MuTXVsdGVyLkZpbGUpIHtcclxuICAgIGNvbnN0IHN1Ym1pc3Npb24gPSB0aGlzLnN1Ym1pc3Npb25SZXBvLmNyZWF0ZSh7XHJcbiAgICAgIC4uLmNyZWF0ZUR0byxcclxuICAgICAgZmlsZVVybDogZmlsZSA/IGZpbGUucGF0aCA6IG51bGwsXHJcbiAgICAgIHN0YXR1czogJ3N1Ym1pdHRlZCcsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLnN1Ym1pc3Npb25SZXBvLnNhdmUoc3VibWlzc2lvbik7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmaW5kT25lKGlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN1Ym1pc3Npb24gPSBhd2FpdCB0aGlzLnN1Ym1pc3Npb25SZXBvLmZpbmRPbmUoeyB3aGVyZTogeyBpZCB9IH0pO1xyXG4gICAgaWYgKCFzdWJtaXNzaW9uKSB0aHJvdyBuZXcgTm90Rm91bmRFeGNlcHRpb24oJ1N1Ym1pc3Npb24gbm90IGZvdW5kJyk7XHJcbiAgICByZXR1cm4gc3VibWlzc2lvbjtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZShpZDogc3RyaW5nLCB1cGRhdGVEdG86IFBhcnRpYWw8Q3JlYXRlU3VibWlzc2lvbkR0bz4sIGZpbGU/OiBFeHByZXNzLk11bHRlci5GaWxlKSB7XHJcbiAgICBjb25zdCBzdWJtaXNzaW9uID0gYXdhaXQgdGhpcy5maW5kT25lKGlkKTtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgY29uc3QgYWxsb3dlZFBlcmlvZEluSG91cnMgPSA2O1xyXG4gICAgY29uc3QgZGlmZkhvdXJzID0gKG5vdy5nZXRUaW1lKCkgLSBuZXcgRGF0ZShzdWJtaXNzaW9uLnN1Ym1pdHRlZEF0KS5nZXRUaW1lKCkpIC8gKDEwMDAgKiAzNjAwKTtcclxuICAgIGlmIChkaWZmSG91cnMgPiBhbGxvd2VkUGVyaW9kSW5Ib3Vycykge1xyXG4gICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdEV4Y2VwdGlvbignVXBkYXRlIHRpbWUgZXhwaXJlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oc3VibWlzc2lvbiwgdXBkYXRlRHRvKTtcclxuICAgIGlmIChmaWxlKSBzdWJtaXNzaW9uLmZpbGVVcmwgPSBmaWxlLnBhdGg7XHJcbiAgICByZXR1cm4gdGhpcy5zdWJtaXNzaW9uUmVwby5zYXZlKHN1Ym1pc3Npb24pO1xyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==