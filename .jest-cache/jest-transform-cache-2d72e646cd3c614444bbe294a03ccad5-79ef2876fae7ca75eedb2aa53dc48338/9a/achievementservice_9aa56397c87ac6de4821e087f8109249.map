{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\achievement.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,uEAA6D;AAC7D,iFAAsE;AAK/D,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEU,eAAwC,EAExC,mBAAgD;QAFhD,oBAAe,GAAf,eAAe,CAAyB;QAExC,wBAAmB,GAAnB,mBAAmB,CAA6B;IACvD,CAAC;IAEJ,KAAK,CAAC,iBAAiB,CAAC,GAAyB;QAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,IAAU,EAAE,aAAqB;QACvD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,CAAC,CAAC;QACvE,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YAC3D,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE;SACrE,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;YACzE,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvD,CAAC;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,IAAU;QAClC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IACzG,CAAC;CACF,CAAA;AAjCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;IAE7B,WAAA,IAAA,0BAAgB,EAAC,yCAAe,CAAC,CAAA;yDADT,oBAAU,oBAAV,oBAAU,oDAEN,oBAAU,oBAAV,oBAAU;GAL9B,kBAAkB,CAiC9B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\achievement.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Achievement } from '../entities/achievement.entity';\r\nimport { UserAchievement } from '../entities/user-achievement.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { CreateAchievementDto } from '../dto/create-achievement.dto';\r\n\r\n@Injectable()\r\nexport class AchievementService {\r\n  constructor(\r\n    @InjectRepository(Achievement)\r\n    private achievementRepo: Repository<Achievement>,\r\n    @InjectRepository(UserAchievement)\r\n    private userAchievementRepo: Repository<UserAchievement>,\r\n  ) {}\r\n\r\n  async createAchievement(dto: CreateAchievementDto): Promise<Achievement> {\r\n    const achievement = this.achievementRepo.create(dto);\r\n    return this.achievementRepo.save(achievement);\r\n  }\r\n\r\n  async getAllAchievements(): Promise<Achievement[]> {\r\n    return this.achievementRepo.find();\r\n  }\r\n\r\n  async unlockAchievement(user: User, achievementId: number): Promise<UserAchievement> {\r\n    const achievement = await this.achievementRepo.findOneBy({ id: achievementId });\r\n    if (!achievement) throw new NotFoundException('Achievement not found');\r\n    let userAchievement = await this.userAchievementRepo.findOne({\r\n      where: { user: { id: user.id }, achievement: { id: achievementId } },\r\n    });\r\n    if (!userAchievement) {\r\n      userAchievement = this.userAchievementRepo.create({ user, achievement });\r\n      await this.userAchievementRepo.save(userAchievement);\r\n    }\r\n    return userAchievement;\r\n  }\r\n\r\n  async getUserAchievements(user: User): Promise<UserAchievement[]> {\r\n    return this.userAchievementRepo.find({ where: { user: { id: user.id } }, relations: ['achievement'] });\r\n  }\r\n} "],"version":3}