{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\guards\\jwt-auth.guard.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\auth\\guards\\jwt-auth.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { JwtAuthGuard } from './jwt-auth.guard';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ExecutionContext } from '@nestjs/common';\r\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\r\n\r\ndescribe('JwtAuthGuard', () => {\r\n  let guard: JwtAuthGuard;\r\n  let jwtService: JwtService;\r\n  let reflector: Reflector;\r\n\r\n  const mockContext = {\r\n    switchToHttp: () => ({\r\n      getRequest: () => ({\r\n        headers: {\r\n          authorization: 'Bearer validToken',\r\n        },\r\n      }),\r\n    }),\r\n    getHandler: () => ({}),\r\n    getClass: () => ({}),\r\n  } as ExecutionContext;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        JwtAuthGuard,\r\n        {\r\n          provide: JwtService,\r\n          useValue: {\r\n            verify: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: Reflector,\r\n          useValue: {\r\n            getAllAndOverride: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    guard = module.get<JwtAuthGuard>(JwtAuthGuard);\r\n    jwtService = module.get<JwtService>(JwtService);\r\n    reflector = module.get<Reflector>(Reflector);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(guard).toBeDefined();\r\n  });\r\n\r\n  describe('canActivate', () => {\r\n    it('should allow access to public routes', async () => {\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(true);\r\n\r\n      const result = await guard.canActivate(mockContext);\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should validate token for protected routes', async () => {\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(false);\r\n      jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: '1' });\r\n\r\n      const result = await guard.canActivate(mockContext);\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should throw UnauthorizedException for invalid token', async () => {\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(false);\r\n      jest.spyOn(jwtService, 'verify').mockImplementation(() => {\r\n        throw new Error('Invalid token');\r\n      });\r\n\r\n      await expect(guard.canActivate(mockContext)).rejects.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('handleRequest', () => {\r\n    it('should return user for valid token', () => {\r\n      const user = { sub: '1', email: 'test@example.com' };\r\n      const result = guard.handleRequest(null, user, null);\r\n      expect(result).toEqual(user);\r\n    });\r\n\r\n    it('should throw UnauthorizedException for expired token', () => {\r\n      const error = { name: 'TokenExpiredError' };\r\n      expect(() => guard.handleRequest(null, null, error)).toThrow(\r\n        'Token has expired',\r\n      );\r\n    });\r\n\r\n    it('should throw UnauthorizedException for invalid token', () => {\r\n      expect(() => guard.handleRequest(new Error(), null, null)).toThrow(\r\n        'Invalid token',\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"version":3}