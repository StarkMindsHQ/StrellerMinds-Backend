c8154057983369e3727f9df8b1bd2194
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const jwt_auth_guard_1 = require("./jwt-auth.guard");
const jwt_1 = require("@nestjs/jwt");
const core_1 = require("@nestjs/core");
describe('JwtAuthGuard', () => {
    let guard;
    let jwtService;
    let reflector;
    const mockContext = {
        switchToHttp: () => ({
            getRequest: () => ({
                headers: {
                    authorization: 'Bearer validToken',
                },
            }),
        }),
        getHandler: () => ({}),
        getClass: () => ({}),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                jwt_auth_guard_1.JwtAuthGuard,
                {
                    provide: jwt_1.JwtService,
                    useValue: {
                        verify: jest.fn(),
                    },
                },
                {
                    provide: core_1.Reflector,
                    useValue: {
                        getAllAndOverride: jest.fn(),
                    },
                },
            ],
        }).compile();
        guard = module.get(jwt_auth_guard_1.JwtAuthGuard);
        jwtService = module.get(jwt_1.JwtService);
        reflector = module.get(core_1.Reflector);
    });
    it('should be defined', () => {
        expect(guard).toBeDefined();
    });
    describe('canActivate', () => {
        it('should allow access to public routes', async () => {
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(true);
            const result = await guard.canActivate(mockContext);
            expect(result).toBe(true);
        });
        it('should validate token for protected routes', async () => {
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(false);
            jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: '1' });
            const result = await guard.canActivate(mockContext);
            expect(result).toBe(true);
        });
        it('should throw UnauthorizedException for invalid token', async () => {
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(false);
            jest.spyOn(jwtService, 'verify').mockImplementation(() => {
                throw new Error('Invalid token');
            });
            await expect(guard.canActivate(mockContext)).rejects.toThrow();
        });
    });
    describe('handleRequest', () => {
        it('should return user for valid token', () => {
            const user = { sub: '1', email: 'test@example.com' };
            const result = guard.handleRequest(null, user, null);
            expect(result).toEqual(user);
        });
        it('should throw UnauthorizedException for expired token', () => {
            const error = { name: 'TokenExpiredError' };
            expect(() => guard.handleRequest(null, null, error)).toThrow('Token has expired');
        });
        it('should throw UnauthorizedException for invalid token', () => {
            expect(() => guard.handleRequest(new Error(), null, null)).toThrow('Invalid token');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,