25ea43b7f77272fad16fb88bc685a1d5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const push_notification_service_1 = require("../services/push-notification.service");
const push_subscription_entity_1 = require("../entities/push-subscription.entity");
const notification_template_entity_1 = require("../entities/notification-template.entity");
describe("PushNotificationService", () => {
    let service;
    let subscriptionRepository;
    let templateRepository;
    let notificationQueue;
    const mockSubscriptionRepository = {
        findOne: globals_1.jest.fn(),
        find: globals_1.jest.fn(),
        create: globals_1.jest.fn(),
        save: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        count: globals_1.jest.fn(),
        createQueryBuilder: globals_1.jest.fn(),
    };
    const mockTemplateRepository = {
        findOne: globals_1.jest.fn(),
    };
    const mockQueue = {
        add: globals_1.jest.fn(),
        addBulk: globals_1.jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                push_notification_service_1.PushNotificationService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(push_subscription_entity_1.PushSubscription),
                    useValue: mockSubscriptionRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(notification_template_entity_1.NotificationTemplate),
                    useValue: mockTemplateRepository,
                },
                {
                    provide: (0, bull_1.getQueueToken)("push-notifications"),
                    useValue: mockQueue,
                },
            ],
        }).compile();
        service = module.get(push_notification_service_1.PushNotificationService);
        subscriptionRepository = module.get((0, typeorm_1.getRepositoryToken)(push_subscription_entity_1.PushSubscription));
        templateRepository = module.get((0, typeorm_1.getRepositoryToken)(notification_template_entity_1.NotificationTemplate));
        notificationQueue = module.get((0, bull_1.getQueueToken)("push-notifications"));
    });
    afterEach(() => {
        globals_1.jest.clearAllMocks();
    });
    describe("createSubscription", () => {
        it("should create a new subscription", async () => {
            const subscriptionDto = {
                userId: "user123",
                subscription: {
                    endpoint: "https://example.com/push",
                    keys: {
                        p256dh: "test-p256dh",
                        auth: "test-auth",
                    },
                },
            };
            mockSubscriptionRepository.findOne.mockResolvedValue(null);
            mockSubscriptionRepository.create.mockReturnValue({ id: "sub123" });
            mockSubscriptionRepository.save.mockResolvedValue({ id: "sub123" });
            const result = await service.createSubscription(subscriptionDto);
            expect(mockSubscriptionRepository.findOne).toHaveBeenCalledWith({
                where: { endpoint: subscriptionDto.subscription.endpoint },
            });
            expect(mockSubscriptionRepository.create).toHaveBeenCalled();
            expect(mockSubscriptionRepository.save).toHaveBeenCalled();
            expect(result).toEqual({ id: "sub123" });
        });
        it("should update existing subscription", async () => {
            const subscriptionDto = {
                userId: "user123",
                subscription: {
                    endpoint: "https://example.com/push",
                    keys: {
                        p256dh: "test-p256dh",
                        auth: "test-auth",
                    },
                },
            };
            const existingSubscription = {
                id: "sub123",
                endpoint: "https://example.com/push",
                userId: "user123",
            };
            mockSubscriptionRepository.findOne.mockResolvedValue(existingSubscription);
            mockSubscriptionRepository.save.mockResolvedValue(existingSubscription);
            const result = await service.createSubscription(subscriptionDto);
            expect(mockSubscriptionRepository.save).toHaveBeenCalledWith(expect.objectContaining({
                id: "sub123",
                isActive: true,
                failureCount: 0,
            }));
        });
    });
    describe("sendNotification", () => {
        it("should queue notifications for active subscriptions", async () => {
            const notificationDto = {
                userIds: ["user123"],
                title: "Test Notification",
                body: "Test message",
            };
            const subscriptions = [
                {
                    id: "sub123",
                    userId: "user123",
                    isActive: true,
                    getSubscriptionData: () => ({
                        endpoint: "https://example.com/push",
                        keys: { p256dh: "test", auth: "test" },
                    }),
                },
            ];
            mockSubscriptionRepository.find.mockResolvedValue(subscriptions);
            mockQueue.addBulk.mockResolvedValue([]);
            const result = await service.sendNotification(notificationDto);
            expect(mockSubscriptionRepository.find).toHaveBeenCalled();
            expect(mockQueue.addBulk).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({
                    name: "send-push-notification",
                    data: expect.objectContaining({
                        subscriptionId: "sub123",
                    }),
                }),
            ]));
            expect(result.queued).toBe(1);
        });
        it("should use notification template when specified", async () => {
            const notificationDto = {
                userIds: ["user123"],
                templateType: "welcome",
                variables: { name: "John" },
            };
            const template = {
                render: globals_1.jest.fn().mockReturnValue({
                    title: "Welcome John!",
                    body: "Thanks for joining",
                }),
            };
            const subscriptions = [
                {
                    id: "sub123",
                    getSubscriptionData: () => ({ endpoint: "test", keys: {} }),
                },
            ];
            mockTemplateRepository.findOne.mockResolvedValue(template);
            mockSubscriptionRepository.find.mockResolvedValue(subscriptions);
            mockQueue.addBulk.mockResolvedValue([]);
            await service.sendNotification(notificationDto);
            expect(mockTemplateRepository.findOne).toHaveBeenCalledWith({
                where: { type: "welcome", isActive: true },
            });
            expect(template.render).toHaveBeenCalledWith({ name: "John" });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,