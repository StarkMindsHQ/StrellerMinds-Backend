{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\__tests__\\push-notification.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\__tests__\\push-notification.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { getRepositoryToken } from \"@nestjs/typeorm\"\r\nimport { getQueueToken } from \"@nestjs/bull\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { PushNotificationService } from \"../services/push-notification.service\"\r\nimport { PushSubscription } from \"../entities/push-subscription.entity\"\r\nimport { NotificationTemplate } from \"../entities/notification-template.entity\"\r\n\r\ndescribe(\"PushNotificationService\", () => {\r\n  let service: PushNotificationService\r\n  let subscriptionRepository: Repository<PushSubscription>\r\n  let templateRepository: Repository<NotificationTemplate>\r\n  let notificationQueue: Queue\r\n\r\n  const mockSubscriptionRepository = {\r\n    findOne: jest.fn(),\r\n    find: jest.fn(),\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n    update: jest.fn(),\r\n    count: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  }\r\n\r\n  const mockTemplateRepository = {\r\n    findOne: jest.fn(),\r\n  }\r\n\r\n  const mockQueue = {\r\n    add: jest.fn(),\r\n    addBulk: jest.fn(),\r\n  }\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PushNotificationService,\r\n        {\r\n          provide: getRepositoryToken(PushSubscription),\r\n          useValue: mockSubscriptionRepository,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(NotificationTemplate),\r\n          useValue: mockTemplateRepository,\r\n        },\r\n        {\r\n          provide: getQueueToken(\"push-notifications\"),\r\n          useValue: mockQueue,\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    service = module.get<PushNotificationService>(PushNotificationService)\r\n    subscriptionRepository = module.get<Repository<PushSubscription>>(getRepositoryToken(PushSubscription))\r\n    templateRepository = module.get<Repository<NotificationTemplate>>(getRepositoryToken(NotificationTemplate))\r\n    notificationQueue = module.get<Queue>(getQueueToken(\"push-notifications\"))\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe(\"createSubscription\", () => {\r\n    it(\"should create a new subscription\", async () => {\r\n      const subscriptionDto = {\r\n        userId: \"user123\",\r\n        subscription: {\r\n          endpoint: \"https://example.com/push\",\r\n          keys: {\r\n            p256dh: \"test-p256dh\",\r\n            auth: \"test-auth\",\r\n          },\r\n        },\r\n      }\r\n\r\n      mockSubscriptionRepository.findOne.mockResolvedValue(null)\r\n      mockSubscriptionRepository.create.mockReturnValue({ id: \"sub123\" })\r\n      mockSubscriptionRepository.save.mockResolvedValue({ id: \"sub123\" })\r\n\r\n      const result = await service.createSubscription(subscriptionDto)\r\n\r\n      expect(mockSubscriptionRepository.findOne).toHaveBeenCalledWith({\r\n        where: { endpoint: subscriptionDto.subscription.endpoint },\r\n      })\r\n      expect(mockSubscriptionRepository.create).toHaveBeenCalled()\r\n      expect(mockSubscriptionRepository.save).toHaveBeenCalled()\r\n      expect(result).toEqual({ id: \"sub123\" })\r\n    })\r\n\r\n    it(\"should update existing subscription\", async () => {\r\n      const subscriptionDto = {\r\n        userId: \"user123\",\r\n        subscription: {\r\n          endpoint: \"https://example.com/push\",\r\n          keys: {\r\n            p256dh: \"test-p256dh\",\r\n            auth: \"test-auth\",\r\n          },\r\n        },\r\n      }\r\n\r\n      const existingSubscription = {\r\n        id: \"sub123\",\r\n        endpoint: \"https://example.com/push\",\r\n        userId: \"user123\",\r\n      }\r\n\r\n      mockSubscriptionRepository.findOne.mockResolvedValue(existingSubscription)\r\n      mockSubscriptionRepository.save.mockResolvedValue(existingSubscription)\r\n\r\n      const result = await service.createSubscription(subscriptionDto)\r\n\r\n      expect(mockSubscriptionRepository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          id: \"sub123\",\r\n          isActive: true,\r\n          failureCount: 0,\r\n        }),\r\n      )\r\n    })\r\n  })\r\n\r\n  describe(\"sendNotification\", () => {\r\n    it(\"should queue notifications for active subscriptions\", async () => {\r\n      const notificationDto = {\r\n        userIds: [\"user123\"],\r\n        title: \"Test Notification\",\r\n        body: \"Test message\",\r\n      }\r\n\r\n      const subscriptions = [\r\n        {\r\n          id: \"sub123\",\r\n          userId: \"user123\",\r\n          isActive: true,\r\n          getSubscriptionData: () => ({\r\n            endpoint: \"https://example.com/push\",\r\n            keys: { p256dh: \"test\", auth: \"test\" },\r\n          }),\r\n        },\r\n      ]\r\n\r\n      mockSubscriptionRepository.find.mockResolvedValue(subscriptions)\r\n      mockQueue.addBulk.mockResolvedValue([])\r\n\r\n      const result = await service.sendNotification(notificationDto)\r\n\r\n      expect(mockSubscriptionRepository.find).toHaveBeenCalled()\r\n      expect(mockQueue.addBulk).toHaveBeenCalledWith(\r\n        expect.arrayContaining([\r\n          expect.objectContaining({\r\n            name: \"send-push-notification\",\r\n            data: expect.objectContaining({\r\n              subscriptionId: \"sub123\",\r\n            }),\r\n          }),\r\n        ]),\r\n      )\r\n      expect(result.queued).toBe(1)\r\n    })\r\n\r\n    it(\"should use notification template when specified\", async () => {\r\n      const notificationDto = {\r\n        userIds: [\"user123\"],\r\n        templateType: \"welcome\",\r\n        variables: { name: \"John\" },\r\n      }\r\n\r\n      const template = {\r\n        render: jest.fn().mockReturnValue({\r\n          title: \"Welcome John!\",\r\n          body: \"Thanks for joining\",\r\n        }),\r\n      }\r\n\r\n      const subscriptions = [\r\n        {\r\n          id: \"sub123\",\r\n          getSubscriptionData: () => ({ endpoint: \"test\", keys: {} }),\r\n        },\r\n      ]\r\n\r\n      mockTemplateRepository.findOne.mockResolvedValue(template)\r\n      mockSubscriptionRepository.find.mockResolvedValue(subscriptions)\r\n      mockQueue.addBulk.mockResolvedValue([])\r\n\r\n      await service.sendNotification(notificationDto)\r\n\r\n      expect(mockTemplateRepository.findOne).toHaveBeenCalledWith({\r\n        where: { type: \"welcome\", isActive: true },\r\n      })\r\n      expect(template.render).toHaveBeenCalledWith({ name: \"John\" })\r\n    })\r\n  })\r\n})\r\n"],"version":3}