{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\analytics.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytics-system\\analytics.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AnalyticsService } from './analytics.service';\r\nimport { AnalyticsDataService } from './services/analytics-data.service';\r\nimport { RealtimeAnalyticsService } from './services/realtime-analytics.service';\r\nimport { PredictiveAnalyticsService } from './services/predictive-analytics.service';\r\nimport { ReportingService } from './services/reporting.service';\r\nimport { Repository } from 'typeorm';\r\nimport { CourseCompletionPrediction } from './entities/course-completion-prediction.entity';\r\n\r\nconst mockAnalyticsDataService = {};\r\nconst mockRealtimeAnalyticsService = {\r\n  getRealtimeDashboardData: jest.fn(),\r\n};\r\nconst mockPredictiveAnalyticsService = {\r\n  predictCourseCompletion: jest.fn(),\r\n  getUserCompletionPredictions: jest.fn(),\r\n  getCourseCompletionPredictions: jest.fn(),\r\n};\r\nconst mockReportingService = {\r\n  getCoursePerformanceMetrics: jest.fn(),\r\n  getUserEngagementMetrics: jest.fn(),\r\n  getInstructorPerformanceMetrics: jest.fn(),\r\n  getPlatformOverviewMetrics: jest.fn(),\r\n  getPredictiveSummary: jest.fn(),\r\n  generateReport: jest.fn(),\r\n  getReportJobStatus: jest.fn(),\r\n};\r\nconst mockPredictionRepo = {\r\n  find: jest.fn(),\r\n};\r\n\r\ndescribe('AnalyticsService', () => {\r\n  let service: AnalyticsService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        AnalyticsService,\r\n        { provide: AnalyticsDataService, useValue: mockAnalyticsDataService },\r\n        {\r\n          provide: RealtimeAnalyticsService,\r\n          useValue: mockRealtimeAnalyticsService,\r\n        },\r\n        {\r\n          provide: PredictiveAnalyticsService,\r\n          useValue: mockPredictiveAnalyticsService,\r\n        },\r\n        { provide: ReportingService, useValue: mockReportingService },\r\n        {\r\n          provide: 'CourseCompletionPredictionRepository',\r\n          useValue: mockPredictionRepo,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get(AnalyticsService);\r\n  });\r\n\r\n  describe('getCoursePerformance', () => {\r\n    it('should throw if no courseId is provided', async () => {\r\n      await expect(service.getCoursePerformance({} as any)).rejects.toThrow(\r\n        'Course ID is required for course performance analytics.',\r\n      );\r\n    });\r\n\r\n    it('should return performance metrics', async () => {\r\n      mockReportingService.getCoursePerformanceMetrics.mockResolvedValue(\r\n        'course-metrics',\r\n      );\r\n      const result = await service.getCoursePerformance({ courseId: '123' });\r\n      expect(result).toBe('course-metrics');\r\n    });\r\n  });\r\n\r\n  describe('getUserEngagement', () => {\r\n    it('should throw if no userId is provided', async () => {\r\n      await expect(service.getUserEngagement({} as any)).rejects.toThrow(\r\n        'User ID is required for user engagement analytics.',\r\n      );\r\n    });\r\n\r\n    it('should return user engagement metrics', async () => {\r\n      mockReportingService.getUserEngagementMetrics.mockResolvedValue(\r\n        'user-metrics',\r\n      );\r\n      const result = await service.getUserEngagement({ userId: '456' });\r\n      expect(result).toBe('user-metrics');\r\n    });\r\n  });\r\n\r\n  describe('getInstructorPerformance', () => {\r\n    it('should throw if no instructorId is provided', async () => {\r\n      await expect(service.getInstructorPerformance({} as any)).rejects.toThrow(\r\n        'Instructor ID is required for instructor performance analytics.',\r\n      );\r\n    });\r\n\r\n    it('should return instructor performance metrics', async () => {\r\n      mockReportingService.getInstructorPerformanceMetrics.mockResolvedValue(\r\n        'instructor-metrics',\r\n      );\r\n      const result = await service.getInstructorPerformance({\r\n        instructorId: '789',\r\n      });\r\n      expect(result).toBe('instructor-metrics');\r\n    });\r\n  });\r\n\r\n  describe('getPlatformOverview', () => {\r\n    it('should return overview metrics', async () => {\r\n      mockReportingService.getPlatformOverviewMetrics.mockResolvedValue(\r\n        'overview',\r\n      );\r\n      const result = await service.getPlatformOverview({});\r\n      expect(result).toBe('overview');\r\n    });\r\n  });\r\n\r\n  describe('getRealtimeData', () => {\r\n    it('should return realtime dashboard data', async () => {\r\n      mockRealtimeAnalyticsService.getRealtimeDashboardData.mockResolvedValue(\r\n        'dashboard',\r\n      );\r\n      const result = await service.getRealtimeData();\r\n      expect(result).toBe('dashboard');\r\n    });\r\n  });\r\n\r\n  describe('predictCompletion', () => {\r\n    it('should return prediction result', async () => {\r\n      mockPredictiveAnalyticsService.predictCourseCompletion.mockResolvedValue(\r\n        'prediction',\r\n      );\r\n      const result = await service.predictCompletion({} as any);\r\n      expect(result).toBe('prediction');\r\n    });\r\n  });\r\n\r\n  describe('getUserPredictions', () => {\r\n    it('should return user predictions', async () => {\r\n      mockPredictiveAnalyticsService.getUserCompletionPredictions.mockResolvedValue(\r\n        ['pred1'],\r\n      );\r\n      const result = await service.getUserPredictions('user123');\r\n      expect(result).toEqual(['pred1']);\r\n    });\r\n  });\r\n\r\n  describe('getCoursePredictions', () => {\r\n    it('should return course predictions', async () => {\r\n      mockPredictiveAnalyticsService.getCourseCompletionPredictions.mockResolvedValue(\r\n        ['pred2'],\r\n      );\r\n      const result = await service.getCoursePredictions('course123');\r\n      expect(result).toEqual(['pred2']);\r\n    });\r\n  });\r\n\r\n  describe('generateReport', () => {\r\n    it('should return job info', async () => {\r\n      mockReportingService.generateReport.mockResolvedValue({\r\n        jobId: 'job1',\r\n        status: 'pending',\r\n      });\r\n      const result = await service.generateReport({} as any, 'user123');\r\n      expect(result).toEqual({ jobId: 'job1', status: 'pending' });\r\n    });\r\n  });\r\n\r\n  describe('getReportStatus', () => {\r\n    it('should return report job status', async () => {\r\n      mockReportingService.getReportJobStatus.mockResolvedValue({\r\n        jobId: 'job1',\r\n      });\r\n      const result = await service.getReportStatus('job1');\r\n      expect(result).toEqual({ jobId: 'job1' });\r\n    });\r\n  });\r\n\r\n  describe('getPredictiveSummary', () => {\r\n    it('should return summary', async () => {\r\n      mockReportingService.getPredictiveSummary.mockResolvedValue([\r\n        { summary: 'data' },\r\n      ]);\r\n      const result = await service.getPredictiveSummary({});\r\n      expect(result).toEqual({ summary: 'data' });\r\n    });\r\n  });\r\n});\r\n"],"version":3}