b9ace4d94d5c7de862d214a67e8b869d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsService = void 0;
const common_1 = require("@nestjs/common");
const ipfs_http_client_1 = require("ipfs-http-client");
const node_cache_1 = __importDefault(require("node-cache"));
const ipfs_only_hash_1 = require("ipfs-only-hash");
/**
 * Service for interacting with IPFS: add, retrieve, and verify content.
 */
let IpfsService = class IpfsService {
    constructor() {
        this.ipfs = (0, ipfs_http_client_1.create)({
            url: 'https://ipfs.infura.io:5001/api/v0',
        });
        this.cache = new node_cache_1.default({ stdTTL: 100, checkperiod: 120 });
    }
    /**
     * Add a file to IPFS and cache it.
     * @param content Buffer of the file content.
     * @returns The CID of the stored content.
     */
    async addFile(content) {
        try {
            const { cid } = await this.ipfs.add(content);
            this.cache.set(cid.toString(), content);
            return cid.toString();
        }
        catch (error) {
            throw new Error('Error adding file to IPFS');
        }
    }
    /**
     * Retrieve a file from IPFS by CID, using cache if available.
     * @param cid The Content Identifier.
     * @returns The content as a string.
     */
    async getFile(cid) {
        try {
            const cachedContent = this.cache.get(cid);
            if (cachedContent) {
                return cachedContent.toString();
            }
            const stream = this.ipfs.cat(cid);
            let data = '';
            for await (const chunk of stream) {
                data += chunk.toString();
            }
            this.cache.set(cid, data);
            return data;
        }
        catch (error) {
            throw new Error('Error retrieving file from IPFS');
        }
    }
    /**
     * Verify that the content matches the given CID.
     * @param cid The Content Identifier.
     * @param content The content buffer to verify.
     * @returns True if the content matches the CID, false otherwise.
     */
    async verifyContent(cid, content) {
        const hash = await (0, ipfs_only_hash_1.of)(content, { cidVersion: 0 });
        return hash === cid;
    }
};
exports.IpfsService = IpfsService;
exports.IpfsService = IpfsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], IpfsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxpcGZzXFxpcGZzLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTRDO0FBQzVDLHVEQUEwQztBQUMxQyw0REFBb0M7QUFDcEMsbURBQThDO0FBRzlDOztHQUVHO0FBRUksSUFBTSxXQUFXLEdBQWpCLE1BQU0sV0FBVztJQUl0QjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBQSx5QkFBTSxFQUFDO1lBQ2pCLEdBQUcsRUFBRSxvQ0FBb0M7U0FDMUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG9CQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFlO1FBQzNCLElBQUksQ0FBQztZQUNILE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN4QyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQVc7UUFDdkIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEMsQ0FBQztZQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUVkLElBQUksS0FBSyxFQUFFLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO2dCQUNqQyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzNCLENBQUM7WUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFXLEVBQUUsT0FBZTtRQUM5QyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsbUJBQU0sRUFBQyxPQUFPLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxPQUFPLElBQUksS0FBSyxHQUFHLENBQUM7SUFDdEIsQ0FBQztDQUNGLENBQUE7QUE5RFksa0NBQVc7c0JBQVgsV0FBVztJQUR2QixJQUFBLG1CQUFVLEdBQUU7O0dBQ0EsV0FBVyxDQThEdkIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxpcGZzXFxpcGZzLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnaXBmcy1odHRwLWNsaWVudCc7XHJcbmltcG9ydCBOb2RlQ2FjaGUgIGZyb20gJ25vZGUtY2FjaGUnO1xyXG5pbXBvcnQgeyBvZiBhcyBoYXNoT2YgfSBmcm9tICdpcGZzLW9ubHktaGFzaCc7XHJcbmltcG9ydCB7IEFwaVRhZ3MgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZm9yIGludGVyYWN0aW5nIHdpdGggSVBGUzogYWRkLCByZXRyaWV2ZSwgYW5kIHZlcmlmeSBjb250ZW50LlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSXBmc1NlcnZpY2Uge1xyXG4gIHByaXZhdGUgaXBmcztcclxuICBwcml2YXRlIGNhY2hlOiBOb2RlQ2FjaGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pcGZzID0gY3JlYXRlKHtcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9pcGZzLmluZnVyYS5pbzo1MDAxL2FwaS92MCcsXHJcbiAgICB9KTtcclxuICAgIHRoaXMuY2FjaGUgPSBuZXcgTm9kZUNhY2hlKHsgc3RkVFRMOiAxMDAsIGNoZWNrcGVyaW9kOiAxMjAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYSBmaWxlIHRvIElQRlMgYW5kIGNhY2hlIGl0LlxyXG4gICAqIEBwYXJhbSBjb250ZW50IEJ1ZmZlciBvZiB0aGUgZmlsZSBjb250ZW50LlxyXG4gICAqIEByZXR1cm5zIFRoZSBDSUQgb2YgdGhlIHN0b3JlZCBjb250ZW50LlxyXG4gICAqL1xyXG4gIGFzeW5jIGFkZEZpbGUoY29udGVudDogQnVmZmVyKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgY2lkIH0gPSBhd2FpdCB0aGlzLmlwZnMuYWRkKGNvbnRlbnQpO1xyXG4gICAgICB0aGlzLmNhY2hlLnNldChjaWQudG9TdHJpbmcoKSwgY29udGVudCk7XHJcbiAgICAgIHJldHVybiBjaWQudG9TdHJpbmcoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgYWRkaW5nIGZpbGUgdG8gSVBGUycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmUgYSBmaWxlIGZyb20gSVBGUyBieSBDSUQsIHVzaW5nIGNhY2hlIGlmIGF2YWlsYWJsZS5cclxuICAgKiBAcGFyYW0gY2lkIFRoZSBDb250ZW50IElkZW50aWZpZXIuXHJcbiAgICogQHJldHVybnMgVGhlIGNvbnRlbnQgYXMgYSBzdHJpbmcuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0RmlsZShjaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjYWNoZWRDb250ZW50ID0gdGhpcy5jYWNoZS5nZXQoY2lkKTtcclxuICAgICAgaWYgKGNhY2hlZENvbnRlbnQpIHtcclxuICAgICAgICByZXR1cm4gY2FjaGVkQ29udGVudC50b1N0cmluZygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLmlwZnMuY2F0KGNpZCk7XHJcbiAgICAgIGxldCBkYXRhID0gJyc7XHJcblxyXG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xyXG4gICAgICAgIGRhdGEgKz0gY2h1bmsudG9TdHJpbmcoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jYWNoZS5zZXQoY2lkLCBkYXRhKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgZmlsZSBmcm9tIElQRlMnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmeSB0aGF0IHRoZSBjb250ZW50IG1hdGNoZXMgdGhlIGdpdmVuIENJRC5cclxuICAgKiBAcGFyYW0gY2lkIFRoZSBDb250ZW50IElkZW50aWZpZXIuXHJcbiAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgYnVmZmVyIHRvIHZlcmlmeS5cclxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBjb250ZW50IG1hdGNoZXMgdGhlIENJRCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIGFzeW5jIHZlcmlmeUNvbnRlbnQoY2lkOiBzdHJpbmcsIGNvbnRlbnQ6IEJ1ZmZlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgaGFzaCA9IGF3YWl0IGhhc2hPZihjb250ZW50LCB7IGNpZFZlcnNpb246IDAgfSk7XHJcbiAgICByZXR1cm4gaGFzaCA9PT0gY2lkO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=