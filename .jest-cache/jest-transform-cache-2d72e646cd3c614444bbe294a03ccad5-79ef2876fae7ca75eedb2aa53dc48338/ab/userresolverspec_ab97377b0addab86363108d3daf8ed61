92b8d0344248fe0ce8c2ae4976dba51a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const testing_1 = require("@nestjs/testing");
const user_resolver_1 = require("../modules/user/resolvers/user.resolver");
const user_service_1 = require("../modules/user/services/user.service");
const user_loader_1 = require("../modules/user/loaders/user.loader");
describe("UserResolver", () => {
    let resolver;
    let userService;
    let userLoader;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                user_resolver_1.UserResolver,
                {
                    provide: user_service_1.UserService,
                    useValue: {
                        findAll: globals_1.jest.fn(),
                        create: globals_1.jest.fn(),
                        update: globals_1.jest.fn(),
                        delete: globals_1.jest.fn(),
                    },
                },
                {
                    provide: user_loader_1.UserLoader,
                    useValue: {
                        load: globals_1.jest.fn(),
                    },
                },
            ],
        }).compile();
        resolver = module.get(user_resolver_1.UserResolver);
        userService = module.get(user_service_1.UserService);
        userLoader = module.get(user_loader_1.UserLoader);
    });
    it("should be defined", () => {
        expect(resolver).toBeDefined();
    });
    describe("getUsers", () => {
        it("should return array of users", async () => {
            const mockUsers = [
                {
                    id: "1",
                    email: "test@example.com",
                    firstName: "John",
                    lastName: "Doe",
                    isActive: true,
                    posts: [],
                    createdAt: new Date(),
                    updatedAt: new Date(),
                },
            ];
            userService.findAll.mockResolvedValue(mockUsers);
            const result = await resolver.getUsers({ limit: 10, offset: 0 });
            expect(result).toEqual(mockUsers);
            expect(userService.findAll).toHaveBeenCalledWith({ limit: 10, offset: 0 });
        });
    });
    describe("getUser", () => {
        it("should return a user by id", async () => {
            const mockUser = {
                id: "1",
                email: "test@example.com",
                firstName: "John",
                lastName: "Doe",
                isActive: true,
                posts: [],
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            userLoader.load.mockResolvedValue(mockUser);
            const result = await resolver.getUser("1");
            expect(result).toEqual(mockUser);
            expect(userLoader.load).toHaveBeenCalledWith("1");
        });
    });
    describe("createUser", () => {
        it("should create a new user", async () => {
            const input = {
                email: "test@example.com",
                firstName: "John",
                lastName: "Doe",
            };
            const mockUser = {
                id: "1",
                ...input,
                isActive: true,
                posts: [],
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            userService.create.mockResolvedValue(mockUser);
            const result = await resolver.createUser(input);
            expect(result).toEqual(mockUser);
            expect(userService.create).toHaveBeenCalledWith(input);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,