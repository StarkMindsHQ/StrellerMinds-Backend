{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\user.resolver.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\graphql\\__tests__\\user.resolver.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from \"@nestjs/testing\"\r\nimport { jest } from \"@jest/globals\"\r\n\r\nimport { UserResolver } from \"../modules/user/resolvers/user.resolver\"\r\nimport { UserService } from \"../modules/user/services/user.service\"\r\nimport { UserLoader } from \"../modules/user/loaders/user.loader\"\r\nimport type { User } from \"../modules/user/entities/user.entity\"\r\n\r\ndescribe(\"UserResolver\", () => {\r\n  let resolver: UserResolver\r\n  let userService: jest.Mocked<UserService>\r\n  let userLoader: jest.Mocked<UserLoader>\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UserResolver,\r\n        {\r\n          provide: UserService,\r\n          useValue: {\r\n            findAll: jest.fn(),\r\n            create: jest.fn(),\r\n            update: jest.fn(),\r\n            delete: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: UserLoader,\r\n          useValue: {\r\n            load: jest.fn(),\r\n          },\r\n        },\r\n      ],\r\n    }).compile()\r\n\r\n    resolver = module.get<UserResolver>(UserResolver)\r\n    userService = module.get(UserService)\r\n    userLoader = module.get(UserLoader)\r\n  })\r\n\r\n  it(\"should be defined\", () => {\r\n    expect(resolver).toBeDefined()\r\n  })\r\n\r\n  describe(\"getUsers\", () => {\r\n    it(\"should return array of users\", async () => {\r\n      const mockUsers: User[] = [\r\n        {\r\n          id: \"1\",\r\n          email: \"test@example.com\",\r\n          firstName: \"John\",\r\n          lastName: \"Doe\",\r\n          isActive: true,\r\n          posts: [],\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        } as User,\r\n      ]\r\n\r\n      userService.findAll.mockResolvedValue(mockUsers)\r\n\r\n      const result = await resolver.getUsers({ limit: 10, offset: 0 })\r\n\r\n      expect(result).toEqual(mockUsers)\r\n      expect(userService.findAll).toHaveBeenCalledWith({ limit: 10, offset: 0 })\r\n    })\r\n  })\r\n\r\n  describe(\"getUser\", () => {\r\n    it(\"should return a user by id\", async () => {\r\n      const mockUser: User = {\r\n        id: \"1\",\r\n        email: \"test@example.com\",\r\n        firstName: \"John\",\r\n        lastName: \"Doe\",\r\n        isActive: true,\r\n        posts: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      } as User\r\n\r\n      userLoader.load.mockResolvedValue(mockUser)\r\n\r\n      const result = await resolver.getUser(\"1\")\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(userLoader.load).toHaveBeenCalledWith(\"1\")\r\n    })\r\n  })\r\n\r\n  describe(\"createUser\", () => {\r\n    it(\"should create a new user\", async () => {\r\n      const input = {\r\n        email: \"test@example.com\",\r\n        firstName: \"John\",\r\n        lastName: \"Doe\",\r\n      }\r\n\r\n      const mockUser: User = {\r\n        id: \"1\",\r\n        ...input,\r\n        isActive: true,\r\n        posts: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      } as User\r\n\r\n      userService.create.mockResolvedValue(mockUser)\r\n\r\n      const result = await resolver.createUser(input)\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(userService.create).toHaveBeenCalledWith(input)\r\n    })\r\n  })\r\n})\r\n"],"version":3}