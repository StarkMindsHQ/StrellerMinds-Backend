{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\leaderboard.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,mFAAwE;AAIjE,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEU,eAA6C;QAA7C,oBAAe,GAAf,eAAe,CAA8B;IACpD,CAAC;IAEJ,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,KAAK,GAAG,EAAE;QAC7C,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YAC/B,KAAK,EAAE,EAAE,MAAM,EAAE;YACjB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;YACxB,IAAI,EAAE,KAAK;YACX,SAAS,EAAE,CAAC,MAAM,CAAC;SACpB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,IAAU,EAAE,MAAc,EAAE,KAAa;QACzD,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACxE,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACtB,CAAC;QACD,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,qCAAqC;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AA1BY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,2CAAgB,CAAC,CAAA;yDACV,oBAAU,oBAAV,oBAAU;GAH1B,kBAAkB,CA0B9B","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\leaderboard.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { LeaderboardEntry } from '../entities/leaderboard-entry.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\n\r\n@Injectable()\r\nexport class LeaderboardService {\r\n  constructor(\r\n    @InjectRepository(LeaderboardEntry)\r\n    private leaderboardRepo: Repository<LeaderboardEntry>,\r\n  ) {}\r\n\r\n  async getLeaderboard(period: string, limit = 10): Promise<LeaderboardEntry[]> {\r\n    return this.leaderboardRepo.find({\r\n      where: { period },\r\n      order: { score: 'DESC' },\r\n      take: limit,\r\n      relations: ['user'],\r\n    });\r\n  }\r\n\r\n  async updateScore(user: User, period: string, score: number): Promise<LeaderboardEntry> {\r\n    let entry = await this.leaderboardRepo.findOne({ where: { user: { id: user.id }, period } });\r\n    if (!entry) {\r\n      entry = this.leaderboardRepo.create({ user, period, score, rank: 0 });\r\n    } else {\r\n      entry.score = score;\r\n    }\r\n    await this.leaderboardRepo.save(entry);\r\n    // Optionally, recalculate ranks here\r\n    return entry;\r\n  }\r\n} "],"version":3}