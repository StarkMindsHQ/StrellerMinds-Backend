3fc59ab5a0e47d1c4a803dc64f3710b2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = exports.UsersController = void 0;
exports.CustomCacheKey = CustomCacheKey;
/**
 * UsersController handles user CRUD operations and account management.
 */
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const create_users_dto_1 = require("./dtos/create.users.dto");
const update_users_dto_1 = require("./dtos/update.users.dto");
const users_service_1 = require("./services/users.service");
const platform_express_1 = require("@nestjs/platform-express");
const rate_limiter_guard_1 = require("src/common/guards/rate-limiter.guard");
let UsersController = class UsersController {
    constructor(userService) {
        this.userService = userService;
    }
    /**
     * Create a new user
     * @param file - The file upload
     * @param createUsersDto - The user data
     * @returns The created user
     */
    async createUser(file, createUsersDto) {
        try {
            const user = await this.userService.create(createUsersDto, file);
            return user;
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error creating user');
        }
    }
    /**
     * Update user (PATCH)
     * @param id - The user ID
     * @param updateUserDto - The updated user data
     * @returns The updated user
     */
    async patchUpdate(id, updateUserDto) {
        return await this.userService.update(id, updateUserDto);
    }
    /**
     * Delete user
     * @param id - The user ID
     * @returns Success message
     */
    async delete(id) {
        return await this.userService.delete(id);
    }
    /**
     * Request account deletion
     * @param id - The user ID
     * @returns Success message
     */
    async requestAccountDeletion(id) {
        await this.userService.requestAccountDeletion(id);
        return { message: 'Account deletion confirmation email sent' };
    }
    /**
     * Get all users
     * @returns List of users
     */
    async findAll() {
        return this.userService.findAll();
    }
    /**
     * Get user by ID
     * @param id - The user ID
     * @returns The user data
     */
    async findOne(id) {
        return this.userService.findOne(id);
    }
    /**
     * Update user (PUT)
     * @param id - The user ID
     * @param updateUserDto - The updated user data
     * @returns The updated user
     */
    async update(id, updateUserDto) {
        return this.userService.update(id, updateUserDto);
    }
};
exports.UsersController = UsersController;
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Create a new user' }),
    (0, swagger_1.ApiBody)({ type: create_users_dto_1.CreateUsersDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'User created successfully.' }),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file')),
    (0, common_1.UseGuards)(rate_limiter_guard_1.RateLimitGuard),
    (0, common_1.Post)('create'),
    __param(0, (0, common_1.UploadedFile)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof Express !== "undefined" && (_b = Express.Multer) !== void 0 && _b.File) === "function" ? _c : Object, typeof (_d = typeof create_users_dto_1.CreateUsersDto !== "undefined" && create_users_dto_1.CreateUsersDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "createUser", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update user (PATCH)' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: update_users_dto_1.updateUsersDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User updated.' }),
    (0, common_1.Patch)(':id'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof update_users_dto_1.updateUsersDto !== "undefined" && update_users_dto_1.updateUsersDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "patchUpdate", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Delete user' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User deleted.' }),
    (0, common_1.Delete)(':id'),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "delete", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Request account deletion' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Account deletion confirmation email sent.' }),
    (0, common_1.Post)(':id/request-account-deletion'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "requestAccountDeletion", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get all users' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of users.' }),
    (0, common_1.Get)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "findAll", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Get user by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User found.' }),
    (0, common_1.Get)(':id'),
    CustomCacheKey((context) => {
        const request = context.switchToHttp().getRequest();
        return `user:${request.params.id}:profile`;
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "findOne", null);
__decorate([
    (0, swagger_1.ApiOperation)({ summary: 'Update user (PUT)' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'User ID' }),
    (0, swagger_1.ApiBody)({ type: update_users_dto_1.updateUsersDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'User updated.' }),
    (0, common_1.Put)(':id'),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof update_users_dto_1.updateUsersDto !== "undefined" && update_users_dto_1.updateUsersDto) === "function" ? _f : Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "update", null);
exports.UsersController = UsersController = __decorate([
    (0, swagger_1.ApiTags)('Users'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('users'),
    __metadata("design:paramtypes", [typeof (_a = typeof users_service_1.UsersService !== "undefined" && users_service_1.UsersService) === "function" ? _a : Object])
], UsersController);
// ✅ Custom param decorator
exports.Query = (0, common_1.createParamDecorator)((data, ctx) => {
    const request = ctx.switchToHttp().getRequest();
    return request.query;
});
// ✅ Dummy cache decorator placeholder (optional: move to separate file)
function CustomCacheKey(keyGenerator) {
    return (target, propertyKey, descriptor) => {
        // Cache logic placeholder
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,