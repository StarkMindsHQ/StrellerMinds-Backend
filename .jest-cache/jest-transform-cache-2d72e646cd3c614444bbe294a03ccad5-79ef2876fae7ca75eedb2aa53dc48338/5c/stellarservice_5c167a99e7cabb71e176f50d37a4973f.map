{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\blockchain\\stellar\\stellar.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\blockchain\\stellar\\stellar.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport {\r\n  Server,\r\n  Keypair,\r\n  TransactionBuilder,\r\n  Networks,\r\n  Operation,\r\n  Asset,\r\n} from 'stellar-sdk';\r\nimport axios from 'axios';\r\nimport { exec } from 'child_process';\r\n\r\n@Injectable()\r\nexport class StellarService {\r\n  private readonly logger = new Logger(StellarService.name);\r\n  private readonly server = new Server('https://horizon-testnet.stellar.org');\r\n  private readonly networkPassphrase = Networks.TESTNET;\r\n\r\n  /**\r\n   * Create a trustline to a custom asset\r\n   */\r\n  async createTrustline(sourceSecret: string, assetCode: string, issuer: string) {\r\n    try {\r\n      const sourceKeypair = Keypair.fromSecret(sourceSecret);\r\n      const account = await this.server.loadAccount(sourceKeypair.publicKey());\r\n\r\n      const asset = new Asset(assetCode, issuer);\r\n\r\n      const tx = new TransactionBuilder(account, {\r\n        fee: await this.server.fetchBaseFee(),\r\n        networkPassphrase: this.networkPassphrase,\r\n      })\r\n        .addOperation(Operation.changeTrust({ asset }))\r\n        .setTimeout(30)\r\n        .build();\r\n\r\n      tx.sign(sourceKeypair);\r\n\r\n      const response = await this.server.submitTransaction(tx);\r\n      this.logger.log(`Trustline created: ${response.hash}`);\r\n\r\n      await this.logBlockchainAction('createTrustline', { assetCode, issuer }, response);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      this.logger.error('Error creating trustline', err?.response?.data || err);\r\n      await this.logBlockchainAction('createTrustline', { assetCode, issuer }, null, err);\r\n      throw new Error(`Blockchain error: ${err.response?.data?.extras?.result_codes?.operations || err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor a transaction by hash (polling)\r\n   */\r\n  async monitorTransaction(txHash: string): Promise<any> {\r\n    try {\r\n      const tx = await this.server.transactions().transaction(txHash).call();\r\n      this.logger.log(`Transaction ${txHash} confirmed: ${tx.ledger}`);\r\n      return tx;\r\n    } catch (err) {\r\n      this.logger.warn(`Transaction ${txHash} not yet confirmed or not found.`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Soroban contract invocation via RPC\r\n   */\r\n  async invokeSmartContract({\r\n    contractAddress,\r\n    method,\r\n    args,\r\n  }: {\r\n    contractAddress: string;\r\n    method: string;\r\n    args: any[];\r\n  }): Promise<any> {\r\n    try {\r\n      const url = 'https://rpc-futurenet.stellar.org/soroban/rpc';\r\n\r\n      const payload = {\r\n        jsonrpc: '2.0',\r\n        id: 8675309,\r\n        method: 'simulateTransaction',\r\n        params: {\r\n          transaction: {\r\n            source: 'G...', // Placeholder: replace with source public key or signer\r\n            contractAddress,\r\n            function: method,\r\n            args,\r\n          },\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(url, payload);\r\n      this.logger.log(`Soroban RPC [${method}] success`, data);\r\n\r\n      await this.logBlockchainAction('invokeSmartContract', { contractAddress, method, args }, data);\r\n\r\n      return data;\r\n    } catch (err) {\r\n      this.logger.error(`Soroban RPC failed: ${method}`, err?.response?.data || err);\r\n      await this.logBlockchainAction('invokeSmartContract', { contractAddress, method, args }, null, err);\r\n      throw new Error('Soroban contract invocation failed.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Soroban contract invocation via CLI (optional fallback)\r\n   */\r\n  async invokeViaCli(contractId: string, method: string, args: string[]): Promise<string> {\r\n    const command = `soroban contract invoke \\\r\n      --network futurenet \\\r\n      --id ${contractId} \\\r\n      --fn ${method} \\\r\n      ${args.map(arg => `--arg ${arg}`).join(' ')}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      exec(command, async (err, stdout, stderr) => {\r\n        if (err) {\r\n          this.logger.error(`Soroban CLI error: ${stderr}`);\r\n          await this.logBlockchainAction('invokeViaCli', { contractId, method, args }, null, stderr);\r\n          return reject(stderr);\r\n        }\r\n\r\n        this.logger.log(`Soroban CLI success: ${stdout}`);\r\n        await this.logBlockchainAction('invokeViaCli', { contractId, method, args }, stdout);\r\n        resolve(stdout);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log any blockchain operation (can be extended to DB or file-based)\r\n   */\r\n  async logBlockchainAction(\r\n    action: string,\r\n    payload: any,\r\n    result: any,\r\n    error?: any,\r\n  ) {\r\n    this.logger.log({\r\n      action,\r\n      method: payload?.method,\r\n      contract: payload?.contractAddress,\r\n      args: payload?.args,\r\n      result,\r\n      error: error?.message || error || null,\r\n    });\r\n\r\n    // Optionally store to DB\r\n  }\r\n}\r\n"],"version":3}