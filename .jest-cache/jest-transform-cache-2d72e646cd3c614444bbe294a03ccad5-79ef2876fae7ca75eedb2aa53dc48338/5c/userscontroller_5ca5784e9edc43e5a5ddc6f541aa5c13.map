{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\users\\users.controller.ts"],"sourcesContent":["/**\r\n * UsersController handles user CRUD operations and account management.\r\n */\r\nimport {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put, // ✅ Add this\r\n  Body,\r\n  Param,\r\n  Delete,\r\n  Patch,\r\n  ParseUUIDPipe,\r\n  InternalServerErrorException,\r\n  UseInterceptors,\r\n  UploadedFile,\r\n  UseGuards,\r\n  createParamDecorator,\r\n  ExecutionContext,\r\n} from '@nestjs/common';\r\nimport { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';\r\n\r\nimport { CreateUsersDto } from './dtos/create.users.dto';\r\nimport { updateUsersDto } from './dtos/update.users.dto';\r\nimport { UsersService } from './services/users.service';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { RateLimitGuard } from 'src/common/guards/rate-limiter.guard';\r\n\r\n@ApiTags('Users')\r\n@ApiBearerAuth()\r\n@Controller('users')\r\nexport class UsersController {\r\n  constructor(private readonly userService: UsersService) {}\r\n\r\n  /**\r\n   * Create a new user\r\n   * @param file - The file upload\r\n   * @param createUsersDto - The user data\r\n   * @returns The created user\r\n   */\r\n  @ApiOperation({ summary: 'Create a new user' })\r\n  @ApiBody({ type: CreateUsersDto })\r\n  @ApiResponse({ status: 201, description: 'User created successfully.' })\r\n  @UseInterceptors(FileInterceptor('file'))\r\n  @UseGuards(RateLimitGuard)\r\n  @Post('create')\r\n  async createUser(\r\n    @UploadedFile() file: Express.Multer.File,\r\n    @Body() createUsersDto: CreateUsersDto,\r\n  ) {\r\n    try {\r\n      const user = await this.userService.create(createUsersDto, file);\r\n      return user;\r\n    } catch (error) {\r\n      throw new InternalServerErrorException('Error creating user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user (PATCH)\r\n   * @param id - The user ID\r\n   * @param updateUserDto - The updated user data\r\n   * @returns The updated user\r\n   */\r\n  @ApiOperation({ summary: 'Update user (PATCH)' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiBody({ type: updateUsersDto })\r\n  @ApiResponse({ status: 200, description: 'User updated.' })\r\n  @Patch(':id')\r\n  public async patchUpdate(\r\n    @Param('id', ParseUUIDPipe) id: string,\r\n    @Body() updateUserDto: updateUsersDto,\r\n  ) {\r\n    return await this.userService.update(id, updateUserDto);\r\n  }\r\n\r\n  /**\r\n   * Delete user\r\n   * @param id - The user ID\r\n   * @returns Success message\r\n   */\r\n  @ApiOperation({ summary: 'Delete user' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 200, description: 'User deleted.' })\r\n  @Delete(':id')\r\n  public async delete(@Param('id', ParseUUIDPipe) id: string) {\r\n    return await this.userService.delete(id);\r\n  }\r\n\r\n  /**\r\n   * Request account deletion\r\n   * @param id - The user ID\r\n   * @returns Success message\r\n   */\r\n  @ApiOperation({ summary: 'Request account deletion' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 200, description: 'Account deletion confirmation email sent.' })\r\n  @Post(':id/request-account-deletion')\r\n  async requestAccountDeletion(@Param('id') id: string) {\r\n    await this.userService.requestAccountDeletion(id);\r\n    return { message: 'Account deletion confirmation email sent' };\r\n  }\r\n\r\n  /**\r\n   * Get all users\r\n   * @returns List of users\r\n   */\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  @ApiResponse({ status: 200, description: 'List of users.' })\r\n  @Get()\r\n  async findAll() {\r\n    return this.userService.findAll();\r\n  }\r\n\r\n  /**\r\n   * Get user by ID\r\n   * @param id - The user ID\r\n   * @returns The user data\r\n   */\r\n  @ApiOperation({ summary: 'Get user by ID' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiResponse({ status: 200, description: 'User found.' })\r\n  @Get(':id')\r\n  @CustomCacheKey((context) => {\r\n    const request = context.switchToHttp().getRequest();\r\n    return `user:${request.params.id}:profile`;\r\n  })\r\n  async findOne(@Param('id') id: string) {\r\n    return this.userService.findOne(id);\r\n  }\r\n\r\n  /**\r\n   * Update user (PUT)\r\n   * @param id - The user ID\r\n   * @param updateUserDto - The updated user data\r\n   * @returns The updated user\r\n   */\r\n  @ApiOperation({ summary: 'Update user (PUT)' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'User ID' })\r\n  @ApiBody({ type: updateUsersDto })\r\n  @ApiResponse({ status: 200, description: 'User updated.' })\r\n  @Put(':id')\r\n  async update(@Param('id') id: string, @Body() updateUserDto: updateUsersDto) {\r\n    return this.userService.update(id, updateUserDto);\r\n  }\r\n}\r\n\r\n// ✅ Custom param decorator\r\nexport const Query = createParamDecorator(\r\n  (data: unknown, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    return request.query;\r\n  },\r\n);\r\n\r\n// ✅ Dummy cache decorator placeholder (optional: move to separate file)\r\nexport function CustomCacheKey(\r\n  keyGenerator: (context: ExecutionContext) => string\r\n): MethodDecorator {\r\n  return (target, propertyKey, descriptor) => {\r\n    // Cache logic placeholder\r\n  };\r\n}\r\n"],"version":3}