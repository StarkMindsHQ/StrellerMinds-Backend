2043b8b98a90cee97a503e2c2aa2c18c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var StellarService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StellarService = void 0;
const common_1 = require("@nestjs/common");
const stellar_sdk_1 = require("stellar-sdk");
const axios_1 = __importDefault(require("axios"));
const child_process_1 = require("child_process");
let StellarService = StellarService_1 = class StellarService {
    constructor() {
        this.logger = new common_1.Logger(StellarService_1.name);
        this.server = new stellar_sdk_1.Server('https://horizon-testnet.stellar.org');
        this.networkPassphrase = stellar_sdk_1.Networks.TESTNET;
    }
    /**
     * Create a trustline to a custom asset
     */
    async createTrustline(sourceSecret, assetCode, issuer) {
        try {
            const sourceKeypair = stellar_sdk_1.Keypair.fromSecret(sourceSecret);
            const account = await this.server.loadAccount(sourceKeypair.publicKey());
            const asset = new stellar_sdk_1.Asset(assetCode, issuer);
            const tx = new stellar_sdk_1.TransactionBuilder(account, {
                fee: await this.server.fetchBaseFee(),
                networkPassphrase: this.networkPassphrase,
            })
                .addOperation(stellar_sdk_1.Operation.changeTrust({ asset }))
                .setTimeout(30)
                .build();
            tx.sign(sourceKeypair);
            const response = await this.server.submitTransaction(tx);
            this.logger.log(`Trustline created: ${response.hash}`);
            await this.logBlockchainAction('createTrustline', { assetCode, issuer }, response);
            return response;
        }
        catch (err) {
            this.logger.error('Error creating trustline', err?.response?.data || err);
            await this.logBlockchainAction('createTrustline', { assetCode, issuer }, null, err);
            throw new Error(`Blockchain error: ${err.response?.data?.extras?.result_codes?.operations || err.message}`);
        }
    }
    /**
     * Monitor a transaction by hash (polling)
     */
    async monitorTransaction(txHash) {
        try {
            const tx = await this.server.transactions().transaction(txHash).call();
            this.logger.log(`Transaction ${txHash} confirmed: ${tx.ledger}`);
            return tx;
        }
        catch (err) {
            this.logger.warn(`Transaction ${txHash} not yet confirmed or not found.`);
            return null;
        }
    }
    /**
     * Soroban contract invocation via RPC
     */
    async invokeSmartContract({ contractAddress, method, args, }) {
        try {
            const url = 'https://rpc-futurenet.stellar.org/soroban/rpc';
            const payload = {
                jsonrpc: '2.0',
                id: 8675309,
                method: 'simulateTransaction',
                params: {
                    transaction: {
                        source: 'G...', // Placeholder: replace with source public key or signer
                        contractAddress,
                        function: method,
                        args,
                    },
                },
            };
            const { data } = await axios_1.default.post(url, payload);
            this.logger.log(`Soroban RPC [${method}] success`, data);
            await this.logBlockchainAction('invokeSmartContract', { contractAddress, method, args }, data);
            return data;
        }
        catch (err) {
            this.logger.error(`Soroban RPC failed: ${method}`, err?.response?.data || err);
            await this.logBlockchainAction('invokeSmartContract', { contractAddress, method, args }, null, err);
            throw new Error('Soroban contract invocation failed.');
        }
    }
    /**
     * Soroban contract invocation via CLI (optional fallback)
     */
    async invokeViaCli(contractId, method, args) {
        const command = `soroban contract invoke \
      --network futurenet \
      --id ${contractId} \
      --fn ${method} \
      ${args.map(arg => `--arg ${arg}`).join(' ')}`;
        return new Promise((resolve, reject) => {
            (0, child_process_1.exec)(command, async (err, stdout, stderr) => {
                if (err) {
                    this.logger.error(`Soroban CLI error: ${stderr}`);
                    await this.logBlockchainAction('invokeViaCli', { contractId, method, args }, null, stderr);
                    return reject(stderr);
                }
                this.logger.log(`Soroban CLI success: ${stdout}`);
                await this.logBlockchainAction('invokeViaCli', { contractId, method, args }, stdout);
                resolve(stdout);
            });
        });
    }
    /**
     * Log any blockchain operation (can be extended to DB or file-based)
     */
    async logBlockchainAction(action, payload, result, error) {
        this.logger.log({
            action,
            method: payload?.method,
            contract: payload?.contractAddress,
            args: payload?.args,
            result,
            error: error?.message || error || null,
        });
        // Optionally store to DB
    }
};
exports.StellarService = StellarService;
exports.StellarService = StellarService = StellarService_1 = __decorate([
    (0, common_1.Injectable)()
], StellarService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,