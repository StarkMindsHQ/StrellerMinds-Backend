4a8c45fbb87c1059d3e6f6740dbf5527
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const user_profiles_service_1 = require("./user-profiles.service");
const user_profile_entity_1 = require("./entities/user-profile.entity");
const user_entity_1 = require("../users/entities/user.entity");
const common_1 = require("@nestjs/common");
const createMockRepository = () => ({
    findOne: jest.fn(),
    find: jest.fn(),
    create: jest.fn(),
    save: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
});
describe('UserProfilesService', () => {
    let service;
    let userProfileRepository;
    let userRepository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                user_profiles_service_1.UserProfilesService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_profile_entity_1.UserProfile),
                    useValue: createMockRepository(),
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: createMockRepository(),
                },
            ],
        }).compile();
        service = module.get(user_profiles_service_1.UserProfilesService);
        userProfileRepository = module.get((0, typeorm_1.getRepositoryToken)(user_profile_entity_1.UserProfile));
        userRepository = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('create', () => {
        it('should create a new profile', async () => {
            const userId = 'user-id';
            const createDto = { firstName: 'John', lastName: 'Doe' };
            const user = { id: userId };
            const profile = { id: 'profile-id', ...createDto, userId };
            userRepository.findOne.mockResolvedValue(user);
            userProfileRepository.findOne.mockResolvedValue(null);
            userProfileRepository.create.mockReturnValue(profile);
            userProfileRepository.save.mockResolvedValue(profile);
            const result = await service.create(userId, createDto);
            expect(userRepository.findOne).toHaveBeenCalledWith({
                where: { id: userId },
            });
            expect(userProfileRepository.findOne).toHaveBeenCalledWith({
                where: { userId },
            });
            expect(userProfileRepository.create).toHaveBeenCalledWith({
                ...createDto,
                userId,
            });
            expect(userProfileRepository.save).toHaveBeenCalledWith(profile);
            expect(result).toEqual(profile);
        });
        it('should throw NotFoundException if user not found', async () => {
            const userId = 'user-id';
            const createDto = { firstName: 'John', lastName: 'Doe' };
            userRepository.findOne.mockResolvedValue(null);
            await expect(service.create(userId, createDto)).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw ForbiddenException if profile already exists', async () => {
            const userId = 'user-id';
            const createDto = { firstName: 'John', lastName: 'Doe' };
            const user = { id: userId };
            const existingProfile = { id: 'profile-id' };
            userRepository.findOne.mockResolvedValue(user);
            userProfileRepository.findOne.mockResolvedValue(existingProfile);
            await expect(service.create(userId, createDto)).rejects.toThrow(common_1.ForbiddenException);
        });
    });
    describe('findAll', () => {
        it('should return an array of public profiles', async () => {
            const profiles = [{ id: 'profile-id', isPublic: true }];
            userProfileRepository.find.mockResolvedValue(profiles);
            const result = await service.findAll();
            expect(userProfileRepository.find).toHaveBeenCalledWith({
                where: { isPublic: true },
                select: [
                    'id',
                    'firstName',
                    'lastName',
                    'bio',
                    'avatarUrl',
                    'createdAt',
                    'updatedAt',
                ],
            });
            expect(result).toEqual(profiles);
        });
    });
    describe('findOne', () => {
        it('should return a profile by id', async () => {
            const id = 'profile-id';
            const profile = { id };
            userProfileRepository.findOne.mockResolvedValue(profile);
            const result = await service.findOne(id);
            expect(userProfileRepository.findOne).toHaveBeenCalledWith({
                where: { id },
            });
            expect(result).toEqual(profile);
        });
        it('should throw NotFoundException if profile not found', async () => {
            const id = 'profile-id';
            userProfileRepository.findOne.mockResolvedValue(null);
            await expect(service.findOne(id)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    // Add more tests for other methods...
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,