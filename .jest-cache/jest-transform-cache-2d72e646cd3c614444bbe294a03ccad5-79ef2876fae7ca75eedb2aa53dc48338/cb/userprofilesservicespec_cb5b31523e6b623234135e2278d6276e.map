{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-profiles\\user-profiles.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-profiles\\user-profiles.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserProfilesService } from './user-profiles.service';\r\nimport { UserProfile } from './entities/user-profile.entity';\r\nimport { User } from '../users/entities/user.entity';\r\nimport { NotFoundException, ForbiddenException } from '@nestjs/common';\r\n\r\ntype MockRepository<T = any> = Partial<Record<keyof Repository<T>, jest.Mock>>;\r\n\r\nconst createMockRepository = <T = any>(): MockRepository<T> => ({\r\n  findOne: jest.fn(),\r\n  find: jest.fn(),\r\n  create: jest.fn(),\r\n  save: jest.fn(),\r\n  update: jest.fn(),\r\n  delete: jest.fn(),\r\n});\r\n\r\ndescribe('UserProfilesService', () => {\r\n  let service: UserProfilesService;\r\n  let userProfileRepository: MockRepository<UserProfile>;\r\n  let userRepository: MockRepository<User>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        UserProfilesService,\r\n        {\r\n          provide: getRepositoryToken(UserProfile),\r\n          useValue: createMockRepository(),\r\n        },\r\n        {\r\n          provide: getRepositoryToken(User),\r\n          useValue: createMockRepository(),\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<UserProfilesService>(UserProfilesService);\r\n    userProfileRepository = module.get<MockRepository<UserProfile>>(\r\n      getRepositoryToken(UserProfile),\r\n    );\r\n    userRepository = module.get<MockRepository<User>>(getRepositoryToken(User));\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create a new profile', async () => {\r\n      const userId = 'user-id';\r\n      const createDto = { firstName: 'John', lastName: 'Doe' };\r\n      const user = { id: userId };\r\n      const profile = { id: 'profile-id', ...createDto, userId };\r\n\r\n      userRepository.findOne.mockResolvedValue(user);\r\n      userProfileRepository.findOne.mockResolvedValue(null);\r\n      userProfileRepository.create.mockReturnValue(profile);\r\n      userProfileRepository.save.mockResolvedValue(profile);\r\n\r\n      const result = await service.create(userId, createDto);\r\n\r\n      expect(userRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id: userId },\r\n      });\r\n      expect(userProfileRepository.findOne).toHaveBeenCalledWith({\r\n        where: { userId },\r\n      });\r\n      expect(userProfileRepository.create).toHaveBeenCalledWith({\r\n        ...createDto,\r\n        userId,\r\n      });\r\n      expect(userProfileRepository.save).toHaveBeenCalledWith(profile);\r\n      expect(result).toEqual(profile);\r\n    });\r\n\r\n    it('should throw NotFoundException if user not found', async () => {\r\n      const userId = 'user-id';\r\n      const createDto = { firstName: 'John', lastName: 'Doe' };\r\n\r\n      userRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.create(userId, createDto)).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n    });\r\n\r\n    it('should throw ForbiddenException if profile already exists', async () => {\r\n      const userId = 'user-id';\r\n      const createDto = { firstName: 'John', lastName: 'Doe' };\r\n      const user = { id: userId };\r\n      const existingProfile = { id: 'profile-id' };\r\n\r\n      userRepository.findOne.mockResolvedValue(user);\r\n      userProfileRepository.findOne.mockResolvedValue(existingProfile);\r\n\r\n      await expect(service.create(userId, createDto)).rejects.toThrow(\r\n        ForbiddenException,\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return an array of public profiles', async () => {\r\n      const profiles = [{ id: 'profile-id', isPublic: true }];\r\n      userProfileRepository.find.mockResolvedValue(profiles);\r\n\r\n      const result = await service.findAll();\r\n\r\n      expect(userProfileRepository.find).toHaveBeenCalledWith({\r\n        where: { isPublic: true },\r\n        select: [\r\n          'id',\r\n          'firstName',\r\n          'lastName',\r\n          'bio',\r\n          'avatarUrl',\r\n          'createdAt',\r\n          'updatedAt',\r\n        ],\r\n      });\r\n      expect(result).toEqual(profiles);\r\n    });\r\n  });\r\n\r\n  describe('findOne', () => {\r\n    it('should return a profile by id', async () => {\r\n      const id = 'profile-id';\r\n      const profile = { id };\r\n\r\n      userProfileRepository.findOne.mockResolvedValue(profile);\r\n\r\n      const result = await service.findOne(id);\r\n\r\n      expect(userProfileRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id },\r\n      });\r\n      expect(result).toEqual(profile);\r\n    });\r\n\r\n    it('should throw NotFoundException if profile not found', async () => {\r\n      const id = 'profile-id';\r\n\r\n      userProfileRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.findOne(id)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  // Add more tests for other methods...\r\n});\r\n"],"version":3}