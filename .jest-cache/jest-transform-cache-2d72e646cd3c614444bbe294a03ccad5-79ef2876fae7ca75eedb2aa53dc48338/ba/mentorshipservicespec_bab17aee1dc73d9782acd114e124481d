cb798e495f95ab58dadcaeac5d4d133d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const mentorship_service_1 = require("./mentorship.service");
const mentorship_entity_1 = require("./entities/mentorship.entity");
const mentorship_session_entity_1 = require("./entities/mentorship-session.entity");
const user_entity_1 = require("../users/entities/user.entity");
describe('MentorshipService.matchMentorMentee', () => {
    let service;
    let userRepo;
    beforeEach(async () => {
        userRepo = {
            findOne: jest.fn(),
            find: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                mentorship_service_1.MentorshipService,
                { provide: (0, typeorm_1.getRepositoryToken)(mentorship_entity_1.Mentorship), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(mentorship_session_entity_1.MentorshipSession), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User), useValue: userRepo },
            ],
        }).compile();
        service = module.get(mentorship_service_1.MentorshipService);
    });
    it('returns mentors ordered by score when matching skills in bio/username', async () => {
        userRepo.findOne.mockResolvedValue({ id: 'mentee-1' });
        userRepo.find.mockResolvedValue([
            { id: 'm1', isInstructor: true, reputation: 1, bio: 'Solidity and Stellar dev', username: 'dev1', firstName: 'A', lastName: 'B' },
            { id: 'm2', isInstructor: true, reputation: 100, bio: 'Python', username: 'py', firstName: 'C', lastName: 'D' },
        ]);
        const result = await service.matchMentorMentee('mentee-1', { skills: ['Stellar'] });
        expect(result[0].id === 'm1' || result[0].id === 'm2').toBeTruthy();
        expect(result.length).toBeGreaterThan(0);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxtZW50b3JzaGlwXFxtZW50b3JzaGlwLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCw2Q0FBcUQ7QUFFckQsNkRBQXlEO0FBQ3pELG9FQUEwRDtBQUMxRCxvRkFBeUU7QUFDekUsK0RBQXFEO0FBRXJELFFBQVEsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7SUFDbkQsSUFBSSxPQUEwQixDQUFDO0lBQy9CLElBQUksUUFBdUMsQ0FBQztJQUU1QyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsUUFBUSxHQUFHO1lBQ1QsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDVCxDQUFDO1FBRVQsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFNBQVMsRUFBRTtnQkFDVCxzQ0FBaUI7Z0JBQ2pCLEVBQUUsT0FBTyxFQUFFLElBQUEsNEJBQWtCLEVBQUMsOEJBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7Z0JBQ3pELEVBQUUsT0FBTyxFQUFFLElBQUEsNEJBQWtCLEVBQUMsNkNBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO2dCQUNoRSxFQUFFLE9BQU8sRUFBRSxJQUFBLDRCQUFrQixFQUFDLGtCQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFO2FBQzFEO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQWlCLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1RUFBdUUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyRixRQUFRLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBUyxDQUFDLENBQUM7UUFDOUQsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztZQUM5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBUztZQUN4SSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQVM7U0FDdkgsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxtZW50b3JzaGlwXFxtZW50b3JzaGlwLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcclxuaW1wb3J0IHsgZ2V0UmVwb3NpdG9yeVRva2VuIH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBNZW50b3JzaGlwU2VydmljZSB9IGZyb20gJy4vbWVudG9yc2hpcC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWVudG9yc2hpcCB9IGZyb20gJy4vZW50aXRpZXMvbWVudG9yc2hpcC5lbnRpdHknO1xyXG5pbXBvcnQgeyBNZW50b3JzaGlwU2Vzc2lvbiB9IGZyb20gJy4vZW50aXRpZXMvbWVudG9yc2hpcC1zZXNzaW9uLmVudGl0eSc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2Vycy9lbnRpdGllcy91c2VyLmVudGl0eSc7XHJcblxyXG5kZXNjcmliZSgnTWVudG9yc2hpcFNlcnZpY2UubWF0Y2hNZW50b3JNZW50ZWUnLCAoKSA9PiB7XHJcbiAgbGV0IHNlcnZpY2U6IE1lbnRvcnNoaXBTZXJ2aWNlO1xyXG4gIGxldCB1c2VyUmVwbzogamVzdC5Nb2NrZWQ8UmVwb3NpdG9yeTxVc2VyPj47XHJcblxyXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgdXNlclJlcG8gPSB7XHJcbiAgICAgIGZpbmRPbmU6IGplc3QuZm4oKSxcclxuICAgICAgZmluZDogamVzdC5mbigpLFxyXG4gICAgfSBhcyBhbnk7XHJcblxyXG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgTWVudG9yc2hpcFNlcnZpY2UsXHJcbiAgICAgICAgeyBwcm92aWRlOiBnZXRSZXBvc2l0b3J5VG9rZW4oTWVudG9yc2hpcCksIHVzZVZhbHVlOiB7fSB9LFxyXG4gICAgICAgIHsgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKE1lbnRvcnNoaXBTZXNzaW9uKSwgdXNlVmFsdWU6IHt9IH0sXHJcbiAgICAgICAgeyBwcm92aWRlOiBnZXRSZXBvc2l0b3J5VG9rZW4oVXNlciksIHVzZVZhbHVlOiB1c2VyUmVwbyB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZSgpO1xyXG5cclxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0KE1lbnRvcnNoaXBTZXJ2aWNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JldHVybnMgbWVudG9ycyBvcmRlcmVkIGJ5IHNjb3JlIHdoZW4gbWF0Y2hpbmcgc2tpbGxzIGluIGJpby91c2VybmFtZScsIGFzeW5jICgpID0+IHtcclxuICAgIHVzZXJSZXBvLmZpbmRPbmUubW9ja1Jlc29sdmVkVmFsdWUoeyBpZDogJ21lbnRlZS0xJyB9IGFzIGFueSk7XHJcbiAgICB1c2VyUmVwby5maW5kLm1vY2tSZXNvbHZlZFZhbHVlKFtcclxuICAgICAgeyBpZDogJ20xJywgaXNJbnN0cnVjdG9yOiB0cnVlLCByZXB1dGF0aW9uOiAxLCBiaW86ICdTb2xpZGl0eSBhbmQgU3RlbGxhciBkZXYnLCB1c2VybmFtZTogJ2RldjEnLCBmaXJzdE5hbWU6ICdBJywgbGFzdE5hbWU6ICdCJyB9IGFzIGFueSxcclxuICAgICAgeyBpZDogJ20yJywgaXNJbnN0cnVjdG9yOiB0cnVlLCByZXB1dGF0aW9uOiAxMDAsIGJpbzogJ1B5dGhvbicsIHVzZXJuYW1lOiAncHknLCBmaXJzdE5hbWU6ICdDJywgbGFzdE5hbWU6ICdEJyB9IGFzIGFueSxcclxuICAgIF0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UubWF0Y2hNZW50b3JNZW50ZWUoJ21lbnRlZS0xJywgeyBza2lsbHM6IFsnU3RlbGxhciddIH0pO1xyXG4gICAgZXhwZWN0KHJlc3VsdFswXS5pZCA9PT0gJ20xJyB8fCByZXN1bHRbMF0uaWQgPT09ICdtMicpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJ2ZXJzaW9uIjozfQ==