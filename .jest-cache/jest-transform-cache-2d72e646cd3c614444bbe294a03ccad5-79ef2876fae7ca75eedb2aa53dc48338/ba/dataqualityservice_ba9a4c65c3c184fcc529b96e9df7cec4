6c448dca6ff87f5cd48b4ccc0f808cbf
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DataQualityService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataQualityService = void 0;
const common_1 = require("@nestjs/common");
const data_quality_rule_entity_1 = require("../entities/data-quality-rule.entity");
let DataQualityService = DataQualityService_1 = class DataQualityService {
    constructor(ruleRepository, metricRepository, issueRepository, dataQualityQueue, validationService, monitoringService) {
        this.ruleRepository = ruleRepository;
        this.metricRepository = metricRepository;
        this.issueRepository = issueRepository;
        this.dataQualityQueue = dataQualityQueue;
        this.validationService = validationService;
        this.monitoringService = monitoringService;
        this.logger = new common_1.Logger(DataQualityService_1.name);
    }
    async checkDataQuality(entityType, data) {
        try {
            const rules = await this.getActiveRules(entityType);
            const result = {
                passed: true,
                score: 100,
                issues: [],
                metrics: [],
            };
            let totalScore = 0;
            let ruleCount = 0;
            for (const rule of rules) {
                const ruleResult = await this.validateRule(rule, data);
                if (!ruleResult.passed) {
                    result.passed = false;
                    result.issues.push({
                        ruleId: rule.id,
                        severity: rule.severity,
                        message: rule.errorMessage || `Rule ${rule.name} failed`,
                        data: ruleResult.failedData,
                    });
                    // Create issue record
                    await this.createOrUpdateIssue(rule, ruleResult);
                }
                // Record metric
                await this.recordMetric(rule, ruleResult);
                totalScore += ruleResult.score;
                ruleCount++;
                result.metrics.push({
                    name: rule.name,
                    value: ruleResult.score,
                    category: rule.ruleType,
                });
            }
            result.score = ruleCount > 0 ? totalScore / ruleCount : 100;
            // Queue for background processing
            await this.dataQualityQueue.add("process-quality-check", {
                entityType,
                result,
                timestamp: new Date(),
            });
            return result;
        }
        catch (error) {
            this.logger.error(`Data quality check failed: ${error.message}`, error.stack);
            throw error;
        }
    }
    async getActiveRules(entityType) {
        return this.ruleRepository.find({
            where: {
                entityType,
                status: data_quality_rule_entity_1.RuleStatus.ACTIVE,
            },
            order: {
                severity: "DESC",
                createdAt: "ASC",
            },
        });
    }
    async createRule(ruleData) {
        const rule = this.ruleRepository.create(ruleData);
        return this.ruleRepository.save(rule);
    }
    async updateRule(id, updates) {
        await this.ruleRepository.update(id, updates);
        const rule = await this.ruleRepository.findOne({ where: { id } });
        if (!rule) {
            throw new Error(`Rule with id ${id} not found`);
        }
        return rule;
    }
    async deleteRule(id) {
        await this.ruleRepository.update(id, { status: data_quality_rule_entity_1.RuleStatus.DEPRECATED });
    }
    async getRules(filters) {
        const query = this.ruleRepository.createQueryBuilder("rule");
        if (filters.entityType) {
            query.andWhere("rule.entityType = :entityType", { entityType: filters.entityType });
        }
        if (filters.ruleType) {
            query.andWhere("rule.ruleType = :ruleType", { ruleType: filters.ruleType });
        }
        if (filters.status) {
            query.andWhere("rule.status = :status", { status: filters.status });
        }
        if (filters.severity) {
            query.andWhere("rule.severity = :severity", { severity: filters.severity });
        }
        return query.orderBy("rule.createdAt", "DESC").getMany();
    }
    async validateRule(rule, data) {
        try {
            switch (rule.ruleType) {
                case "completeness":
                    return this.validationService.checkCompleteness(rule, data);
                case "accuracy":
                    return this.validationService.checkAccuracy(rule, data);
                case "consistency":
                    return this.validationService.checkConsistency(rule, data);
                case "validity":
                    return this.validationService.checkValidity(rule, data);
                case "uniqueness":
                    return this.validationService.checkUniqueness(rule, data);
                case "timeliness":
                    return this.validationService.checkTimeliness(rule, data);
                case "conformity":
                    return this.validationService.checkConformity(rule, data);
                default:
                    return { passed: true, score: 100 };
            }
        }
        catch (error) {
            this.logger.error(`Rule validation failed for ${rule.name}: ${error.message}`);
            return { passed: false, score: 0, details: { error: error.message } };
        }
    }
    async recordMetric(rule, result) {
        const metric = this.metricRepository.create({
            ruleId: rule.id,
            entityType: rule.entityType,
            metricCategory: rule.ruleType,
            metricName: rule.name,
            value: result.score,
            threshold: rule.threshold,
            passed: result.passed,
            details: result.details,
            timestamp: new Date(),
        });
        await this.metricRepository.save(metric);
    }
    async createOrUpdateIssue(rule, result) {
        const existingIssue = await this.issueRepository.findOne({
            where: {
                ruleId: rule.id,
                status: "open",
            },
        });
        if (existingIssue) {
            // Update existing issue
            existingIssue.occurrenceCount += 1;
            existingIssue.lastOccurrence = new Date();
            existingIssue.issueData = result.failedData || {};
            await this.issueRepository.save(existingIssue);
        }
        else {
            // Create new issue
            const issue = this.issueRepository.create({
                ruleId: rule.id,
                entityType: rule.entityType,
                title: `Data Quality Issue: ${rule.name}`,
                description: rule.errorMessage || `Rule ${rule.name} validation failed`,
                priority: rule.severity,
                issueData: result.failedData || {},
                context: result.details,
                occurrenceCount: 1,
                firstOccurrence: new Date(),
                lastOccurrence: new Date(),
            });
            await this.issueRepository.save(issue);
        }
    }
    async getQualityMetrics(filters) {
        const query = this.metricRepository.createQueryBuilder("metric");
        if (filters.entityType) {
            query.andWhere("metric.entityType = :entityType", { entityType: filters.entityType });
        }
        if (filters.startDate) {
            query.andWhere("metric.timestamp >= :startDate", { startDate: filters.startDate });
        }
        if (filters.endDate) {
            query.andWhere("metric.timestamp <= :endDate", { endDate: filters.endDate });
        }
        if (filters.metricCategory) {
            query.andWhere("metric.metricCategory = :metricCategory", { metricCategory: filters.metricCategory });
        }
        return query.orderBy("metric.timestamp", "DESC").getMany();
    }
    async getQualityIssues(filters) {
        const query = this.issueRepository.createQueryBuilder("issue");
        if (filters.status) {
            query.andWhere("issue.status = :status", { status: filters.status });
        }
        if (filters.priority) {
            query.andWhere("issue.priority = :priority", { priority: filters.priority });
        }
        if (filters.entityType) {
            query.andWhere("issue.entityType = :entityType", { entityType: filters.entityType });
        }
        if (filters.assignedTo) {
            query.andWhere("issue.assignedTo = :assignedTo", { assignedTo: filters.assignedTo });
        }
        return query.orderBy("issue.createdAt", "DESC").getMany();
    }
    async resolveIssue(issueId, resolution, resolvedBy) {
        await this.issueRepository.update(issueId, {
            status: "resolved",
            resolution,
            resolvedBy,
            resolvedAt: new Date(),
        });
    }
};
exports.DataQualityService = DataQualityService;
exports.DataQualityService = DataQualityService = DataQualityService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object])
], DataQualityService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,