{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\reward.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,6DAAmD;AACnD,uEAA4D;AAKrD,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAEU,UAA8B,EAE9B,cAAsC;QAFtC,eAAU,GAAV,UAAU,CAAoB;QAE9B,mBAAc,GAAd,cAAc,CAAwB;IAC7C,CAAC;IAEJ,KAAK,CAAC,YAAY,CAAC,GAAoB;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,IAAU,EAAE,QAAgB;QAC5C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,0BAAiB,CAAC,kBAAkB,CAAC,CAAC;QAC7D,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YACjD,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE;SAC3D,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAC1D,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,CAAC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAU;QAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC/F,CAAC;CACF,CAAA;AAjCY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,sBAAM,CAAC,CAAA;IAExB,WAAA,IAAA,0BAAgB,EAAC,+BAAU,CAAC,CAAA;yDADT,oBAAU,oBAAV,oBAAU,oDAEN,oBAAU,oBAAV,oBAAU;GALzB,aAAa,CAiCzB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gamification\\services\\reward.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Reward } from '../entities/reward.entity';\r\nimport { UserReward } from '../entities/user-reward.entity';\r\nimport { User } from '../../users/entities/user.entity';\r\nimport { CreateRewardDto } from '../dto/create-reward.dto';\r\n\r\n@Injectable()\r\nexport class RewardService {\r\n  constructor(\r\n    @InjectRepository(Reward)\r\n    private rewardRepo: Repository<Reward>,\r\n    @InjectRepository(UserReward)\r\n    private userRewardRepo: Repository<UserReward>,\r\n  ) {}\r\n\r\n  async createReward(dto: CreateRewardDto): Promise<Reward> {\r\n    const reward = this.rewardRepo.create(dto);\r\n    return this.rewardRepo.save(reward);\r\n  }\r\n\r\n  async getAllRewards(): Promise<Reward[]> {\r\n    return this.rewardRepo.find();\r\n  }\r\n\r\n  async grantReward(user: User, rewardId: number): Promise<UserReward> {\r\n    const reward = await this.rewardRepo.findOneBy({ id: rewardId });\r\n    if (!reward) throw new NotFoundException('Reward not found');\r\n    let userReward = await this.userRewardRepo.findOne({\r\n      where: { user: { id: user.id }, reward: { id: rewardId } },\r\n    });\r\n    if (!userReward) {\r\n      userReward = this.userRewardRepo.create({ user, reward });\r\n      await this.userRewardRepo.save(userReward);\r\n    }\r\n    return userReward;\r\n  }\r\n\r\n  async getUserRewards(user: User): Promise<UserReward[]> {\r\n    return this.userRewardRepo.find({ where: { user: { id: user.id } }, relations: ['reward'] });\r\n  }\r\n} "],"version":3}