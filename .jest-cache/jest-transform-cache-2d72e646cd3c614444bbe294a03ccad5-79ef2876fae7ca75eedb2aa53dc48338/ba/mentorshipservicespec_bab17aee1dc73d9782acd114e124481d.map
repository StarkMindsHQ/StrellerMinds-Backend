{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\mentorship\\mentorship.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,6CAAqD;AAErD,6DAAyD;AACzD,oEAA0D;AAC1D,oFAAyE;AACzE,+DAAqD;AAErD,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;IACnD,IAAI,OAA0B,CAAC;IAC/B,IAAI,QAAuC,CAAC;IAE5C,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,QAAQ,GAAG;YACT,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SACT,CAAC;QAET,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,sCAAiB;gBACjB,EAAE,OAAO,EAAE,IAAA,4BAAkB,EAAC,8BAAU,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;gBACzD,EAAE,OAAO,EAAE,IAAA,4BAAkB,EAAC,6CAAiB,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;gBAChE,EAAE,OAAO,EAAE,IAAA,4BAAkB,EAAC,kBAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE;aAC1D;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,sCAAiB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;QACrF,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,UAAU,EAAS,CAAC,CAAC;QAC9D,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC9B,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,0BAA0B,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAS;YACxI,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAS;SACvH,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;QACpE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\mentorship\\mentorship.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { MentorshipService } from './mentorship.service';\r\nimport { Mentorship } from './entities/mentorship.entity';\r\nimport { MentorshipSession } from './entities/mentorship-session.entity';\r\nimport { User } from '../users/entities/user.entity';\r\n\r\ndescribe('MentorshipService.matchMentorMentee', () => {\r\n  let service: MentorshipService;\r\n  let userRepo: jest.Mocked<Repository<User>>;\r\n\r\n  beforeEach(async () => {\r\n    userRepo = {\r\n      findOne: jest.fn(),\r\n      find: jest.fn(),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        MentorshipService,\r\n        { provide: getRepositoryToken(Mentorship), useValue: {} },\r\n        { provide: getRepositoryToken(MentorshipSession), useValue: {} },\r\n        { provide: getRepositoryToken(User), useValue: userRepo },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get(MentorshipService);\r\n  });\r\n\r\n  it('returns mentors ordered by score when matching skills in bio/username', async () => {\r\n    userRepo.findOne.mockResolvedValue({ id: 'mentee-1' } as any);\r\n    userRepo.find.mockResolvedValue([\r\n      { id: 'm1', isInstructor: true, reputation: 1, bio: 'Solidity and Stellar dev', username: 'dev1', firstName: 'A', lastName: 'B' } as any,\r\n      { id: 'm2', isInstructor: true, reputation: 100, bio: 'Python', username: 'py', firstName: 'C', lastName: 'D' } as any,\r\n    ]);\r\n\r\n    const result = await service.matchMentorMentee('mentee-1', { skills: ['Stellar'] });\r\n    expect(result[0].id === 'm1' || result[0].id === 'm2').toBeTruthy();\r\n    expect(result.length).toBeGreaterThan(0);\r\n  });\r\n});\r\n\r\n\r\n"],"version":3}