1d9db9e12cdfde6d6e73aa75f8d11879
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var RealTimeAnalyticsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RealTimeAnalyticsService = void 0;
const common_1 = require("@nestjs/common");
let RealTimeAnalyticsService = RealTimeAnalyticsService_1 = class RealTimeAnalyticsService {
    constructor(analyticsGateway) {
        this.analyticsGateway = analyticsGateway;
        this.logger = new common_1.Logger(RealTimeAnalyticsService_1.name);
        this.metricsBuffer = new Map();
        this.bufferFlushInterval = 5000; // 5 seconds
        // Flush metrics buffer periodically
        setInterval(() => {
            this.flushMetricsBuffer();
        }, this.bufferFlushInterval);
    }
    async processRealTimeEvent(eventData) {
        try {
            // Update real-time counters
            this.updateRealTimeCounters(eventData);
            // Emit to connected clients
            this.analyticsGateway.emitRealTimeEvent({
                type: "event",
                data: eventData,
                timestamp: new Date(),
            });
            this.logger.debug(`Processed real-time event: ${eventData.eventName}`);
        }
        catch (error) {
            this.logger.error(`Failed to process real-time event: ${error.message}`, error.stack);
        }
    }
    updateRealTimeCounters(eventData) {
        const timestamp = new Date();
        // Event count
        this.incrementMetric("events_per_second", 1, timestamp);
        // User activity
        if (eventData.userId) {
            this.incrementMetric("active_users", 1, timestamp, {
                userId: eventData.userId,
            });
        }
        // Event type counters
        this.incrementMetric(`events_${eventData.eventType}`, 1, timestamp);
        // Source/Channel counters
        if (eventData.source) {
            this.incrementMetric("events_by_source", 1, timestamp, {
                source: eventData.source,
            });
        }
        if (eventData.channel) {
            this.incrementMetric("events_by_channel", 1, timestamp, {
                channel: eventData.channel,
            });
        }
    }
    incrementMetric(name, value, timestamp, dimensions) {
        const key = `${name}_${JSON.stringify(dimensions || {})}`;
        const existing = this.metricsBuffer.get(key);
        if (existing) {
            existing.value += value;
            existing.timestamp = timestamp;
        }
        else {
            this.metricsBuffer.set(key, {
                name,
                value,
                timestamp,
                dimensions,
            });
        }
    }
    flushMetricsBuffer() {
        if (this.metricsBuffer.size === 0) {
            return;
        }
        const metrics = Array.from(this.metricsBuffer.values());
        this.metricsBuffer.clear();
        // Emit aggregated metrics
        this.analyticsGateway.emitRealTimeMetrics(metrics);
        this.logger.debug(`Flushed ${metrics.length} real-time metrics`);
    }
    async getCurrentMetrics() {
        return Array.from(this.metricsBuffer.values());
    }
    async getActiveUsers() {
        const activeUserMetrics = Array.from(this.metricsBuffer.values()).filter((metric) => metric.name === "active_users");
        return new Set(activeUserMetrics.map((metric) => metric.dimensions?.userId).filter(Boolean)).size;
    }
    async getEventsPerSecond() {
        const eventsMetric = this.metricsBuffer.get("events_per_second_{}");
        return eventsMetric?.value || 0;
    }
};
exports.RealTimeAnalyticsService = RealTimeAnalyticsService;
exports.RealTimeAnalyticsService = RealTimeAnalyticsService = RealTimeAnalyticsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object])
], RealTimeAnalyticsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,