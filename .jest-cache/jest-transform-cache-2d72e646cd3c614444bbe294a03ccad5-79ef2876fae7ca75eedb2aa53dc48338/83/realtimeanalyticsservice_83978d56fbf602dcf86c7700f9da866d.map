{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\real-time-analytics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\real-time-analytics.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { AnalyticsGateway } from \"../gateways/analytics.gateway\"\r\nimport type { EventData } from \"./data-collection.service\"\r\n\r\nexport interface RealTimeMetric {\r\n  name: string\r\n  value: number\r\n  timestamp: Date\r\n  dimensions?: Record<string, string>\r\n}\r\n\r\n@Injectable()\r\nexport class RealTimeAnalyticsService {\r\n  private readonly logger = new Logger(RealTimeAnalyticsService.name)\r\n  private readonly metricsBuffer = new Map<string, RealTimeMetric>()\r\n  private readonly bufferFlushInterval = 5000 // 5 seconds\r\n\r\n  constructor(private readonly analyticsGateway: AnalyticsGateway) {\r\n    // Flush metrics buffer periodically\r\n    setInterval(() => {\r\n      this.flushMetricsBuffer()\r\n    }, this.bufferFlushInterval)\r\n  }\r\n\r\n  async processRealTimeEvent(eventData: EventData): Promise<void> {\r\n    try {\r\n      // Update real-time counters\r\n      this.updateRealTimeCounters(eventData)\r\n\r\n      // Emit to connected clients\r\n      this.analyticsGateway.emitRealTimeEvent({\r\n        type: \"event\",\r\n        data: eventData,\r\n        timestamp: new Date(),\r\n      })\r\n\r\n      this.logger.debug(`Processed real-time event: ${eventData.eventName}`)\r\n    } catch (error) {\r\n      this.logger.error(`Failed to process real-time event: ${error.message}`, error.stack)\r\n    }\r\n  }\r\n\r\n  private updateRealTimeCounters(eventData: EventData): void {\r\n    const timestamp = new Date()\r\n\r\n    // Event count\r\n    this.incrementMetric(\"events_per_second\", 1, timestamp)\r\n\r\n    // User activity\r\n    if (eventData.userId) {\r\n      this.incrementMetric(\"active_users\", 1, timestamp, {\r\n        userId: eventData.userId,\r\n      })\r\n    }\r\n\r\n    // Event type counters\r\n    this.incrementMetric(`events_${eventData.eventType}`, 1, timestamp)\r\n\r\n    // Source/Channel counters\r\n    if (eventData.source) {\r\n      this.incrementMetric(\"events_by_source\", 1, timestamp, {\r\n        source: eventData.source,\r\n      })\r\n    }\r\n\r\n    if (eventData.channel) {\r\n      this.incrementMetric(\"events_by_channel\", 1, timestamp, {\r\n        channel: eventData.channel,\r\n      })\r\n    }\r\n  }\r\n\r\n  private incrementMetric(name: string, value: number, timestamp: Date, dimensions?: Record<string, string>): void {\r\n    const key = `${name}_${JSON.stringify(dimensions || {})}`\r\n    const existing = this.metricsBuffer.get(key)\r\n\r\n    if (existing) {\r\n      existing.value += value\r\n      existing.timestamp = timestamp\r\n    } else {\r\n      this.metricsBuffer.set(key, {\r\n        name,\r\n        value,\r\n        timestamp,\r\n        dimensions,\r\n      })\r\n    }\r\n  }\r\n\r\n  private flushMetricsBuffer(): void {\r\n    if (this.metricsBuffer.size === 0) {\r\n      return\r\n    }\r\n\r\n    const metrics = Array.from(this.metricsBuffer.values())\r\n    this.metricsBuffer.clear()\r\n\r\n    // Emit aggregated metrics\r\n    this.analyticsGateway.emitRealTimeMetrics(metrics)\r\n\r\n    this.logger.debug(`Flushed ${metrics.length} real-time metrics`)\r\n  }\r\n\r\n  async getCurrentMetrics(): Promise<RealTimeMetric[]> {\r\n    return Array.from(this.metricsBuffer.values())\r\n  }\r\n\r\n  async getActiveUsers(): Promise<number> {\r\n    const activeUserMetrics = Array.from(this.metricsBuffer.values()).filter((metric) => metric.name === \"active_users\")\r\n\r\n    return new Set(activeUserMetrics.map((metric) => metric.dimensions?.userId).filter(Boolean)).size\r\n  }\r\n\r\n  async getEventsPerSecond(): Promise<number> {\r\n    const eventsMetric = this.metricsBuffer.get(\"events_per_second_{}\")\r\n    return eventsMetric?.value || 0\r\n  }\r\n}\r\n"],"version":3}