2cd751771d6bcfc25dd57de4c0d211db
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var I18nService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nService = void 0;
const common_1 = require("@nestjs/common");
let I18nService = I18nService_1 = class I18nService {
    constructor(nestI18nService, translationRepository, translationService, localeService) {
        this.nestI18nService = nestI18nService;
        this.translationRepository = translationRepository;
        this.translationService = translationService;
        this.localeService = localeService;
        this.logger = new common_1.Logger(I18nService_1.name);
    }
    async translate(key, options = {}) {
        const { locale = "en", fallback = "en", args, defaultValue, namespace = "common" } = options;
        try {
            // Try to get translation from database first
            const dbTranslation = await this.getTranslationFromDb(key, locale, namespace);
            if (dbTranslation) {
                return this.interpolateTranslation(dbTranslation.value, args);
            }
            // Fallback to file-based translations
            const fileTranslation = await this.nestI18nService.translate(`${namespace}.${key}`, {
                lang: locale,
                args,
                defaultValue,
            });
            if (fileTranslation && fileTranslation !== key) {
                return fileTranslation;
            }
            // Try fallback locale
            if (locale !== fallback) {
                return this.translate(key, { ...options, locale: fallback });
            }
            // Return default value or key
            return defaultValue || key;
        }
        catch (error) {
            this.logger.error(`Translation error for key ${key}:`, error);
            return defaultValue || key;
        }
    }
    async translateMultiple(keys, options = {}) {
        const translations = {};
        await Promise.all(keys.map(async (key) => {
            translations[key] = await this.translate(key, options);
        }));
        return translations;
    }
    async localizeResponse(data, locale, translationKeys) {
        const response = {
            data,
            locale,
        };
        if (translationKeys && translationKeys.length > 0) {
            response.translations = await this.translateMultiple(translationKeys, { locale });
        }
        return response;
    }
    async getUserLocale(userId) {
        return this.localeService.getUserLocale(userId);
    }
    async setUserLocale(userId, locale) {
        await this.localeService.setUserLocale(userId, locale);
    }
    async getSupportedLocales() {
        return this.localeService.getSupportedLocales();
    }
    async detectLocaleFromRequest(request) {
        // Check query parameter
        if (request.query?.lang) {
            return request.query.lang;
        }
        // Check custom header
        if (request.headers?.["x-custom-lang"]) {
            return request.headers["x-custom-lang"];
        }
        // Check Accept-Language header
        if (request.headers?.["accept-language"]) {
            const acceptedLanguages = request.headers["accept-language"]
                .split(",")
                .map((lang) => lang.split(";")[0].trim());
            const supportedLocales = await this.getSupportedLocales();
            const supportedCodes = supportedLocales.map((locale) => locale.code);
            for (const lang of acceptedLanguages) {
                if (supportedCodes.includes(lang)) {
                    return lang;
                }
                // Try language code without country
                const langCode = lang.split("-")[0];
                const matchingLocale = supportedCodes.find((code) => code.startsWith(langCode));
                if (matchingLocale) {
                    return matchingLocale;
                }
            }
        }
        return "en"; // Default fallback
    }
    async getTranslationFromDb(key, locale, namespace) {
        return this.translationRepository.findOne({
            where: {
                key,
                locale,
                namespace,
                status: "published",
            },
        });
    }
    interpolateTranslation(template, args) {
        if (!args)
            return template;
        return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
            return args[key] !== undefined ? String(args[key]) : match;
        });
    }
    async getNamespaceTranslations(namespace, locale) {
        const translations = await this.translationRepository.find({
            where: {
                namespace,
                locale,
                status: "published",
            },
        });
        const result = {};
        for (const translation of translations) {
            result[translation.key] = translation.value;
        }
        return result;
    }
    async invalidateCache(locale, namespace) {
        // Implementation for cache invalidation
        this.logger.log(`Cache invalidated for locale: ${locale}, namespace: ${namespace}`);
    }
};
exports.I18nService = I18nService;
exports.I18nService = I18nService = I18nService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], I18nService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxnLWVrb2hcXERlc2t0b3BcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxpMThuXFxzZXJ2aWNlc1xcaTE4bi5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBbUQ7QUF5QjVDLElBQU0sV0FBVyxtQkFBakIsTUFBTSxXQUFXO0lBR3RCLFlBQ21CLGVBQWdDLEVBQ2hDLHFCQUE4QyxFQUM5QyxrQkFBc0MsRUFDdEMsYUFBNEI7UUFINUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBeUI7UUFDOUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQU45QixXQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsYUFBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBT25ELENBQUM7SUFFSixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQVcsRUFBRSxVQUE4QixFQUFFO1FBQzNELE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLFFBQVEsR0FBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEdBQUcsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBRTVGLElBQUksQ0FBQztZQUNILDZDQUE2QztZQUM3QyxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1lBQzdFLElBQUksYUFBYSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDL0QsQ0FBQztZQUVELHNDQUFzQztZQUN0QyxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxJQUFJLEdBQUcsRUFBRSxFQUFFO2dCQUNsRixJQUFJLEVBQUUs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ZHMtQmFja2VuZFxcc3JjXFxpMThuXFxzZXJ2aWNlc1xcaTE4bi5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExvZ2dlciB9IGZyb20gXCJAbmVzdGpzL2NvbW1vblwiXHJcbmltcG9ydCB0eXBlIHsgSTE4blNlcnZpY2UgYXMgTmVzdEkxOG5TZXJ2aWNlIH0gZnJvbSBcIm5lc3Rqcy1pMThuXCJcclxuaW1wb3J0IHR5cGUgeyBSZXBvc2l0b3J5IH0gZnJvbSBcInR5cGVvcm1cIlxyXG5cclxuaW1wb3J0IHR5cGUgeyBUcmFuc2xhdGlvbiB9IGZyb20gXCIuLi9lbnRpdGllcy90cmFuc2xhdGlvbi5lbnRpdHlcIlxyXG5pbXBvcnQgdHlwZSB7IExvY2FsZU1ldGFkYXRhIH0gZnJvbSBcIi4uL2VudGl0aWVzL2xvY2FsZS1tZXRhZGF0YS5lbnRpdHlcIlxyXG5pbXBvcnQgdHlwZSB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gXCIuL3RyYW5zbGF0aW9uLnNlcnZpY2VcIlxyXG5pbXBvcnQgdHlwZSB7IExvY2FsZVNlcnZpY2UgfSBmcm9tIFwiLi9sb2NhbGUuc2VydmljZVwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uT3B0aW9ucyB7XHJcbiAgbG9jYWxlPzogc3RyaW5nXHJcbiAgZmFsbGJhY2s/OiBzdHJpbmdcclxuICBhcmdzPzogUmVjb3JkPHN0cmluZywgYW55PlxyXG4gIGRlZmF1bHRWYWx1ZT86IHN0cmluZ1xyXG4gIG5hbWVzcGFjZT86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsaXplZFJlc3BvbnNlPFQgPSBhbnk+IHtcclxuICBkYXRhOiBUXHJcbiAgbG9jYWxlOiBzdHJpbmdcclxuICBmYWxsYmFja1VzZWQ/OiBib29sZWFuXHJcbiAgdHJhbnNsYXRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJMThuU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKEkxOG5TZXJ2aWNlLm5hbWUpXHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZXN0STE4blNlcnZpY2U6IE5lc3RJMThuU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNsYXRpb25SZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFRyYW5zbGF0aW9uPixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UsXHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyB0cmFuc2xhdGUoa2V5OiBzdHJpbmcsIG9wdGlvbnM6IFRyYW5zbGF0aW9uT3B0aW9ucyA9IHt9KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHsgbG9jYWxlID0gXCJlblwiLCBmYWxsYmFjayA9IFwiZW5cIiwgYXJncywgZGVmYXVsdFZhbHVlLCBuYW1lc3BhY2UgPSBcImNvbW1vblwiIH0gPSBvcHRpb25zXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVHJ5IHRvIGdldCB0cmFuc2xhdGlvbiBmcm9tIGRhdGFiYXNlIGZpcnN0XHJcbiAgICAgIGNvbnN0IGRiVHJhbnNsYXRpb24gPSBhd2FpdCB0aGlzLmdldFRyYW5zbGF0aW9uRnJvbURiKGtleSwgbG9jYWxlLCBuYW1lc3BhY2UpXHJcbiAgICAgIGlmIChkYlRyYW5zbGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVUcmFuc2xhdGlvbihkYlRyYW5zbGF0aW9uLnZhbHVlLCBhcmdzKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGYWxsYmFjayB0byBmaWxlLWJhc2VkIHRyYW5zbGF0aW9uc1xyXG4gICAgICBjb25zdCBmaWxlVHJhbnNsYXRpb24gPSBhd2FpdCB0aGlzLm5lc3RJMThuU2VydmljZS50cmFuc2xhdGUoYCR7bmFtZXNwYWNlfS4ke2tleX1gLCB7XHJcbiAgICAgICAgbGFuZzogbG9jYWxlLFxyXG4gICAgICAgIGFyZ3MsXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgaWYgKGZpbGVUcmFuc2xhdGlvbiAmJiBmaWxlVHJhbnNsYXRpb24gIT09IGtleSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlVHJhbnNsYXRpb25cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVHJ5IGZhbGxiYWNrIGxvY2FsZVxyXG4gICAgICBpZiAobG9jYWxlICE9PSBmYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZShrZXksIHsgLi4ub3B0aW9ucywgbG9jYWxlOiBmYWxsYmFjayB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXR1cm4gZGVmYXVsdCB2YWx1ZSBvciBrZXlcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZSB8fCBrZXlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBUcmFuc2xhdGlvbiBlcnJvciBmb3Iga2V5ICR7a2V5fTpgLCBlcnJvcilcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZSB8fCBrZXlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHRyYW5zbGF0ZU11bHRpcGxlKGtleXM6IHN0cmluZ1tdLCBvcHRpb25zOiBUcmFuc2xhdGlvbk9wdGlvbnMgPSB7fSk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4ge1xyXG4gICAgY29uc3QgdHJhbnNsYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cclxuXHJcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAga2V5cy5tYXAoYXN5bmMgKGtleSkgPT4ge1xyXG4gICAgICAgIHRyYW5zbGF0aW9uc1trZXldID0gYXdhaXQgdGhpcy50cmFuc2xhdGUoa2V5LCBvcHRpb25zKVxyXG4gICAgICB9KSxcclxuICAgIClcclxuXHJcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zXHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2NhbGl6ZVJlc3BvbnNlPFQ+KGRhdGE6IFQsIGxvY2FsZTogc3RyaW5nLCB0cmFuc2xhdGlvbktleXM/OiBzdHJpbmdbXSk6IFByb21pc2U8TG9jYWxpemVkUmVzcG9uc2U8VD4+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlOiBMb2NhbGl6ZWRSZXNwb25zZTxUPiA9IHtcclxuICAgICAgZGF0YSxcclxuICAgICAgbG9jYWxlLFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0cmFuc2xhdGlvbktleXMgJiYgdHJhbnNsYXRpb25LZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmVzcG9uc2UudHJhbnNsYXRpb25zID0gYXdhaXQgdGhpcy50cmFuc2xhdGVNdWx0aXBsZSh0cmFuc2xhdGlvbktleXMsIHsgbG9jYWxlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRVc2VyTG9jYWxlKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VXNlckxvY2FsZSh1c2VySWQpXHJcbiAgfVxyXG5cclxuICBhc3luYyBzZXRVc2VyTG9jYWxlKHVzZXJJZDogc3RyaW5nLCBsb2NhbGU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5sb2NhbGVTZXJ2aWNlLnNldFVzZXJMb2NhbGUodXNlcklkLCBsb2NhbGUpXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRTdXBwb3J0ZWRMb2NhbGVzKCk6IFByb21pc2U8TG9jYWxlTWV0YWRhdGFbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxlU2VydmljZS5nZXRTdXBwb3J0ZWRMb2NhbGVzKClcclxuICB9XHJcblxyXG4gIGFzeW5jIGRldGVjdExvY2FsZUZyb21SZXF1ZXN0KHJlcXVlc3Q6IGFueSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAvLyBDaGVjayBxdWVyeSBwYXJhbWV0ZXJcclxuICAgIGlmIChyZXF1ZXN0LnF1ZXJ5Py5sYW5nKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0LnF1ZXJ5LmxhbmdcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBjdXN0b20gaGVhZGVyXHJcbiAgICBpZiAocmVxdWVzdC5oZWFkZXJzPy5bXCJ4LWN1c3RvbS1sYW5nXCJdKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0LmhlYWRlcnNbXCJ4LWN1c3RvbS1sYW5nXCJdXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgQWNjZXB0LUxhbmd1YWdlIGhlYWRlclxyXG4gICAgaWYgKHJlcXVlc3QuaGVhZGVycz8uW1wiYWNjZXB0LWxhbmd1YWdlXCJdKSB7XHJcbiAgICAgIGNvbnN0IGFjY2VwdGVkTGFuZ3VhZ2VzID0gcmVxdWVzdC5oZWFkZXJzW1wiYWNjZXB0LWxhbmd1YWdlXCJdXHJcbiAgICAgICAgLnNwbGl0KFwiLFwiKVxyXG4gICAgICAgIC5tYXAoKGxhbmc6IHN0cmluZykgPT4gbGFuZy5zcGxpdChcIjtcIilbMF0udHJpbSgpKVxyXG5cclxuICAgICAgY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IGF3YWl0IHRoaXMuZ2V0U3VwcG9ydGVkTG9jYWxlcygpXHJcbiAgICAgIGNvbnN0IHN1cHBvcnRlZENvZGVzID0gc3VwcG9ydGVkTG9jYWxlcy5tYXAoKGxvY2FsZSkgPT4gbG9jYWxlLmNvZGUpXHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGxhbmcgb2YgYWNjZXB0ZWRMYW5ndWFnZXMpIHtcclxuICAgICAgICBpZiAoc3VwcG9ydGVkQ29kZXMuaW5jbHVkZXMobGFuZykpIHtcclxuICAgICAgICAgIHJldHVybiBsYW5nXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUcnkgbGFuZ3VhZ2UgY29kZSB3aXRob3V0IGNvdW50cnlcclxuICAgICAgICBjb25zdCBsYW5nQ29kZSA9IGxhbmcuc3BsaXQoXCItXCIpWzBdXHJcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdMb2NhbGUgPSBzdXBwb3J0ZWRDb2Rlcy5maW5kKChjb2RlKSA9PiBjb2RlLnN0YXJ0c1dpdGgobGFuZ0NvZGUpKVxyXG4gICAgICAgIGlmIChtYXRjaGluZ0xvY2FsZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG1hdGNoaW5nTG9jYWxlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFwiZW5cIiAvLyBEZWZhdWx0IGZhbGxiYWNrXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdldFRyYW5zbGF0aW9uRnJvbURiKGtleTogc3RyaW5nLCBsb2NhbGU6IHN0cmluZywgbmFtZXNwYWNlOiBzdHJpbmcpOiBQcm9taXNlPFRyYW5zbGF0aW9uIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb25SZXBvc2l0b3J5LmZpbmRPbmUoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIGtleSxcclxuICAgICAgICBsb2NhbGUsXHJcbiAgICAgICAgbmFtZXNwYWNlLFxyXG4gICAgICAgIHN0YXR1czogXCJwdWJsaXNoZWRcIixcclxuICAgICAgfSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGludGVycG9sYXRlVHJhbnNsYXRpb24odGVtcGxhdGU6IHN0cmluZywgYXJncz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xyXG4gICAgaWYgKCFhcmdzKSByZXR1cm4gdGVtcGxhdGVcclxuXHJcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7KFxcdyspXFx9XFx9L2csIChtYXRjaCwga2V5KSA9PiB7XHJcbiAgICAgIHJldHVybiBhcmdzW2tleV0gIT09IHVuZGVmaW5lZCA/IFN0cmluZyhhcmdzW2tleV0pIDogbWF0Y2hcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXROYW1lc3BhY2VUcmFuc2xhdGlvbnMobmFtZXNwYWNlOiBzdHJpbmcsIGxvY2FsZTogc3RyaW5nKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XHJcbiAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBhd2FpdCB0aGlzLnRyYW5zbGF0aW9uUmVwb3NpdG9yeS5maW5kKHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBuYW1lc3BhY2UsXHJcbiAgICAgICAgbG9jYWxlLFxyXG4gICAgICAgIHN0YXR1czogXCJwdWJsaXNoZWRcIixcclxuICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cclxuICAgIGZvciAoY29uc3QgdHJhbnNsYXRpb24gb2YgdHJhbnNsYXRpb25zKSB7XHJcbiAgICAgIHJlc3VsdFt0cmFuc2xhdGlvbi5rZXldID0gdHJhbnNsYXRpb24udmFsdWVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbnZhbGlkYXRlQ2FjaGUobG9jYWxlPzogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIEltcGxlbWVudGF0aW9uIGZvciBjYWNoZSBpbnZhbGlkYXRpb25cclxuICAgIHRoaXMubG9nZ2VyLmxvZyhgQ2FjaGUgaW52YWxpZGF0ZWQgZm9yIGxvY2FsZTogJHtsb2NhbGV9LCBuYW1lc3BhY2U6ICR7bmFtZXNwYWNlfWApXHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==