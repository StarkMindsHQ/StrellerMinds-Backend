{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\i18n.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\i18n.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { I18nService as NestI18nService } from \"nestjs-i18n\"\r\nimport type { Repository } from \"typeorm\"\r\n\r\nimport type { Translation } from \"../entities/translation.entity\"\r\nimport type { LocaleMetadata } from \"../entities/locale-metadata.entity\"\r\nimport type { TranslationService } from \"./translation.service\"\r\nimport type { LocaleService } from \"./locale.service\"\r\n\r\nexport interface TranslationOptions {\r\n  locale?: string\r\n  fallback?: string\r\n  args?: Record<string, any>\r\n  defaultValue?: string\r\n  namespace?: string\r\n}\r\n\r\nexport interface LocalizedResponse<T = any> {\r\n  data: T\r\n  locale: string\r\n  fallbackUsed?: boolean\r\n  translations?: Record<string, string>\r\n}\r\n\r\n@Injectable()\r\nexport class I18nService {\r\n  private readonly logger = new Logger(I18nService.name)\r\n\r\n  constructor(\r\n    private readonly nestI18nService: NestI18nService,\r\n    private readonly translationRepository: Repository<Translation>,\r\n    private readonly translationService: TranslationService,\r\n    private readonly localeService: LocaleService,\r\n  ) {}\r\n\r\n  async translate(key: string, options: TranslationOptions = {}): Promise<string> {\r\n    const { locale = \"en\", fallback = \"en\", args, defaultValue, namespace = \"common\" } = options\r\n\r\n    try {\r\n      // Try to get translation from database first\r\n      const dbTranslation = await this.getTranslationFromDb(key, locale, namespace)\r\n      if (dbTranslation) {\r\n        return this.interpolateTranslation(dbTranslation.value, args)\r\n      }\r\n\r\n      // Fallback to file-based translations\r\n      const fileTranslation = await this.nestI18nService.translate(`${namespace}.${key}`, {\r\n        lang: locale,\r\n        args,\r\n        defaultValue,\r\n      })\r\n\r\n      if (fileTranslation && fileTranslation !== key) {\r\n        return fileTranslation\r\n      }\r\n\r\n      // Try fallback locale\r\n      if (locale !== fallback) {\r\n        return this.translate(key, { ...options, locale: fallback })\r\n      }\r\n\r\n      // Return default value or key\r\n      return defaultValue || key\r\n    } catch (error) {\r\n      this.logger.error(`Translation error for key ${key}:`, error)\r\n      return defaultValue || key\r\n    }\r\n  }\r\n\r\n  async translateMultiple(keys: string[], options: TranslationOptions = {}): Promise<Record<string, string>> {\r\n    const translations: Record<string, string> = {}\r\n\r\n    await Promise.all(\r\n      keys.map(async (key) => {\r\n        translations[key] = await this.translate(key, options)\r\n      }),\r\n    )\r\n\r\n    return translations\r\n  }\r\n\r\n  async localizeResponse<T>(data: T, locale: string, translationKeys?: string[]): Promise<LocalizedResponse<T>> {\r\n    const response: LocalizedResponse<T> = {\r\n      data,\r\n      locale,\r\n    }\r\n\r\n    if (translationKeys && translationKeys.length > 0) {\r\n      response.translations = await this.translateMultiple(translationKeys, { locale })\r\n    }\r\n\r\n    return response\r\n  }\r\n\r\n  async getUserLocale(userId: string): Promise<string> {\r\n    return this.localeService.getUserLocale(userId)\r\n  }\r\n\r\n  async setUserLocale(userId: string, locale: string): Promise<void> {\r\n    await this.localeService.setUserLocale(userId, locale)\r\n  }\r\n\r\n  async getSupportedLocales(): Promise<LocaleMetadata[]> {\r\n    return this.localeService.getSupportedLocales()\r\n  }\r\n\r\n  async detectLocaleFromRequest(request: any): Promise<string> {\r\n    // Check query parameter\r\n    if (request.query?.lang) {\r\n      return request.query.lang\r\n    }\r\n\r\n    // Check custom header\r\n    if (request.headers?.[\"x-custom-lang\"]) {\r\n      return request.headers[\"x-custom-lang\"]\r\n    }\r\n\r\n    // Check Accept-Language header\r\n    if (request.headers?.[\"accept-language\"]) {\r\n      const acceptedLanguages = request.headers[\"accept-language\"]\r\n        .split(\",\")\r\n        .map((lang: string) => lang.split(\";\")[0].trim())\r\n\r\n      const supportedLocales = await this.getSupportedLocales()\r\n      const supportedCodes = supportedLocales.map((locale) => locale.code)\r\n\r\n      for (const lang of acceptedLanguages) {\r\n        if (supportedCodes.includes(lang)) {\r\n          return lang\r\n        }\r\n\r\n        // Try language code without country\r\n        const langCode = lang.split(\"-\")[0]\r\n        const matchingLocale = supportedCodes.find((code) => code.startsWith(langCode))\r\n        if (matchingLocale) {\r\n          return matchingLocale\r\n        }\r\n      }\r\n    }\r\n\r\n    return \"en\" // Default fallback\r\n  }\r\n\r\n  private async getTranslationFromDb(key: string, locale: string, namespace: string): Promise<Translation | null> {\r\n    return this.translationRepository.findOne({\r\n      where: {\r\n        key,\r\n        locale,\r\n        namespace,\r\n        status: \"published\",\r\n      },\r\n    })\r\n  }\r\n\r\n  private interpolateTranslation(template: string, args?: Record<string, any>): string {\r\n    if (!args) return template\r\n\r\n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\r\n      return args[key] !== undefined ? String(args[key]) : match\r\n    })\r\n  }\r\n\r\n  async getNamespaceTranslations(namespace: string, locale: string): Promise<Record<string, string>> {\r\n    const translations = await this.translationRepository.find({\r\n      where: {\r\n        namespace,\r\n        locale,\r\n        status: \"published\",\r\n      },\r\n    })\r\n\r\n    const result: Record<string, string> = {}\r\n    for (const translation of translations) {\r\n      result[translation.key] = translation.value\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  async invalidateCache(locale?: string, namespace?: string): Promise<void> {\r\n    // Implementation for cache invalidation\r\n    this.logger.log(`Cache invalidated for locale: ${locale}, namespace: ${namespace}`)\r\n  }\r\n}\r\n"],"version":3}