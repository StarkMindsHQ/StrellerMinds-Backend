{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\email\\email.service.ts"],"sourcesContent":["/**\r\n * EmailService provides logic for sending emails, managing preferences, analytics, and tracking.\r\n */\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { InjectQueue } from '@nestjs/bull';\r\nimport { Queue } from 'bull';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as nodemailer from 'nodemailer';\r\nimport * as Handlebars from 'handlebars';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as crypto from 'crypto';\r\nimport { EmailTemplate } from './entities/email-template.entity';\r\nimport { EmailLog } from './entities/email-log.entity';\r\nimport { EmailPreference } from './entities/email-preference.entity';\r\nimport { addTrackingToEmail, generateEmailId } from './utils/tracking.util';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\nexport interface EmailOptions {\r\n  to: string | string[];\r\n  subject: string;\r\n  templateName: string;\r\n  context: Record<string, any>;\r\n  attachments?: any[];\r\n  cc?: string | string[];\r\n  bcc?: string | string[];\r\n  skipTracking?: boolean;\r\n}\r\n\r\nenum EmailType {\r\n  VERIFICATION = 'email-verification',\r\n  ENROLLMENT = 'course-enrollment',\r\n  COMPLETION = 'course-completion',\r\n  FORUM = 'forum-notification',\r\n}\r\n\r\n@Injectable()\r\nexport class EmailService {\r\n  private readonly logger = new Logger(EmailService.name);\r\n  private transporter: nodemailer.Transporter;\r\n\r\n  constructor(\r\n    private configService: ConfigService,\r\n    @InjectQueue('email') private emailQueue: Queue,\r\n    @InjectRepository(EmailTemplate)\r\n    private emailTemplateRepository: Repository<EmailTemplate>,\r\n    @InjectRepository(EmailLog)\r\n    private emailLogRepository: Repository<EmailLog>,\r\n    @InjectRepository(EmailPreference)\r\n    private emailPreferenceRepository: Repository<EmailPreference>,\r\n    private readonly jwtService?: JwtService,\r\n  ) {\r\n    this.initializeTransporter();\r\n  }\r\n\r\n  /**\r\n   * Initialize the nodemailer transporter using config values.\r\n   */\r\n  private initializeTransporter() {\r\n    this.transporter = nodemailer.createTransport({\r\n      host: this.configService.get<string>('EMAIL_HOST'),\r\n      port: this.configService.get<number>('EMAIL_PORT'),\r\n      secure: this.configService.get<boolean>('EMAIL_SECURE', false),\r\n      auth: {\r\n        user: this.configService.get<string>('EMAIL_USER'),\r\n        pass: this.configService.get<string>('EMAIL_PASSWORD'),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send an email using the specified options. Queues the email for sending.\r\n   * @param options - Email options\r\n   * @returns True if the email was successfully queued, false otherwise\r\n   */\r\n  async sendEmail(options: EmailOptions): Promise<boolean> {\r\n    const emailEnabled = this.configService.get<string>('EMAIL_ENABLED');\r\n    if (emailEnabled === 'false' || emailEnabled === '0') {\r\n      this.logger.log('Email sending is disabled by EMAIL_ENABLED flag. Skipping email.');\r\n      return false;\r\n    }\r\n    try {\r\n      if (await this.hasUserOptedOut(options.to, options.templateName)) {\r\n        this.logger.log(`User ${options.to} has opted out of ${options.templateName} emails`);\r\n        return false;\r\n      }\r\n      await this.emailQueue.add('send', options, {\r\n        attempts: 3,\r\n        backoff: {\r\n          type: 'exponential',\r\n          delay: 5000,\r\n        },\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.error(`Failed to queue email: ${error.message}`, error.stack);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send an email immediately using the specified options. Bypasses the queue.\r\n   * @param options - Email options\r\n   * @returns True if the email was successfully sent, false otherwise\r\n   */\r\n  async sendImmediate(options: EmailOptions): Promise<boolean> {\r\n    const emailEnabled = this.configService.get<string>('EMAIL_ENABLED');\r\n    if (emailEnabled === 'false' || emailEnabled === '0') {\r\n      this.logger.log('Email sending is disabled by EMAIL_ENABLED flag. Skipping immediate email.');\r\n      return false;\r\n    }\r\n    try {\r\n      const template = await this.getTemplate(options.templateName);\r\n      const compiledTemplate = Handlebars.compile(template);\r\n      let html = compiledTemplate(options.context);\r\n      const emailId = generateEmailId();\r\n\r\n      if (!options.skipTracking) {\r\n        const baseUrl = this.configService.get<string>('BASE_URL');\r\n        html = addTrackingToEmail(html, emailId, baseUrl);\r\n      }\r\n\r\n      const mailOptions = {\r\n        from: this.configService.get<string>('EMAIL_FROM'),\r\n        to: options.to,\r\n        cc: options.cc,\r\n        bcc: options.bcc,\r\n        subject: options.subject,\r\n        html,\r\n        attachments: options.attachments || [],\r\n      };\r\n\r\n      const info = await this.transporter.sendMail(mailOptions);\r\n\r\n      await this.logEmail({\r\n        id: emailId,\r\n        recipient: Array.isArray(options.to) ? options.to.join(', ') : options.to,\r\n        subject: options.subject,\r\n        templateName: options.templateName,\r\n        messageId: info.messageId,\r\n        status: 'sent',\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send email: ${error.message}`, error.stack);\r\n      await this.logEmail({\r\n        recipient: Array.isArray(options.to) ? options.to.join(', ') : options.to,\r\n        subject: options.subject,\r\n        templateName: options.templateName,\r\n        status: 'failed',\r\n        error: error.message,\r\n      });\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the email template content by name. First checks the database, then falls back to file system.\r\n   * @param templateName - Name of the template\r\n   * @returns The template content\r\n   */\r\n  async getTemplate(templateName: string): Promise<string> {\r\n    const dbTemplate = await this.emailTemplateRepository.findOne({ where: { name: templateName } });\r\n    if (dbTemplate) return dbTemplate.content;\r\n\r\n    const templatePath = path.join(process.cwd(), 'src/email/templates', `${templateName}.hbs`);\r\n    return fs.readFileSync(templatePath, 'utf8');\r\n  }\r\n\r\n  /**\r\n   * Log an email event to the database.\r\n   * @param logData - Partial email log data\r\n   */\r\n  private async logEmail(logData: Partial<EmailLog>): Promise<void> {\r\n    const log = this.emailLogRepository.create(logData);\r\n    await this.emailLogRepository.save(log);\r\n  }\r\n\r\n  /**\r\n   * Check if a user has opted out of a specific email type.\r\n   * @param recipient - Recipient email address\r\n   * @param templateType - Email template type\r\n   * @returns True if the user has opted out, false otherwise\r\n   */\r\n  private async hasUserOptedOut(\r\n    recipient: string | string[],\r\n    templateType: string,\r\n  ): Promise<boolean> {\r\n    if (Array.isArray(recipient)) {\r\n      for (const email of recipient) {\r\n        const preference = await this.emailPreferenceRepository.findOne({ where: { email, optOut: true } });\r\n        if (preference) return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const preference = await this.emailPreferenceRepository.findOne({ where: { email: recipient, optOut: true } });\r\n    return !!preference;\r\n  }\r\n\r\n  /**\r\n   * Update a user's email preference for a specific email type.\r\n   * @param email - User email address\r\n   * @param emailType - Type of email\r\n   * @param optOut - Whether the user opts out\r\n   * @returns The updated EmailPreference entity\r\n   */\r\n  async updateEmailPreference(email: string, emailType: string, optOut: boolean): Promise<EmailPreference> {\r\n    let preference = await this.emailPreferenceRepository.findOne({ where: { email } });\r\n\r\n    if (preference) {\r\n      preference.optOut = optOut;\r\n    } else {\r\n      preference = this.emailPreferenceRepository.create({ email, optOut });\r\n    }\r\n\r\n    return this.emailPreferenceRepository.save(preference);\r\n  }\r\n\r\n  /**\r\n   * Get email analytics for a date range and optional template name.\r\n   * @param startDate - Start date\r\n   * @param endDate - End date\r\n   * @param templateName - Optional template name\r\n   * @returns Analytics data\r\n   */\r\n  async getEmailAnalytics(startDate: Date, endDate: Date, templateName?: string): Promise<any> {\r\n    const query = this.emailLogRepository\r\n      .createQueryBuilder('log')\r\n      .select('log.templateName', 'templateName')\r\n      .addSelect('COUNT(*)', 'count')\r\n      .addSelect('log.status', 'status')\r\n      .where('log.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate })\r\n      .groupBy('log.templateName')\r\n      .addGroupBy('log.status');\r\n\r\n    if (templateName) {\r\n      query.andWhere('log.templateName = :templateName', { templateName });\r\n    }\r\n\r\n    return query.getRawMany();\r\n  }\r\n\r\n  /**\r\n   * Send a verification email to the user.\r\n   * @param user - User object\r\n   * @param verificationCode - Verification code\r\n   * @param verificationToken - Verification token\r\n   * @returns True if the email was successfully sent, false otherwise\r\n   */\r\n  async sendVerificationEmail(user: any, verificationCode: string, verificationToken: string): Promise<boolean> {\r\n    const verificationUrl = `${this.configService.get<string>('FRONTEND_URL')}/verify-email?token=${verificationToken}`;\r\n    const unsubscribeUrl = `${this.configService.get<string>('FRONTEND_URL')}/preferences?email=${user.email}`;\r\n\r\n    return this.sendEmail({\r\n      to: user.email,\r\n      subject: 'Verify Your Email Address',\r\n      templateName: 'email-verification',\r\n      context: {\r\n        name: user.name,\r\n        verificationUrl,\r\n        verificationCode,\r\n        expiryTime: 24,\r\n        unsubscribeUrl,\r\n        year: new Date().getFullYear(),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a course enrollment email to the user.\r\n   * @param user - User object\r\n   * @param course - Course object\r\n   * @returns True if the email was successfully sent, false otherwise\r\n   */\r\n  async sendCourseEnrollmentEmail(user: any, course: any): Promise<boolean> {\r\n    const courseUrl = `${this.configService.get<string>('FRONTEND_URL')}/courses/${course.id}`;\r\n    const unsubscribeUrl = `${this.configService.get<string>('FRONTEND_URL')}/preferences?email=${user.email}`;\r\n\r\n    return this.sendEmail({\r\n      to: user.email,\r\n      subject: `Enrollment Confirmation: ${course.name}`,\r\n      templateName: 'course-enrollment',\r\n      context: {\r\n        name: user.name,\r\n        courseName: course.name,\r\n        instructorName: course.instructor.name,\r\n        startDate: new Date(course.startDate).toLocaleDateString(),\r\n        duration: course.duration,\r\n        courseUrl,\r\n        unsubscribeUrl,\r\n        year: new Date().getFullYear(),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a course completion email to the user.\r\n   * @param user - User object\r\n   * @param course - Course object\r\n   * @param score - Completion score\r\n   * @returns True if the email was successfully sent, false otherwise\r\n   */\r\n  async sendCourseCompletionEmail(user: any, course: any, score: number): Promise<boolean> {\r\n    const certificateUrl = `${this.configService.get<string>('FRONTEND_URL')}/certificates/${course.id}`;\r\n    const courseCatalogUrl = `${this.configService.get<string>('FRONTEND_URL')}/courses`;\r\n    const unsubscribeUrl = `${this.configService.get<string>('FRONTEND_URL')}/preferences?email=${user.email}`;\r\n\r\n    return this.sendEmail({\r\n      to: user.email,\r\n      subject: `Congratulations on Completing ${course.name}!`,\r\n      templateName: 'course-completion',\r\n      context: {\r\n        name: user.name,\r\n        courseName: course.name,\r\n        score,\r\n        completionDate: new Date().toLocaleDateString(),\r\n        certificateUrl,\r\n        courseCatalogUrl,\r\n        unsubscribeUrl,\r\n        year: new Date().getFullYear(),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a forum notification email to the user.\r\n   * @param user - User object\r\n   * @param notification - Notification object\r\n   * @returns True if the email was successfully sent, false otherwise\r\n   */\r\n  async sendForumNotificationEmail(user: any, notification: any): Promise<boolean> {\r\n    const postUrl = `${this.configService.get<string>('FRONTEND_URL')}/forum/posts/${notification.postId}`;\r\n    const unsubscribeUrl = `${this.configService.get<string>('FRONTEND_URL')}/preferences?email=${user.email}`;\r\n\r\n    return this.sendEmail({\r\n      to: user.email,\r\n      subject: `Forum Notification: ${notification.type}`,\r\n      templateName: 'forum-notification',\r\n      context: {\r\n        name: user.name,\r\n        notificationType: notification.type,\r\n        notificationMessage: notification.message,\r\n        postAuthor: notification.post.author.name,\r\n        postDate: new Date(notification.post.createdAt).toLocaleDateString(),\r\n        postContent: notification.post.content,\r\n        postUrl,\r\n        unsubscribeUrl,\r\n        year: new Date().getFullYear(),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mark an email as clicked by its log ID.\r\n   * @param id - Email log ID\r\n   * @param url - URL that was clicked\r\n   */\r\n  async markEmailAsClicked(id: string, url: string): Promise<void> {\r\n  }\r\n\r\n  /**\r\n   * Mark an email as opened by its log ID.\r\n   * @param id - Email log ID\r\n   */\r\n  async markEmailAsOpened(id: string): Promise<void> {\r\n  }\r\n\r\n  /**\r\n   * Verify the unsubscribe token for a given email.\r\n   * @param email - User email address\r\n   * @param token - Unsubscribe token\r\n   * @returns True if the token is valid, false otherwise\r\n   */\r\n   async verifyUnsubscribeToken(email: string, token: string): Promise<boolean> {\r\n    try {\r\n      const secret = this.configService.get<string>('UNSUBSCRIBE_JWT_SECRET') || this.configService.get<string>('JWT_SECRET');\r\n      const payload = (this.jwtService\r\n        ? this.jwtService.verify(token, { secret })\r\n        : (await import('jsonwebtoken')).verify(token, secret)) as any;\r\n      return !!payload && (payload.email === email || payload.sub === email);\r\n    } catch (err) {\r\n      this.logger.warn(`Invalid unsubscribe token for ${email}: ${err?.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get daily email statistics for a date range and optional template name.\r\n   * @param start - Start date\r\n   * @param end - End date\r\n   * @param templateName - Optional template name\r\n   * @returns Daily email statistics\r\n   */\r\n   async getDailyEmailStats(start: Date, end: Date, templateName?: string): Promise<any> {\r\n    // Implement your logic here or return a mock for now\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get the user's email preferences for all email types.\r\n   * @param email - User email address\r\n   * @returns Array of email preferences\r\n   */\r\n   async getUserPreferences(email: string): Promise<{ emailType: EmailType; optedOut: boolean }[]> {\r\n    const preferences = await this.emailPreferenceRepository.find({ where: { email } });\r\n\r\n    return Object.values(EmailType).map((type) => {\r\n      const preference = preferences.find((p) => p.email === email && p.optOut);\r\n      return {\r\n        emailType: type,\r\n        optedOut: !!preference,\r\n      };\r\n    });\r\n  }\r\n}\r\n"],"version":3}