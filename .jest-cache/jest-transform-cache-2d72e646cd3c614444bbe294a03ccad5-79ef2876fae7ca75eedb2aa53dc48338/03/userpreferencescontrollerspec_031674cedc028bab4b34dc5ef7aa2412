d381130c6d436644649053c1ee2381c3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const user_preferences_controller_1 = require("./user-preferences.controller");
const user_preferences_service_1 = require("./user-preferences.service");
const common_1 = require("@nestjs/common");
const mockPreferences = {
    id: 'pref-1',
    user: { id: 'user-1' },
    learningCustomization: { preferredTopics: ['Math'], learningPace: 'fast', learningGoals: 'Master Algebra' },
    notificationSettings: { emailEnabled: true, frequency: 'immediate', rules: { courseUpdate: true } },
    personalizationData: { theme: 'dark', language: 'en', accessibility: ['high-contrast'] },
    analytics: { lastUpdated: new Date(), usageStats: { create: 1 } },
};
describe('UserPreferencesController', () => {
    let controller;
    let service;
    const mockService = {
        create: jest.fn(),
        findByUserId: jest.fn(),
        update: jest.fn(),
        getCustomizedLearningPath: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [user_preferences_controller_1.UserPreferencesController],
            providers: [
                { provide: user_preferences_service_1.UserPreferencesService, useValue: mockService },
            ],
        }).compile();
        controller = module.get(user_preferences_controller_1.UserPreferencesController);
        service = module.get(user_preferences_service_1.UserPreferencesService);
        jest.clearAllMocks();
    });
    describe('create', () => {
        it('should create user preferences', async () => {
            const dto = {
                learningCustomization: { preferredTopics: ['Math'] },
            };
            mockService.create.mockResolvedValue(mockPreferences);
            const req = { body: { userId: 'user-1' } };
            const result = await controller.create(req, dto);
            expect(service.create).toHaveBeenCalledWith('user-1', dto);
            expect(result).toEqual(mockPreferences);
        });
    });
    describe('get', () => {
        it('should return user preferences', async () => {
            mockService.findByUserId.mockResolvedValue(mockPreferences);
            const result = await controller.get('user-1');
            expect(service.findByUserId).toHaveBeenCalledWith('user-1');
            expect(result).toEqual(mockPreferences);
        });
        it('should throw NotFoundException if preferences not found', async () => {
            mockService.findByUserId.mockRejectedValue(new common_1.NotFoundException());
            await expect(controller.get('user-1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        it('should update user preferences', async () => {
            const dto = {
                learningCustomization: { preferredTopics: ['Science'] },
            };
            mockService.update.mockResolvedValue({ ...mockPreferences, learningCustomization: dto.learningCustomization });
            const result = await controller.update('user-1', dto);
            expect(service.update).toHaveBeenCalledWith('user-1', dto);
            expect(result.learningCustomization.preferredTopics).toContain('Science');
        });
    });
    describe('getLearningPath', () => {
        it('should return customized learning path', async () => {
            const learningPath = { suggestedTopics: ['Math'], pace: 'fast', goals: 'Master Algebra' };
            mockService.getCustomizedLearningPath.mockResolvedValue(learningPath);
            const result = await controller.getLearningPath('user-1');
            expect(service.getCustomizedLearningPath).toHaveBeenCalledWith('user-1');
            expect(result).toEqual(learningPath);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,