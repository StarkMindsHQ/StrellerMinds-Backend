{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-cleansing.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-cleansing.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport { Queue } from \"bull\"\r\n\r\nexport interface CleansingRule {\r\n  id: string\r\n  name: string\r\n  field: string\r\n  operation: string\r\n  parameters?: Record<string, any>\r\n}\r\n\r\nexport interface CleansingResult {\r\n  originalCount: number\r\n  cleanedCount: number\r\n  removedCount: number\r\n  modifiedCount: number\r\n  issues: string[]\r\n  cleanedData: any[]\r\n}\r\n\r\n@Injectable()\r\nexport class DataCleansingService {\r\n  private readonly logger = new Logger(DataCleansingService.name)\r\n\r\n  private readonly cleansingQueue: Queue\r\n\r\n  constructor() {\r\n    this.cleansingQueue = new Queue(\"data-cleansing\")\r\n  }\r\n\r\n  async cleanseData(data: any[], rules: CleansingRule[]): Promise<CleansingResult> {\r\n    try {\r\n      let cleanedData = [...data]\r\n      const result: CleansingResult = {\r\n        originalCount: data.length,\r\n        cleanedCount: 0,\r\n        removedCount: 0,\r\n        modifiedCount: 0,\r\n        issues: [],\r\n        cleanedData: [],\r\n      }\r\n\r\n      for (const rule of rules) {\r\n        const ruleResult = await this.applyCleansingRule(cleanedData, rule)\r\n        cleanedData = ruleResult.data\r\n        result.issues.push(...ruleResult.issues)\r\n        result.modifiedCount += ruleResult.modifiedCount\r\n        result.removedCount += ruleResult.removedCount\r\n      }\r\n\r\n      result.cleanedData = cleanedData\r\n      result.cleanedCount = cleanedData.length\r\n\r\n      // Queue for background processing if needed\r\n      if (data.length > 1000) {\r\n        await this.cleansingQueue.add(\"process-cleansing-result\", {\r\n          result,\r\n          timestamp: new Date(),\r\n        })\r\n      }\r\n\r\n      return result\r\n    } catch (error) {\r\n      this.logger.error(`Data cleansing failed: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async applyCleansingRule(\r\n    data: any[],\r\n    rule: CleansingRule,\r\n  ): Promise<{\r\n    data: any[]\r\n    modifiedCount: number\r\n    removedCount: number\r\n    issues: string[]\r\n  }> {\r\n    const result = {\r\n      data: [...data],\r\n      modifiedCount: 0,\r\n      removedCount: 0,\r\n      issues: [],\r\n    }\r\n\r\n    switch (rule.operation) {\r\n      case \"remove_nulls\":\r\n        result.data = result.data.filter((item) => {\r\n          const hasNull = item[rule.field] === null || item[rule.field] === undefined\r\n          if (hasNull) result.removedCount++\r\n          return !hasNull\r\n        })\r\n        break\r\n\r\n      case \"remove_duplicates\":\r\n        const seen = new Set()\r\n        const originalLength = result.data.length\r\n        result.data = result.data.filter((item) => {\r\n          const key = rule.parameters?.fields\r\n            ? rule.parameters.fields.map((f: string) => item[f]).join(\"|\")\r\n            : item[rule.field]\r\n\r\n          if (seen.has(key)) {\r\n            return false\r\n          }\r\n          seen.add(key)\r\n          return true\r\n        })\r\n        result.removedCount += originalLength - result.data.length\r\n        break\r\n\r\n      case \"trim_whitespace\":\r\n        result.data.forEach((item) => {\r\n          if (typeof item[rule.field] === \"string\") {\r\n            const original = item[rule.field]\r\n            item[rule.field] = item[rule.field].trim()\r\n            if (original !== item[rule.field]) {\r\n              result.modifiedCount++\r\n            }\r\n          }\r\n        })\r\n        break\r\n\r\n      case \"normalize_case\":\r\n        const caseType = rule.parameters?.case || \"lower\"\r\n        result.data.forEach((item) => {\r\n          if (typeof item[rule.field] === \"string\") {\r\n            const original = item[rule.field]\r\n            item[rule.field] = caseType === \"upper\" ? item[rule.field].toUpperCase() : item[rule.field].toLowerCase()\r\n            if (original !== item[rule.field]) {\r\n              result.modifiedCount++\r\n            }\r\n          }\r\n        })\r\n        break\r\n\r\n      case \"standardize_format\":\r\n        const format = rule.parameters?.format\r\n        result.data.forEach((item) => {\r\n          if (item[rule.field]) {\r\n            const original = item[rule.field]\r\n            try {\r\n              switch (format) {\r\n                case \"phone\":\r\n                  item[rule.field] = this.standardizePhone(item[rule.field])\r\n                  break\r\n                case \"email\":\r\n                  item[rule.field] = this.standardizeEmail(item[rule.field])\r\n                  break\r\n                case \"date\":\r\n                  item[rule.field] = this.standardizeDate(item[rule.field])\r\n                  break\r\n              }\r\n              if (original !== item[rule.field]) {\r\n                result.modifiedCount++\r\n              }\r\n            } catch (error) {\r\n              result.issues.push(`Failed to standardize ${rule.field} for item: ${error.message}`)\r\n            }\r\n          }\r\n        })\r\n        break\r\n\r\n      case \"fill_missing\":\r\n        const fillValue = rule.parameters?.value || rule.parameters?.defaultValue\r\n        result.data.forEach((item) => {\r\n          if (item[rule.field] === null || item[rule.field] === undefined || item[rule.field] === \"\") {\r\n            item[rule.field] = fillValue\r\n            result.modifiedCount++\r\n          }\r\n        })\r\n        break\r\n\r\n      case \"remove_outliers\":\r\n        const threshold = rule.parameters?.threshold || 3 // standard deviations\r\n        const values = result.data.map((item) => item[rule.field]).filter((val) => typeof val === \"number\")\r\n\r\n        if (values.length > 0) {\r\n          const mean = values.reduce((sum, val) => sum + val, 0) / values.length\r\n          const stdDev = Math.sqrt(values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length)\r\n\r\n          const originalLength = result.data.length\r\n          result.data = result.data.filter((item) => {\r\n            if (typeof item[rule.field] === \"number\") {\r\n              const zScore = Math.abs((item[rule.field] - mean) / stdDev)\r\n              return zScore <= threshold\r\n            }\r\n            return true\r\n          })\r\n          result.removedCount += originalLength - result.data.length\r\n        }\r\n        break\r\n\r\n      case \"validate_and_fix\":\r\n        const validator = rule.parameters?.validator\r\n        const fixer = rule.parameters?.fixer\r\n\r\n        result.data.forEach((item) => {\r\n          if (!this.validateValue(item[rule.field], validator)) {\r\n            const original = item[rule.field]\r\n            item[rule.field] = this.fixValue(item[rule.field], fixer)\r\n            if (original !== item[rule.field]) {\r\n              result.modifiedCount++\r\n            }\r\n          }\r\n        })\r\n        break\r\n\r\n      default:\r\n        result.issues.push(`Unknown cleansing operation: ${rule.operation}`)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  private standardizePhone(phone: string): string {\r\n    // Remove all non-digits\r\n    const digits = phone.replace(/\\D/g, \"\")\r\n\r\n    // Format as (XXX) XXX-XXXX for US numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`\r\n    }\r\n\r\n    return phone // Return original if can't standardize\r\n  }\r\n\r\n  private standardizeEmail(email: string): string {\r\n    return email.toLowerCase().trim()\r\n  }\r\n\r\n  private standardizeDate(date: string | Date): string {\r\n    const dateObj = new Date(date)\r\n    if (isNaN(dateObj.getTime())) {\r\n      throw new Error(\"Invalid date format\")\r\n    }\r\n    return dateObj.toISOString()\r\n  }\r\n\r\n  private validateValue(value: any, validator: any): boolean {\r\n    if (!validator) return true\r\n\r\n    switch (validator.type) {\r\n      case \"regex\":\r\n        return new RegExp(validator.pattern).test(value)\r\n      case \"range\":\r\n        return value >= validator.min && value <= validator.max\r\n      case \"length\":\r\n        return value.length >= validator.min && value.length <= validator.max\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n\r\n  private fixValue(value: any, fixer: any): any {\r\n    if (!fixer) return value\r\n\r\n    switch (fixer.type) {\r\n      case \"default\":\r\n        return fixer.value\r\n      case \"truncate\":\r\n        return typeof value === \"string\" ? value.substring(0, fixer.length) : value\r\n      case \"pad\":\r\n        return typeof value === \"string\" ? value.padStart(fixer.length, fixer.char || \"0\") : value\r\n      default:\r\n        return value\r\n    }\r\n  }\r\n\r\n  async getCleansingRules(entityType: string): Promise<CleansingRule[]> {\r\n    // This would typically come from a database\r\n    // For now, return some default rules\r\n    return [\r\n      {\r\n        id: \"1\",\r\n        name: \"Remove Nulls\",\r\n        field: \"email\",\r\n        operation: \"remove_nulls\",\r\n      },\r\n      {\r\n        id: \"2\",\r\n        name: \"Trim Whitespace\",\r\n        field: \"name\",\r\n        operation: \"trim_whitespace\",\r\n      },\r\n      {\r\n        id: \"3\",\r\n        name: \"Normalize Email\",\r\n        field: \"email\",\r\n        operation: \"standardize_format\",\r\n        parameters: { format: \"email\" },\r\n      },\r\n    ]\r\n  }\r\n}\r\n"],"version":3}