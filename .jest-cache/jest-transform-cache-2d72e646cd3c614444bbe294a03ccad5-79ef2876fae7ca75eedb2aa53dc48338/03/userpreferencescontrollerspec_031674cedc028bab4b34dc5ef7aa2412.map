{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,+EAA0E;AAC1E,yEAAoE;AAEpE,2CAAmD;AAEnD,MAAM,eAAe,GAAG;IACtB,EAAE,EAAE,QAAQ;IACZ,IAAI,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE;IACtB,qBAAqB,EAAE,EAAE,eAAe,EAAE,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE;IAC3G,oBAAoB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE;IACnG,mBAAmB,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,eAAe,CAAC,EAAE;IACxF,SAAS,EAAE,EAAE,WAAW,EAAE,IAAI,IAAI,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;CAClE,CAAC;AAEF,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,UAAqC,CAAC;IAC1C,IAAI,OAA+B,CAAC;IAEpC,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;QACvB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE;KACrC,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,uDAAyB,CAAC;YACxC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,iDAAsB,EAAE,QAAQ,EAAE,WAAW,EAAE;aAC3D;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAA4B,uDAAyB,CAAC,CAAC;QAC9E,OAAO,GAAG,MAAM,CAAC,GAAG,CAAyB,iDAAsB,CAAC,CAAC;QACrE,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,GAAG,GAA6B;gBACpC,qBAAqB,EAAE,EAAE,eAAe,EAAE,CAAC,MAAM,CAAC,EAAE;aACrD,CAAC;YACF,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YACtD,MAAM,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC;YAC3C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,0BAAiB,EAAE,CAAC,CAAC;YACpE,MAAM,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,GAAG,GAA6B;gBACpC,qBAAqB,EAAE,EAAE,eAAe,EAAE,CAAC,SAAS,CAAC,EAAE;aACxD,CAAC;YACF,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,GAAG,eAAe,EAAE,qBAAqB,EAAE,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC/G,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,YAAY,GAAG,EAAE,eAAe,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;YAC1F,WAAW,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YACtE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACzE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\user-preferences\\user-preferences.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { UserPreferencesController } from './user-preferences.controller';\r\nimport { UserPreferencesService } from './user-preferences.service';\r\nimport { CreateUserPreferencesDto } from './dtos/create-user-preferences.dto';\r\nimport { NotFoundException } from '@nestjs/common';\r\n\r\nconst mockPreferences = {\r\n  id: 'pref-1',\r\n  user: { id: 'user-1' },\r\n  learningCustomization: { preferredTopics: ['Math'], learningPace: 'fast', learningGoals: 'Master Algebra' },\r\n  notificationSettings: { emailEnabled: true, frequency: 'immediate', rules: { courseUpdate: true } },\r\n  personalizationData: { theme: 'dark', language: 'en', accessibility: ['high-contrast'] },\r\n  analytics: { lastUpdated: new Date(), usageStats: { create: 1 } },\r\n};\r\n\r\ndescribe('UserPreferencesController', () => {\r\n  let controller: UserPreferencesController;\r\n  let service: UserPreferencesService;\r\n\r\n  const mockService = {\r\n    create: jest.fn(),\r\n    findByUserId: jest.fn(),\r\n    update: jest.fn(),\r\n    getCustomizedLearningPath: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [UserPreferencesController],\r\n      providers: [\r\n        { provide: UserPreferencesService, useValue: mockService },\r\n      ],\r\n    }).compile();\r\n\r\n    controller = module.get<UserPreferencesController>(UserPreferencesController);\r\n    service = module.get<UserPreferencesService>(UserPreferencesService);\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create user preferences', async () => {\r\n      const dto: CreateUserPreferencesDto = {\r\n        learningCustomization: { preferredTopics: ['Math'] },\r\n      };\r\n      mockService.create.mockResolvedValue(mockPreferences);\r\n      const req = { body: { userId: 'user-1' } };\r\n      const result = await controller.create(req, dto);\r\n      expect(service.create).toHaveBeenCalledWith('user-1', dto);\r\n      expect(result).toEqual(mockPreferences);\r\n    });\r\n  });\r\n\r\n  describe('get', () => {\r\n    it('should return user preferences', async () => {\r\n      mockService.findByUserId.mockResolvedValue(mockPreferences);\r\n      const result = await controller.get('user-1');\r\n      expect(service.findByUserId).toHaveBeenCalledWith('user-1');\r\n      expect(result).toEqual(mockPreferences);\r\n    });\r\n    it('should throw NotFoundException if preferences not found', async () => {\r\n      mockService.findByUserId.mockRejectedValue(new NotFoundException());\r\n      await expect(controller.get('user-1')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update user preferences', async () => {\r\n      const dto: CreateUserPreferencesDto = {\r\n        learningCustomization: { preferredTopics: ['Science'] },\r\n      };\r\n      mockService.update.mockResolvedValue({ ...mockPreferences, learningCustomization: dto.learningCustomization });\r\n      const result = await controller.update('user-1', dto);\r\n      expect(service.update).toHaveBeenCalledWith('user-1', dto);\r\n      expect(result.learningCustomization.preferredTopics).toContain('Science');\r\n    });\r\n  });\r\n\r\n  describe('getLearningPath', () => {\r\n    it('should return customized learning path', async () => {\r\n      const learningPath = { suggestedTopics: ['Math'], pace: 'fast', goals: 'Master Algebra' };\r\n      mockService.getCustomizedLearningPath.mockResolvedValue(learningPath);\r\n      const result = await controller.getLearningPath('user-1');\r\n      expect(service.getCustomizedLearningPath).toHaveBeenCalledWith('user-1');\r\n      expect(result).toEqual(learningPath);\r\n    });\r\n  });\r\n}); "],"version":3}