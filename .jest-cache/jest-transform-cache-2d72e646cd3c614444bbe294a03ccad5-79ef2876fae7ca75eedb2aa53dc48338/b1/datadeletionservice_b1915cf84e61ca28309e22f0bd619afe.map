{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\data-deletion.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\gdpr\\data-deletion.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport {\r\n  DeletionRequest,\r\n  DeletionStatus,\r\n} from './entities/deletion-request.entity';\r\nimport {\r\n  DataProcessingLog,\r\n  ProcessingActivity,\r\n} from './entities/data-processing-log.entity';\r\nimport { CreateDeletionRequestDto } from './dto/deletion-request.dto';\r\nimport { ConsentService } from './consent.service';\r\n\r\n@Injectable()\r\nexport class DataDeletionService {\r\n  constructor(\r\n    @InjectRepository(DeletionRequest)\r\n    private deletionRepository: Repository<DeletionRequest>,\r\n    @InjectRepository(DataProcessingLog)\r\n    private logRepository: Repository<DataProcessingLog>,\r\n    private consentService: ConsentService,\r\n  ) {}\r\n\r\n  async createDeletionRequest(\r\n    userId: string,\r\n    requestDto: CreateDeletionRequestDto,\r\n    ipAddress: string,\r\n    userAgent: string,\r\n  ): Promise<DeletionRequest> {\r\n    // Check for existing pending requests\r\n    const existingRequest = await this.deletionRepository.findOne({\r\n      where: { userId, status: DeletionStatus.PENDING },\r\n    });\r\n\r\n    if (existingRequest) {\r\n      throw new Error('A deletion request is already pending for this user');\r\n    }\r\n\r\n    const deletionRequest = this.deletionRepository.create({\r\n      userId,\r\n      ...requestDto,\r\n      scheduledAt: requestDto.scheduledAt\r\n        ? new Date(requestDto.scheduledAt)\r\n        : null,\r\n    });\r\n\r\n    const saved = await this.deletionRepository.save(deletionRequest);\r\n\r\n    // Log the deletion request\r\n    await this.logDataProcessing(\r\n      userId,\r\n      ProcessingActivity.DATA_DELETION,\r\n      'Data deletion request created',\r\n      { requestId: saved.id, reason: requestDto.reason },\r\n      ipAddress,\r\n      userAgent,\r\n    );\r\n\r\n    return saved;\r\n  }\r\n\r\n  async processDeletionRequest(requestId: string): Promise<void> {\r\n    const request = await this.deletionRepository.findOne({\r\n      where: { id: requestId },\r\n    });\r\n\r\n    if (!request) {\r\n      throw new Error('Deletion request not found');\r\n    }\r\n\r\n    try {\r\n      await this.deletionRepository.update(requestId, {\r\n        status: DeletionStatus.IN_PROGRESS,\r\n      });\r\n\r\n      // Perform the actual deletion\r\n      await this.deleteUserData(request.userId, request.dataTypes);\r\n\r\n      await this.deletionRepository.update(requestId, {\r\n        status: DeletionStatus.COMPLETED,\r\n        completedAt: new Date(),\r\n      });\r\n\r\n      // Log completion\r\n      await this.logDataProcessing(\r\n        request.userId,\r\n        ProcessingActivity.DATA_DELETION,\r\n        'Data deletion completed',\r\n        { requestId },\r\n        '127.0.0.1', // System IP\r\n        'GDPR Service',\r\n      );\r\n    } catch (error) {\r\n      await this.deletionRepository.update(requestId, {\r\n        status: DeletionStatus.FAILED,\r\n        notes: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async deleteUserData(\r\n    userId: string,\r\n    dataTypes?: string[],\r\n  ): Promise<void> {\r\n    // Delete user consents\r\n    if (!dataTypes || dataTypes.includes('consents')) {\r\n      await this.consentService.withdrawAllConsents(userId);\r\n    }\r\n\r\n    // Delete user profile data (implement based on your entities)\r\n    if (!dataTypes || dataTypes.includes('profile')) {\r\n      await this.deleteUserProfile(userId);\r\n    }\r\n\r\n    // Delete activity logs (keep deletion logs for compliance)\r\n    if (!dataTypes || dataTypes.includes('activity')) {\r\n      await this.logRepository.delete({\r\n        userId,\r\n        activity: ProcessingActivity.DATA_ACCESS,\r\n      });\r\n    }\r\n\r\n    // Add more deletion logic based on your application's data model\r\n  }\r\n\r\n  private async deleteUserProfile(userId: string): Promise<void> {\r\n    // Implement based on your User entity and related data\r\n    console.log(`Deleting profile data for user: ${userId}`);\r\n  }\r\n\r\n  async getDeletionRequests(userId: string): Promise<DeletionRequest[]> {\r\n    return this.deletionRepository.find({\r\n      where: { userId },\r\n      order: { createdAt: 'DESC' },\r\n    });\r\n  }\r\n\r\n  private async logDataProcessing(\r\n    userId: string,\r\n    activity: ProcessingActivity,\r\n    description: string,\r\n    metadata: any,\r\n    ipAddress: string,\r\n    userAgent: string,\r\n  ): Promise<void> {\r\n    const log = this.logRepository.create({\r\n      userId,\r\n      activity,\r\n      description,\r\n      metadata,\r\n      ipAddress,\r\n      userAgent,\r\n    });\r\n\r\n    await this.logRepository.save(log);\r\n  }\r\n}\r\n"],"version":3}