d1b88b4ae47a823b297c76d035766518
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataDeletionService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const deletion_request_entity_1 = require("./entities/deletion-request.entity");
const data_processing_log_entity_1 = require("./entities/data-processing-log.entity");
const consent_service_1 = require("./consent.service");
let DataDeletionService = class DataDeletionService {
    constructor(deletionRepository, logRepository, consentService) {
        this.deletionRepository = deletionRepository;
        this.logRepository = logRepository;
        this.consentService = consentService;
    }
    async createDeletionRequest(userId, requestDto, ipAddress, userAgent) {
        // Check for existing pending requests
        const existingRequest = await this.deletionRepository.findOne({
            where: { userId, status: deletion_request_entity_1.DeletionStatus.PENDING },
        });
        if (existingRequest) {
            throw new Error('A deletion request is already pending for this user');
        }
        const deletionRequest = this.deletionRepository.create({
            userId,
            ...requestDto,
            scheduledAt: requestDto.scheduledAt
                ? new Date(requestDto.scheduledAt)
                : null,
        });
        const saved = await this.deletionRepository.save(deletionRequest);
        // Log the deletion request
        await this.logDataProcessing(userId, data_processing_log_entity_1.ProcessingActivity.DATA_DELETION, 'Data deletion request created', { requestId: saved.id, reason: requestDto.reason }, ipAddress, userAgent);
        return saved;
    }
    async processDeletionRequest(requestId) {
        const request = await this.deletionRepository.findOne({
            where: { id: requestId },
        });
        if (!request) {
            throw new Error('Deletion request not found');
        }
        try {
            await this.deletionRepository.update(requestId, {
                status: deletion_request_entity_1.DeletionStatus.IN_PROGRESS,
            });
            // Perform the actual deletion
            await this.deleteUserData(request.userId, request.dataTypes);
            await this.deletionRepository.update(requestId, {
                status: deletion_request_entity_1.DeletionStatus.COMPLETED,
                completedAt: new Date(),
            });
            // Log completion
            await this.logDataProcessing(request.userId, data_processing_log_entity_1.ProcessingActivity.DATA_DELETION, 'Data deletion completed', { requestId }, '127.0.0.1', // System IP
            'GDPR Service');
        }
        catch (error) {
            await this.deletionRepository.update(requestId, {
                status: deletion_request_entity_1.DeletionStatus.FAILED,
                notes: error.message,
            });
            throw error;
        }
    }
    async deleteUserData(userId, dataTypes) {
        // Delete user consents
        if (!dataTypes || dataTypes.includes('consents')) {
            await this.consentService.withdrawAllConsents(userId);
        }
        // Delete user profile data (implement based on your entities)
        if (!dataTypes || dataTypes.includes('profile')) {
            await this.deleteUserProfile(userId);
        }
        // Delete activity logs (keep deletion logs for compliance)
        if (!dataTypes || dataTypes.includes('activity')) {
            await this.logRepository.delete({
                userId,
                activity: data_processing_log_entity_1.ProcessingActivity.DATA_ACCESS,
            });
        }
        // Add more deletion logic based on your application's data model
    }
    async deleteUserProfile(userId) {
        // Implement based on your User entity and related data
        console.log(`Deleting profile data for user: ${userId}`);
    }
    async getDeletionRequests(userId) {
        return this.deletionRepository.find({
            where: { userId },
            order: { createdAt: 'DESC' },
        });
    }
    async logDataProcessing(userId, activity, description, metadata, ipAddress, userAgent) {
        const log = this.logRepository.create({
            userId,
            activity,
            description,
            metadata,
            ipAddress,
            userAgent,
        });
        await this.logRepository.save(log);
    }
};
exports.DataDeletionService = DataDeletionService;
exports.DataDeletionService = DataDeletionService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(deletion_request_entity_1.DeletionRequest)),
    __param(1, (0, typeorm_1.InjectRepository)(data_processing_log_entity_1.DataProcessingLog)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof consent_service_1.ConsentService !== "undefined" && consent_service_1.ConsentService) === "function" ? _c : Object])
], DataDeletionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,