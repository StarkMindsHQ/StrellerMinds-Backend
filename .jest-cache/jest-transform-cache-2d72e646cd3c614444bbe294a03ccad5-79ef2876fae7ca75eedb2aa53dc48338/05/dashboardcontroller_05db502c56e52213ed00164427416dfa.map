{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\controllers\\dashboard.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\controllers\\dashboard.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Put, Delete, Body, Param, Query, ValidationPipe, UsePipes } from \"@nestjs/common\"\r\nimport { ApiTags, ApiOperation, ApiResponse } from \"@nestjs/swagger\"\r\nimport type { Repository } from \"typeorm\"\r\n\r\nimport type { Dashboard } from \"../entities/dashboard.entity\"\r\nimport type { RealTimeAnalyticsService } from \"../services/real-time-analytics.service\"\r\nimport type { BusinessIntelligenceService } from \"../services/business-intelligence.service\"\r\n\r\n@ApiTags(\"Dashboard\")\r\n@Controller(\"analytics/dashboards\")\r\nexport class DashboardController {\r\n  constructor(\r\n    private readonly dashboardRepository: Repository<Dashboard>,\r\n    private readonly realTimeAnalyticsService: RealTimeAnalyticsService,\r\n    private readonly businessIntelligenceService: BusinessIntelligenceService,\r\n  ) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new dashboard' })\r\n  @ApiResponse({ status: 201, description: 'Dashboard created successfully' })\r\n  @UsePipes(new ValidationPipe({ transform: true }))\r\n  async createDashboard(@Body() dashboardData: Partial<Dashboard>) {\r\n    const dashboard = this.dashboardRepository.create(dashboardData);\r\n    return this.dashboardRepository.save(dashboard);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: \"Get all dashboards\" })\r\n  @ApiResponse({ status: 200, description: \"Dashboards retrieved successfully\" })\r\n  async getDashboards(@Query('createdBy') createdBy?: string, @Query('isPublic') isPublic?: boolean) {\r\n    const query = this.dashboardRepository.createQueryBuilder(\"dashboard\")\r\n\r\n    if (createdBy) {\r\n      query.andWhere(\"dashboard.createdBy = :createdBy\", { createdBy })\r\n    }\r\n\r\n    if (isPublic !== undefined) {\r\n      query.andWhere(\"dashboard.isPublic = :isPublic\", { isPublic })\r\n    }\r\n\r\n    return query.orderBy(\"dashboard.createdAt\", \"DESC\").getMany()\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Get dashboard by ID' })\r\n  @ApiResponse({ status: 200, description: 'Dashboard retrieved successfully' })\r\n  async getDashboard(@Param('id') id: string) {\r\n    const dashboard = await this.dashboardRepository.findOne({\r\n      where: { id },\r\n    });\r\n\r\n    if (!dashboard) {\r\n      throw new Error(`Dashboard ${id} not found`);\r\n    }\r\n\r\n    return dashboard;\r\n  }\r\n\r\n  @Get(':id/data')\r\n  @ApiOperation({ summary: 'Get dashboard data' })\r\n  @ApiResponse({ status: 200, description: 'Dashboard data retrieved successfully' })\r\n  async getDashboardData(@Param('id') id: string) {\r\n    const dashboard = await this.getDashboard(id);\r\n    const widgetData = {};\r\n\r\n    for (const widget of dashboard.widgets) {\r\n      try {\r\n        let data;\r\n        \r\n        switch (widget.type) {\r\n          case 'metric':\r\n            data = await this.getMetricWidgetData(widget.configuration);\r\n            break;\r\n          case 'chart':\r\n            data = await this.getChartWidgetData(widget.configuration);\r\n            break;\r\n          case 'table':\r\n            data = await this.getTableWidgetData(widget.configuration);\r\n            break;\r\n          case 'gauge':\r\n            data = await this.getGaugeWidgetData(widget.configuration);\r\n            break;\r\n          default:\r\n            data = null;\r\n        }\r\n\r\n        widgetData[widget.id] = data;\r\n      } catch (error) {\r\n        widgetData[widget.id] = { error: error.message };\r\n      }\r\n    }\r\n\r\n    return {\r\n      dashboard,\r\n      data: widgetData,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  @Put(\":id\")\r\n  @ApiOperation({ summary: \"Update dashboard\" })\r\n  @ApiResponse({ status: 200, description: \"Dashboard updated successfully\" })\r\n  @UsePipes(new ValidationPipe({ transform: true }))\r\n  async updateDashboard(@Param('id') id: string, @Body() updateData: Partial<Dashboard>) {\r\n    await this.dashboardRepository.update(id, updateData)\r\n    return this.getDashboard(id)\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Delete dashboard' })\r\n  @ApiResponse({ status: 200, description: 'Dashboard deleted successfully' })\r\n  async deleteDashboard(@Param('id') id: string) {\r\n    const result = await this.dashboardRepository.delete(id);\r\n    \r\n    if (result.affected === 0) {\r\n      throw new Error(`Dashboard ${id} not found`);\r\n    }\r\n\r\n    return { success: true, message: 'Dashboard deleted successfully' };\r\n  }\r\n\r\n  private async getMetricWidgetData(config: any) {\r\n    const { metric, timeRange, filters } = config\r\n\r\n    const query = {\r\n      metrics: [metric],\r\n      timeRange: {\r\n        start: new Date(timeRange.start),\r\n        end: new Date(timeRange.end),\r\n      },\r\n      filters,\r\n    }\r\n\r\n    const result = await this.businessIntelligenceService.executeQuery(query)\r\n\r\n    return {\r\n      value: result.summary.aggregations[`${metric}_total`] || 0,\r\n      change: 0, // Calculate change from previous period\r\n      trend: \"up\", // Calculate trend\r\n    }\r\n  }\r\n\r\n  private async getChartWidgetData(config: any) {\r\n    const { metrics, timeRange, chartType, groupBy } = config\r\n\r\n    const query = {\r\n      metrics,\r\n      timeRange: {\r\n        start: new Date(timeRange.start),\r\n        end: new Date(timeRange.end),\r\n      },\r\n      dimensions: groupBy,\r\n    }\r\n\r\n    const result = await this.businessIntelligenceService.executeQuery(query)\r\n\r\n    return {\r\n      type: chartType,\r\n      data: result.data.map((point) => ({\r\n        x: point.timestamp,\r\n        ...point.metrics,\r\n      })),\r\n    }\r\n  }\r\n\r\n  private async getTableWidgetData(config: any) {\r\n    const { metrics, timeRange, dimensions, limit } = config\r\n\r\n    const query = {\r\n      metrics,\r\n      timeRange: {\r\n        start: new Date(timeRange.start),\r\n        end: new Date(timeRange.end),\r\n      },\r\n      dimensions,\r\n      limit,\r\n    }\r\n\r\n    const result = await this.businessIntelligenceService.executeQuery(query)\r\n\r\n    return {\r\n      columns: [\"timestamp\", ...dimensions, ...metrics],\r\n      rows: result.data.map((point) => [\r\n        point.timestamp,\r\n        ...dimensions.map((dim) => point.dimensions[dim]),\r\n        ...metrics.map((metric) => point.metrics[metric]),\r\n      ]),\r\n    }\r\n  }\r\n\r\n  private async getGaugeWidgetData(config: any) {\r\n    const { metric, timeRange, target, thresholds } = config\r\n\r\n    const query = {\r\n      metrics: [metric],\r\n      timeRange: {\r\n        start: new Date(timeRange.start),\r\n        end: new Date(timeRange.end),\r\n      },\r\n    }\r\n\r\n    const result = await this.businessIntelligenceService.executeQuery(query)\r\n    const value = result.summary.aggregations[`${metric}_total`] || 0\r\n\r\n    return {\r\n      value,\r\n      target,\r\n      percentage: target > 0 ? (value / target) * 100 : 0,\r\n      status: this.getGaugeStatus(value, thresholds),\r\n    }\r\n  }\r\n\r\n  private getGaugeStatus(value: number, thresholds: any) {\r\n    if (value >= thresholds.good) return \"good\"\r\n    if (value >= thresholds.warning) return \"warning\"\r\n    return \"critical\"\r\n  }\r\n}\r\n"],"version":3}