afb5b1e871db004adbd56be3c9e7c360
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
let DashboardController = class DashboardController {
    constructor(dashboardRepository, realTimeAnalyticsService, businessIntelligenceService) {
        this.dashboardRepository = dashboardRepository;
        this.realTimeAnalyticsService = realTimeAnalyticsService;
        this.businessIntelligenceService = businessIntelligenceService;
    }
    async createDashboard(dashboardData) {
        const dashboard = this.dashboardRepository.create(dashboardData);
        return this.dashboardRepository.save(dashboard);
    }
    async getDashboards(createdBy, isPublic) {
        const query = this.dashboardRepository.createQueryBuilder("dashboard");
        if (createdBy) {
            query.andWhere("dashboard.createdBy = :createdBy", { createdBy });
        }
        if (isPublic !== undefined) {
            query.andWhere("dashboard.isPublic = :isPublic", { isPublic });
        }
        return query.orderBy("dashboard.createdAt", "DESC").getMany();
    }
    async getDashboard(id) {
        const dashboard = await this.dashboardRepository.findOne({
            where: { id },
        });
        if (!dashboard) {
            throw new Error(`Dashboard ${id} not found`);
        }
        return dashboard;
    }
    async getDashboardData(id) {
        const dashboard = await this.getDashboard(id);
        const widgetData = {};
        for (const widget of dashboard.widgets) {
            try {
                let data;
                switch (widget.type) {
                    case 'metric':
                        data = await this.getMetricWidgetData(widget.configuration);
                        break;
                    case 'chart':
                        data = await this.getChartWidgetData(widget.configuration);
                        break;
                    case 'table':
                        data = await this.getTableWidgetData(widget.configuration);
                        break;
                    case 'gauge':
                        data = await this.getGaugeWidgetData(widget.configuration);
                        break;
                    default:
                        data = null;
                }
                widgetData[widget.id] = data;
            }
            catch (error) {
                widgetData[widget.id] = { error: error.message };
            }
        }
        return {
            dashboard,
            data: widgetData,
            timestamp: new Date(),
        };
    }
    async updateDashboard(id, updateData) {
        await this.dashboardRepository.update(id, updateData);
        return this.getDashboard(id);
    }
    async deleteDashboard(id) {
        const result = await this.dashboardRepository.delete(id);
        if (result.affected === 0) {
            throw new Error(`Dashboard ${id} not found`);
        }
        return { success: true, message: 'Dashboard deleted successfully' };
    }
    async getMetricWidgetData(config) {
        const { metric, timeRange, filters } = config;
        const query = {
            metrics: [metric],
            timeRange: {
                start: new Date(timeRange.start),
                end: new Date(timeRange.end),
            },
            filters,
        };
        const result = await this.businessIntelligenceService.executeQuery(query);
        return {
            value: result.summary.aggregations[`${metric}_total`] || 0,
            change: 0, // Calculate change from previous period
            trend: "up", // Calculate trend
        };
    }
    async getChartWidgetData(config) {
        const { metrics, timeRange, chartType, groupBy } = config;
        const query = {
            metrics,
            timeRange: {
                start: new Date(timeRange.start),
                end: new Date(timeRange.end),
            },
            dimensions: groupBy,
        };
        const result = await this.businessIntelligenceService.executeQuery(query);
        return {
            type: chartType,
            data: result.data.map((point) => ({
                x: point.timestamp,
                ...point.metrics,
            })),
        };
    }
    async getTableWidgetData(config) {
        const { metrics, timeRange, dimensions, limit } = config;
        const query = {
            metrics,
            timeRange: {
                start: new Date(timeRange.start),
                end: new Date(timeRange.end),
            },
            dimensions,
            limit,
        };
        const result = await this.businessIntelligenceService.executeQuery(query);
        return {
            columns: ["timestamp", ...dimensions, ...metrics],
            rows: result.data.map((point) => [
                point.timestamp,
                ...dimensions.map((dim) => point.dimensions[dim]),
                ...metrics.map((metric) => point.metrics[metric]),
            ]),
        };
    }
    async getGaugeWidgetData(config) {
        const { metric, timeRange, target, thresholds } = config;
        const query = {
            metrics: [metric],
            timeRange: {
                start: new Date(timeRange.start),
                end: new Date(timeRange.end),
            },
        };
        const result = await this.businessIntelligenceService.executeQuery(query);
        const value = result.summary.aggregations[`${metric}_total`] || 0;
        return {
            value,
            target,
            percentage: target > 0 ? (value / target) * 100 : 0,
            status: this.getGaugeStatus(value, thresholds),
        };
    }
    getGaugeStatus(value, thresholds) {
        if (value >= thresholds.good)
            return "good";
        if (value >= thresholds.warning)
            return "warning";
        return "critical";
    }
};
exports.DashboardController = DashboardController;
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({ summary: 'Create a new dashboard' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Dashboard created successfully' }),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof Partial !== "undefined" && Partial) === "function" ? _a : Object]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "createDashboard", null);
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: "Get all dashboards" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Dashboards retrieved successfully" }),
    __param(0, (0, common_1.Query)('createdBy')),
    __param(1, (0, common_1.Query)('isPublic')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "getDashboards", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Get dashboard by ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Dashboard retrieved successfully' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "getDashboard", null);
__decorate([
    (0, common_1.Get)(':id/data'),
    (0, swagger_1.ApiOperation)({ summary: 'Get dashboard data' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Dashboard data retrieved successfully' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "getDashboardData", null);
__decorate([
    (0, common_1.Put)(":id"),
    (0, swagger_1.ApiOperation)({ summary: "Update dashboard" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Dashboard updated successfully" }),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof Partial !== "undefined" && Partial) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "updateDashboard", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Delete dashboard' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Dashboard deleted successfully' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DashboardController.prototype, "deleteDashboard", null);
exports.DashboardController = DashboardController = __decorate([
    (0, swagger_1.ApiTags)("Dashboard"),
    (0, common_1.Controller)("analytics/dashboards"),
    __metadata("design:paramtypes", [Object, Object, Object])
], DashboardController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,