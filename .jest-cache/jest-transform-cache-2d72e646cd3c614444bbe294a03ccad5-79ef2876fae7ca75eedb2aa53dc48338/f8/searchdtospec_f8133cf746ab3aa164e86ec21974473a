b670c9a3ccf3fde9263b14473042ccb8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const search_dto_1 = require("./search.dto");
const advanced_filter_dto_1 = require("./advanced-filter.dto");
const search_suggestion_dto_1 = require("./search-suggestion.dto");
describe("Search DTOs", () => {
    describe("SearchDto", () => {
        it("should validate a valid search DTO", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_dto_1.SearchDto, {
                query: "stellar blockchain",
                page: 1,
                limit: 10,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(0);
        });
        it("should fail validation for empty query", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_dto_1.SearchDto, {
                query: "",
                page: 1,
                limit: 10,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(1);
            expect(errors[0].property).toBe("query");
        });
        it("should fail validation for invalid page number", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_dto_1.SearchDto, {
                query: "stellar",
                page: 0,
                limit: 10,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(1);
            expect(errors[0].property).toBe("page");
        });
        it("should fail validation for invalid limit", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_dto_1.SearchDto, {
                query: "stellar",
                page: 1,
                limit: 101,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(1);
            expect(errors[0].property).toBe("limit");
        });
        it("should use default values when not provided", () => {
            const dto = (0, class_transformer_1.plainToClass)(search_dto_1.SearchDto, {
                query: "stellar",
            });
            expect(dto.page).toBe(1);
            expect(dto.limit).toBe(10);
        });
    });
    describe("AdvancedFilterDto", () => {
        it("should validate a valid advanced filter DTO", async () => {
            const dto = (0, class_transformer_1.plainToClass)(advanced_filter_dto_1.AdvancedFilterDto, {
                query: "stellar",
                categories: ["blockchain", "development"],
                levels: ["beginner", "intermediate"],
                priceRange: { min: 0, max: 200 },
                durationRange: { min: 60, max: 300 },
                instructors: ["John Doe"],
                tags: ["stellar", "blockchain"],
                sortBy: "relevance",
                sortOrder: "desc",
                page: 1,
                limit: 10,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(0);
        });
        it("should validate price range", async () => {
            const dto = (0, class_transformer_1.plainToClass)(advanced_filter_dto_1.AdvancedFilterDto, {
                query: "stellar",
                priceRange: { min: 100, max: 50 }, // Invalid: min > max
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors.length).toBeGreaterThan(0);
        });
        it("should validate duration range", async () => {
            const dto = (0, class_transformer_1.plainToClass)(advanced_filter_dto_1.AdvancedFilterDto, {
                query: "stellar",
                durationRange: { min: 300, max: 100 }, // Invalid: min > max
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors.length).toBeGreaterThan(0);
        });
        it("should validate sort options", async () => {
            const dto = (0, class_transformer_1.plainToClass)(advanced_filter_dto_1.AdvancedFilterDto, {
                query: "stellar",
                sortBy: "invalid_sort",
                sortOrder: "invalid_order",
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors.length).toBeGreaterThan(0);
        });
    });
    describe("SearchSuggestionDto", () => {
        it("should validate a valid suggestion DTO", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_suggestion_dto_1.SearchSuggestionDto, {
                query: "stel",
                limit: 5,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(0);
        });
        it("should fail validation for short query", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_suggestion_dto_1.SearchSuggestionDto, {
                query: "a",
                limit: 5,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(1);
            expect(errors[0].property).toBe("query");
        });
        it("should fail validation for excessive limit", async () => {
            const dto = (0, class_transformer_1.plainToClass)(search_suggestion_dto_1.SearchSuggestionDto, {
                query: "stellar",
                limit: 21,
            });
            const errors = await (0, class_validator_1.validate)(dto);
            expect(errors).toHaveLength(1);
            expect(errors[0].property).toBe("limit");
        });
        it("should use default limit when not provided", () => {
            const dto = (0, class_transformer_1.plainToClass)(search_suggestion_dto_1.SearchSuggestionDto, {
                query: "stellar",
            });
            expect(dto.limit).toBe(10);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,