{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-quality.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\data-quality\\services\\data-quality.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\n\r\nimport { type DataQualityRule, RuleStatus } from \"../entities/data-quality-rule.entity\"\r\nimport type { DataQualityMetric } from \"../entities/data-quality-metric.entity\"\r\nimport type { DataQualityIssue } from \"../entities/data-quality-issue.entity\"\r\nimport type { DataValidationService } from \"./data-validation.service\"\r\nimport type { DataQualityMonitoringService } from \"./data-quality-monitoring.service\"\r\n\r\nexport interface QualityCheckResult {\r\n  passed: boolean\r\n  score: number\r\n  issues: Array<{\r\n    ruleId: string\r\n    severity: string\r\n    message: string\r\n    data?: any\r\n  }>\r\n  metrics: Array<{\r\n    name: string\r\n    value: number\r\n    category: string\r\n  }>\r\n}\r\n\r\n@Injectable()\r\nexport class DataQualityService {\r\n  private readonly logger = new Logger(DataQualityService.name)\r\n\r\n  constructor(\r\n    private readonly ruleRepository: Repository<DataQualityRule>,\r\n    private readonly metricRepository: Repository<DataQualityMetric>,\r\n    private readonly issueRepository: Repository<DataQualityIssue>,\r\n    private readonly dataQualityQueue: Queue,\r\n    private readonly validationService: DataValidationService,\r\n    private readonly monitoringService: DataQualityMonitoringService,\r\n  ) {}\r\n\r\n  async checkDataQuality(entityType: string, data: any[]): Promise<QualityCheckResult> {\r\n    try {\r\n      const rules = await this.getActiveRules(entityType)\r\n      const result: QualityCheckResult = {\r\n        passed: true,\r\n        score: 100,\r\n        issues: [],\r\n        metrics: [],\r\n      }\r\n\r\n      let totalScore = 0\r\n      let ruleCount = 0\r\n\r\n      for (const rule of rules) {\r\n        const ruleResult = await this.validateRule(rule, data)\r\n\r\n        if (!ruleResult.passed) {\r\n          result.passed = false\r\n          result.issues.push({\r\n            ruleId: rule.id,\r\n            severity: rule.severity,\r\n            message: rule.errorMessage || `Rule ${rule.name} failed`,\r\n            data: ruleResult.failedData,\r\n          })\r\n\r\n          // Create issue record\r\n          await this.createOrUpdateIssue(rule, ruleResult)\r\n        }\r\n\r\n        // Record metric\r\n        await this.recordMetric(rule, ruleResult)\r\n\r\n        totalScore += ruleResult.score\r\n        ruleCount++\r\n\r\n        result.metrics.push({\r\n          name: rule.name,\r\n          value: ruleResult.score,\r\n          category: rule.ruleType,\r\n        })\r\n      }\r\n\r\n      result.score = ruleCount > 0 ? totalScore / ruleCount : 100\r\n\r\n      // Queue for background processing\r\n      await this.dataQualityQueue.add(\"process-quality-check\", {\r\n        entityType,\r\n        result,\r\n        timestamp: new Date(),\r\n      })\r\n\r\n      return result\r\n    } catch (error) {\r\n      this.logger.error(`Data quality check failed: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getActiveRules(entityType: string): Promise<DataQualityRule[]> {\r\n    return this.ruleRepository.find({\r\n      where: {\r\n        entityType,\r\n        status: RuleStatus.ACTIVE,\r\n      },\r\n      order: {\r\n        severity: \"DESC\",\r\n        createdAt: \"ASC\",\r\n      },\r\n    })\r\n  }\r\n\r\n  async createRule(ruleData: Partial<DataQualityRule>): Promise<DataQualityRule> {\r\n    const rule = this.ruleRepository.create(ruleData)\r\n    return this.ruleRepository.save(rule)\r\n  }\r\n\r\n  async updateRule(id: string, updates: Partial<DataQualityRule>): Promise<DataQualityRule> {\r\n    await this.ruleRepository.update(id, updates)\r\n    const rule = await this.ruleRepository.findOne({ where: { id } })\r\n    if (!rule) {\r\n      throw new Error(`Rule with id ${id} not found`)\r\n    }\r\n    return rule\r\n  }\r\n\r\n  async deleteRule(id: string): Promise<void> {\r\n    await this.ruleRepository.update(id, { status: RuleStatus.DEPRECATED })\r\n  }\r\n\r\n  async getRules(filters: {\r\n    entityType?: string\r\n    ruleType?: string\r\n    status?: RuleStatus\r\n    severity?: string\r\n  }): Promise<DataQualityRule[]> {\r\n    const query = this.ruleRepository.createQueryBuilder(\"rule\")\r\n\r\n    if (filters.entityType) {\r\n      query.andWhere(\"rule.entityType = :entityType\", { entityType: filters.entityType })\r\n    }\r\n\r\n    if (filters.ruleType) {\r\n      query.andWhere(\"rule.ruleType = :ruleType\", { ruleType: filters.ruleType })\r\n    }\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"rule.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.severity) {\r\n      query.andWhere(\"rule.severity = :severity\", { severity: filters.severity })\r\n    }\r\n\r\n    return query.orderBy(\"rule.createdAt\", \"DESC\").getMany()\r\n  }\r\n\r\n  private async validateRule(\r\n    rule: DataQualityRule,\r\n    data: any[],\r\n  ): Promise<{\r\n    passed: boolean\r\n    score: number\r\n    failedData?: any[]\r\n    details?: any\r\n  }> {\r\n    try {\r\n      switch (rule.ruleType) {\r\n        case \"completeness\":\r\n          return this.validationService.checkCompleteness(rule, data)\r\n        case \"accuracy\":\r\n          return this.validationService.checkAccuracy(rule, data)\r\n        case \"consistency\":\r\n          return this.validationService.checkConsistency(rule, data)\r\n        case \"validity\":\r\n          return this.validationService.checkValidity(rule, data)\r\n        case \"uniqueness\":\r\n          return this.validationService.checkUniqueness(rule, data)\r\n        case \"timeliness\":\r\n          return this.validationService.checkTimeliness(rule, data)\r\n        case \"conformity\":\r\n          return this.validationService.checkConformity(rule, data)\r\n        default:\r\n          return { passed: true, score: 100 }\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(`Rule validation failed for ${rule.name}: ${error.message}`)\r\n      return { passed: false, score: 0, details: { error: error.message } }\r\n    }\r\n  }\r\n\r\n  private async recordMetric(rule: DataQualityRule, result: any): Promise<void> {\r\n    const metric = this.metricRepository.create({\r\n      ruleId: rule.id,\r\n      entityType: rule.entityType,\r\n      metricCategory: rule.ruleType as any,\r\n      metricName: rule.name,\r\n      value: result.score,\r\n      threshold: rule.threshold,\r\n      passed: result.passed,\r\n      details: result.details,\r\n      timestamp: new Date(),\r\n    })\r\n\r\n    await this.metricRepository.save(metric)\r\n  }\r\n\r\n  private async createOrUpdateIssue(rule: DataQualityRule, result: any): Promise<void> {\r\n    const existingIssue = await this.issueRepository.findOne({\r\n      where: {\r\n        ruleId: rule.id,\r\n        status: \"open\",\r\n      },\r\n    })\r\n\r\n    if (existingIssue) {\r\n      // Update existing issue\r\n      existingIssue.occurrenceCount += 1\r\n      existingIssue.lastOccurrence = new Date()\r\n      existingIssue.issueData = result.failedData || {}\r\n      await this.issueRepository.save(existingIssue)\r\n    } else {\r\n      // Create new issue\r\n      const issue = this.issueRepository.create({\r\n        ruleId: rule.id,\r\n        entityType: rule.entityType,\r\n        title: `Data Quality Issue: ${rule.name}`,\r\n        description: rule.errorMessage || `Rule ${rule.name} validation failed`,\r\n        priority: rule.severity as any,\r\n        issueData: result.failedData || {},\r\n        context: result.details,\r\n        occurrenceCount: 1,\r\n        firstOccurrence: new Date(),\r\n        lastOccurrence: new Date(),\r\n      })\r\n      await this.issueRepository.save(issue)\r\n    }\r\n  }\r\n\r\n  async getQualityMetrics(filters: {\r\n    entityType?: string\r\n    startDate?: Date\r\n    endDate?: Date\r\n    metricCategory?: string\r\n  }): Promise<DataQualityMetric[]> {\r\n    const query = this.metricRepository.createQueryBuilder(\"metric\")\r\n\r\n    if (filters.entityType) {\r\n      query.andWhere(\"metric.entityType = :entityType\", { entityType: filters.entityType })\r\n    }\r\n\r\n    if (filters.startDate) {\r\n      query.andWhere(\"metric.timestamp >= :startDate\", { startDate: filters.startDate })\r\n    }\r\n\r\n    if (filters.endDate) {\r\n      query.andWhere(\"metric.timestamp <= :endDate\", { endDate: filters.endDate })\r\n    }\r\n\r\n    if (filters.metricCategory) {\r\n      query.andWhere(\"metric.metricCategory = :metricCategory\", { metricCategory: filters.metricCategory })\r\n    }\r\n\r\n    return query.orderBy(\"metric.timestamp\", \"DESC\").getMany()\r\n  }\r\n\r\n  async getQualityIssues(filters: {\r\n    status?: string\r\n    priority?: string\r\n    entityType?: string\r\n    assignedTo?: string\r\n  }): Promise<DataQualityIssue[]> {\r\n    const query = this.issueRepository.createQueryBuilder(\"issue\")\r\n\r\n    if (filters.status) {\r\n      query.andWhere(\"issue.status = :status\", { status: filters.status })\r\n    }\r\n\r\n    if (filters.priority) {\r\n      query.andWhere(\"issue.priority = :priority\", { priority: filters.priority })\r\n    }\r\n\r\n    if (filters.entityType) {\r\n      query.andWhere(\"issue.entityType = :entityType\", { entityType: filters.entityType })\r\n    }\r\n\r\n    if (filters.assignedTo) {\r\n      query.andWhere(\"issue.assignedTo = :assignedTo\", { assignedTo: filters.assignedTo })\r\n    }\r\n\r\n    return query.orderBy(\"issue.createdAt\", \"DESC\").getMany()\r\n  }\r\n\r\n  async resolveIssue(issueId: string, resolution: string, resolvedBy: string): Promise<void> {\r\n    await this.issueRepository.update(issueId, {\r\n      status: \"resolved\" as any,\r\n      resolution,\r\n      resolvedBy,\r\n      resolvedAt: new Date(),\r\n    })\r\n  }\r\n}\r\n"],"version":3}