debab477b9baee990eee8a49d20b37b7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoQuality = exports.VideoContainer = exports.QualityLevel = void 0;
const typeorm_1 = require("typeorm");
const swagger_1 = require("@nestjs/swagger");
const video_entity_1 = require("./video.entity");
var QualityLevel;
(function (QualityLevel) {
    QualityLevel["AUDIO_ONLY"] = "audio_only";
    QualityLevel["LOW"] = "240p";
    QualityLevel["MEDIUM"] = "360p";
    QualityLevel["STANDARD"] = "480p";
    QualityLevel["HIGH"] = "720p";
    QualityLevel["FULL_HD"] = "1080p";
    QualityLevel["QUAD_HD"] = "1440p";
    QualityLevel["ULTRA_HD"] = "2160p";
})(QualityLevel || (exports.QualityLevel = QualityLevel = {}));
var VideoContainer;
(function (VideoContainer) {
    VideoContainer["MP4"] = "mp4";
    VideoContainer["WEBM"] = "webm";
    VideoContainer["MKV"] = "mkv";
    VideoContainer["AVI"] = "avi";
    VideoContainer["MOV"] = "mov";
})(VideoContainer || (exports.VideoContainer = VideoContainer = {}));
let VideoQuality = class VideoQuality {
    // Computed properties
    get aspectRatio() {
        return this.width / this.height;
    }
    get isHD() {
        return this.height >= 720;
    }
    get isFullHD() {
        return this.height >= 1080;
    }
    get is4K() {
        return this.height >= 2160;
    }
    get formattedFileSize() {
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = Number(this.fileSize);
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        return `${size.toFixed(1)} ${units[unitIndex]}`;
    }
    get qualityLabel() {
        if (this.quality === QualityLevel.AUDIO_ONLY) {
            return 'Audio Only';
        }
        return `${this.quality} (${this.bitrate}k)`;
    }
    get resolution() {
        return `${this.width}x${this.height}`;
    }
};
exports.VideoQuality = VideoQuality;
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Quality variant ID' }),
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], VideoQuality.prototype, "id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Quality level', enum: QualityLevel }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: QualityLevel,
    }),
    __metadata("design:type", String)
], VideoQuality.prototype, "quality", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video width in pixels' }),
    (0, typeorm_1.Column)({ type: 'int' }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "width", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video height in pixels' }),
    (0, typeorm_1.Column)({ type: 'int' }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "height", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video bitrate in kbps' }),
    (0, typeorm_1.Column)({ type: 'int' }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "bitrate", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Audio bitrate in kbps' }),
    (0, typeorm_1.Column)({ type: 'int', nullable: true }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "audioBitrate", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Frame rate' }),
    (0, typeorm_1.Column)({ type: 'float' }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "frameRate", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Video codec' }),
    (0, typeorm_1.Column)({ length: 50 }),
    __metadata("design:type", String)
], VideoQuality.prototype, "codec", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Audio codec' }),
    (0, typeorm_1.Column)({ length: 50, nullable: true }),
    __metadata("design:type", String)
], VideoQuality.prototype, "audioCodec", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Container format', enum: VideoContainer }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: VideoContainer,
        default: VideoContainer.MP4,
    }),
    __metadata("design:type", String)
], VideoQuality.prototype, "container", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'File size in bytes' }),
    (0, typeorm_1.Column)({ type: 'bigint' }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "fileSize", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Direct URL to the video file' }),
    (0, typeorm_1.Column)({ type: 'text' }),
    __metadata("design:type", String)
], VideoQuality.prototype, "url", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'S3 object key' }),
    (0, typeorm_1.Column)({ length: 500 }),
    __metadata("design:type", String)
], VideoQuality.prototype, "s3Key", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Processing status' }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: ['pending', 'processing', 'completed', 'failed'],
        default: 'pending'
    }),
    __metadata("design:type", String)
], VideoQuality.prototype, "status", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Processing progress percentage' }),
    (0, typeorm_1.Column)({ type: 'int', default: 0 }),
    __metadata("design:type", Number)
], VideoQuality.prototype, "processingProgress", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Processing error message' }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], VideoQuality.prototype, "processingError", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Quality-specific metadata' }),
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], VideoQuality.prototype, "metadata", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Parent video' }),
    (0, typeorm_1.ManyToOne)(() => video_entity_1.Video, (video) => video.qualityVariants, {
        onDelete: 'CASCADE',
    }),
    (0, typeorm_1.JoinColumn)({ name: 'video_id' }),
    __metadata("design:type", typeof (_a = typeof video_entity_1.Video !== "undefined" && video_entity_1.Video) === "function" ? _a : Object)
], VideoQuality.prototype, "video", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Creation date' }),
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], VideoQuality.prototype, "createdAt", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ description: 'Last update date' }),
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], VideoQuality.prototype, "updatedAt", void 0);
exports.VideoQuality = VideoQuality = __decorate([
    (0, typeorm_1.Entity)('video_qualities'),
    (0, typeorm_1.Index)(['video', 'quality']),
    (0, typeorm_1.Index)(['status'])
], VideoQuality);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,