{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\business-intelligence.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\analytic\\services\\business-intelligence.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { DataWarehouseService } from \"./data-warehouse.service\"\r\nimport type { DataCollectionService } from \"./data-collection.service\"\r\n\r\nexport interface AnalyticsQuery {\r\n  metrics: string[]\r\n  dimensions?: string[]\r\n  filters?: Record<string, any>\r\n  timeRange: {\r\n    start: Date\r\n    end: Date\r\n  }\r\n  granularity?: string\r\n  limit?: number\r\n}\r\n\r\nexport interface AnalyticsResult {\r\n  data: Array<{\r\n    timestamp: Date\r\n    dimensions: Record<string, string>\r\n    metrics: Record<string, number>\r\n  }>\r\n  summary: {\r\n    totalRecords: number\r\n    timeRange: {\r\n      start: Date\r\n      end: Date\r\n    }\r\n    aggregations: Record<string, number>\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class BusinessIntelligenceService {\r\n  private readonly logger = new Logger(BusinessIntelligenceService.name)\r\n\r\n  constructor(\r\n    private readonly dataWarehouseService: DataWarehouseService,\r\n    private readonly dataCollectionService: DataCollectionService,\r\n  ) {}\r\n\r\n  async executeQuery(query: AnalyticsQuery): Promise<AnalyticsResult> {\r\n    try {\r\n      const results: AnalyticsResult = {\r\n        data: [],\r\n        summary: {\r\n          totalRecords: 0,\r\n          timeRange: query.timeRange,\r\n          aggregations: {},\r\n        },\r\n      }\r\n\r\n      // Get metrics data\r\n      for (const metricName of query.metrics) {\r\n        const metrics = await this.dataWarehouseService.getMetrics({\r\n          metricName,\r\n          startDate: query.timeRange.start,\r\n          endDate: query.timeRange.end,\r\n          granularity: query.granularity,\r\n          limit: query.limit,\r\n        })\r\n\r\n        // Process and combine results\r\n        for (const metric of metrics) {\r\n          const existingDataPoint = results.data.find((dp) => dp.timestamp.getTime() === metric.timestamp.getTime())\r\n\r\n          if (existingDataPoint) {\r\n            existingDataPoint.metrics[metricName] = metric.value\r\n          } else {\r\n            results.data.push({\r\n              timestamp: metric.timestamp,\r\n              dimensions: metric.dimensions,\r\n              metrics: { [metricName]: metric.value },\r\n            })\r\n          }\r\n        }\r\n\r\n        // Calculate aggregations\r\n        const totalValue = metrics.reduce((sum, m) => sum + m.value, 0)\r\n        results.summary.aggregations[`${metricName}_total`] = totalValue\r\n        results.summary.aggregations[`${metricName}_avg`] = metrics.length > 0 ? totalValue / metrics.length : 0\r\n      }\r\n\r\n      results.summary.totalRecords = results.data.length\r\n\r\n      // Sort by timestamp\r\n      results.data.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\r\n\r\n      return results\r\n    } catch (error) {\r\n      this.logger.error(`Failed to execute analytics query: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async getUserAnalytics(userId: string, timeRange: { start: Date; end: Date }) {\r\n    const events = await this.dataCollectionService.getEvents({\r\n      userId,\r\n      startDate: timeRange.start,\r\n      endDate: timeRange.end,\r\n    })\r\n\r\n    const sessionCount = new Set(events.events.map((e) => e.sessionId).filter(Boolean)).size\r\n\r\n    const eventsByType = events.events.reduce(\r\n      (acc, event) => {\r\n        acc[event.eventType] = (acc[event.eventType] || 0) + 1\r\n        return acc\r\n      },\r\n      {} as Record<string, number>,\r\n    )\r\n\r\n    return {\r\n      userId,\r\n      timeRange,\r\n      totalEvents: events.total,\r\n      sessionCount,\r\n      eventsByType,\r\n      firstEvent: events.events[events.events.length - 1]?.timestamp,\r\n      lastEvent: events.events[0]?.timestamp,\r\n    }\r\n  }\r\n\r\n  async getTopMetrics(metricName: string, dimension: string, timeRange: { start: Date; end: Date }, limit = 10) {\r\n    const metrics = await this.dataWarehouseService.getMetrics({\r\n      metricName,\r\n      startDate: timeRange.start,\r\n      endDate: timeRange.end,\r\n    })\r\n\r\n    const aggregated = metrics.reduce(\r\n      (acc, metric) => {\r\n        const dimensionValue = metric.dimensions[dimension]\r\n        if (dimensionValue) {\r\n          acc[dimensionValue] = (acc[dimensionValue] || 0) + metric.value\r\n        }\r\n        return acc\r\n      },\r\n      {} as Record<string, number>,\r\n    )\r\n\r\n    return Object.entries(aggregated)\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, limit)\r\n      .map(([name, value]) => ({ name, value }))\r\n  }\r\n\r\n  async getFunnelAnalysis(steps: string[], timeRange: { start: Date; end: Date }) {\r\n    const funnelData = []\r\n\r\n    for (let i = 0; i < steps.length; i++) {\r\n      const stepEvents = await this.dataCollectionService.getEvents({\r\n        startDate: timeRange.start,\r\n        endDate: timeRange.end,\r\n      })\r\n\r\n      const stepCount = stepEvents.events.filter((event) => event.eventName === steps[i]).length\r\n\r\n      const conversionRate = i === 0 ? 100 : (stepCount / funnelData[0].count) * 100\r\n\r\n      funnelData.push({\r\n        step: steps[i],\r\n        count: stepCount,\r\n        conversionRate,\r\n        dropOffRate: i === 0 ? 0 : 100 - conversionRate,\r\n      })\r\n    }\r\n\r\n    return funnelData\r\n  }\r\n}\r\n"],"version":3}