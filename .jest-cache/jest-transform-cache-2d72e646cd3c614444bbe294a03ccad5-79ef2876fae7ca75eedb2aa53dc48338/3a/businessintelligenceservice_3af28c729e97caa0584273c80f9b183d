813f6c863b2c4f31200182110aa9f804
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BusinessIntelligenceService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessIntelligenceService = void 0;
const common_1 = require("@nestjs/common");
let BusinessIntelligenceService = BusinessIntelligenceService_1 = class BusinessIntelligenceService {
    constructor(dataWarehouseService, dataCollectionService) {
        this.dataWarehouseService = dataWarehouseService;
        this.dataCollectionService = dataCollectionService;
        this.logger = new common_1.Logger(BusinessIntelligenceService_1.name);
    }
    async executeQuery(query) {
        try {
            const results = {
                data: [],
                summary: {
                    totalRecords: 0,
                    timeRange: query.timeRange,
                    aggregations: {},
                },
            };
            // Get metrics data
            for (const metricName of query.metrics) {
                const metrics = await this.dataWarehouseService.getMetrics({
                    metricName,
                    startDate: query.timeRange.start,
                    endDate: query.timeRange.end,
                    granularity: query.granularity,
                    limit: query.limit,
                });
                // Process and combine results
                for (const metric of metrics) {
                    const existingDataPoint = results.data.find((dp) => dp.timestamp.getTime() === metric.timestamp.getTime());
                    if (existingDataPoint) {
                        existingDataPoint.metrics[metricName] = metric.value;
                    }
                    else {
                        results.data.push({
                            timestamp: metric.timestamp,
                            dimensions: metric.dimensions,
                            metrics: { [metricName]: metric.value },
                        });
                    }
                }
                // Calculate aggregations
                const totalValue = metrics.reduce((sum, m) => sum + m.value, 0);
                results.summary.aggregations[`${metricName}_total`] = totalValue;
                results.summary.aggregations[`${metricName}_avg`] = metrics.length > 0 ? totalValue / metrics.length : 0;
            }
            results.summary.totalRecords = results.data.length;
            // Sort by timestamp
            results.data.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
            return results;
        }
        catch (error) {
            this.logger.error(`Failed to execute analytics query: ${error.message}`, error.stack);
            throw error;
        }
    }
    async getUserAnalytics(userId, timeRange) {
        const events = await this.dataCollectionService.getEvents({
            userId,
            startDate: timeRange.start,
            endDate: timeRange.end,
        });
        const sessionCount = new Set(events.events.map((e) => e.sessionId).filter(Boolean)).size;
        const eventsByType = events.events.reduce((acc, event) => {
            acc[event.eventType] = (acc[event.eventType] || 0) + 1;
            return acc;
        }, {});
        return {
            userId,
            timeRange,
            totalEvents: events.total,
            sessionCount,
            eventsByType,
            firstEvent: events.events[events.events.length - 1]?.timestamp,
            lastEvent: events.events[0]?.timestamp,
        };
    }
    async getTopMetrics(metricName, dimension, timeRange, limit = 10) {
        const metrics = await this.dataWarehouseService.getMetrics({
            metricName,
            startDate: timeRange.start,
            endDate: timeRange.end,
        });
        const aggregated = metrics.reduce((acc, metric) => {
            const dimensionValue = metric.dimensions[dimension];
            if (dimensionValue) {
                acc[dimensionValue] = (acc[dimensionValue] || 0) + metric.value;
            }
            return acc;
        }, {});
        return Object.entries(aggregated)
            .sort(([, a], [, b]) => b - a)
            .slice(0, limit)
            .map(([name, value]) => ({ name, value }));
    }
    async getFunnelAnalysis(steps, timeRange) {
        const funnelData = [];
        for (let i = 0; i < steps.length; i++) {
            const stepEvents = await this.dataCollectionService.getEvents({
                startDate: timeRange.start,
                endDate: timeRange.end,
            });
            const stepCount = stepEvents.events.filter((event) => event.eventName === steps[i]).length;
            const conversionRate = i === 0 ? 100 : (stepCount / funnelData[0].count) * 100;
            funnelData.push({
                step: steps[i],
                count: stepCount,
                conversionRate,
                dropOffRate: i === 0 ? 0 : 100 - conversionRate,
            });
        }
        return funnelData;
    }
};
exports.BusinessIntelligenceService = BusinessIntelligenceService;
exports.BusinessIntelligenceService = BusinessIntelligenceService = BusinessIntelligenceService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], BusinessIntelligenceService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,