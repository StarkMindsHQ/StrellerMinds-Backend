{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses\\courses.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\courses\\courses.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Course } from './entities/course.entity';\r\nimport { CreateCourseDto } from './dtos/create.course.dto';\r\nimport { UpdateCourseDto } from './dtos/update.course.dto';\r\nimport { BaseService, PaginationOptions, PaginatedResult } from '../common/services/base.service';\r\nimport { ICourseService } from '../common/interfaces/service.interface';\r\nimport { SharedUtilityService } from '../common/services/shared-utility.service';\r\nimport { EventEmitter2 } from '@nestjs/event-emitter';\r\n\r\n@Injectable()\r\nexport class CourseService extends BaseService<Course> implements ICourseService<Course, CreateCourseDto, UpdateCourseDto> {\r\n  constructor(\r\n    @InjectRepository(Course)\r\n    private readonly courseRepository: Repository<Course>,\r\n    private readonly sharedUtilityService: SharedUtilityService,\r\n    private readonly eventEmitter: EventEmitter2,\r\n  ) {\r\n    super(courseRepository);\r\n  }\r\n\r\n  /**\r\n   * Create a new course\r\n   */\r\n  public async create(createCourseDto: CreateCourseDto): Promise<Course> {\r\n    try {\r\n      // Validate course data\r\n      this.validateCourseData(createCourseDto);\r\n\r\n      // Sanitize input data\r\n      const sanitizedData = {\r\n        ...createCourseDto,\r\n        title: this.sharedUtilityService.sanitizeInput(createCourseDto.title),\r\n        description: createCourseDto.description ? this.sharedUtilityService.sanitizeInput(createCourseDto.description) : undefined,\r\n        modules: Promise.resolve(createCourseDto.modules || []),\r\n        tags: Promise.resolve(\r\n          createCourseDto.tagIds?.map((id) => ({ id })) || [],\r\n        ),\r\n      };\r\n\r\n      const course = await this.createEntity(sanitizedData);\r\n\r\n      // Emit course created event for other services to handle\r\n      this.eventEmitter.emit('course.created', { course, instructorId: createCourseDto.instructorId });\r\n\r\n      return course;\r\n    } catch (error) {\r\n      if (error instanceof ConflictException) throw error;\r\n      return this.handleError(error, 'creating course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all courses with pagination\r\n   */\r\n  public async findAll(options?: PaginationOptions): Promise<PaginatedResult<Course>> {\r\n    try {\r\n      return await this.findEntitiesWithPagination({\r\n        page: options?.page || 1,\r\n        limit: options?.limit || 10,\r\n        order: { createdAt: 'DESC' },\r\n      });\r\n    } catch (error) {\r\n      return this.handleError(error, 'fetching courses');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find course by ID\r\n   */\r\n  public async findOne(id: string, relations: string[] = []): Promise<Course> {\r\n    try {\r\n      return await this.findEntityById(id, relations);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'fetching course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update course by ID\r\n   */\r\n  public async update(\r\n    id: string,\r\n    updateCourseDto: UpdateCourseDto,\r\n  ): Promise<Course> {\r\n    try {\r\n      // Validate update data\r\n      this.validateCourseUpdateData(updateCourseDto);\r\n\r\n      // Sanitize input data\r\n      const sanitizedData = this.sharedUtilityService.removeEmptyValues({\r\n        ...updateCourseDto,\r\n        title: updateCourseDto.title ? this.sharedUtilityService.sanitizeInput(updateCourseDto.title) : undefined,\r\n        description: updateCourseDto.description ? this.sharedUtilityService.sanitizeInput(updateCourseDto.description) : undefined,\r\n        modules: updateCourseDto.modules\r\n          ? Promise.resolve(updateCourseDto.modules)\r\n          : undefined,\r\n        tags: updateCourseDto.tagIds\r\n          ? Promise.resolve(updateCourseDto.tagIds.map((id) => ({ id })))\r\n          : undefined,\r\n      });\r\n\r\n      const updatedCourse = await this.updateEntity(id, sanitizedData);\r\n\r\n      // Emit course updated event\r\n      this.eventEmitter.emit('course.updated', { courseId: id, updates: updateCourseDto });\r\n\r\n      return updatedCourse;\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'updating course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete course by ID\r\n   */\r\n  public async delete(id: string): Promise<void> {\r\n    try {\r\n      await this.deleteEntity(id);\r\n      \r\n      // Emit course deleted event\r\n      this.eventEmitter.emit('course.deleted', { courseId: id });\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'deleting course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enroll a user in a course\r\n   */\r\n  async enrollUser(courseId: string, userId: string): Promise<void> {\r\n    try {\r\n      const course = await this.findOne(courseId);\r\n      \r\n      // Check if user is already enrolled\r\n      const isEnrolled = await this.isUserEnrolled(courseId, userId);\r\n      if (isEnrolled) {\r\n        throw new ConflictException('User is already enrolled in this course');\r\n      }\r\n\r\n      // Add enrollment logic here\r\n      // This would typically involve creating an enrollment record\r\n      \r\n      // Emit enrollment event\r\n      this.eventEmitter.emit('course.enrollment.created', { courseId, userId });\r\n    } catch (error) {\r\n      if (error instanceof ConflictException) throw error;\r\n      return this.handleError(error, 'enrolling user in course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unenroll a user from a course\r\n   */\r\n  async unenrollUser(courseId: string, userId: string): Promise<void> {\r\n    try {\r\n      const course = await this.findOne(courseId);\r\n      \r\n      // Check if user is enrolled\r\n      const isEnrolled = await this.isUserEnrolled(courseId, userId);\r\n      if (!isEnrolled) {\r\n        throw new ConflictException('User is not enrolled in this course');\r\n      }\r\n\r\n      // Remove enrollment logic here\r\n      \r\n      // Emit unenrollment event\r\n      this.eventEmitter.emit('course.enrollment.removed', { courseId, userId });\r\n    } catch (error) {\r\n      if (error instanceof ConflictException) throw error;\r\n      return this.handleError(error, 'unenrolling user from course');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get enrolled users for a course\r\n   */\r\n  async getEnrolledUsers(courseId: string): Promise<any[]> {\r\n    try {\r\n      await this.findOne(courseId);\r\n      \r\n      // This would typically query an enrollment table\r\n      // For now, return empty array\r\n      return [];\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'getting enrolled users');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get course progress for a user\r\n   */\r\n  async getCourseProgress(courseId: string, userId: string): Promise<number> {\r\n    try {\r\n      await this.findOne(courseId);\r\n      \r\n      // This would typically calculate progress based on completed modules\r\n      // For now, return 0\r\n      return 0;\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) throw error;\r\n      return this.handleError(error, 'getting course progress');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is enrolled in course\r\n   */\r\n  private async isUserEnrolled(courseId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      // This would typically query an enrollment table\r\n      // For now, return false\r\n      return false;\r\n    } catch (error) {\r\n      this.logger.error(`Error checking enrollment for course ${courseId} and user ${userId}: ${error.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate course creation data\r\n   */\r\n  private validateCourseData(createCourseDto: CreateCourseDto): void {\r\n    if (!createCourseDto.title || createCourseDto.title.trim().length === 0) {\r\n      throw new ConflictException('Course title is required');\r\n    }\r\n\r\n    if (createCourseDto.title.length > 255) {\r\n      throw new ConflictException('Course title must be less than 255 characters');\r\n    }\r\n\r\n    if (createCourseDto.description && createCourseDto.description.length > 1000) {\r\n      throw new ConflictException('Course description must be less than 1000 characters');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate course update data\r\n   */\r\n  private validateCourseUpdateData(updateCourseDto: UpdateCourseDto): void {\r\n    if (updateCourseDto.title && updateCourseDto.title.trim().length === 0) {\r\n      throw new ConflictException('Course title cannot be empty');\r\n    }\r\n\r\n    if (updateCourseDto.title && updateCourseDto.title.length > 255) {\r\n      throw new ConflictException('Course title must be less than 255 characters');\r\n    }\r\n\r\n    if (updateCourseDto.description && updateCourseDto.description.length > 1000) {\r\n      throw new ConflictException('Course description must be less than 1000 characters');\r\n    }\r\n  }\r\n}\r\n"],"version":3}