{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\locale.service.ts","mappings":";;;;;;;;;;;;;AAAA,2CAAmD;AAGnD,uEAA8E;AAC9E,+EAAsF;AAiB/E,IAAM,aAAa,qBAAnB,MAAM,aAAa;IAIxB,YACmB,oBAA4C,EAC5C,wBAAoD;QADpD,yBAAoB,GAApB,oBAAoB,CAAwB;QAC5C,6BAAwB,GAAxB,wBAAwB,CAA4B;QALtD,WAAM,GAAG,IAAI,eAAM,CAAC,eAAa,CAAC,IAAI,CAAC,CAAA;QACvC,kBAAa,GAAG,IAAI,CAAA;IAKlC,CAAC;IAEJ,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,KAAK,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;SAClC,CAAC,CAAA;QAEF,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE;gBACpD,UAAU,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC,CAAA;YACF,OAAO,UAAU,CAAC,MAAM,CAAA;QAC1B,CAAC;QAED,OAAO,IAAI,CAAC,aAAa,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,MAAc,EACd,SAAuB,iCAAY,CAAC,eAAe;QAEnD,kBAAkB;QAClB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;QAC3D,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,KAAK,qCAAY,CAAC,MAAM,EAAE,CAAC;YACrE,MAAM,IAAI,KAAK,CAAC,UAAU,MAAM,6BAA6B,CAAC,CAAA;QAChE,CAAC;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACjE,KAAK,EAAE,EAAE,MAAM,EAAE;SAClB,CAAC,CAAA;QAEF,IAAI,kBAAkB,EAAE,CAAC;YACvB,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAA;YAClC,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAA;YAClC,kBAAkB,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAA;YAC1C,kBAAkB,CAAC,eAAe,GAAG,cAAc,CAAC,eAAe,CAAA;YACnE,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QAC3D,CAAC;aAAM,CAAC;YACN,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC;gBAClD,MAAM;gBACN,MAAM;gBACN,MAAM;gBACN,eAAe,EAAE,cAAc,CAAC,eAAe;gBAC/C,UAAU,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC,CAAA;YACF,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACnD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,MAAc;QAC7C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,KAAK,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;SAClC,CAAC,CAAA;QAEF,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,OAAO,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;YACnC,IAAI,UAAU,CAAC,eAAe,EAAE,CAAC;gBAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,eAAe,CAAC,CAAA;YAC7C,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;gBAC1C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;YAClC,CAAC;YACD,OAAO,OAAO,CAAA;QAChB,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC;YACxC,KAAK,EAAE,EAAE,MAAM,EAAE,qCAAY,CAAC,MAAM,EAAE;YACtC,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;SACzC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,IAAY;QAClC,OAAO,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;YAC3C,KAAK,EAAE,EAAE,IAAI,EAAE;SAChB,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,IAA6B;QACtD,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACnD,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,IAAY,EAAE,IAA6B;QACpE,MAAM,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAA;QAC1D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;QAClD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,UAAU,IAAI,YAAY,CAAC,CAAA;QAC7C,CAAC;QACD,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,cAAc;QAMlB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAA;QAE1D,MAAM,KAAK,GAAG;YACZ,YAAY,EAAE,OAAO,CAAC,MAAM;YAC5B,aAAa,EAAE,CAAC;YAChB,eAAe,EAAE,EAAkC;YACnD,iBAAiB,EAAE,CAAC;SACrB,CAAA;QAED,2BAA2B;QAC3B,MAAM,CAAC,MAAM,CAAC,qCAAY,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC7C,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,IAAI,eAAe,GAAG,CAAC,CAAA;QACvB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAA;YACtC,IAAI,MAAM,CAAC,MAAM,KAAK,qCAAY,CAAC,MAAM,EAAE,CAAC;gBAC1C,KAAK,CAAC,aAAa,EAAE,CAAA;YACvB,CAAC;YACD,eAAe,IAAI,MAAM,CAAC,oBAAoB,CAAA;QAChD,CAAC;QAED,KAAK,CAAC,iBAAiB,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAE/F,OAAO,KAAK,CAAA;IACd,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,WAAmB;QACnD,mCAAmC;QACnC,MAAM,gBAAgB,GAA2B;YAC/C,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,OAAO;SACZ,CAAA;QAED,MAAM,MAAM,GAAG,gBAAgB,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAA;QAC1D,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YAC3D,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,KAAK,qCAAY,CAAC,MAAM,EAAE,CAAC;gBACpE,OAAO,MAAM,CAAA;YACf,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,aAAa,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,MAAc;QACrC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,KAAK,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;SAClC,CAAC,CAAA;QAEF,OAAO,UAAU,EAAE,WAAW,IAAI,EAAE,CAAA;IACtC,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,MAAc,EAAE,WAAgB;QAC1D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,KAAK,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;SAClC,CAAC,CAAA;QAEF,IAAI,UAAU,EAAE,CAAC;YACf,UAAU,CAAC,WAAW,GAAG,EAAE,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,WAAW,EAAE,CAAA;YACtE,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAClD,CAAC;IACH,CAAC;CACF,CAAA;AAzLY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;;GACA,aAAa,CAyLzB","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\i18n\\services\\locale.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\n\r\nimport { type UserLocale, LocaleSource } from \"../entities/user-locale.entity\"\r\nimport { type LocaleMetadata, LocaleStatus } from \"../entities/locale-metadata.entity\"\r\n\r\nexport interface CreateUserLocaleDto {\r\n  userId: string\r\n  locale: string\r\n  source?: LocaleSource\r\n  fallbackLocales?: string[]\r\n  preferences?: any\r\n}\r\n\r\nexport interface UpdateUserLocaleDto {\r\n  locale?: string\r\n  fallbackLocales?: string[]\r\n  preferences?: any\r\n}\r\n\r\n@Injectable()\r\nexport class LocaleService {\r\n  private readonly logger = new Logger(LocaleService.name)\r\n  private readonly defaultLocale = \"en\"\r\n\r\n  constructor(\r\n    private readonly userLocaleRepository: Repository<UserLocale>,\r\n    private readonly localeMetadataRepository: Repository<LocaleMetadata>,\r\n  ) {}\r\n\r\n  async getUserLocale(userId: string): Promise<string> {\r\n    const userLocale = await this.userLocaleRepository.findOne({\r\n      where: { userId, isActive: true },\r\n    })\r\n\r\n    if (userLocale) {\r\n      await this.userLocaleRepository.update(userLocale.id, {\r\n        lastUsedAt: new Date(),\r\n      })\r\n      return userLocale.locale\r\n    }\r\n\r\n    return this.defaultLocale\r\n  }\r\n\r\n  async setUserLocale(\r\n    userId: string,\r\n    locale: string,\r\n    source: LocaleSource = LocaleSource.USER_PREFERENCE,\r\n  ): Promise<UserLocale> {\r\n    // Validate locale\r\n    const localeMetadata = await this.getLocaleMetadata(locale)\r\n    if (!localeMetadata || localeMetadata.status !== LocaleStatus.ACTIVE) {\r\n      throw new Error(`Locale ${locale} is not supported or active`)\r\n    }\r\n\r\n    const existingUserLocale = await this.userLocaleRepository.findOne({\r\n      where: { userId },\r\n    })\r\n\r\n    if (existingUserLocale) {\r\n      existingUserLocale.locale = locale\r\n      existingUserLocale.source = source\r\n      existingUserLocale.lastUsedAt = new Date()\r\n      existingUserLocale.fallbackLocales = localeMetadata.fallbackLocales\r\n      return this.userLocaleRepository.save(existingUserLocale)\r\n    } else {\r\n      const userLocale = this.userLocaleRepository.create({\r\n        userId,\r\n        locale,\r\n        source,\r\n        fallbackLocales: localeMetadata.fallbackLocales,\r\n        lastUsedAt: new Date(),\r\n      })\r\n      return this.userLocaleRepository.save(userLocale)\r\n    }\r\n  }\r\n\r\n  async getUserLocaleWithFallbacks(userId: string): Promise<string[]> {\r\n    const userLocale = await this.userLocaleRepository.findOne({\r\n      where: { userId, isActive: true },\r\n    })\r\n\r\n    if (userLocale) {\r\n      const locales = [userLocale.locale]\r\n      if (userLocale.fallbackLocales) {\r\n        locales.push(...userLocale.fallbackLocales)\r\n      }\r\n      if (!locales.includes(this.defaultLocale)) {\r\n        locales.push(this.defaultLocale)\r\n      }\r\n      return locales\r\n    }\r\n\r\n    return [this.defaultLocale]\r\n  }\r\n\r\n  async getSupportedLocales(): Promise<LocaleMetadata[]> {\r\n    return this.localeMetadataRepository.find({\r\n      where: { status: LocaleStatus.ACTIVE },\r\n      order: { priority: \"DESC\", name: \"ASC\" },\r\n    })\r\n  }\r\n\r\n  async getLocaleMetadata(code: string): Promise<LocaleMetadata | null> {\r\n    return this.localeMetadataRepository.findOne({\r\n      where: { code },\r\n    })\r\n  }\r\n\r\n  async createLocaleMetadata(data: Partial<LocaleMetadata>): Promise<LocaleMetadata> {\r\n    const locale = this.localeMetadataRepository.create(data)\r\n    return this.localeMetadataRepository.save(locale)\r\n  }\r\n\r\n  async updateLocaleMetadata(code: string, data: Partial<LocaleMetadata>): Promise<LocaleMetadata> {\r\n    await this.localeMetadataRepository.update({ code }, data)\r\n    const updated = await this.getLocaleMetadata(code)\r\n    if (!updated) {\r\n      throw new Error(`Locale ${code} not found`)\r\n    }\r\n    return updated\r\n  }\r\n\r\n  async getLocaleStats(): Promise<{\r\n    totalLocales: number\r\n    activeLocales: number\r\n    localesByStatus: Record<LocaleStatus, number>\r\n    averageCompletion: number\r\n  }> {\r\n    const locales = await this.localeMetadataRepository.find()\r\n\r\n    const stats = {\r\n      totalLocales: locales.length,\r\n      activeLocales: 0,\r\n      localesByStatus: {} as Record<LocaleStatus, number>,\r\n      averageCompletion: 0,\r\n    }\r\n\r\n    // Initialize status counts\r\n    Object.values(LocaleStatus).forEach((status) => {\r\n      stats.localesByStatus[status] = 0\r\n    })\r\n\r\n    let totalCompletion = 0\r\n    for (const locale of locales) {\r\n      stats.localesByStatus[locale.status]++\r\n      if (locale.status === LocaleStatus.ACTIVE) {\r\n        stats.activeLocales++\r\n      }\r\n      totalCompletion += locale.completionPercentage\r\n    }\r\n\r\n    stats.averageCompletion = locales.length > 0 ? Math.round(totalCompletion / locales.length) : 0\r\n\r\n    return stats\r\n  }\r\n\r\n  async detectLocaleFromGeoLocation(countryCode: string): Promise<string> {\r\n    // Simple country to locale mapping\r\n    const countryLocaleMap: Record<string, string> = {\r\n      US: \"en-US\",\r\n      GB: \"en-GB\",\r\n      CA: \"en-CA\",\r\n      FR: \"fr-FR\",\r\n      DE: \"de-DE\",\r\n      ES: \"es-ES\",\r\n      IT: \"it-IT\",\r\n      JP: \"ja-JP\",\r\n      KR: \"ko-KR\",\r\n      CN: \"zh-CN\",\r\n      BR: \"pt-BR\",\r\n      MX: \"es-MX\",\r\n      RU: \"ru-RU\",\r\n      IN: \"en-IN\",\r\n    }\r\n\r\n    const locale = countryLocaleMap[countryCode.toUpperCase()]\r\n    if (locale) {\r\n      const localeMetadata = await this.getLocaleMetadata(locale)\r\n      if (localeMetadata && localeMetadata.status === LocaleStatus.ACTIVE) {\r\n        return locale\r\n      }\r\n    }\r\n\r\n    return this.defaultLocale\r\n  }\r\n\r\n  async getUserPreferences(userId: string): Promise<any> {\r\n    const userLocale = await this.userLocaleRepository.findOne({\r\n      where: { userId, isActive: true },\r\n    })\r\n\r\n    return userLocale?.preferences || {}\r\n  }\r\n\r\n  async updateUserPreferences(userId: string, preferences: any): Promise<void> {\r\n    const userLocale = await this.userLocaleRepository.findOne({\r\n      where: { userId, isActive: true },\r\n    })\r\n\r\n    if (userLocale) {\r\n      userLocale.preferences = { ...userLocale.preferences, ...preferences }\r\n      await this.userLocaleRepository.save(userLocale)\r\n    }\r\n  }\r\n}\r\n"],"version":3}