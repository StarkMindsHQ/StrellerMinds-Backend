9b869a466cf30f42387bb63e56bd307a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var LocaleService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocaleService = void 0;
const common_1 = require("@nestjs/common");
const user_locale_entity_1 = require("../entities/user-locale.entity");
const locale_metadata_entity_1 = require("../entities/locale-metadata.entity");
let LocaleService = LocaleService_1 = class LocaleService {
    constructor(userLocaleRepository, localeMetadataRepository) {
        this.userLocaleRepository = userLocaleRepository;
        this.localeMetadataRepository = localeMetadataRepository;
        this.logger = new common_1.Logger(LocaleService_1.name);
        this.defaultLocale = "en";
    }
    async getUserLocale(userId) {
        const userLocale = await this.userLocaleRepository.findOne({
            where: { userId, isActive: true },
        });
        if (userLocale) {
            await this.userLocaleRepository.update(userLocale.id, {
                lastUsedAt: new Date(),
            });
            return userLocale.locale;
        }
        return this.defaultLocale;
    }
    async setUserLocale(userId, locale, source = user_locale_entity_1.LocaleSource.USER_PREFERENCE) {
        // Validate locale
        const localeMetadata = await this.getLocaleMetadata(locale);
        if (!localeMetadata || localeMetadata.status !== locale_metadata_entity_1.LocaleStatus.ACTIVE) {
            throw new Error(`Locale ${locale} is not supported or active`);
        }
        const existingUserLocale = await this.userLocaleRepository.findOne({
            where: { userId },
        });
        if (existingUserLocale) {
            existingUserLocale.locale = locale;
            existingUserLocale.source = source;
            existingUserLocale.lastUsedAt = new Date();
            existingUserLocale.fallbackLocales = localeMetadata.fallbackLocales;
            return this.userLocaleRepository.save(existingUserLocale);
        }
        else {
            const userLocale = this.userLocaleRepository.create({
                userId,
                locale,
                source,
                fallbackLocales: localeMetadata.fallbackLocales,
                lastUsedAt: new Date(),
            });
            return this.userLocaleRepository.save(userLocale);
        }
    }
    async getUserLocaleWithFallbacks(userId) {
        const userLocale = await this.userLocaleRepository.findOne({
            where: { userId, isActive: true },
        });
        if (userLocale) {
            const locales = [userLocale.locale];
            if (userLocale.fallbackLocales) {
                locales.push(...userLocale.fallbackLocales);
            }
            if (!locales.includes(this.defaultLocale)) {
                locales.push(this.defaultLocale);
            }
            return locales;
        }
        return [this.defaultLocale];
    }
    async getSupportedLocales() {
        return this.localeMetadataRepository.find({
            where: { status: locale_metadata_entity_1.LocaleStatus.ACTIVE },
            order: { priority: "DESC", name: "ASC" },
        });
    }
    async getLocaleMetadata(code) {
        return this.localeMetadataRepository.findOne({
            where: { code },
        });
    }
    async createLocaleMetadata(data) {
        const locale = this.localeMetadataRepository.create(data);
        return this.localeMetadataRepository.save(locale);
    }
    async updateLocaleMetadata(code, data) {
        await this.localeMetadataRepository.update({ code }, data);
        const updated = await this.getLocaleMetadata(code);
        if (!updated) {
            throw new Error(`Locale ${code} not found`);
        }
        return updated;
    }
    async getLocaleStats() {
        const locales = await this.localeMetadataRepository.find();
        const stats = {
            totalLocales: locales.length,
            activeLocales: 0,
            localesByStatus: {},
            averageCompletion: 0,
        };
        // Initialize status counts
        Object.values(locale_metadata_entity_1.LocaleStatus).forEach((status) => {
            stats.localesByStatus[status] = 0;
        });
        let totalCompletion = 0;
        for (const locale of locales) {
            stats.localesByStatus[locale.status]++;
            if (locale.status === locale_metadata_entity_1.LocaleStatus.ACTIVE) {
                stats.activeLocales++;
            }
            totalCompletion += locale.completionPercentage;
        }
        stats.averageCompletion = locales.length > 0 ? Math.round(totalCompletion / locales.length) : 0;
        return stats;
    }
    async detectLocaleFromGeoLocation(countryCode) {
        // Simple country to locale mapping
        const countryLocaleMap = {
            US: "en-US",
            GB: "en-GB",
            CA: "en-CA",
            FR: "fr-FR",
            DE: "de-DE",
            ES: "es-ES",
            IT: "it-IT",
            JP: "ja-JP",
            KR: "ko-KR",
            CN: "zh-CN",
            BR: "pt-BR",
            MX: "es-MX",
            RU: "ru-RU",
            IN: "en-IN",
        };
        const locale = countryLocaleMap[countryCode.toUpperCase()];
        if (locale) {
            const localeMetadata = await this.getLocaleMetadata(locale);
            if (localeMetadata && localeMetadata.status === locale_metadata_entity_1.LocaleStatus.ACTIVE) {
                return locale;
            }
        }
        return this.defaultLocale;
    }
    async getUserPreferences(userId) {
        const userLocale = await this.userLocaleRepository.findOne({
            where: { userId, isActive: true },
        });
        return userLocale?.preferences || {};
    }
    async updateUserPreferences(userId, preferences) {
        const userLocale = await this.userLocaleRepository.findOne({
            where: { userId, isActive: true },
        });
        if (userLocale) {
            userLocale.preferences = { ...userLocale.preferences, ...preferences };
            await this.userLocaleRepository.save(userLocale);
        }
    }
};
exports.LocaleService = LocaleService;
exports.LocaleService = LocaleService = LocaleService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], LocaleService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,