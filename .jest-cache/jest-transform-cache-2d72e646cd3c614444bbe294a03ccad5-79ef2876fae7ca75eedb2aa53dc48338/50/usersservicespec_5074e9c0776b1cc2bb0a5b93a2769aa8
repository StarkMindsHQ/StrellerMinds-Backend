b551b96cb071774e265060b6fdb49035
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const users_service_1 = require("./users.service");
const typeorm_1 = require("@nestjs/typeorm");
const user_entity_1 = require("../entities/user.entity");
const common_1 = require("@nestjs/common");
const userRole_enum_1 = require("../enums/userRole.enum");
const accountStatus_enum_1 = require("../enums/accountStatus.enum");
const shared_utility_service_1 = require("../../common/services/shared-utility.service");
const mockUser = {
    id: '1',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    profileImageUrl: 'image.jpg',
    password: 'hashedPassword123',
    isInstructor: false,
    bio: 'Test bio',
    role: userRole_enum_1.UserRole.STUDENT,
    status: accountStatus_enum_1.AccountStatus.ACTIVE,
    username: 'testuser',
    isEmailVerified: false,
    createdAt: new Date(),
    updatedAt: new Date(),
};
const mockCreateUserDto = {
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    password: 'Password123!',
    profileImageUrl: 'image.jpg',
    bio: 'Test bio',
};
describe('UsersService', () => {
    let service;
    let repo;
    let sharedUtilityService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                users_service_1.UsersService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: {
                        findOne: jest.fn(),
                        create: jest.fn(),
                        save: jest.fn(),
                        findAndCount: jest.fn(),
                        update: jest.fn(),
                        softDelete: jest.fn(),
                        count: jest.fn(),
                    },
                },
                {
                    provide: shared_utility_service_1.SharedUtilityService,
                    useValue: {
                        isValidEmail: jest.fn(),
                        validatePasswordStrength: jest.fn(),
                        sanitizeInput: jest.fn(),
                        removeEmptyValues: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(users_service_1.UsersService);
        repo = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
        sharedUtilityService = module.get(shared_utility_service_1.SharedUtilityService);
    });
    describe('create', () => {
        it('should create and return a new user if email does not exist', async () => {
            // Mock shared utility service
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            sharedUtilityService.validatePasswordStrength.mockReturnValue({
                isValid: true,
                errors: [],
            });
            sharedUtilityService.sanitizeInput.mockImplementation((input) => input);
            // Mock repository
            repo.findOne.mockResolvedValue(null);
            repo.create.mockReturnValue(mockUser);
            repo.save.mockResolvedValue(mockUser);
            const result = await service.create(mockCreateUserDto);
            expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');
            expect(sharedUtilityService.validatePasswordStrength).toHaveBeenCalledWith('Password123!');
            expect(sharedUtilityService.sanitizeInput).toHaveBeenCalledTimes(3); // firstName, lastName, bio
            expect(repo.findOne).toHaveBeenCalledWith({
                where: { email: 'test@example.com' },
                select: ['id', 'email'],
            });
            expect(repo.create).toHaveBeenCalled();
            expect(repo.save).toHaveBeenCalled();
            expect(result).toEqual(mockUser);
        });
        it('should throw ConflictException if user with email exists', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            sharedUtilityService.validatePasswordStrength.mockReturnValue({
                isValid: true,
                errors: [],
            });
            repo.findOne.mockResolvedValue(mockUser);
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.ConflictException);
        });
        it('should throw ConflictException if email format is invalid', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(false);
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.ConflictException);
            expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');
        });
        it('should throw ConflictException if password validation fails', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            sharedUtilityService.validatePasswordStrength.mockReturnValue({
                isValid: false,
                errors: ['Password must be at least 8 characters long'],
            });
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.ConflictException);
            expect(sharedUtilityService.validatePasswordStrength).toHaveBeenCalledWith('Password123!');
        });
        it('should throw InternalServerErrorException on other errors', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            sharedUtilityService.validatePasswordStrength.mockReturnValue({
                isValid: true,
                errors: [],
            });
            repo.findOne.mockRejectedValue(new Error('DB error'));
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('findAll', () => {
        it('should return paginated users', async () => {
            const mockUsers = [mockUser];
            const mockResult = {
                data: mockUsers,
                total: 1,
                page: 1,
                limit: 10,
                totalPages: 1,
            };
            // Mock the base service method
            jest.spyOn(service, 'findEntitiesWithPagination').mockResolvedValue(mockResult);
            const result = await service.findAll({ page: 1, limit: 10 });
            expect(result).toEqual(mockResult);
            expect(service.findEntitiesWithPagination).toHaveBeenCalledWith({
                page: 1,
                limit: 10,
                select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],
                order: { createdAt: 'DESC' },
            });
        });
        it('should handle errors gracefully', async () => {
            jest.spyOn(service, 'findEntitiesWithPagination').mockRejectedValue(new Error('DB error'));
            await expect(service.findAll()).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('findOne', () => {
        it('should return user by ID', async () => {
            jest.spyOn(service, 'findEntityById').mockResolvedValue(mockUser);
            const result = await service.findOne('1');
            expect(result).toEqual(mockUser);
            expect(service.findEntityById).toHaveBeenCalledWith('1', []);
        });
        it('should return user with relations', async () => {
            jest.spyOn(service, 'findEntityById').mockResolvedValue(mockUser);
            const result = await service.findOne('1', ['profile', 'settings']);
            expect(result).toEqual(mockUser);
            expect(service.findEntityById).toHaveBeenCalledWith('1', ['profile', 'settings']);
        });
        it('should handle NotFoundException', async () => {
            jest.spyOn(service, 'findEntityById').mockRejectedValue(new common_1.NotFoundException('User not found'));
            await expect(service.findOne('1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        it('should update user successfully', async () => {
            const updateDto = { firstName: 'Updated', lastName: 'Name' };
            const updatedUser = { ...mockUser, ...updateDto };
            sharedUtilityService.removeEmptyValues.mockReturnValue(updateDto);
            sharedUtilityService.sanitizeInput.mockImplementation((input) => input);
            jest.spyOn(service, 'updateEntity').mockResolvedValue(updatedUser);
            const result = await service.update('1', updateDto);
            expect(result).toEqual(updatedUser);
            expect(sharedUtilityService.removeEmptyValues).toHaveBeenCalledWith(updateDto);
            expect(service.updateEntity).toHaveBeenCalledWith('1', updateDto);
        });
        it('should handle NotFoundException', async () => {
            const updateDto = { firstName: 'Updated' };
            jest.spyOn(service, 'updateEntity').mockRejectedValue(new common_1.NotFoundException('User not found'));
            await expect(service.update('1', updateDto)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('delete', () => {
        it('should delete user successfully', async () => {
            jest.spyOn(service, 'deleteEntity').mockResolvedValue(undefined);
            await service.delete('1');
            expect(service.deleteEntity).toHaveBeenCalledWith('1');
        });
        it('should handle NotFoundException', async () => {
            jest.spyOn(service, 'deleteEntity').mockRejectedValue(new common_1.NotFoundException('User not found'));
            await expect(service.delete('1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('findByEmail', () => {
        it('should return user if found', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            repo.findOne.mockResolvedValue(mockUser);
            const result = await service.findByEmail('test@example.com');
            expect(result).toEqual(mockUser);
            expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('test@example.com');
            expect(repo.findOne).toHaveBeenCalledWith({
                where: { email: 'test@example.com' },
                select: ['id', 'email', 'password', 'role', 'status'],
            });
        });
        it('should return undefined if email is invalid', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(false);
            const result = await service.findByEmail('invalid-email');
            expect(result).toBeUndefined();
            expect(sharedUtilityService.isValidEmail).toHaveBeenCalledWith('invalid-email');
        });
        it('should return undefined on error', async () => {
            sharedUtilityService.isValidEmail.mockReturnValue(true);
            repo.findOne.mockRejectedValue(new Error('DB error'));
            const result = await service.findByEmail('test@example.com');
            expect(result).toBeUndefined();
        });
    });
    describe('validateCredentials', () => {
        it('should return true for valid credentials', async () => {
            const user = { ...mockUser, password: 'hashedPassword123' };
            jest.spyOn(service, 'findByEmail').mockResolvedValue(user);
            // Mock bcrypt.compare (you might need to mock the bcrypt module)
            const bcrypt = require('bcrypt');
            jest.spyOn(bcrypt, 'compare').mockResolvedValue(true);
            const result = await service.validateCredentials('test@example.com', 'password123');
            expect(result).toBe(true);
            expect(service.findByEmail).toHaveBeenCalledWith('test@example.com');
        });
        it('should return false if user not found', async () => {
            jest.spyOn(service, 'findByEmail').mockResolvedValue(undefined);
            const result = await service.validateCredentials('test@example.com', 'password123');
            expect(result).toBe(false);
        });
        it('should return false if user has no password', async () => {
            const user = { ...mockUser, password: undefined };
            jest.spyOn(service, 'findByEmail').mockResolvedValue(user);
            const result = await service.validateCredentials('test@example.com', 'password123');
            expect(result).toBe(false);
        });
    });
    describe('findByCriteria', () => {
        it('should return users matching criteria', async () => {
            const criteria = { role: userRole_enum_1.UserRole.STUDENT, status: accountStatus_enum_1.AccountStatus.ACTIVE };
            const mockUsers = [mockUser];
            sharedUtilityService.sanitizeInput.mockImplementation((input) => input);
            repo.find.mockResolvedValue(mockUsers);
            const result = await service.findByCriteria(criteria);
            expect(result).toEqual(mockUsers);
            expect(sharedUtilityService.sanitizeInput).toHaveBeenCalledTimes(2); // role and status
            expect(repo.find).toHaveBeenCalledWith({
                where: criteria,
                select: ['id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt'],
            });
        });
        it('should return empty array on error', async () => {
            const criteria = { role: userRole_enum_1.UserRole.STUDENT };
            sharedUtilityService.sanitizeInput.mockImplementation((input) => input);
            repo.find.mockRejectedValue(new Error('DB error'));
            const result = await service.findByCriteria(criteria);
            expect(result).toEqual([]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,