62e41af31184b5056a1764159085faa4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtLocalStrategy = void 0;
const common_1 = require("@nestjs/common");
const jwt_1 = require("@nestjs/jwt");
const bcrypt = __importStar(require("bcryptjs"));
const uuid_1 = require("uuid");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const config_1 = require("@nestjs/config");
const email_service_1 = require("../../email/email.service");
const password_validation_service_1 = require("../password-validation.service");
const auth_token_entity_1 = require("../entities/auth-token.entity");
const refresh_token_entity_1 = require("../entities/refresh-token.entity");
const users_service_1 = require("src/users/services/users.service");
let JwtLocalStrategy = class JwtLocalStrategy {
    constructor(usersService, jwtService, emailService, passwordValidationService, authTokenRepository, refreshTokenRepository, configService) {
        this.usersService = usersService;
        this.jwtService = jwtService;
        this.emailService = emailService;
        this.passwordValidationService = passwordValidationService;
        this.authTokenRepository = authTokenRepository;
        this.refreshTokenRepository = refreshTokenRepository;
        this.configService = configService;
    }
    validate(credentials) {
        throw new Error('Method not implemented.');
    }
    async validateUser(email, password) {
        const user = await this.usersService.findByEmail(email);
        if (!user)
            throw new common_1.UnauthorizedException('Invalid credentials');
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid)
            throw new common_1.UnauthorizedException('Invalid credentials');
        if (!user.isEmailVerified) {
            throw new common_1.UnauthorizedException('Please verify your email first');
        }
        try {
            await this.emailService.sendEmail({
                to: user.email,
                subject: 'Welcome to Our Platform',
                templateName: 'welcome',
                context: {
                    name: user.firstName,
                    year: new Date().getFullYear(),
                },
            });
        }
        catch (error) {
            console.error('Error sending welcome email:', error);
        }
        return user;
    }
    async validatePassword(password) {
        const validationResult = this.passwordValidationService.validatePassword(password);
        if (!validationResult.isValid) {
            throw new common_1.BadRequestException({
                message: 'Password does not meet requirements',
                errors: validationResult.errors,
            });
        }
        return true;
    }
    async register(credentials) {
        const { email, password, ...userData } = credentials;
        await this.validatePassword(password);
        const existingUser = await this.usersService.findByEmail(email);
        if (existingUser)
            throw new common_1.BadRequestException('User already exists');
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await this.usersService.create({
            email,
            password: hashedPassword,
            ...userData,
        });
        return this.login(user);
    }
    async generateTokens(user) {
        const payload = {
            sub: user.id,
            email: user.email,
            roles: user.role,
        };
        const [accessToken, refreshToken] = await Promise.all([
            this.jwtService.signAsync(payload, {
                secret: this.configService.get('JWT_SECRET'),
                expiresIn: '1h',
            }),
            this.jwtService.signAsync(payload, {
                secret: this.configService.get('REFRESH_TOKEN_SECRET'),
                expiresIn: '7d',
            }),
        ]);
        const hashedRefreshToken = await bcrypt.hash(refreshToken, 10);
        await this.usersService.updateRefreshToken(user.id, hashedRefreshToken);
        return {
            accessToken,
            refreshToken,
            expiresIn: 3600,
        };
    }
    async login(user) {
        const tokens = await this.generateTokens(user);
        return {
            access_token: tokens.accessToken,
            refresh_token: tokens.refreshToken,
            expires_in: tokens.expiresIn,
            user: {
                id: user.id,
                email: user.email,
                roles: user.roles,
            },
        };
    }
    async refreshToken(userId, refreshToken) {
        try {
            await this.jwtService.verify(refreshToken, {
                secret: this.configService.get('REFRESH_TOKEN_SECRET'),
            });
            const tokenEntity = await this.refreshTokenRepository.findOne({
                where: {
                    userId,
                    isRevoked: false,
                    expiresAt: (0, typeorm_2.MoreThan)(new Date()),
                },
            });
            if (!tokenEntity)
                throw new common_1.UnauthorizedException('Invalid or expired refresh token');
            const isTokenValid = await bcrypt.compare(refreshToken, tokenEntity.token);
            if (!isTokenValid)
                throw new common_1.UnauthorizedException('Invalid refresh token');
            await this.refreshTokenRepository.update(tokenEntity.id, { isRevoked: true });
            const user = await this.usersService.findOne(userId);
            return this.generateTokens(user);
        }
        catch (error) {
            throw new common_1.UnauthorizedException('Invalid refresh token');
        }
    }
    async revokeUserRefreshTokens(userId) {
        try {
            await this.refreshTokenRepository.update({ userId, isRevoked: false }, { isRevoked: true });
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Error revoking refresh tokens');
        }
    }
    async logout(userId) {
        await this.usersService.updateRefreshToken(userId, null);
        return { message: 'Logged out successfully' };
    }
    async validateToken(token) {
        try {
            const payload = await this.jwtService.verifyAsync(token, {
                secret: this.configService.get('JWT_SECRET'),
            });
            return payload;
        }
        catch {
            throw new common_1.UnauthorizedException('Invalid token');
        }
    }
    async forgotPassword(email) {
        const user = await this.usersService.findOne(email);
        if (!user)
            throw new common_1.NotFoundException('User with this email does not exist.');
        const token = (0, uuid_1.v4)();
        const expiresAt = addMinutes(new Date(), 15);
        const resetToken = this.authTokenRepository.create({
            user,
            token,
            expiresAt,
            purpose: 'reset_password',
            isRevoked: false,
        });
        await this.authTokenRepository.save(resetToken);
        await this.emailService.sendEmail({
            to: user.email,
            subject: 'Password Reset Request',
            templateName: 'reset-password',
            context: {
                name: user.firstName,
                token,
            },
        });
        return { message: 'Password reset email sent' };
    }
    async validateResetToken(token) {
        const authToken = await this.authTokenRepository.findOne({
            where: { token, purpose: 'reset_password', isRevoked: false },
            relations: ['user'],
        });
        if (!authToken || authToken.expiresAt < new Date()) {
            throw new common_1.BadRequestException('Invalid or expired password reset token.');
        }
        return authToken.user;
    }
    async resetPassword(token, newPassword) {
        const authToken = await this.authTokenRepository.findOne({
            where: { token, purpose: 'reset_password', isRevoked: false },
            relations: ['user'],
        });
        if (!authToken || authToken.expiresAt < new Date()) {
            throw new common_1.BadRequestException('Invalid or expired password reset token.');
        }
        const user = authToken.user;
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        authToken.isRevoked = true;
        await this.authTokenRepository.save(authToken);
        return { message: 'Password successfully reset' };
    }
    async requestPasswordReset(email) {
        // Implement your password reset logic here, e.g., generate token, send email, etc.
        // For now, just return a placeholder response.
        return { message: `Password reset link sent to ${email}` };
    }
    async changePassword(userId, currentPassword, newPassword) {
        const user = await this.usersService.findOne(userId);
        if (!user)
            throw new common_1.UnauthorizedException('User not found');
        const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
        if (!isCurrentPasswordValid)
            throw new common_1.BadRequestException('Current password is incorrect');
        await this.validatePassword(newPassword);
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await this.revokeUserRefreshTokens(userId);
        return true;
    }
};
exports.JwtLocalStrategy = JwtLocalStrategy;
exports.JwtLocalStrategy = JwtLocalStrategy = __decorate([
    (0, common_1.Injectable)(),
    __param(4, (0, typeorm_1.InjectRepository)(auth_token_entity_1.AuthToken)),
    __param(5, (0, typeorm_1.InjectRepository)(refresh_token_entity_1.RefreshToken)),
    __metadata("design:paramtypes", [typeof (_a = typeof users_service_1.UsersService !== "undefined" && users_service_1.UsersService) === "function" ? _a : Object, typeof (_b = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _b : Object, typeof (_c = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _c : Object, typeof (_d = typeof password_validation_service_1.PasswordValidationService !== "undefined" && password_validation_service_1.PasswordValidationService) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _f : Object, typeof (_g = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _g : Object])
], JwtLocalStrategy);
function addMinutes(date, minutes) {
    return new Date(date.getTime() + minutes * 60000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,