fad59d6519231afde8eab92e893a25d7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailController = void 0;
/**
 * EmailController handles endpoints for managing email preferences, analytics, and tracking.
 */
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const email_service_1 = require("./email.service");
const email_preference_entity_1 = require("./entities/email-preference.entity");
let EmailController = class EmailController {
    constructor(emailService) {
        this.emailService = emailService;
    }
    /**
     * Update a user's email preference for a specific email type.
     * @param body - Email, emailType, and optOut flag
     * @returns The updated EmailPreference entity
     */
    async updatePreference(body) {
        return this.emailService.updateEmailPreference(body.email, body.emailType, body.optOut);
    }
    /**
     * Get email analytics for a date range and optional template name.
     * @param startDate - Start date (ISO8601)
     * @param endDate - End date (ISO8601)
     * @param templateName - Optional template name
     * @returns Analytics data
     */
    async getAnalytics(startDate, endDate, templateName) {
        return this.emailService.getEmailAnalytics(new Date(startDate), new Date(endDate), templateName);
    }
    /**
     * Track email open event (returns a 1x1 transparent pixel).
     * @param id - Email log ID
     * @param res - Response object
     */
    async trackOpen(id, res) {
        try {
            // Update the email log to mark as opened
            await this.emailService.markEmailAsOpened(id);
            // Return a 1x1 transparent pixel
            const buffer = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');
            res.set('Content-Type', 'image/gif');
            res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');
            return res.send(buffer);
        }
        catch (error) {
            // Still return the pixel even if tracking fails
            const buffer = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');
            res.set('Content-Type', 'image/gif');
            return res.send(buffer);
        }
    }
    // This endpoint would be used for tracking email clicks
    async trackClick(id, url, res) {
        try {
            // Update the email log to mark as clicked
            await this.emailService.markEmailAsClicked(id, url);
        }
        catch (error) {
            // Log the error but continue with the redirect
            console.error('Error tracking click:', error);
        }
        // Redirect to the original URL
        return res.redirect(url);
    }
};
exports.EmailController = EmailController;
__decorate([
    (0, common_1.Post)('preferences'),
    (0, swagger_1.ApiOperation)({ summary: 'Update email preference', description: 'Update a user\'s email preference for a specific email type.' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { email: { type: 'string' }, emailType: { type: 'string' }, optOut: { type: 'boolean' } } } }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Email preference updated', type: email_preference_entity_1.EmailPreference }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmailController.prototype, "updatePreference", null);
__decorate([
    (0, common_1.Get)('analytics'),
    (0, swagger_1.ApiOperation)({ summary: 'Get email analytics', description: 'Get email analytics for a date range and optional template name.' }),
    (0, swagger_1.ApiQuery)({ name: 'startDate', required: true, description: 'Start date (ISO8601)' }),
    (0, swagger_1.ApiQuery)({ name: 'endDate', required: true, description: 'End date (ISO8601)' }),
    (0, swagger_1.ApiQuery)({ name: 'templateName', required: false, description: 'Template name' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Email analytics data' }),
    __param(0, (0, common_1.Query)('startDate')),
    __param(1, (0, common_1.Query)('endDate')),
    __param(2, (0, common_1.Query)('templateName')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "getAnalytics", null);
__decorate([
    (0, common_1.Get)('track/open/:id'),
    (0, swagger_1.ApiOperation)({ summary: 'Track email open', description: 'Track email open event (returns a 1x1 transparent pixel).' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Email log ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: '1x1 transparent pixel returned' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "trackOpen", null);
__decorate([
    (0, common_1.Get)('track/click/:id'),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Query)('url')),
    __param(2, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "trackClick", null);
exports.EmailController = EmailController = __decorate([
    (0, swagger_1.ApiTags)('Email'),
    (0, common_1.Controller)('email'),
    __metadata("design:paramtypes", [typeof (_a = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _a : Object])
], EmailController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,