9dd96b18f72c1cb5214055526b332f42
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PushNotificationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushNotificationService = void 0;
const common_1 = require("@nestjs/common");
const webpush = __importStar(require("web-push"));
let PushNotificationService = PushNotificationService_1 = class PushNotificationService {
    constructor(subscriptionRepository, templateRepository, notificationQueue) {
        this.logger = new common_1.Logger(PushNotificationService_1.name);
        this.subscriptionRepository = subscriptionRepository;
        this.templateRepository = templateRepository;
        this.notificationQueue = notificationQueue;
        this.initializeWebPush();
    }
    initializeWebPush() {
        const vapidKeys = {
            publicKey: process.env.VAPID_PUBLIC_KEY,
            privateKey: process.env.VAPID_PRIVATE_KEY,
        };
        if (!vapidKeys.publicKey || !vapidKeys.privateKey) {
            this.logger.warn("VAPID keys not configured. Push notifications will not work.");
            return;
        }
        webpush.setVapidDetails(process.env.VAPID_SUBJECT || "mailto:admin@example.com", vapidKeys.publicKey, vapidKeys.privateKey);
    }
    async createSubscription(dto) {
        try {
            // Check if subscription already exists
            const existing = await this.subscriptionRepository.findOne({
                where: { endpoint: dto.subscription.endpoint },
            });
            if (existing) {
                // Update existing subscription
                existing.userId = dto.userId || existing.userId;
                existing.p256dhKey = dto.subscription.keys.p256dh;
                existing.authKey = dto.subscription.keys.auth;
                existing.userAgent = dto.userAgent || existing.userAgent;
                existing.deviceType = dto.deviceType || existing.deviceType;
                existing.preferences = dto.preferences || existing.preferences;
                existing.metadata = dto.metadata || existing.metadata;
                existing.isActive = true;
                existing.failureCount = 0;
                return await this.subscriptionRepository.save(existing);
            }
            // Create new subscription
            const subscription = this.subscriptionRepository.create({
                userId: dto.userId,
                endpoint: dto.subscription.endpoint,
                p256dhKey: dto.subscription.keys.p256dh,
                authKey: dto.subscription.keys.auth,
                userAgent: dto.userAgent,
                deviceType: dto.deviceType,
                preferences: dto.preferences,
                metadata: dto.metadata,
                isActive: true,
            });
            const saved = await this.subscriptionRepository.save(subscription);
            this.logger.log(`Created push subscription: ${saved.id}`);
            return saved;
        }
        catch (error) {
            this.logger.error(`Failed to create subscription: ${error.message}`, error.stack);
            throw error;
        }
    }
    async updateSubscription(id, updates) {
        const subscription = await this.subscriptionRepository.findOne({ where: { id } });
        if (!subscription) {
            throw new Error("Subscription not found");
        }
        Object.assign(subscription, updates);
        return await this.subscriptionRepository.save(subscription);
    }
    async deleteSubscription(id) {
        await this.subscriptionRepository.update(id, { isActive: false });
        this.logger.log(`Deactivated push subscription: ${id}`);
    }
    async sendNotification(dto) {
        try {
            let subscriptions = [];
            if (dto.subscriptionIds?.length) {
                subscriptions = await this.subscriptionRepository.find({
                    where: {
                        id: { $in: dto.subscriptionIds },
                        isActive: true,
                    },
                });
            }
            else if (dto.userIds?.length) {
                subscriptions = await this.subscriptionRepository.find({
                    where: {
                        userId: { $in: dto.userIds },
                        isActive: true,
                    },
                });
            }
            else {
                // Send to all active subscriptions (be careful with this!)
                subscriptions = await this.subscriptionRepository.find({
                    where: { isActive: true },
                    take: 1000, // Limit to prevent overwhelming
                });
            }
            if (subscriptions.length === 0) {
                return { queued: 0, errors: ["No active subscriptions found"] };
            }
            // Get notification template if specified
            let template = null;
            if (dto.templateType) {
                template = await this.templateRepository.findOne({
                    where: { type: dto.templateType, isActive: true },
                });
            }
            // Prepare notification options
            let notificationOptions;
            if (template) {
                notificationOptions = template.render(dto.variables || {});
            }
            else {
                notificationOptions = {
                    title: dto.title || "Notification",
                    body: dto.body || "",
                    ...dto.options,
                };
            }
            // Queue notifications
            const jobs = subscriptions.map((subscription) => ({
                name: "send-push-notification",
                data: {
                    subscriptionId: subscription.id,
                    subscription: subscription.getSubscriptionData(),
                    notification: notificationOptions,
                },
                opts: {
                    delay: dto.scheduleAt ? dto.scheduleAt.getTime() - Date.now() : 0,
                    attempts: 3,
                    backoff: {
                        type: "exponential",
                        delay: 2000,
                    },
                },
            }));
            await this.notificationQueue.addBulk(jobs);
            this.logger.log(`Queued ${jobs.length} push notifications`);
            return { queued: jobs.length, errors: [] };
        }
        catch (error) {
            this.logger.error(`Failed to send notifications: ${error.message}`, error.stack);
            return { queued: 0, errors: [error.message] };
        }
    }
    async sendToSubscription(subscription, notification) {
        try {
            const payload = JSON.stringify(notification);
            await webpush.sendNotification(subscription, payload);
            return true;
        }
        catch (error) {
            this.logger.error(`Failed to send push notification: ${error.message}`);
            return false;
        }
    }
    async getSubscriptions(filters) {
        const query = this.subscriptionRepository.createQueryBuilder("subscription");
        if (filters.userId) {
            query.andWhere("subscription.userId = :userId", { userId: filters.userId });
        }
        if (filters.isActive !== undefined) {
            query.andWhere("subscription.isActive = :isActive", { isActive: filters.isActive });
        }
        if (filters.deviceType) {
            query.andWhere("subscription.deviceType = :deviceType", { deviceType: filters.deviceType });
        }
        query.orderBy("subscription.createdAt", "DESC");
        if (filters.limit) {
            query.limit(filters.limit);
        }
        if (filters.offset) {
            query.offset(filters.offset);
        }
        const [subscriptions, total] = await query.getManyAndCount();
        return { subscriptions, total };
    }
    async getSubscriptionStats() {
        const [total, active] = await Promise.all([
            this.subscriptionRepository.count(),
            this.subscriptionRepository.count({ where: { isActive: true } }),
        ]);
        const deviceTypeStats = await this.subscriptionRepository
            .createQueryBuilder("subscription")
            .select("subscription.deviceType", "deviceType")
            .addSelect("COUNT(*)", "count")
            .where("subscription.isActive = :isActive", { isActive: true })
            .groupBy("subscription.deviceType")
            .getRawMany();
        const userAgentStats = await this.subscriptionRepository
            .createQueryBuilder("subscription")
            .select("subscription.userAgent", "userAgent")
            .addSelect("COUNT(*)", "count")
            .where("subscription.isActive = :isActive", { isActive: true })
            .groupBy("subscription.userAgent")
            .getRawMany();
        const byDeviceType = deviceTypeStats.reduce((acc, stat) => {
            acc[stat.deviceType || "unknown"] = Number.parseInt(stat.count);
            return acc;
        }, {});
        const byUserAgent = userAgentStats.reduce((acc, stat) => {
            acc[stat.userAgent || "unknown"] = Number.parseInt(stat.count);
            return acc;
        }, {});
        return {
            total,
            active,
            byDeviceType,
            byUserAgent,
        };
    }
};
exports.PushNotificationService = PushNotificationService;
exports.PushNotificationService = PushNotificationService = PushNotificationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object])
], PushNotificationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,