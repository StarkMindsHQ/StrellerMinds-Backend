{"file":"C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\services\\push-notification.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\g-ekoh\\Desktop\\StrellerMinds-Backend\\src\\pwa\\services\\push-notification.service.ts"],"sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\"\r\nimport type { Repository } from \"typeorm\"\r\nimport type { Queue } from \"bull\"\r\nimport * as webpush from \"web-push\"\r\n\r\nimport type { PushSubscription, PushSubscriptionData } from \"../entities/push-subscription.entity\"\r\nimport type { NotificationTemplate, NotificationOptions } from \"../entities/notification-template.entity\"\r\n\r\nexport interface CreateSubscriptionDto {\r\n  userId?: string\r\n  subscription: PushSubscriptionData\r\n  userAgent?: string\r\n  deviceType?: string\r\n  preferences?: any\r\n  metadata?: any\r\n}\r\n\r\nexport interface SendNotificationDto {\r\n  subscriptionIds?: string[]\r\n  userIds?: string[]\r\n  templateType?: string\r\n  title?: string\r\n  body?: string\r\n  options?: Partial<NotificationOptions>\r\n  variables?: Record<string, any>\r\n  scheduleAt?: Date\r\n}\r\n\r\n@Injectable()\r\nexport class PushNotificationService {\r\n  private readonly logger = new Logger(PushNotificationService.name)\r\n\r\n  private readonly subscriptionRepository: Repository<PushSubscription>\r\n  private readonly templateRepository: Repository<NotificationTemplate>\r\n  private readonly notificationQueue: Queue\r\n\r\n  constructor(\r\n    subscriptionRepository: Repository<PushSubscription>,\r\n    templateRepository: Repository<NotificationTemplate>,\r\n    notificationQueue: Queue,\r\n  ) {\r\n    this.subscriptionRepository = subscriptionRepository\r\n    this.templateRepository = templateRepository\r\n    this.notificationQueue = notificationQueue\r\n    this.initializeWebPush()\r\n  }\r\n\r\n  private initializeWebPush() {\r\n    const vapidKeys = {\r\n      publicKey: process.env.VAPID_PUBLIC_KEY,\r\n      privateKey: process.env.VAPID_PRIVATE_KEY,\r\n    }\r\n\r\n    if (!vapidKeys.publicKey || !vapidKeys.privateKey) {\r\n      this.logger.warn(\"VAPID keys not configured. Push notifications will not work.\")\r\n      return\r\n    }\r\n\r\n    webpush.setVapidDetails(\r\n      process.env.VAPID_SUBJECT || \"mailto:admin@example.com\",\r\n      vapidKeys.publicKey,\r\n      vapidKeys.privateKey,\r\n    )\r\n  }\r\n\r\n  async createSubscription(dto: CreateSubscriptionDto): Promise<PushSubscription> {\r\n    try {\r\n      // Check if subscription already exists\r\n      const existing = await this.subscriptionRepository.findOne({\r\n        where: { endpoint: dto.subscription.endpoint },\r\n      })\r\n\r\n      if (existing) {\r\n        // Update existing subscription\r\n        existing.userId = dto.userId || existing.userId\r\n        existing.p256dhKey = dto.subscription.keys.p256dh\r\n        existing.authKey = dto.subscription.keys.auth\r\n        existing.userAgent = dto.userAgent || existing.userAgent\r\n        existing.deviceType = dto.deviceType || existing.deviceType\r\n        existing.preferences = dto.preferences || existing.preferences\r\n        existing.metadata = dto.metadata || existing.metadata\r\n        existing.isActive = true\r\n        existing.failureCount = 0\r\n\r\n        return await this.subscriptionRepository.save(existing)\r\n      }\r\n\r\n      // Create new subscription\r\n      const subscription = this.subscriptionRepository.create({\r\n        userId: dto.userId,\r\n        endpoint: dto.subscription.endpoint,\r\n        p256dhKey: dto.subscription.keys.p256dh,\r\n        authKey: dto.subscription.keys.auth,\r\n        userAgent: dto.userAgent,\r\n        deviceType: dto.deviceType,\r\n        preferences: dto.preferences,\r\n        metadata: dto.metadata,\r\n        isActive: true,\r\n      })\r\n\r\n      const saved = await this.subscriptionRepository.save(subscription)\r\n      this.logger.log(`Created push subscription: ${saved.id}`)\r\n\r\n      return saved\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create subscription: ${error.message}`, error.stack)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async updateSubscription(\r\n    id: string,\r\n    updates: Partial<Pick<PushSubscription, \"preferences\" | \"isActive\" | \"metadata\">>,\r\n  ): Promise<PushSubscription> {\r\n    const subscription = await this.subscriptionRepository.findOne({ where: { id } })\r\n    if (!subscription) {\r\n      throw new Error(\"Subscription not found\")\r\n    }\r\n\r\n    Object.assign(subscription, updates)\r\n    return await this.subscriptionRepository.save(subscription)\r\n  }\r\n\r\n  async deleteSubscription(id: string): Promise<void> {\r\n    await this.subscriptionRepository.update(id, { isActive: false })\r\n    this.logger.log(`Deactivated push subscription: ${id}`)\r\n  }\r\n\r\n  async sendNotification(dto: SendNotificationDto): Promise<{ queued: number; errors: string[] }> {\r\n    try {\r\n      let subscriptions: PushSubscription[] = []\r\n\r\n      if (dto.subscriptionIds?.length) {\r\n        subscriptions = await this.subscriptionRepository.find({\r\n          where: {\r\n            id: { $in: dto.subscriptionIds } as any,\r\n            isActive: true,\r\n          },\r\n        })\r\n      } else if (dto.userIds?.length) {\r\n        subscriptions = await this.subscriptionRepository.find({\r\n          where: {\r\n            userId: { $in: dto.userIds } as any,\r\n            isActive: true,\r\n          },\r\n        })\r\n      } else {\r\n        // Send to all active subscriptions (be careful with this!)\r\n        subscriptions = await this.subscriptionRepository.find({\r\n          where: { isActive: true },\r\n          take: 1000, // Limit to prevent overwhelming\r\n        })\r\n      }\r\n\r\n      if (subscriptions.length === 0) {\r\n        return { queued: 0, errors: [\"No active subscriptions found\"] }\r\n      }\r\n\r\n      // Get notification template if specified\r\n      let template: NotificationTemplate | null = null\r\n      if (dto.templateType) {\r\n        template = await this.templateRepository.findOne({\r\n          where: { type: dto.templateType, isActive: true },\r\n        })\r\n      }\r\n\r\n      // Prepare notification options\r\n      let notificationOptions: NotificationOptions\r\n\r\n      if (template) {\r\n        notificationOptions = template.render(dto.variables || {})\r\n      } else {\r\n        notificationOptions = {\r\n          title: dto.title || \"Notification\",\r\n          body: dto.body || \"\",\r\n          ...dto.options,\r\n        }\r\n      }\r\n\r\n      // Queue notifications\r\n      const jobs = subscriptions.map((subscription) => ({\r\n        name: \"send-push-notification\",\r\n        data: {\r\n          subscriptionId: subscription.id,\r\n          subscription: subscription.getSubscriptionData(),\r\n          notification: notificationOptions,\r\n        },\r\n        opts: {\r\n          delay: dto.scheduleAt ? dto.scheduleAt.getTime() - Date.now() : 0,\r\n          attempts: 3,\r\n          backoff: {\r\n            type: \"exponential\",\r\n            delay: 2000,\r\n          },\r\n        },\r\n      }))\r\n\r\n      await this.notificationQueue.addBulk(jobs)\r\n\r\n      this.logger.log(`Queued ${jobs.length} push notifications`)\r\n\r\n      return { queued: jobs.length, errors: [] }\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send notifications: ${error.message}`, error.stack)\r\n      return { queued: 0, errors: [error.message] }\r\n    }\r\n  }\r\n\r\n  async sendToSubscription(subscription: PushSubscriptionData, notification: NotificationOptions): Promise<boolean> {\r\n    try {\r\n      const payload = JSON.stringify(notification)\r\n      await webpush.sendNotification(subscription, payload)\r\n      return true\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send push notification: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  async getSubscriptions(filters: {\r\n    userId?: string\r\n    isActive?: boolean\r\n    deviceType?: string\r\n    limit?: number\r\n    offset?: number\r\n  }): Promise<{ subscriptions: PushSubscription[]; total: number }> {\r\n    const query = this.subscriptionRepository.createQueryBuilder(\"subscription\")\r\n\r\n    if (filters.userId) {\r\n      query.andWhere(\"subscription.userId = :userId\", { userId: filters.userId })\r\n    }\r\n\r\n    if (filters.isActive !== undefined) {\r\n      query.andWhere(\"subscription.isActive = :isActive\", { isActive: filters.isActive })\r\n    }\r\n\r\n    if (filters.deviceType) {\r\n      query.andWhere(\"subscription.deviceType = :deviceType\", { deviceType: filters.deviceType })\r\n    }\r\n\r\n    query.orderBy(\"subscription.createdAt\", \"DESC\")\r\n\r\n    if (filters.limit) {\r\n      query.limit(filters.limit)\r\n    }\r\n\r\n    if (filters.offset) {\r\n      query.offset(filters.offset)\r\n    }\r\n\r\n    const [subscriptions, total] = await query.getManyAndCount()\r\n\r\n    return { subscriptions, total }\r\n  }\r\n\r\n  async getSubscriptionStats(): Promise<{\r\n    total: number\r\n    active: number\r\n    byDeviceType: Record<string, number>\r\n    byUserAgent: Record<string, number>\r\n  }> {\r\n    const [total, active] = await Promise.all([\r\n      this.subscriptionRepository.count(),\r\n      this.subscriptionRepository.count({ where: { isActive: true } }),\r\n    ])\r\n\r\n    const deviceTypeStats = await this.subscriptionRepository\r\n      .createQueryBuilder(\"subscription\")\r\n      .select(\"subscription.deviceType\", \"deviceType\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .where(\"subscription.isActive = :isActive\", { isActive: true })\r\n      .groupBy(\"subscription.deviceType\")\r\n      .getRawMany()\r\n\r\n    const userAgentStats = await this.subscriptionRepository\r\n      .createQueryBuilder(\"subscription\")\r\n      .select(\"subscription.userAgent\", \"userAgent\")\r\n      .addSelect(\"COUNT(*)\", \"count\")\r\n      .where(\"subscription.isActive = :isActive\", { isActive: true })\r\n      .groupBy(\"subscription.userAgent\")\r\n      .getRawMany()\r\n\r\n    const byDeviceType = deviceTypeStats.reduce((acc, stat) => {\r\n      acc[stat.deviceType || \"unknown\"] = Number.parseInt(stat.count)\r\n      return acc\r\n    }, {})\r\n\r\n    const byUserAgent = userAgentStats.reduce((acc, stat) => {\r\n      acc[stat.userAgent || \"unknown\"] = Number.parseInt(stat.count)\r\n      return acc\r\n    }, {})\r\n\r\n    return {\r\n      total,\r\n      active,\r\n      byDeviceType,\r\n      byUserAgent,\r\n    }\r\n  }\r\n}\r\n"],"version":3}